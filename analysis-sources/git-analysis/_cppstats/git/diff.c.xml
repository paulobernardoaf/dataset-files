<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\diff.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tempfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diffcore.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"color.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"userdiff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"submodule-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"submodule.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ll-merge.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graph.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"help.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"promisor-remote.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_FAST_WORKING_DIRECTORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_WORKING_DIRECTORY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_WORKING_DIRECTORY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_detect_rename_default</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_indent_heuristic</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_rename_limit_default</name> <init>= <expr><literal type="number">400</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_suppress_blank_empty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_use_color_default</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_color_moved_default</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_color_moved_ws_default</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_context_default</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_interhunk_context_default</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>diff_word_regex_cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>external_diff_cmd_cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>diff_order_file_cfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diff_auto_refresh_index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_mnemonic_prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_no_prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_stat_graph_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>diff_dirstat_permille_default</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>diff_options</name></name></type> <name>default_diff_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>diff_algorithm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>ws_error_highlight_default</name> <init>= <expr><name>WSEH_NEW</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>diff_colors</name><index>[]</index><index>[<expr><name>COLOR_MAXLEN</name></expr>]</index></name> <init>= <expr><block>{

<expr><name>GIT_COLOR_RESET</name></expr>,

<expr><name>GIT_COLOR_NORMAL</name></expr>, 

<expr><name>GIT_COLOR_BOLD</name></expr>, 

<expr><name>GIT_COLOR_CYAN</name></expr>, 

<expr><name>GIT_COLOR_RED</name></expr>, 

<expr><name>GIT_COLOR_GREEN</name></expr>, 

<expr><name>GIT_COLOR_YELLOW</name></expr>, 

<expr><name>GIT_COLOR_BG_RED</name></expr>, 

<expr><name>GIT_COLOR_NORMAL</name></expr>, 

<expr><name>GIT_COLOR_BOLD_MAGENTA</name></expr>, 

<expr><name>GIT_COLOR_BOLD_BLUE</name></expr>, 

<expr><name>GIT_COLOR_FAINT</name></expr>, 

<expr><name>GIT_COLOR_FAINT_ITALIC</name></expr>, 

<expr><name>GIT_COLOR_BOLD_CYAN</name></expr>, 

<expr><name>GIT_COLOR_BOLD_YELLOW</name></expr>, 

<expr><name>GIT_COLOR_FAINT</name></expr>, 

<expr><name>GIT_COLOR_FAINT_ITALIC</name></expr>, 

<expr><name>GIT_COLOR_FAINT</name></expr>, 

<expr><name>GIT_COLOR_FAINT_RED</name></expr>, 

<expr><name>GIT_COLOR_FAINT_GREEN</name></expr>, 

<expr><name>GIT_COLOR_BOLD</name></expr>, 

<expr><name>GIT_COLOR_BOLD_RED</name></expr>, 

<expr><name>GIT_COLOR_BOLD_GREEN</name></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>color_diff_slots</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>DIFF_CONTEXT</name></expr>]</index> <operator>=</operator> <literal type="string">"context"</literal></expr>,

<expr><index>[<expr><name>DIFF_METAINFO</name></expr>]</index> <operator>=</operator> <literal type="string">"meta"</literal></expr>,

<expr><index>[<expr><name>DIFF_FRAGINFO</name></expr>]</index> <operator>=</operator> <literal type="string">"frag"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_OLD</name></expr>]</index> <operator>=</operator> <literal type="string">"old"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_NEW</name></expr>]</index> <operator>=</operator> <literal type="string">"new"</literal></expr>,

<expr><index>[<expr><name>DIFF_COMMIT</name></expr>]</index> <operator>=</operator> <literal type="string">"commit"</literal></expr>,

<expr><index>[<expr><name>DIFF_WHITESPACE</name></expr>]</index> <operator>=</operator> <literal type="string">"whitespace"</literal></expr>,

<expr><index>[<expr><name>DIFF_FUNCINFO</name></expr>]</index> <operator>=</operator> <literal type="string">"func"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_OLD_MOVED</name></expr>]</index> <operator>=</operator> <literal type="string">"oldMoved"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_OLD_MOVED_ALT</name></expr>]</index> <operator>=</operator> <literal type="string">"oldMovedAlternative"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_OLD_MOVED_DIM</name></expr>]</index> <operator>=</operator> <literal type="string">"oldMovedDimmed"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_OLD_MOVED_ALT_DIM</name></expr>]</index> <operator>=</operator> <literal type="string">"oldMovedAlternativeDimmed"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_NEW_MOVED</name></expr>]</index> <operator>=</operator> <literal type="string">"newMoved"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_NEW_MOVED_ALT</name></expr>]</index> <operator>=</operator> <literal type="string">"newMovedAlternative"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_NEW_MOVED_DIM</name></expr>]</index> <operator>=</operator> <literal type="string">"newMovedDimmed"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_NEW_MOVED_ALT_DIM</name></expr>]</index> <operator>=</operator> <literal type="string">"newMovedAlternativeDimmed"</literal></expr>,

<expr><index>[<expr><name>DIFF_CONTEXT_DIM</name></expr>]</index> <operator>=</operator> <literal type="string">"contextDimmed"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_OLD_DIM</name></expr>]</index> <operator>=</operator> <literal type="string">"oldDimmed"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_NEW_DIM</name></expr>]</index> <operator>=</operator> <literal type="string">"newDimmed"</literal></expr>,

<expr><index>[<expr><name>DIFF_CONTEXT_BOLD</name></expr>]</index> <operator>=</operator> <literal type="string">"contextBold"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_OLD_BOLD</name></expr>]</index> <operator>=</operator> <literal type="string">"oldBold"</literal></expr>,

<expr><index>[<expr><name>DIFF_FILE_NEW_BOLD</name></expr>]</index> <operator>=</operator> <literal type="string">"newBold"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<macro><name>define_list_config_array_extra</name><argument_list>(<argument>color_diff_slots</argument>, <argument>{<literal type="string">"plain"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_diff_color_slot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"plain"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DIFF_CONTEXT</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>LOOKUP_CONFIG</name><argument_list>(<argument><expr><name>color_diff_slots</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_dirstat_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>params_string</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>params_copy</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>params_string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>params</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>params_copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_split_in_place</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>params_copy</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>params</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>params</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"changes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirstat_by_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirstat_by_file</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"lines"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirstat_by_line</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirstat_by_file</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirstat_by_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirstat_by_file</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"noncumulative"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirstat_cumulative</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"cumulative"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirstat_cumulative</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>permille</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>permille</name> <operator>+=</operator> <operator>*</operator><name>end</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>++</operator><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>dirstat_permille</name></name> <operator>=</operator> <name>permille</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Failed to parse dirstat cut-off percentage '%s'\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Unknown dirstat parameter '%s'\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>params_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_submodule_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>submodule_format</name></name> <operator>=</operator> <name>DIFF_SUBMODULE_LOG</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"short"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>submodule_format</name></name> <operator>=</operator> <name>DIFF_SUBMODULE_SHORT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"diff"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>submodule_format</name></name> <operator>=</operator> <name>DIFF_SUBMODULE_INLINE_DIFF</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_config_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DIFF_DETECT_RENAME</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"copies"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DIFF_DETECT_COPY</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>DIFF_DETECT_RENAME</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name></type> <name>parse_algorithm_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"myers"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"minimal"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>XDF_NEED_MINIMAL</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"patience"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>XDF_PATIENCE_DIFF</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"histogram"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>XDF_HISTOGRAM_DIFF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_one_token</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><operator>*</operator><name>arg</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rest</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>*</operator><name>rest</name> <operator>||</operator> <operator>*</operator><name>rest</name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>rest</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_ws_error_highlight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_arg</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>parse_one_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>parse_one_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>WSEH_NEW</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>parse_one_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>WSEH_NEW</name> <operator>|</operator> <name>WSEH_OLD</name> <operator>|</operator> <name>WSEH_CONTEXT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>parse_one_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <name>WSEH_NEW</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>parse_one_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="string">"old"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <name>WSEH_OLD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>parse_one_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>, <argument><expr><literal type="string">"context"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>|=</operator> <name>WSEH_CONTEXT</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>arg</name> <operator>-</operator> <name>orig_arg</name><operator>)</operator></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_diff_ui_defaults</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>diff_detect_rename_default</name> <operator>=</operator> <name>DIFF_DETECT_RENAME</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_diff_heuristic_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.indentheuristic"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>diff_indent_heuristic</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_color_moved</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>git_parse_maybe_bool</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><name>COLOR_MOVED_NO</name></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><name>COLOR_MOVED_DEFAULT</name></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>COLOR_MOVED_NO</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"plain"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>COLOR_MOVED_PLAIN</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"blocks"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>COLOR_MOVED_BLOCKS</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"zebra"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>COLOR_MOVED_ZEBRA</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>COLOR_MOVED_DEFAULT</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"dimmed-zebra"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>COLOR_MOVED_ZEBRA_DIM</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"dimmed_zebra"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>COLOR_MOVED_ZEBRA_DIM</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"color moved setting must be one of 'no', 'default', 'blocks', 'zebra', 'dimmed-zebra', 'plain'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>parse_color_moved_ws</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>l</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>string_list_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>i</argument>, <argument>&amp;l</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_trim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"ignore-space-change"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>XDF_IGNORE_WHITESPACE_CHANGE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"ignore-space-at-eol"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>XDF_IGNORE_WHITESPACE_AT_EOL</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"ignore-all-space"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>XDF_IGNORE_WHITESPACE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"allow-indentation-change"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>COLOR_MOVED_WS_ALLOW_INDENTATION_CHANGE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>COLOR_MOVED_WS_ERROR</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown color-moved-ws mode '%s', possible values are 'ignore-space-change', 'ignore-space-at-eol', 'ignore-all-space', 'allow-indentation-change'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>&amp;</operator> <name>COLOR_MOVED_WS_ALLOW_INDENTATION_CHANGE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>&amp;</operator> <name>XDF_WHITESPACE_FLAGS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"color-moved-ws: allow-indentation-change cannot be combined with other whitespace modes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>COLOR_MOVED_WS_ERROR</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_diff_ui_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.color"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"color.diff"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff_use_color_default</name> <operator>=</operator> <call><name>git_config_colorbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.colormoved"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cm</name> <init>= <expr><call><name>parse_color_moved</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cm</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diff_color_moved_default</name> <operator>=</operator> <name>cm</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.colormovedws"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cm</name> <init>= <expr><call><name>parse_color_moved_ws</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cm</name> <operator>&amp;</operator> <name>COLOR_MOVED_WS_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diff_color_moved_ws_default</name> <operator>=</operator> <name>cm</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.context"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff_context_default</name> <operator>=</operator> <call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_context_default</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.interhunkcontext"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff_interhunk_context_default</name> <operator>=</operator> <call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_interhunk_context_default</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.renames"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff_detect_rename_default</name> <operator>=</operator> <call><name>git_config_rename</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.autorefreshindex"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff_auto_refresh_index</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.mnemonicprefix"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff_mnemonic_prefix</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.noprefix"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff_no_prefix</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.statgraphwidth"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff_stat_graph_width</name> <operator>=</operator> <call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.external"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>external_diff_cmd_cfg</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.wordregex"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff_word_regex_cfg</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.orderfile"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff_order_file_cfg</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.ignoresubmodules"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>handle_ignore_submodules_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_diff_options</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.submodule"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>parse_submodule_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_diff_options</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown value for 'diff.submodule' config variable: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.algorithm"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff_algorithm</name> <operator>=</operator> <call><name>parse_algorithm_value</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_algorithm</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_color_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>git_diff_basic_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>git_diff_basic_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.renamelimit"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff_rename_limit_default</name> <operator>=</operator> <call><name>git_config_int</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>userdiff_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.color."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>skip_prefix</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"color.diff."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slot</name> <init>= <expr><call><name>parse_diff_color_slot</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>color_parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>diff_colors</name><index>[<expr><name>slot</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.wserrorhighlight"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>parse_ws_error_highlight</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ws_error_highlight_default</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.suppressblankempty"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.suppress-blank-empty"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff_suppress_blank_empty</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.dirstat"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>errmsg</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>default_diff_options</name><operator>.</operator><name>dirstat_permille</name></name> <operator>=</operator> <name>diff_dirstat_permille_default</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_dirstat_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_diff_options</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Found errors in 'diff.dirstat' config variable:\n%s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>errmsg</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_dirstat_permille_default</name> <operator>=</operator> <name><name>default_diff_options</name><operator>.</operator><name>dirstat_permille</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_diff_heuristic_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>git_default_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>quote_two</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>one</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>need_one</name> <init>= <expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_two</name> <init>= <expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>res</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>need_one</name> <operator>+</operator> <name>need_two</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>external_diff</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>external_diff_cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done_preparing</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>done_preparing</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>external_diff_cmd</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>external_diff_cmd</name> <operator>=</operator> <call><name>xstrdup_or_null</name><argument_list>(<argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_EXTERNAL_DIFF"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>external_diff_cmd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>external_diff_cmd</name> <operator>=</operator> <name>external_diff_cmd_cfg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>done_preparing</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>external_diff_cmd</name></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>diff_tempfile</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hex</name><index>[<expr><name>GIT_MAX_HEXSZ</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>mode</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>tempfile</name></decl>;</decl_stmt>

}</block> <decl><name><name>diff_temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</struct>

<struct>struct <name>emit_callback</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>color_diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blank_at_eof_in_preimage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blank_at_eof_in_postimage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lno_in_preimage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lno_in_postimage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>label_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_words_data</name></name> <modifier>*</modifier></type><name>diff_words</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>count_lines</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>completely_empty</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nl_just_seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>size</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nl_just_seen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>completely_empty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>nl_just_seen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>completely_empty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>completely_empty</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nl_just_seen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_mmfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>one</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>one</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>diff_filespec_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><name>CHECK_SIZE_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>one</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>count_trailing_blank</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>size</name> <init>= <expr><name><name>mf</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cnt</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<while>while <condition>(<expr><name><name>mf</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&lt;</operator> <name>ptr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prev_eol</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>prev_eol</name> <operator>=</operator> <name>ptr</name></expr>;</init> <condition><expr><name><name>mf</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&lt;=</operator> <name>prev_eol</name></expr>;</condition> <incr><expr><name>prev_eol</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>prev_eol</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ws_blank_line</name><argument_list>(<argument><expr><name>prev_eol</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ptr</name> <operator>-</operator> <name>prev_eol</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>prev_eol</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>cnt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_blank_at_eof</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf1</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mf2</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>emit_callback</name></name> <modifier>*</modifier></type><name>ecbdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>, <decl><type ref="prev"/><name>at</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ws_rule</name> <init>= <expr><name><name>ecbdata</name><operator>-&gt;</operator><name>ws_rule</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <call><name>count_trailing_blank</name><argument_list>(<argument><expr><name>mf1</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l2</name> <operator>=</operator> <call><name>count_trailing_blank</name><argument_list>(<argument><expr><name>mf2</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l2</name> <operator>&lt;=</operator> <name>l1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>blank_at_eof_in_preimage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>blank_at_eof_in_postimage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>count_lines</name><argument_list>(<argument><expr><name><name>mf1</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>mf1</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>blank_at_eof_in_preimage</name></name> <operator>=</operator> <operator>(</operator><name>at</name> <operator>-</operator> <name>l1</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>at</name> <operator>=</operator> <call><name>count_lines</name><argument_list>(<argument><expr><name><name>mf2</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>mf2</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>blank_at_eof_in_postimage</name></name> <operator>=</operator> <operator>(</operator><name>at</name> <operator>-</operator> <name>l2</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_line_0</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_sign</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>reverse</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>has_trailing_newline</name></decl>, <decl><type ref="prev"/><name>has_trailing_carriage_return</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>needs_reset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>has_trailing_newline</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_trailing_newline</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>has_trailing_carriage_return</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_trailing_carriage_return</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end_of_line</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reverse</name> <operator>&amp;&amp;</operator> <call><name>want_color</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>GIT_COLOR_REVERSE</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>needs_reset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>set_sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>set_sign</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>needs_reset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end_of_line</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>set_sign</name> <operator>&amp;&amp;</operator> <name>set</name> <operator>!=</operator> <name>set_sign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>needs_reset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>needs_reset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<label><name>end_of_line</name>:</label>

<if_stmt><if>if <condition>(<expr><name>needs_reset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_trailing_carriage_return</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_trailing_newline</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emit_line_0</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<enum>enum <name>diff_symbol</name> <block>{

<decl><name>DIFF_SYMBOL_BINARY_DIFF_HEADER</name></decl>,

<decl><name>DIFF_SYMBOL_BINARY_DIFF_HEADER_DELTA</name></decl>,

<decl><name>DIFF_SYMBOL_BINARY_DIFF_HEADER_LITERAL</name></decl>,

<decl><name>DIFF_SYMBOL_BINARY_DIFF_BODY</name></decl>,

<decl><name>DIFF_SYMBOL_BINARY_DIFF_FOOTER</name></decl>,

<decl><name>DIFF_SYMBOL_STATS_SUMMARY_NO_FILES</name></decl>,

<decl><name>DIFF_SYMBOL_STATS_SUMMARY_ABBREV</name></decl>,

<decl><name>DIFF_SYMBOL_STATS_SUMMARY_INSERTS_DELETES</name></decl>,

<decl><name>DIFF_SYMBOL_STATS_LINE</name></decl>,

<decl><name>DIFF_SYMBOL_WORD_DIFF</name></decl>,

<decl><name>DIFF_SYMBOL_STAT_SEP</name></decl>,

<decl><name>DIFF_SYMBOL_SUMMARY</name></decl>,

<decl><name>DIFF_SYMBOL_SUBMODULE_ADD</name></decl>,

<decl><name>DIFF_SYMBOL_SUBMODULE_DEL</name></decl>,

<decl><name>DIFF_SYMBOL_SUBMODULE_UNTRACKED</name></decl>,

<decl><name>DIFF_SYMBOL_SUBMODULE_MODIFIED</name></decl>,

<decl><name>DIFF_SYMBOL_SUBMODULE_HEADER</name></decl>,

<decl><name>DIFF_SYMBOL_SUBMODULE_ERROR</name></decl>,

<decl><name>DIFF_SYMBOL_SUBMODULE_PIPETHROUGH</name></decl>,

<decl><name>DIFF_SYMBOL_REWRITE_DIFF</name></decl>,

<decl><name>DIFF_SYMBOL_BINARY_FILES</name></decl>,

<decl><name>DIFF_SYMBOL_HEADER</name></decl>,

<decl><name>DIFF_SYMBOL_FILEPAIR_PLUS</name></decl>,

<decl><name>DIFF_SYMBOL_FILEPAIR_MINUS</name></decl>,

<decl><name>DIFF_SYMBOL_WORDS_PORCELAIN</name></decl>,

<decl><name>DIFF_SYMBOL_WORDS</name></decl>,

<decl><name>DIFF_SYMBOL_CONTEXT</name></decl>,

<decl><name>DIFF_SYMBOL_CONTEXT_INCOMPLETE</name></decl>,

<decl><name>DIFF_SYMBOL_PLUS</name></decl>,

<decl><name>DIFF_SYMBOL_MINUS</name></decl>,

<decl><name>DIFF_SYMBOL_NO_LF_EOF</name></decl>,

<decl><name>DIFF_SYMBOL_CONTEXT_FRAGINFO</name></decl>,

<decl><name>DIFF_SYMBOL_CONTEXT_MARKER</name></decl>,

<decl><name>DIFF_SYMBOL_SEPARATOR</name></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_SYMBOL_CONTENT_BLANK_LINE_EOF</name></cpp:macro> <cpp:value>(1&lt;&lt;16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_SYMBOL_MOVED_LINE</name></cpp:macro> <cpp:value>(1&lt;&lt;17)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_SYMBOL_MOVED_LINE_ALT</name></cpp:macro> <cpp:value>(1&lt;&lt;18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_SYMBOL_MOVED_LINE_UNINTERESTING</name></cpp:macro> <cpp:value>(1&lt;&lt;19)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_SYMBOL_CONTENT_WS_MASK</name></cpp:macro> <cpp:value>(WSEH_NEW | WSEH_OLD | WSEH_CONTEXT | WS_RULE_MASK)</cpp:value></cpp:define>

<struct>struct <name>emitted_diff_symbol</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>indent_off</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>indent_width</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>diff_symbol</name></name></type> <name>s</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMITTED_DIFF_SYMBOL_INIT</name></cpp:macro> <cpp:value>{NULL}</cpp:value></cpp:define>

<struct>struct <name>emitted_diff_symbols</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>alloc</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMITTED_DIFF_SYMBOLS_INIT</name></cpp:macro> <cpp:value>{NULL, 0, 0}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>append_emitted_diff_symbol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>emitted_diff_symbol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <ternary><condition><expr><name><name>e</name><operator>-&gt;</operator><name>line</name></name></expr> ?</condition><then> <expr><call><name>xmemdupz</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>moved_entry</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name></type> <name>ent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>next_line</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>moved_block</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wsd</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>moved_block_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>moved_block</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDENT_BLANKLINE</name></cpp:macro> <cpp:value>INT_MIN</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_es_indent_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>es</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tab_width</name> <init>= <expr><name><name>es</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>WS_TAB_WIDTH_MASK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>es</name><operator>-&gt;</operator><name>line</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><name><name>es</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>s</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\f'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\v'</literal> <operator>||</operator>

<operator>(</operator><name><name>s</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name>off</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>off</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><index>[<expr><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>+=</operator> <name>tab_width</name> <operator>-</operator> <operator>(</operator><name>width</name> <operator>%</operator> <name>tab_width</name><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>s</name><index>[<expr><operator>++</operator><name>off</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>+=</operator> <name>tab_width</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>off</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>indent_width</name></name> <operator>=</operator> <name>INDENT_BLANKLINE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>indent_off</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>indent_off</name></name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>indent_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compute_ws_delta</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a_len</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>,

<decl><type ref="prev"/><name>b_len</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>,

<decl><type ref="prev"/><name>a_off</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>indent_off</name></name></expr></init></decl>,

<decl><type ref="prev"/><name>a_width</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>indent_width</name></name></expr></init></decl>,

<decl><type ref="prev"/><name>b_off</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>indent_off</name></name></expr></init></decl>,

<decl><type ref="prev"/><name>b_width</name> <init>= <expr><name><name>b</name><operator>-&gt;</operator><name>indent_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a_width</name> <operator>==</operator> <name>INDENT_BLANKLINE</name> <operator>&amp;&amp;</operator> <name>b_width</name> <operator>==</operator> <name>INDENT_BLANKLINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>INDENT_BLANKLINE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>s</name></name> <operator>==</operator> <name>DIFF_SYMBOL_PLUS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>a_width</name> <operator>-</operator> <name>b_width</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>b_width</name> <operator>-</operator> <name>a_width</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a_len</name> <operator>-</operator> <name>a_off</name> <operator>!=</operator> <name>b_len</name> <operator>-</operator> <name>b_off</name> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <name>a_off</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <name>b_off</name></expr></argument>, <argument><expr><name>a_len</name> <operator>-</operator> <name>a_off</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_in_block_with_wsd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>cur</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>match</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>moved_block</name></name> <modifier>*</modifier></type><name>pmb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>al</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>, <decl><type ref="prev"/><name>bl</name> <init>= <expr><name><name>match</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>, <decl><type ref="prev"/><name>cl</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>line</name></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>match</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>line</name></name></expr></init></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>line</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a_off</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>indent_off</name></name></expr></init></decl>,

<decl><type ref="prev"/><name>a_width</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>indent_width</name></name></expr></init></decl>,

<decl><type ref="prev"/><name>c_off</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>indent_off</name></name></expr></init></decl>,

<decl><type ref="prev"/><name>c_width</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>indent_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>al</name> <operator>!=</operator> <name>bl</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a_width</name> <operator>==</operator> <name>INDENT_BLANKLINE</name> <operator>&amp;&amp;</operator> <name>c_width</name> <operator>==</operator> <name>INDENT_BLANKLINE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>s</name></name> <operator>==</operator> <name>DIFF_SYMBOL_PLUS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>a_width</name> <operator>-</operator> <name>c_width</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>c_width</name> <operator>-</operator> <name>a_width</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pmb</name><operator>-&gt;</operator><name>wsd</name></name> <operator>==</operator> <name>INDENT_BLANKLINE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pmb</name><operator>-&gt;</operator><name>wsd</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>(</operator><name>delta</name> <operator>==</operator> <name><name>pmb</name><operator>-&gt;</operator><name>wsd</name></name> <operator>&amp;&amp;</operator> <name>al</name> <operator>-</operator> <name>a_off</name> <operator>==</operator> <name>cl</name> <operator>-</operator> <name>c_off</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>al</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>a_off</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <name>c_off</name></expr></argument>, <argument><expr><name>al</name> <operator>-</operator> <name>a_off</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>moved_entry_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hashmap_cmp_fn_data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>eptr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>entry_or_key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>keydata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>diffopt</name> <init>= <expr><name>hashmap_cmp_fn_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name><name>diffopt</name><operator>-&gt;</operator><name>color_moved_ws_handling</name></name>

<operator>&amp;</operator> <name>XDF_WHITESPACE_FLAGS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>eptr</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>moved_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>container_of</name><argument_list>(<argument><expr><name>entry_or_key</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>moved_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>diffopt</name><operator>-&gt;</operator><name>color_moved_ws_handling</name></name> <operator>&amp;</operator>

<name>COLOR_MOVED_WS_ALLOW_INDENTATION_CHANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>XDF_IGNORE_WHITESPACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><call><name>xdiff_compare_lines</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,

<argument><expr><name><name>b</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>prepare_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line_no</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>line_no</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>color_moved_ws_handling</name></name> <operator>&amp;</operator> <name>XDF_WHITESPACE_FLAGS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>hash</name> <init>= <expr><call><name>xdiff_hash_string</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>next_line</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_lines_to_move_detection</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>add_lines</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>del_lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>prev_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>hm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>s</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DIFF_SYMBOL_PLUS</name></expr>:</case>

<expr_stmt><expr><name>hm</name> <operator>=</operator> <name>add_lines</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_MINUS</name></expr>:</case>

<expr_stmt><expr><name>hm</name> <operator>=</operator> <name>del_lines</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>prev_line</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>color_moved_ws_handling</name></name> <operator>&amp;</operator>

<name>COLOR_MOVED_WS_ALLOW_INDENTATION_CHANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fill_es_indent_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>prepare_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_line</name> <operator>&amp;&amp;</operator> <name><name>prev_line</name><operator>-&gt;</operator><name>es</name><operator>-&gt;</operator><name>s</name></name> <operator>==</operator> <name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prev_line</name><operator>-&gt;</operator><name>next_line</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hashmap_add</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prev_line</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pmb_advance_or_null</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>match</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>hm</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>moved_block</name></name> <modifier>*</modifier></type><name>pmb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pmb_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pmb_nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>pmb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>match</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>prev</name> <operator>&amp;&amp;</operator> <name><name>prev</name><operator>-&gt;</operator><name>next_line</name></name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>prev</name><operator>-&gt;</operator><name>next_line</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cur</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>hm</name><operator>-&gt;</operator><name>cmpfn</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>match</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pmb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>match</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pmb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>match</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pmb_advance_or_null_multi_match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>match</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>hm</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>moved_block</name></name> <modifier>*</modifier></type><name>pmb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pmb_nr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>got_match</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pmb_nr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<macro><name>hashmap_for_each_entry_from</name><argument_list>(<argument>hm</argument>, <argument>match</argument>, <argument>ent</argument>)</argument_list></macro> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pmb_nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>pmb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>match</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>prev</name> <operator>&amp;&amp;</operator> <name><name>prev</name><operator>-&gt;</operator><name>next_line</name></name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>prev</name><operator>-&gt;</operator><name>next_line</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cmp_in_block_with_wsd</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pmb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>got_match</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pmb_nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>got_match</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pmb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>match</name> <operator>=</operator> <name><name>pmb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>match</name><operator>-&gt;</operator><name>next_line</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>moved_block_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pmb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>got_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>shrink_potential_moved_blocks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>moved_block</name></name> <modifier>*</modifier></type><name>pmb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pmb_nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lp</name></decl>, <decl><type ref="prev"/><name>rp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>lp</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>rp</name> <operator>=</operator> <name>pmb_nr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>lp</name> <operator>&lt;=</operator> <name>rp</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<while>while <condition>(<expr><name>lp</name> <operator>&lt;</operator> <name>pmb_nr</name> <operator>&amp;&amp;</operator> <name><name>pmb</name><index>[<expr><name>lp</name></expr>]</index></name><operator>.</operator><name>match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>rp</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pmb</name><index>[<expr><name>rp</name></expr>]</index></name><operator>.</operator><name>match</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rp</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name><name>lp</name> <argument_list type="generic">&lt; <argument><expr><name>pmb_nr</name> <operator>&amp;&amp;</operator> <name>rp</name></expr></argument> &gt;</argument_list></name> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>lp</name> <operator>&lt;</operator> <name>rp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pmb</name><index>[<expr><name>lp</name></expr>]</index></name> <operator>=</operator> <name><name>pmb</name><index>[<expr><name>rp</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pmb</name><index>[<expr><name>rp</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pmb</name><index>[<expr><name>rp</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rp</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>rp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>adjust_last_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>alnum_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>color_moved</name></name> <operator>==</operator> <name>COLOR_MOVED_PLAIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>block_length</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>n</name> <operator>-</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>line</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>c</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>alnum_count</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>alnum_count</name> <operator>&gt;=</operator> <name>COLOR_MOVED_MIN_ALNUM_COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>block_length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>n</name> <operator>-</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>DIFF_SYMBOL_MOVED_LINE</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_color_as_moved</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>add_lines</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>del_lines</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>moved_block</name></name> <modifier>*</modifier></type><name>pmb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>pmb_nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pmb_alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>flipped_block</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>block_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name> <modifier>*</modifier></type><name>hm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>moved_entry</name></name> <modifier>*</modifier></type><name>match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>diff_symbol</name></name></type> <name>last_symbol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>s</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DIFF_SYMBOL_PLUS</name></expr>:</case>

<expr_stmt><expr><name>hm</name> <operator>=</operator> <name>del_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>prepare_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>hashmap_get_entry</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_MINUS</name></expr>:</case>

<expr_stmt><expr><name>hm</name> <operator>=</operator> <name>add_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>prepare_entry</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>hashmap_get_entry</name><argument_list>(<argument><expr><name>hm</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>flipped_block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>adjust_last_block</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>block_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pmb_nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>moved_block_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pmb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>pmb_nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>block_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flipped_block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_symbol</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>color_moved</name></name> <operator>==</operator> <name>COLOR_MOVED_PLAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_symbol</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DIFF_SYMBOL_MOVED_LINE</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>color_moved_ws_handling</name></name> <operator>&amp;</operator>

<name>COLOR_MOVED_WS_ALLOW_INDENTATION_CHANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pmb_advance_or_null_multi_match</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>hm</name></expr></argument>, <argument><expr><name>pmb</name></expr></argument>, <argument><expr><name>pmb_nr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pmb_advance_or_null</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>hm</name></expr></argument>, <argument><expr><name>pmb</name></expr></argument>, <argument><expr><name>pmb_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pmb_nr</name> <operator>=</operator> <call><name>shrink_potential_moved_blocks</name><argument_list>(<argument><expr><name>pmb</name></expr></argument>, <argument><expr><name>pmb_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pmb_nr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<macro><name>hashmap_for_each_entry_from</name><argument_list>(<argument>hm</argument>, <argument>match</argument>, <argument>ent</argument>)</argument_list></macro> <block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>pmb</name></expr></argument>, <argument><expr><name>pmb_nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pmb_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>color_moved_ws_handling</name></name> <operator>&amp;</operator>

<name>COLOR_MOVED_WS_ALLOW_INDENTATION_CHANGE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>compute_ws_delta</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>match</name><operator>-&gt;</operator><name>es</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pmb</name><index>[<expr><name>pmb_nr</name></expr>]</index></name><operator>.</operator><name>wsd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pmb</name><index>[<expr><name>pmb_nr</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>match</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pmb</name><index>[<expr><name>pmb_nr</name></expr>]</index></name><operator>.</operator><name>wsd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmb</name><index>[<expr><name>pmb_nr</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>match</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><call><name>adjust_last_block</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>block_length</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name>pmb_nr</name> <operator>&amp;&amp;</operator> <name>last_symbol</name> <operator>!=</operator> <name><name>l</name><operator>-&gt;</operator><name>s</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flipped_block</name> <operator>=</operator> <operator>(</operator><name>flipped_block</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>flipped_block</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>block_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pmb_nr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_length</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DIFF_SYMBOL_MOVED_LINE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flipped_block</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>color_moved</name></name> <operator>!=</operator> <name>COLOR_MOVED_BLOCKS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DIFF_SYMBOL_MOVED_LINE_ALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_symbol</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>adjust_last_block</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>block_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>pmb_nr</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>moved_block_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pmb</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_SYMBOL_MOVED_LINE_ZEBRA_MASK</name></cpp:macro> <cpp:value>(DIFF_SYMBOL_MOVED_LINE | DIFF_SYMBOL_MOVED_LINE_ALT)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dim_moved_lines</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>next</name> <init>=

<expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&lt;</operator> <name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>s</name></name> <operator>!=</operator> <name>DIFF_SYMBOL_PLUS</name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>s</name></name> <operator>!=</operator> <name>DIFF_SYMBOL_MINUS</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIFF_SYMBOL_MOVED_LINE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>&amp;&amp;</operator> <name><name>prev</name><operator>-&gt;</operator><name>s</name></name> <operator>!=</operator> <name>DIFF_SYMBOL_PLUS</name> <operator>&amp;&amp;</operator>

<name><name>prev</name><operator>-&gt;</operator><name>s</name></name> <operator>!=</operator> <name>DIFF_SYMBOL_MINUS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <name><name>next</name><operator>-&gt;</operator><name>s</name></name> <operator>!=</operator> <name>DIFF_SYMBOL_PLUS</name> <operator>&amp;&amp;</operator>

<name><name>next</name><operator>-&gt;</operator><name>s</name></name> <operator>!=</operator> <name>DIFF_SYMBOL_MINUS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>prev</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>prev</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIFF_SYMBOL_MOVED_LINE_ZEBRA_MASK</name><operator>)</operator> <operator>==</operator>

<operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIFF_SYMBOL_MOVED_LINE_ZEBRA_MASK</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>next</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>next</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIFF_SYMBOL_MOVED_LINE_ZEBRA_MASK</name><operator>)</operator> <operator>==</operator>

<operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIFF_SYMBOL_MOVED_LINE_ZEBRA_MASK</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DIFF_SYMBOL_MOVED_LINE_UNINTERESTING</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>prev</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIFF_SYMBOL_MOVED_LINE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>prev</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIFF_SYMBOL_MOVED_LINE_ALT</name><operator>)</operator> <operator>!=</operator>

<operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIFF_SYMBOL_MOVED_LINE_ALT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>next</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIFF_SYMBOL_MOVED_LINE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>next</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIFF_SYMBOL_MOVED_LINE_ALT</name><operator>)</operator> <operator>!=</operator>

<operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DIFF_SYMBOL_MOVED_LINE_ALT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DIFF_SYMBOL_MOVED_LINE_UNINTERESTING</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_line_ws_markup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set_sign</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sign_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blank_at_eof</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>output_indicators</name><index>[<expr><name>sign_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>ws_error_highlight</name></name> <operator>&amp;</operator> <name>ws_rule</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ws</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_WHITESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>ws</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ws</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ws</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>set_sign</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_line_0</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>ws</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emit_line_0</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>set_sign</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name>set_sign</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>blank_at_eof</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_line_0</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>emit_line_0</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><ternary><condition><expr><name>set_sign</name></expr> ?</condition><then> <expr><name>set_sign</name></expr> </then><else>: <expr><name>set</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name>set_sign</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>,

<argument><expr><name>sign</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ws_check_emit</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_diff_symbol_from_struct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>emitted_diff_symbol</name></name> <modifier>*</modifier></type><name>eds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nneof</name> <init>= <expr><literal type="string">" No newline at end of file\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reset</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>set</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>set_sign</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>meta</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fraginfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>diff_symbol</name></name></type> <name>s</name> <init>= <expr><name><name>eds</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>eds</name><operator>-&gt;</operator><name>line</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>eds</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name><name>eds</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>s</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DIFF_SYMBOL_NO_LF_EOF</name></expr>:</case>

<expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_line_0</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>,

<argument><expr><name>nneof</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nneof</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_SUBMODULE_HEADER</name></expr>:</case>

<case>case <expr><name>DIFF_SYMBOL_SUBMODULE_ERROR</name></expr>:</case>

<case>case <expr><name>DIFF_SYMBOL_SUBMODULE_PIPETHROUGH</name></expr>:</case>

<case>case <expr><name>DIFF_SYMBOL_STATS_SUMMARY_INSERTS_DELETES</name></expr>:</case>

<case>case <expr><name>DIFF_SYMBOL_SUMMARY</name></expr>:</case>

<case>case <expr><name>DIFF_SYMBOL_STATS_LINE</name></expr>:</case>

<case>case <expr><name>DIFF_SYMBOL_BINARY_DIFF_BODY</name></expr>:</case>

<case>case <expr><name>DIFF_SYMBOL_CONTEXT_FRAGINFO</name></expr>:</case>

<expr_stmt><expr><call><name>emit_line</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_CONTEXT_INCOMPLETE</name></expr>:</case>

<case>case <expr><name>DIFF_SYMBOL_CONTEXT_MARKER</name></expr>:</case>

<expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_line</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_SEPARATOR</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s%c"</literal></expr></argument>,

<argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>line_termination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_CONTEXT</name></expr>:</case>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>set_sign</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dual_color_diffed_diffs</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>len</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FRAGINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emit_line_ws_markup</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>set_sign</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>,

<argument><expr><name>OUTPUT_INDICATOR_CONTEXT</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_SYMBOL_CONTENT_WS_MASK</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_PLUS</name></expr>:</case>

<switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_SYMBOL_MOVED_LINE</name> <operator>|</operator>

<name>DIFF_SYMBOL_MOVED_LINE_ALT</name> <operator>|</operator>

<name>DIFF_SYMBOL_MOVED_LINE_UNINTERESTING</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DIFF_SYMBOL_MOVED_LINE</name> <operator>|</operator>

<name>DIFF_SYMBOL_MOVED_LINE_ALT</name> <operator>|</operator>

<name>DIFF_SYMBOL_MOVED_LINE_UNINTERESTING</name></expr>:</case>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW_MOVED_ALT_DIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_MOVED_LINE</name> <operator>|</operator>

<name>DIFF_SYMBOL_MOVED_LINE_ALT</name></expr>:</case>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW_MOVED_ALT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_MOVED_LINE</name> <operator>|</operator>

<name>DIFF_SYMBOL_MOVED_LINE_UNINTERESTING</name></expr>:</case>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW_MOVED_DIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_MOVED_LINE</name></expr>:</case>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW_MOVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dual_color_diffed_diffs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set_sign</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>len</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>set_sign</name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FRAGINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_CONTEXT_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>DIFF_SYMBOL_CONTENT_WS_MASK</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>emit_line_ws_markup</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>set_sign</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>,

<argument><expr><name>OUTPUT_INDICATOR_NEW</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name>flags</name> <operator>&amp;</operator> <name>DIFF_SYMBOL_CONTENT_WS_MASK</name></expr></argument>,

<argument><expr><name>flags</name> <operator>&amp;</operator> <name>DIFF_SYMBOL_CONTENT_BLANK_LINE_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_MINUS</name></expr>:</case>

<switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_SYMBOL_MOVED_LINE</name> <operator>|</operator>

<name>DIFF_SYMBOL_MOVED_LINE_ALT</name> <operator>|</operator>

<name>DIFF_SYMBOL_MOVED_LINE_UNINTERESTING</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DIFF_SYMBOL_MOVED_LINE</name> <operator>|</operator>

<name>DIFF_SYMBOL_MOVED_LINE_ALT</name> <operator>|</operator>

<name>DIFF_SYMBOL_MOVED_LINE_UNINTERESTING</name></expr>:</case>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD_MOVED_ALT_DIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_MOVED_LINE</name> <operator>|</operator>

<name>DIFF_SYMBOL_MOVED_LINE_ALT</name></expr>:</case>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD_MOVED_ALT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_MOVED_LINE</name> <operator>|</operator>

<name>DIFF_SYMBOL_MOVED_LINE_UNINTERESTING</name></expr>:</case>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD_MOVED_DIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_MOVED_LINE</name></expr>:</case>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD_MOVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dual_color_diffed_diffs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set_sign</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name>len</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>set_sign</name> <operator>=</operator> <name>set</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW_DIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FRAGINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD_DIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_CONTEXT_DIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>emit_line_ws_markup</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>set_sign</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>,

<argument><expr><name>OUTPUT_INDICATOR_OLD</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name>flags</name> <operator>&amp;</operator> <name>DIFF_SYMBOL_CONTENT_WS_MASK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_WORDS_PORCELAIN</name></expr>:</case>

<expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_line</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"~\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_WORDS</name></expr>:</case>

<expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emit_line</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_FILEPAIR_PLUS</name></expr>:</case>

<expr_stmt><expr><name>meta</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_METAINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s+++ %s%s%s\n"</literal></expr></argument>, <argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>meta</name></expr></argument>,

<argument><expr><name>line</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\t"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_FILEPAIR_MINUS</name></expr>:</case>

<expr_stmt><expr><name>meta</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_METAINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s--- %s%s%s\n"</literal></expr></argument>, <argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>meta</name></expr></argument>,

<argument><expr><name>line</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"\t"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_BINARY_FILES</name></expr>:</case>

<case>case <expr><name>DIFF_SYMBOL_HEADER</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_BINARY_DIFF_HEADER</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%sGIT binary patch\n"</literal></expr></argument>, <argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_BINARY_DIFF_HEADER_DELTA</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%sdelta %s\n"</literal></expr></argument>, <argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_BINARY_DIFF_HEADER_LITERAL</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%sliteral %s\n"</literal></expr></argument>, <argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_BINARY_DIFF_FOOTER</name></expr>:</case>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_REWRITE_DIFF</name></expr>:</case>

<expr_stmt><expr><name>fraginfo</name> <operator>=</operator> <call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_FRAGINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_line</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>fraginfo</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_SUBMODULE_ADD</name></expr>:</case>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_line</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_SUBMODULE_DEL</name></expr>:</case>

<expr_stmt><expr><name>set</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_line</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_SUBMODULE_UNTRACKED</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%sSubmodule %s contains untracked content\n"</literal></expr></argument>,

<argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_SUBMODULE_MODIFIED</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%sSubmodule %s contains modified content\n"</literal></expr></argument>,

<argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_STATS_SUMMARY_NO_FILES</name></expr>:</case>

<expr_stmt><expr><call><name>emit_line</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">" 0 files changed\n"</literal></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">" 0 files changed\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_STATS_SUMMARY_ABBREV</name></expr>:</case>

<expr_stmt><expr><call><name>emit_line</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">" ...\n"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">" ...\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_WORD_DIFF</name></expr>:</case>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_SYMBOL_STAT_SEP</name></expr>:</case>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>stat_sep</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown diff symbol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_diff_symbol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>diff_symbol</name></name></type> <name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>emitted_diff_symbol</name></name></type> <name>e</name> <init>= <expr><block>{<expr><name>line</name></expr>, <expr><name>len</name></expr>, <expr><name>flags</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>s</name></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>append_emitted_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_diff_symbol_from_struct</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_emit_submodule_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_SUBMODULE_DEL</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_emit_submodule_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_SUBMODULE_ADD</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_emit_submodule_untracked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_SUBMODULE_UNTRACKED</name></expr></argument>,

<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_emit_submodule_modified</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_SUBMODULE_MODIFIED</name></expr></argument>,

<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_emit_submodule_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_SUBMODULE_HEADER</name></expr></argument>,

<argument><expr><name>header</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_emit_submodule_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_SUBMODULE_ERROR</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_emit_submodule_pipethrough</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_SUBMODULE_PIPETHROUGH</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>new_blank_line_at_eof</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>emit_callback</name></name> <modifier>*</modifier></type><name>ecbdata</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>ecbdata</name><operator>-&gt;</operator><name>ws_rule</name></name> <operator>&amp;</operator> <name>WS_BLANK_AT_EOF</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>ecbdata</name><operator>-&gt;</operator><name>blank_at_eof_in_preimage</name></name> <operator>&amp;&amp;</operator>

<name><name>ecbdata</name><operator>-&gt;</operator><name>blank_at_eof_in_postimage</name></name> <operator>&amp;&amp;</operator>

<name><name>ecbdata</name><operator>-&gt;</operator><name>blank_at_eof_in_preimage</name></name> <operator>&lt;=</operator> <name><name>ecbdata</name><operator>-&gt;</operator><name>lno_in_preimage</name></name> <operator>&amp;&amp;</operator>

<name><name>ecbdata</name><operator>-&gt;</operator><name>blank_at_eof_in_postimage</name></name> <operator>&lt;=</operator> <name><name>ecbdata</name><operator>-&gt;</operator><name>lno_in_postimage</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ws_blank_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>ws_rule</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_add_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>emit_callback</name></name> <modifier>*</modifier></type><name>ecbdata</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name>WSEH_NEW</name> <operator>|</operator> <name><name>ecbdata</name><operator>-&gt;</operator><name>ws_rule</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>new_blank_line_at_eof</name><argument_list>(<argument><expr><name>ecbdata</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>DIFF_SYMBOL_CONTENT_BLANK_LINE_EOF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_PLUS</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_del_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>emit_callback</name></name> <modifier>*</modifier></type><name>ecbdata</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name>WSEH_OLD</name> <operator>|</operator> <name><name>ecbdata</name><operator>-&gt;</operator><name>ws_rule</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_MINUS</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_context_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>emit_callback</name></name> <modifier>*</modifier></type><name>ecbdata</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name>WSEH_CONTEXT</name> <operator>|</operator> <name><name>ecbdata</name><operator>-&gt;</operator><name>ws_rule</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_CONTEXT</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_hunk_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>emit_callback</name></name> <modifier>*</modifier></type><name>ecbdata</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>color_diff</name></name></expr></argument>, <argument><expr><name>DIFF_CONTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>frag</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>color_diff</name></name></expr></argument>, <argument><expr><name>DIFF_FRAGINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>color_diff</name></name></expr></argument>, <argument><expr><name>DIFF_FUNCINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>color_diff</name></name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reverse</name> <init>= <expr><ternary><condition><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>color_diff</name></name></expr> ?</condition><then> <expr><name>GIT_COLOR_REVERSE</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>atat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'@'</literal></expr>, <expr><literal type="char">'@'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>msgbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>org_len</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">10</literal> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>atat</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><operator>(</operator><name>ep</name> <operator>=</operator> <call><name>memmem</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>atat</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>,

<argument><expr><name>DIFF_SYMBOL_CONTEXT_MARKER</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ep</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>ecbdata</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dual_color_diffed_diffs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>reverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ecbdata</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>suppress_hunk_header_line_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>atat</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>atat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>ep</name></expr>;</init> <condition><expr><name>ep</name> <operator>-</operator> <name>line</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>ep</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ep</name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>!=</operator> <name>cp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ep</name> <operator>-</operator> <name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ep</name> <operator>&lt;</operator> <name>line</name> <operator>+</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>org_len</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_complete_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>,

<argument><expr><name>DIFF_SYMBOL_CONTEXT_FRAGINFO</name></expr></argument>, <argument><expr><name><name>msgbuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>msgbuf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>diff_tempfile</name></name> <modifier>*</modifier></type><name>claim_diff_tempfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>diff_temp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>diff_temp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>diff_temp</name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"diff is failing to clean up its tempfiles"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_tempfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>diff_temp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_tempfile_active</name><argument_list>(<argument><expr><name><name>diff_temp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tempfile</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>delete_tempfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diff_temp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tempfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>diff_temp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_line_count</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"0,0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"1,%d"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_rewrite_lines</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>emit_callback</name></name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>endp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>endp</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><name>endp</name></expr> ?</condition><then> <expr><operator>(</operator><name>endp</name> <operator>-</operator> <name>data</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ecb</name><operator>-&gt;</operator><name>lno_in_preimage</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_del_line</name><argument_list>(<argument><expr><name>ecb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ecb</name><operator>-&gt;</operator><name>lno_in_postimage</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_add_line</name><argument_list>(<argument><expr><name>ecb</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>endp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name><name>ecb</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_NO_LF_EOF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_rewrite_diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_a</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_b</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>textconv_one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>textconv_two</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lc_a</name></decl>, <decl><type ref="prev"/><name>lc_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>a_name</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>, <decl><type ref="prev"/><name>b_name</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a_prefix</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b_prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data_one</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>data_two</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size_one</name></decl>, <decl><type ref="prev"/><name>size_two</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>emit_callback</name></name></type> <name>ecbdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>out</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_mnemonic_prefix</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>reverse_diff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a_prefix</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>b_prefix</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_prefix</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>a_prefix</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>a_prefix</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>a_prefix</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_prefix</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>b_prefix</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>name_a</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>name_a</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>name_b</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>name_b</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quote_two_c_style</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a_name</name></expr></argument>, <argument><expr><name>a_prefix</name></expr></argument>, <argument><expr><name>name_a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quote_two_c_style</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b_name</name></expr></argument>, <argument><expr><name>b_prefix</name></expr></argument>, <argument><expr><name>name_b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size_one</name> <operator>=</operator> <call><name>fill_textconv</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>textconv_one</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size_two</name> <operator>=</operator> <call><name>fill_textconv</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>textconv_two</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecbdata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ecbdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>color_diff</name></name> <operator>=</operator> <call><name>want_color</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>ws_rule</name></name> <operator>=</operator> <call><name>whitespace_rule</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>name_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>opt</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ecbdata</name><operator>.</operator><name>ws_rule</name></name> <operator>&amp;</operator> <name>WS_BLANK_AT_EOF</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>mf1</name></decl>, <decl><type ref="prev"/><name>mf2</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mf1</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data_one</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf2</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data_two</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf1</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size_one</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf2</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size_two</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_blank_at_eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecbdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>lno_in_preimage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>lno_in_postimage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lc_a</name> <operator>=</operator> <call><name>count_lines</name><argument_list>(<argument><expr><name>data_one</name></expr></argument>, <argument><expr><name>size_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lc_b</name> <operator>=</operator> <call><name>count_lines</name><argument_list>(<argument><expr><name>data_two</name></expr></argument>, <argument><expr><name>size_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_FILEPAIR_MINUS</name></expr></argument>,

<argument><expr><name><name>a_name</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>a_name</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_FILEPAIR_PLUS</name></expr></argument>,

<argument><expr><name><name>b_name</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>b_name</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">"@@ -"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>irreversible_delete</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_line_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>lc_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">"?,?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">" +"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_line_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>lc_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">" @@\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_REWRITE_DIFF</name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lc_a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>irreversible_delete</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_rewrite_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecbdata</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>data_one</name></expr></argument>, <argument><expr><name>size_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lc_b</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_rewrite_lines</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecbdata</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><name>data_two</name></expr></argument>, <argument><expr><name>size_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>textconv_one</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>textconv_two</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<struct>struct <name>diff_words_buffer</name> <block>{

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>alloc</name></decl>;</decl_stmt>

<struct>struct <name>diff_words_orig</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>begin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>orig</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>orig_nr</name></decl>, <decl><type ref="prev"/><name>orig_alloc</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_words_append</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_words_buffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>size</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>buffer</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>ptr</name><index>[<expr><name><name>buffer</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>size</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>diff_words_style_elem</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl>;</decl_stmt> 

}</block>;</struct>

<struct>struct <name>diff_words_style</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>diff_words_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_words_style_elem</name></name></type> <name>new_word</name></decl>, <decl><type ref="prev"/><name>old_word</name></decl>, <decl><type ref="prev"/><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newline</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>diff_words_style</name></name></type> <name><name>diff_words_styles</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>DIFF_WORDS_PORCELAIN</name></expr>, <expr><block>{<expr><literal type="string">"+"</literal></expr>, <expr><literal type="string">"\n"</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"-"</literal></expr>, <expr><literal type="string">"\n"</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="string">" "</literal></expr>, <expr><literal type="string">"\n"</literal></expr>}</block></expr>, <expr><literal type="string">"~\n"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>DIFF_WORDS_PLAIN</name></expr>, <expr><block>{<expr><literal type="string">"{+"</literal></expr>, <expr><literal type="string">"+}"</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="string">"[-"</literal></expr>, <expr><literal type="string">"-]"</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>, <expr><literal type="string">"\n"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>DIFF_WORDS_COLOR</name></expr>, <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr>, <expr><literal type="string">"\n"</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>diff_words_data</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>diff_words_buffer</name></name></type> <name>minus</name></decl>, <decl><type ref="prev"/><name>plus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current_plus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_minus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>word_regex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>diff_words_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_words_style</name></name> <modifier>*</modifier></type><name>style</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fn_out_diff_words_write_helper</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_words_style_elem</name></name> <modifier>*</modifier></type><name>st_el</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newline</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>print</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>print</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name> <init>= <expr><ternary><condition><expr><name><name>st_el</name><operator>-&gt;</operator><name>color</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>st_el</name><operator>-&gt;</operator><name>color</name></name></expr> ?</condition><then>

<expr><name>GIT_COLOR_RESET</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st_el</name><operator>-&gt;</operator><name>color</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>st_el</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>st_el</name><operator>-&gt;</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>st_el</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>-</operator> <name>buf</name></expr> </then><else>: <expr><name>count</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>st_el</name><operator>-&gt;</operator><name>suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>newline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>-=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>print</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_WORD_DIFF</name></expr></argument>,

<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<label><name>out</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_WORD_DIFF</name></expr></argument>,

<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>color_words_output_graph_prefix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_words_data</name></name> <modifier>*</modifier></type><name>diff_words</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>diff_words</name><operator>-&gt;</operator><name>last_minus</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>diff_words</name><operator>-&gt;</operator><name>current_plus</name></name> <operator>==</operator> <name><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>text</name><operator>.</operator><name>ptr</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>diff_words</name><operator>-&gt;</operator><name>current_plus</name></name> <operator>&gt;</operator> <name><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>text</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator>

<operator>*</operator><operator>(</operator><name><name>diff_words</name><operator>-&gt;</operator><name>current_plus</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fn_out_diff_words_aux</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>minus_first</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>minus_len</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>plus_first</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>plus_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>funclen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_words_data</name></name> <modifier>*</modifier></type><name>diff_words</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_words_style</name></name> <modifier>*</modifier></type><name>style</name> <init>= <expr><name><name>diff_words</name><operator>-&gt;</operator><name>style</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>minus_begin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>minus_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>plus_begin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>plus_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>diff_words</name><operator>-&gt;</operator><name>opt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_prefix</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line_prefix</name> <operator>=</operator> <call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>minus_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>minus_begin</name> <operator>=</operator> <name><name>diff_words</name><operator>-&gt;</operator><name>minus</name><operator>.</operator><name>orig</name><index>[<expr><name>minus_first</name></expr>]</index></name><operator>.</operator><name>begin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>minus_end</name> <operator>=</operator>

<name><name>diff_words</name><operator>-&gt;</operator><name>minus</name><operator>.</operator><name>orig</name><index>[<expr><name>minus_first</name> <operator>+</operator> <name>minus_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>minus_begin</name> <operator>=</operator> <name>minus_end</name> <operator>=</operator>

<name><name>diff_words</name><operator>-&gt;</operator><name>minus</name><operator>.</operator><name>orig</name><index>[<expr><name>minus_first</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>plus_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>plus_begin</name> <operator>=</operator> <name><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>orig</name><index>[<expr><name>plus_first</name></expr>]</index></name><operator>.</operator><name>begin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>plus_end</name> <operator>=</operator> <name><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>orig</name><index>[<expr><name>plus_first</name> <operator>+</operator> <name>plus_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>plus_begin</name> <operator>=</operator> <name>plus_end</name> <operator>=</operator> <name><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>orig</name><index>[<expr><name>plus_first</name></expr>]</index></name><operator>.</operator><name>end</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>color_words_output_graph_prefix</name><argument_list>(<argument><expr><name>diff_words</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>diff_words</name><operator>-&gt;</operator><name>current_plus</name></name> <operator>!=</operator> <name>plus_begin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fn_out_diff_words_write_helper</name><argument_list>(<argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>style</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>,

<argument><expr><name>plus_begin</name> <operator>-</operator> <name><name>diff_words</name><operator>-&gt;</operator><name>current_plus</name></name></expr></argument>,

<argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>current_plus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>minus_begin</name> <operator>!=</operator> <name>minus_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fn_out_diff_words_write_helper</name><argument_list>(<argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>style</name><operator>-&gt;</operator><name>old_word</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>,

<argument><expr><name>minus_end</name> <operator>-</operator> <name>minus_begin</name></expr></argument>, <argument><expr><name>minus_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>plus_begin</name> <operator>!=</operator> <name>plus_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fn_out_diff_words_write_helper</name><argument_list>(<argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>style</name><operator>-&gt;</operator><name>new_word</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>,

<argument><expr><name>plus_end</name> <operator>-</operator> <name>plus_begin</name></expr></argument>, <argument><expr><name>plus_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>diff_words</name><operator>-&gt;</operator><name>current_plus</name></name> <operator>=</operator> <name>plus_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diff_words</name><operator>-&gt;</operator><name>last_minus</name></name> <operator>=</operator> <name>minus_first</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_word_boundaries</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>word_regex</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>word_regex</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>begin</name> <operator>&lt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>regmatch_t</name></type> <name><name>match</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>regexec_buf</name><argument_list>(<argument><expr><name>word_regex</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <operator>*</operator><name>begin</name></expr></argument>,

<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>*</operator><name>begin</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <operator>*</operator><name>begin</name> <operator>+</operator> <name><name>match</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr></argument>,

<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>match</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>-</operator> <name><name>match</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>-</operator> <name><name>buffer</name><operator>-&gt;</operator><name>ptr</name></name></expr> </then><else>: <expr><name><name>match</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_eo</name> <operator>+</operator> <operator>*</operator><name>begin</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>begin</name> <operator>+=</operator> <name><name>match</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name>begin</name> <operator>&gt;=</operator> <operator>*</operator><name>end</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>begin</name> <operator>&lt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><operator>*</operator><name>begin</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>begin</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>begin</name> <operator>&gt;=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <operator>*</operator><name>begin</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>end</name> <operator>&lt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><operator>*</operator><name>end</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>end</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_words_fill</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_words_buffer</name></name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>word_regex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>orig</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>orig_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>orig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>begin</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>orig</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>orig_nr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>find_word_boundaries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buffer</name><operator>-&gt;</operator><name>text</name></name></expr></argument>, <argument><expr><name>word_regex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>orig</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>orig_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>orig_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>orig</name><index>[<expr><name><name>buffer</name><operator>-&gt;</operator><name>orig_nr</name></name></expr>]</index></name><operator>.</operator><name>begin</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>orig</name><index>[<expr><name><name>buffer</name><operator>-&gt;</operator><name>orig_nr</name></name></expr>]</index></name><operator>.</operator><name>end</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>orig_nr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name><name>out</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>text</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name><name>out</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>j</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>j</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_words_show</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_words_data</name></name> <modifier>*</modifier></type><name>diff_words</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xpparam_t</name></type> <name>xpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdemitconf_t</name></type> <name>xecfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>minus</name></decl>, <decl><type ref="prev"/><name>plus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_words_style</name></name> <modifier>*</modifier></type><name>style</name> <init>= <expr><name><name>diff_words</name><operator>-&gt;</operator><name>style</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>diff_words</name><operator>-&gt;</operator><name>opt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_prefix</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line_prefix</name> <operator>=</operator> <call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>text</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_WORD_DIFF</name></expr></argument>,

<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>line_prefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fn_out_diff_words_write_helper</name><argument_list>(<argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>style</name><operator>-&gt;</operator><name>old_word</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>,

<argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>minus</name><operator>.</operator><name>text</name><operator>.</operator><name>size</name></name></expr></argument>,

<argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>minus</name><operator>.</operator><name>text</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diff_words</name><operator>-&gt;</operator><name>minus</name><operator>.</operator><name>text</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>diff_words</name><operator>-&gt;</operator><name>current_plus</name></name> <operator>=</operator> <name><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>text</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diff_words</name><operator>-&gt;</operator><name>last_minus</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xecfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_words_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diff_words</name><operator>-&gt;</operator><name>minus</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minus</name></expr></argument>, <argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>word_regex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_words_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diff_words</name><operator>-&gt;</operator><name>plus</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plus</name></expr></argument>, <argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>word_regex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpp</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>ctxlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdi_diff_outf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>minus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>plus</name></expr></argument>, <argument><expr><name>fn_out_diff_words_aux</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>diff_words</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to generate word diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>minus</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>plus</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>diff_words</name><operator>-&gt;</operator><name>current_plus</name></name> <operator>!=</operator> <name><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>text</name><operator>.</operator><name>ptr</name></name> <operator>+</operator>

<name><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>text</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>color_words_output_graph_prefix</name><argument_list>(<argument><expr><name>diff_words</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_WORD_DIFF</name></expr></argument>,

<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>line_prefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fn_out_diff_words_write_helper</name><argument_list>(<argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>style</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>style</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>,

<argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>text</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>text</name><operator>.</operator><name>size</name></name>

<operator>-</operator> <name><name>diff_words</name><operator>-&gt;</operator><name>current_plus</name></name></expr></argument>, <argument><expr><name><name>diff_words</name><operator>-&gt;</operator><name>current_plus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>diff_words</name><operator>-&gt;</operator><name>minus</name><operator>.</operator><name>text</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>text</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_words_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>emit_callback</name></name> <modifier>*</modifier></type><name>ecbdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>wo</name> <init>= <expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>opt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>minus</name><operator>.</operator><name>text</name><operator>.</operator><name>size</name></name> <operator>||</operator>

<name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>text</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_words_show</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wo</name><operator>-&gt;</operator><name>emitted_symbols</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>ecbdata</name><operator>-&gt;</operator><name>opt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>emitted_diff_symbols</name></name> <modifier>*</modifier></type><name>wol</name> <init>= <expr><name><name>wo</name><operator>-&gt;</operator><name>emitted_symbols</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wol</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>append_emitted_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wol</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>wol</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>wol</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>wol</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_filespec_load_driver</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>one</name><operator>-&gt;</operator><name>driver</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>one</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <call><name>userdiff_find_by_path</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>one</name><operator>-&gt;</operator><name>driver</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>one</name><operator>-&gt;</operator><name>driver</name></name> <operator>=</operator> <call><name>userdiff_find_by_name</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userdiff_word_regex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>diff_filespec_load_driver</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>one</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>word_regex</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_diff_words_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>emit_callback</name></name> <modifier>*</modifier></type><name>ecbdata</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>orig_opts</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>diff_options</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>orig_opts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>diff_options</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name></name> <operator>=</operator>

<call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>diff_words_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>word_diff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>opt</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>orig_opts</name><operator>-&gt;</operator><name>emitted_symbols</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name></name> <operator>=</operator>

<call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>emitted_diff_symbols</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>word_regex</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>word_regex</name></name> <operator>=</operator> <call><name>userdiff_word_regex</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>word_regex</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>word_regex</name></name> <operator>=</operator> <call><name>userdiff_word_regex</name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>word_regex</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>word_regex</name></name> <operator>=</operator> <name>diff_word_regex_cfg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>word_regex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>word_regex</name></name> <operator>=</operator> <operator>(</operator><name>regex_t</name> <operator>*</operator><operator>)</operator>

<call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>regex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>regcomp</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>word_regex</name></name></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>word_regex</name></name></expr></argument>,

<argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_NEWLINE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid regular expression: %s"</literal></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>word_regex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>diff_words_styles</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>word_diff</name></name> <operator>==</operator> <name><name>diff_words_styles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>style</name></name> <operator>=</operator>

<operator>&amp;</operator><name><name>diff_words_styles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>want_color</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_words_style</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>style</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>old_word</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>new_word</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>ctx</name><operator>.</operator><name>color</name></name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_diff_words_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>emit_callback</name></name> <modifier>*</modifier></type><name>ecbdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>diff_words_flush</name><argument_list>(<argument><expr><name>ecbdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>opt</name><operator>-&gt;</operator><name>emitted_symbols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>minus</name><operator>.</operator><name>text</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>minus</name><operator>.</operator><name>orig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>text</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>plus</name><operator>.</operator><name>orig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>word_regex</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>regfree</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>word_regex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>word_regex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>diff_get_color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>diff_use_color</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>color_diff</name></name></type> <name>ix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>want_color</name><argument_list>(<argument><expr><name>diff_use_color</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>diff_colors</name><index>[<expr><name>ix</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>diff_line_prefix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>msgbuf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>output_prefix</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">""</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>msgbuf</name> <operator>=</operator> <call><name><name>opt</name><operator>-&gt;</operator><name>output_prefix</name></name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output_prefix_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>msgbuf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>sane_truncate_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>allot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>allot</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>l</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>utf8_width</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

</block_content>}</block></while>

<return>return <expr><name>allot</name> <operator>-</operator> <name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_lno</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>emit_callback</name></name> <modifier>*</modifier></type><name>ecbdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>lno_in_preimage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>lno_in_postimage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>lno_in_preimage</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>lno_in_postimage</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fn_out_consume</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>emit_callback</name></name> <modifier>*</modifier></type><name>ecbdata</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name><name>ecbdata</name><operator>-&gt;</operator><name>opt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>found_changes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ecbdata</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_HEADER</name></expr></argument>,

<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>header</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ecbdata</name><operator>-&gt;</operator><name>label_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_FILEPAIR_MINUS</name></expr></argument>,

<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>label_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>label_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_FILEPAIR_PLUS</name></expr></argument>,

<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>label_path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>label_path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>label_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ecbdata</name><operator>-&gt;</operator><name>label_path</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_suppress_blank_empty</name>

<operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_words_flush</name><argument_list>(<argument><expr><name>ecbdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sane_truncate_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_lno</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ecbdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_hunk_header</name><argument_list>(<argument><expr><name>ecbdata</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>diff_symbol</name></name></type> <name>s</name> <init>=

<expr><ternary><condition><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>DIFF_WORDS_PORCELAIN</name></expr> ?</condition><then>

<expr><name>DIFF_SYMBOL_WORDS_PORCELAIN</name></expr> </then><else>: <expr><name>DIFF_SYMBOL_WORDS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>diff_words_append</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>minus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>diff_words_append</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ecbdata</name><operator>-&gt;</operator><name>diff_words</name><operator>-&gt;</operator><name>plus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"\\ "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>diff_words_flush</name><argument_list>(<argument><expr><name>ecbdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>lno_in_postimage</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_add_line</name><argument_list>(<argument><expr><name>ecbdata</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>lno_in_preimage</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_del_line</name><argument_list>(<argument><expr><name>ecbdata</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>lno_in_postimage</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>lno_in_preimage</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_context_line</name><argument_list>(<argument><expr><name>ecbdata</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>ecbdata</name><operator>-&gt;</operator><name>lno_in_preimage</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_CONTEXT_INCOMPLETE</name></expr></argument>,

<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pprint_rename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pfx_length</name></decl>, <decl><type ref="prev"/><name>sfx_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pfx_adjust_for_slash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len_a</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len_b</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a_midlen</name></decl>, <decl><type ref="prev"/><name>b_midlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qlen_a</name> <init>= <expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qlen_b</name> <init>= <expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>qlen_a</name> <operator>||</operator> <name>qlen_b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">" =&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pfx_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>old_name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>new_name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>old_name</name> <operator>==</operator> <operator>*</operator><name>new_name</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>old_name</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pfx_length</name> <operator>=</operator> <name>old_name</name> <operator>-</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_name</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>new_name</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>old_name</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>len_a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_name</name> <operator>=</operator> <name>b</name> <operator>+</operator> <name>len_b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sfx_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pfx_adjust_for_slash</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>pfx_length</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>a</name> <operator>+</operator> <name>pfx_length</name> <operator>-</operator> <name>pfx_adjust_for_slash</name> <operator>&lt;=</operator> <name>old_name</name> <operator>&amp;&amp;</operator>

<name>b</name> <operator>+</operator> <name>pfx_length</name> <operator>-</operator> <name>pfx_adjust_for_slash</name> <operator>&lt;=</operator> <name>new_name</name> <operator>&amp;&amp;</operator>

<operator>*</operator><name>old_name</name> <operator>==</operator> <operator>*</operator><name>new_name</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>old_name</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sfx_length</name> <operator>=</operator> <name>len_a</name> <operator>-</operator> <operator>(</operator><name>old_name</name> <operator>-</operator> <name>a</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_name</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>new_name</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>a_midlen</name> <operator>=</operator> <name>len_a</name> <operator>-</operator> <name>pfx_length</name> <operator>-</operator> <name>sfx_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_midlen</name> <operator>=</operator> <name>len_b</name> <operator>-</operator> <name>pfx_length</name> <operator>-</operator> <name>sfx_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a_midlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>a_midlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_midlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_midlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_grow</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pfx_length</name> <operator>+</operator> <name>a_midlen</name> <operator>+</operator> <name>b_midlen</name> <operator>+</operator> <name>sfx_length</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pfx_length</name> <operator>+</operator> <name>sfx_length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>pfx_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>pfx_length</name></expr></argument>, <argument><expr><name>a_midlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">" =&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <name>pfx_length</name></expr></argument>, <argument><expr><name>b_midlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pfx_length</name> <operator>+</operator> <name>sfx_length</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>len_a</name> <operator>-</operator> <name>sfx_length</name></expr></argument>, <argument><expr><name>sfx_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>diffstat_file</name></name> <modifier>*</modifier></type><name>diffstat_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diffstat_t</name></name> <modifier>*</modifier></type><name>diffstat</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_a</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diffstat_file</name></name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>diffstat</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name><name>diffstat</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>diffstat</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diffstat</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>diffstat</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>from_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>name_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>name_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>is_renamed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>from_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>name_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diffstat_consume</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diffstat_t</name></name> <modifier>*</modifier></type><name>diffstat</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diffstat_file</name></name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>diffstat</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>diffstat</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>added</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>deleted</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>mime_boundary_leader</name><index>[]</index></name> <init>= <expr><literal type="string">"------------"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scale_linear</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>it</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_change</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>it</name> <operator>*</operator> <operator>(</operator><name>width</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>max_change</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addchars</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_print_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diffstat_file</name></name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>pname</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>print_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>is_renamed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pprint_rename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pname</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>from_name</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>comments</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pname</name></expr></argument>, <argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>comments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>print_name</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_stat_summary_inserts_deletes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>files</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>insertions</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deletions</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>files</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>insertions</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>deletions</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_STATS_SUMMARY_NO_FILES</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>files</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" %d file changed"</literal></expr> </then><else>: <expr><literal type="string">" %d files changed"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>insertions</name> <operator>||</operator> <name>deletions</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>insertions</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">", %d insertion(+)"</literal></expr> </then><else>: <expr><literal type="string">", %d insertions(+)"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>insertions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>deletions</name> <operator>||</operator> <name>insertions</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>deletions</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">", %d deletion(-)"</literal></expr> </then><else>: <expr><literal type="string">", %d deletions(-)"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>deletions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_STATS_SUMMARY_INSERTS_DELETES</name></expr></argument>,

<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_stat_summary</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>files</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>insertions</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deletions</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name></type> <name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>fp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>print_stat_summary_inserts_deletes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>insertions</name></expr></argument>, <argument><expr><name>deletions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_stats</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diffstat_t</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>add</name></decl>, <decl><type ref="prev"/><name>del</name></decl>, <decl><type ref="prev"/><name>adds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>max_change</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_files</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>nr</name></name></expr></init></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>name_width</name></decl>, <decl><type ref="prev"/><name>graph_width</name></decl>, <decl><type ref="prev"/><name>number_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bin_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>add_c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>del_c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_shown</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_prefix</name> <init>= <expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>out</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <ternary><condition><expr><name><name>options</name><operator>-&gt;</operator><name>stat_count</name></name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>stat_count</name></name></expr> </then><else>: <expr><name><name>data</name><operator>-&gt;</operator><name>nr</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>add_c</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>del_c</name> <operator>=</operator> <call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>count</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>nr</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diffstat_file</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>change</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>added</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>deleted</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>is_interesting</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>change</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt> 

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fill_print_name</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>print_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_len</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>is_unmerged</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bin_width</name> <operator>=</operator> <ternary><condition><expr><name>bin_width</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><name>bin_width</name></expr></else></ternary></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>is_binary</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">14</literal> <operator>+</operator> <call><name>decimal_width</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>added</name></name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>decimal_width</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>deleted</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bin_width</name> <operator>=</operator> <ternary><condition><expr><name>bin_width</name> <operator>&lt;</operator> <name>w</name></expr> ?</condition><then> <expr><name>w</name></expr> </then><else>: <expr><name>bin_width</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>number_width</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_change</name> <operator>&lt;</operator> <name>change</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_change</name> <operator>=</operator> <name>change</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>stat_width</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>term_columns</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <ternary><condition><expr><name><name>options</name><operator>-&gt;</operator><name>stat_width</name></name></expr> ?</condition><then> <expr><name><name>options</name><operator>-&gt;</operator><name>stat_width</name></name></expr> </then><else>: <expr><literal type="number">80</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>number_width</name> <operator>=</operator> <ternary><condition><expr><call><name>decimal_width</name><argument_list>(<argument><expr><name>max_change</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>number_width</name></expr> ?</condition><then>

<expr><call><name>decimal_width</name><argument_list>(<argument><expr><name>max_change</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>number_width</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>stat_graph_width</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>stat_graph_width</name></name> <operator>=</operator> <name>diff_stat_graph_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>number_width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>number_width</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>graph_width</name> <operator>=</operator> <ternary><condition><expr><name>max_change</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>bin_width</name></expr> ?</condition><then> <expr><name>max_change</name></expr> </then><else>: <expr><name>bin_width</name> <operator>-</operator> <literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>stat_graph_width</name></name> <operator>&amp;&amp;</operator>

<name><name>options</name><operator>-&gt;</operator><name>stat_graph_width</name></name> <operator>&lt;</operator> <name>graph_width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>graph_width</name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>stat_graph_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name_width</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>options</name><operator>-&gt;</operator><name>stat_name_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>options</name><operator>-&gt;</operator><name>stat_name_width</name></name> <operator>&lt;</operator> <name>max_len</name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>options</name><operator>-&gt;</operator><name>stat_name_width</name></name></expr> </then><else>: <expr><name>max_len</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_width</name> <operator>+</operator> <name>number_width</name> <operator>+</operator> <literal type="number">6</literal> <operator>+</operator> <name>graph_width</name> <operator>&gt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>graph_width</name> <operator>&gt;</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal><operator>/</operator><literal type="number">8</literal> <operator>-</operator> <name>number_width</name> <operator>-</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>graph_width</name> <operator>=</operator> <name>width</name> <operator>*</operator> <literal type="number">3</literal><operator>/</operator><literal type="number">8</literal> <operator>-</operator> <name>number_width</name> <operator>-</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>graph_width</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>graph_width</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>stat_graph_width</name></name> <operator>&amp;&amp;</operator>

<name>graph_width</name> <operator>&gt;</operator> <name><name>options</name><operator>-&gt;</operator><name>stat_graph_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>graph_width</name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>stat_graph_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name_width</name> <operator>&gt;</operator> <name>width</name> <operator>-</operator> <name>number_width</name> <operator>-</operator> <literal type="number">6</literal> <operator>-</operator> <name>graph_width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name_width</name> <operator>=</operator> <name>width</name> <operator>-</operator> <name>number_width</name> <operator>-</operator> <literal type="number">6</literal> <operator>-</operator> <name>graph_width</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>graph_width</name> <operator>=</operator> <name>width</name> <operator>-</operator> <name>number_width</name> <operator>-</operator> <literal type="number">6</literal> <operator>-</operator> <name>name_width</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diffstat_file</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>print_name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>added</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>added</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>deleted</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>deleted</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>name_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>is_interesting</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>added</name> <operator>+</operator> <name>deleted</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>name_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name_width</name> <operator>&lt;</operator> <name>name_len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">"..."</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>+=</operator> <name>name_len</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>slash</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>is_binary</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">" %s%-*s |"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">" %*s"</literal></expr></argument>, <argument><expr><name>number_width</name></expr></argument>, <argument><expr><literal type="string">"Bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>added</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>deleted</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_STATS_LINE</name></expr></argument>,

<argument><expr><name><name>out</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">" %s%"</literal><name>PRIuMAX</name><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name>del_c</name></expr></argument>, <argument><expr><name>deleted</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">" -&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s%"</literal><name>PRIuMAX</name><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name>add_c</name></expr></argument>, <argument><expr><name>added</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">" bytes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_STATS_LINE</name></expr></argument>,

<argument><expr><name><name>out</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>is_unmerged</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">" %s%-*s |"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">" Unmerged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_STATS_LINE</name></expr></argument>,

<argument><expr><name><name>out</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <name>added</name></expr>;</expr_stmt>

<expr_stmt><expr><name>del</name> <operator>=</operator> <name>deleted</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>graph_width</name> <operator>&lt;=</operator> <name>max_change</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><call><name>scale_linear</name><argument_list>(<argument><expr><name>add</name> <operator>+</operator> <name>del</name></expr></argument>, <argument><expr><name>graph_width</name></expr></argument>, <argument><expr><name>max_change</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>total</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>add</name> <operator>&amp;&amp;</operator> <name>del</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>add</name> <operator>&lt;</operator> <name>del</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add</name> <operator>=</operator> <call><name>scale_linear</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>graph_width</name></expr></argument>, <argument><expr><name>max_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>del</name> <operator>=</operator> <name>total</name> <operator>-</operator> <name>add</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>del</name> <operator>=</operator> <call><name>scale_linear</name><argument_list>(<argument><expr><name>del</name></expr></argument>, <argument><expr><name>graph_width</name></expr></argument>, <argument><expr><name>max_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <name>total</name> <operator>-</operator> <name>del</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">" %s%-*s |"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">" %*"</literal><name>PRIuMAX</name><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name>number_width</name></expr></argument>, <argument><expr><name>added</name> <operator>+</operator> <name>deleted</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>added</name> <operator>+</operator> <name>deleted</name></expr> ?</condition><then> <expr><literal type="string">" "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_graph</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>add_c</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_graph</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>del</name></expr></argument>, <argument><expr><name>del_c</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_STATS_LINE</name></expr></argument>,

<argument><expr><name><name>out</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diffstat_file</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>added</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>added</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>deleted</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>deleted</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>is_unmerged</name></name> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>is_interesting</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>added</name> <operator>+</operator> <name>deleted</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total_files</name><operator>--</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>is_binary</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>adds</name> <operator>+=</operator> <name>added</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dels</name> <operator>+=</operator> <name>deleted</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>extra_shown</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>options</name></expr></argument>,

<argument><expr><name>DIFF_SYMBOL_STATS_SUMMARY_ABBREV</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>extra_shown</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>print_stat_summary_inserts_deletes</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>total_files</name></expr></argument>, <argument><expr><name>adds</name></expr></argument>, <argument><expr><name>dels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_shortstats</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diffstat_t</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>adds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>total_files</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>nr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>added</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>added</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>deleted</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>deleted</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>is_unmerged</name> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>is_interesting</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>added</name> <operator>+</operator> <name>deleted</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>total_files</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>is_binary</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>adds</name> <operator>+=</operator> <name>added</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dels</name> <operator>+=</operator> <name>deleted</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>print_stat_summary_inserts_deletes</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>total_files</name></expr></argument>, <argument><expr><name>adds</name></expr></argument>, <argument><expr><name>dels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_numstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diffstat_t</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diffstat_file</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>is_binary</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"-\t-\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>,

<argument><expr><literal type="string">"%"</literal><name>PRIuMAX</name><literal type="string">"\t%"</literal><name>PRIuMAX</name><literal type="string">"\t"</literal></expr></argument>,

<argument><expr><name><name>file</name><operator>-&gt;</operator><name>added</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>deleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>line_termination</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_print_name</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>is_renamed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>,

<argument><expr><name><name>options</name><operator>-&gt;</operator><name>line_termination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>print_name</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>line_termination</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>is_renamed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>from_name</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<struct>struct <name>dirstat_file</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>changed</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>dirstat_dir</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>dirstat_file</name></name> <modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alloc</name></decl>, <decl><type ref="prev"/><name>nr</name></decl>, <decl><type ref="prev"/><name>permille</name></decl>, <decl><type ref="prev"/><name>cumulative</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>long</name></type> <name>gather_dirstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dirstat_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>changed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>baselen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sum_changes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sources</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_prefix</name> <init>= <expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dirstat_file</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>dir</name><operator>-&gt;</operator><name>files</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>changes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&lt;</operator> <name>baselen</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>baselen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name>baselen</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slash</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>newbaselen</name> <init>= <expr><name>slash</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>changes</name> <operator>=</operator> <call><name>gather_dirstat</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>changed</name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>newbaselen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sources</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>changes</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>changed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>files</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sources</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>sum_changes</name> <operator>+=</operator> <name>changes</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>baselen</name> <operator>&amp;&amp;</operator> <name>sources</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sum_changes</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>permille</name> <init>= <expr><name>sum_changes</name> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <name>changed</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>permille</name> <operator>&gt;=</operator> <name><name>dir</name><operator>-&gt;</operator><name>permille</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s%4d.%01d%% %.*s\n"</literal></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>,

<argument><expr><name>permille</name> <operator>/</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>permille</name> <operator>%</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>baselen</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dir</name><operator>-&gt;</operator><name>cumulative</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sum_changes</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dirstat_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dirstat_file</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>_a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>dirstat_file</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name>_b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_dirstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>changed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dirstat_dir</name></name></type> <name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>files</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>permille</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>dirstat_permille</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>cumulative</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirstat_cumulative</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>copied</name></decl>, <decl><type ref="prev"/><name>added</name></decl>, <decl><type ref="prev"/><name>damage</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>&amp;&amp;</operator>

<call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>damage</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>found_damage</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirstat_by_file</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>damage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>found_damage</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diffcore_count_changes</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>copied</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name>CHECK_SIZE_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copied</name> <operator>=</operator> <name>added</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>, <argument><expr><name>CHECK_SIZE_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copied</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>added</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></else></if_stmt>

<expr_stmt><expr><name>damage</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>copied</name><operator>)</operator> <operator>+</operator> <name>added</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>damage</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>damage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>found_damage</name>:</label>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>files</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>.</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>dir</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>files</name><index>[<expr><name><name>dir</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>files</name><index>[<expr><name><name>dir</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>changed</name> <operator>=</operator> <name>damage</name></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name> <operator>+=</operator> <name>damage</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>files</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>.</operator><name>nr</name></name></expr></argument>, <argument><expr><name>dirstat_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gather_dirstat</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name>changed</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_dirstat_by_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diffstat_t</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>changed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dirstat_dir</name></name></type> <name>dir</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>files</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>permille</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>dirstat_permille</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>cumulative</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirstat_cumulative</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>data</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diffstat_file</name></name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>damage</name> <init>= <expr><name><name>file</name><operator>-&gt;</operator><name>added</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>deleted</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>is_binary</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>damage</name> <operator>=</operator> <call><name>DIV_ROUND_UP</name><argument_list>(<argument><expr><name>damage</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>files</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>.</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>dir</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>files</name><index>[<expr><name><name>dir</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>files</name><index>[<expr><name><name>dir</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>changed</name> <operator>=</operator> <name>damage</name></expr>;</expr_stmt>

<expr_stmt><expr><name>changed</name> <operator>+=</operator> <name>damage</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>.</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>changed</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>dir</name><operator>.</operator><name>files</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>.</operator><name>nr</name></name></expr></argument>, <argument><expr><name>dirstat_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gather_dirstat</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name>changed</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_diffstat_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diffstat_t</name></name> <modifier>*</modifier></type><name>diffstat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>diffstat</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diffstat_file</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>diffstat</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>print_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>from_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>diffstat</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>checkdiff_t</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lineno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conflict_marker_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>status</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_conflict_marker</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>marker_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>firstchar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>marker_size</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>firstchar</name> <operator>=</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>firstchar</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'='</literal></expr>:</case> <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <case>case <expr><literal type="char">'|'</literal></expr>:</case>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name>marker_size</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>!=</operator> <name>firstchar</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>marker_size</name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>marker_size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkdiff_consume_hunk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>,

<parameter><decl><type><name>long</name></type> <name>ob</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>on</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nb</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>nn</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>funclen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>checkdiff_t</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <name>nb</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkdiff_consume</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>checkdiff_t</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>marker_size</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>conflict_marker_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ws</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_WHITESPACE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_prefix</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>o</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>line_prefix</name> <operator>=</operator> <call><name>diff_line_prefix</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>o</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>bad</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>lineno</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_conflict_marker</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>marker_size</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>,

<argument><expr><literal type="string">"%s%s:%d: leftover conflict marker\n"</literal></expr></argument>,

<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bad</name> <operator>=</operator> <call><name>ws_check</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>ws_rule</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bad</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <name>bad</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>whitespace_error_string</name><argument_list>(<argument><expr><name>bad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s%s:%d: %s.\n"</literal></expr></argument>,

<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_line</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>o</name></name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ws_check_emit</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>ws_rule</name></name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>lineno</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>deflate_it</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>result_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bound</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>deflated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>git_zstream</name></type> <name>stream</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>git_deflate_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>zlib_compression_level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bound</name> <operator>=</operator> <call><name>git_deflate_bound</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>deflated</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>bound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>deflated</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>bound</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>git_deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while> 

<expr_stmt><expr><call><name>git_deflate_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>result_size</name> <operator>=</operator> <name><name>stream</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>

<return>return <expr><name>deflated</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_binary_diff_body</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>one</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>deflated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>orig_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>delta_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>deflate_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>data_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>deflated</name> <operator>=</operator> <call><name>deflate_it</name><argument_list>(<argument><expr><name><name>two</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deflate_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>one</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>two</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>diff_delta</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name><name>two</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>delta_size</name></expr></argument>, <argument><expr><name>deflate_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>to_free</name> <init>= <expr><name>delta</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>orig_size</name> <operator>=</operator> <name>delta_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>deflate_it</name><argument_list>(<argument><expr><name>delta</name></expr></argument>, <argument><expr><name>delta_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delta_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&amp;&amp;</operator> <name>delta_size</name> <operator>&lt;</operator> <name>deflate_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRIuMAX</name></expr></argument> , <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>orig_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_BINARY_DIFF_HEADER_DELTA</name></expr></argument>,

<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>deflated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <name>delta_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_BINARY_DIFF_HEADER_LITERAL</name></expr></argument>,

<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>deflated</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <name>deflate_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>data_size</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><ternary><condition><expr><operator>(</operator><literal type="number">52</literal> <operator>&lt;</operator> <name>data_size</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">52</literal></expr> </then><else>: <expr><name>data_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><literal type="number">71</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>data_size</name> <operator>-=</operator> <name>bytes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;=</operator> <literal type="number">26</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>bytes</name> <operator>+</operator> <literal type="char">'A'</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>bytes</name> <operator>-</operator> <literal type="number">26</literal> <operator>+</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>encode_85</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>cp</name> <operator>+</operator> <name>bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_BINARY_DIFF_BODY</name></expr></argument>,

<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_BINARY_DIFF_FOOTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_binary_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>one</name></decl></parameter>, <parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_BINARY_DIFF_HEADER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_binary_diff_body</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_binary_diff_body</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>diff_filespec_is_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>one</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>diff_filespec_load_driver</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>one</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>binary</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>one</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>=</operator> <name><name>one</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>binary</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>one</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><name>CHECK_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>one</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>one</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>one</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>=</operator> <call><name>buffer_is_binary</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>one</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>one</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>one</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>one</name><operator>-&gt;</operator><name>is_binary</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>userdiff_funcname</name></name> <modifier>*</modifier></type>

<name>diff_funcname_pattern</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>diff_filespec_load_driver</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>one</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>funcname</name><operator>.</operator><name>pattern</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>driver</name><operator>-&gt;</operator><name>funcname</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_set_mnemonic_prefix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>a_prefix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>a_prefix</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>b_prefix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>b_prefix</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>get_textconv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>diff_filespec_load_driver</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>userdiff_get_textconv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>builtin_diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_a</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_b</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xfrm_msg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>must_show_header</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>complete_rewrite</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>mf1</name></decl>, <decl><type ref="prev"/><name>mf2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>lbl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>a_one</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b_two</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_METAINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name> <init>= <expr><call><name>diff_get_color_opt</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a_prefix</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b_prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>textconv_one</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>textconv_two</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>header</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_prefix</name> <init>= <expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>diff_set_mnemonic_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"a/"</literal></expr></argument>, <argument><expr><literal type="string">"b/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>reverse_diff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a_prefix</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>b_prefix</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_prefix</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>a_prefix</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>a_prefix</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>a_prefix</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_prefix</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>b_prefix</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>submodule_format</name></name> <operator>==</operator> <name>DIFF_SUBMODULE_LOG</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>||</operator> <call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>two</name><operator>-&gt;</operator><name>mode</name></name> <operator>||</operator> <call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_submodule_summary</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr> ?</condition><then> <expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><name><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></else></ternary></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,

<argument><expr><name><name>two</name><operator>-&gt;</operator><name>dirty_submodule</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>submodule_format</name></name> <operator>==</operator> <name>DIFF_SUBMODULE_INLINE_DIFF</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>||</operator> <call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>two</name><operator>-&gt;</operator><name>mode</name></name> <operator>||</operator> <call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>show_submodule_inline_diff</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr> ?</condition><then> <expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><name><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></else></ternary></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,

<argument><expr><name><name>two</name><operator>-&gt;</operator><name>dirty_submodule</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>allow_textconv</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>textconv_one</name> <operator>=</operator> <call><name>get_textconv</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textconv_two</name> <operator>=</operator> <call><name>get_textconv</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name_a</name> <operator>=</operator> <ternary><condition><expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>name_a</name></expr> </then><else>: <expr><name>name_b</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>name_b</name> <operator>=</operator> <ternary><condition><expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>name_b</name></expr> </then><else>: <expr><name>name_a</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>a_one</name> <operator>=</operator> <call><name>quote_two</name><argument_list>(<argument><expr><name>a_prefix</name></expr></argument>, <argument><expr><name>name_a</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>name_a</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_two</name> <operator>=</operator> <call><name>quote_two</name><argument_list>(<argument><expr><name>b_prefix</name></expr></argument>, <argument><expr><name>name_b</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>name_b</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>a_one</name></expr> </then><else>: <expr><literal type="string">"/dev/null"</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lbl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>b_two</name></expr> </then><else>: <expr><literal type="string">"/dev/null"</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"%s%sdiff --git %s %s%s\n"</literal></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>a_one</name></expr></argument>, <argument><expr><name>b_two</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lbl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"%s%snew file mode %06o%s\n"</literal></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xfrm_msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>xfrm_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>must_show_header</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>lbl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"%s%sdeleted file mode %06o%s\n"</literal></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xfrm_msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>xfrm_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>must_show_header</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"%s%sold mode %06o%s\n"</literal></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">"%s%snew mode %06o%s\n"</literal></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>must_show_header</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xfrm_msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>xfrm_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>^</operator> <name><name>two</name><operator>-&gt;</operator><name>mode</name></name><operator>)</operator> <operator>&amp;</operator> <name>S_IFMT</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_ab_and_return</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>complete_rewrite</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>textconv_one</name> <operator>||</operator> <operator>!</operator><call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>textconv_two</name> <operator>||</operator> <operator>!</operator><call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_HEADER</name></expr></argument>,

<argument><expr><name><name>header</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_rewrite_diff</name><argument_list>(<argument><expr><name>name_a</name></expr></argument>, <argument><expr><name>name_b</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>,

<argument><expr><name>textconv_one</name></expr></argument>, <argument><expr><name>textconv_two</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>found_changes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>free_ab_and_return</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>irreversible_delete</name></name> <operator>&amp;&amp;</operator> <name><name>lbl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_HEADER</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><name><name>header</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>free_ab_and_return</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>text</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>(</operator><operator>!</operator><name>textconv_one</name> <operator>&amp;&amp;</operator> <call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name>textconv_two</name> <operator>&amp;&amp;</operator> <call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>one</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>two</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator>

<call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>binary</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>must_show_header</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_HEADER</name></expr></argument>,

<argument><expr><name><name>header</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>len</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>free_ab_and_return</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_HEADER</name></expr></argument>,

<argument><expr><name><name>header</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sBinary files %s and %s differ\n"</literal></expr></argument>,

<argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lbl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_BINARY_FILES</name></expr></argument>,

<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>free_ab_and_return</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fill_mmfile</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>fill_mmfile</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to read files to diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mf1</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name><name>mf2</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>mf1</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>mf2</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>mf1</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>must_show_header</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_HEADER</name></expr></argument>,

<argument><expr><name><name>header</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>free_ab_and_return</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_HEADER</name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>binary</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_binary_diff</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%sBinary files %s and %s differ\n"</literal></expr></argument>,

<argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>lbl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_BINARY_FILES</name></expr></argument>,

<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>found_changes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>diffopts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xpparam_t</name></type> <name>xpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdemitconf_t</name></type> <name>xecfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>emit_callback</name></name></type> <name>ecbdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>userdiff_funcname</name></name> <modifier>*</modifier></type><name>pe</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>must_show_header</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_HEADER</name></expr></argument>,

<argument><expr><name><name>header</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>mf1</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>fill_textconv</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>textconv_one</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mf1</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mf2</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>fill_textconv</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>textconv_two</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mf2</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pe</name> <operator>=</operator> <call><name>diff_funcname_pattern</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pe</name> <operator>=</operator> <call><name>diff_funcname_pattern</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xecfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecbdata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ecbdata</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>suppress_diff_headers</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>label_path</name></name> <operator>=</operator> <name>lbl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>color_diff</name></name> <operator>=</operator> <call><name>want_color</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>ws_rule</name></name> <operator>=</operator> <call><name>whitespace_rule</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>name_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ecbdata</name><operator>.</operator><name>ws_rule</name></name> <operator>&amp;</operator> <name>WS_BLANK_AT_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_blank_at_eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecbdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>opt</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>suppress_diff_headers</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>header</name></name> <operator>=</operator> <operator>&amp;</operator><name>header</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xpp</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>xdl_opts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpp</name><operator>.</operator><name>anchors</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>anchors</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpp</name><operator>.</operator><name>anchors_nr</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>anchors_nr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>ctxlen</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>interhunkctxlen</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>interhunkcontext</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>XDL_EMIT_FUNCNAMES</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>funccontext</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>XDL_EMIT_FUNCCONTEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xdiff_set_find_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>pe</name><operator>-&gt;</operator><name>cflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>diffopts</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_DIFF_OPTS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>diffopts</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>diffopts</name></expr></argument>, <argument><expr><literal type="string">"--unified="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>ctxlen</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>diffopts</name></expr></argument>, <argument><expr><literal type="string">"-u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>ctxlen</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>word_diff</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>init_diff_words_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecbdata</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdi_diff_outf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fn_out_consume</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ecbdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to generate diff for %s"</literal></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>word_diff</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_diff_words_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecbdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>textconv_one</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mf1</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>textconv_two</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mf2</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xdiff_clear_find_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>free_ab_and_return</name>:</label>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>b_two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_compact_summary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_renamed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_renamed</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>DIFF_STATUS_ADDED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"new +l"</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator> <operator>==</operator> <literal type="number">0755</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"new +x"</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="string">"new"</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>DIFF_STATUS_DELETED</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"gone"</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"mode -l"</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"mode +l"</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator> <operator>==</operator> <literal type="number">0644</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator> <operator>==</operator> <literal type="number">0755</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"mode +x"</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator> <operator>==</operator> <literal type="number">0755</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <literal type="number">0777</literal><operator>)</operator> <operator>==</operator> <literal type="number">0644</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"mode -x"</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>builtin_diffstat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_b</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diffstat_t</name></name> <modifier>*</modifier></type><name>diffstat</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>mf1</name></decl>, <decl><type ref="prev"/><name>mf2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diffstat_file</name></name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>same_contents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>complete_rewrite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_PAIR_UNMERGED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>DIFF_STATUS_MODIFIED</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>complete_rewrite</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>diffstat_add</name><argument_list>(<argument><expr><name>diffstat</name></expr></argument>, <argument><expr><name>name_a</name></expr></argument>, <argument><expr><name>name_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_interesting</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>DIFF_STATUS_UNKNOWN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>stat_with_summary</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>comments</name></name> <operator>=</operator> <call><name>get_compact_summary</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>is_renamed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>one</name> <operator>||</operator> <operator>!</operator><name>two</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_unmerged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>same_contents</name> <operator>=</operator> <call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>same_contents</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>added</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>deleted</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>added</name></name> <operator>=</operator> <call><name>diff_filespec_size</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>deleted</name></name> <operator>=</operator> <call><name>diff_filespec_size</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>complete_rewrite</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>deleted</name></name> <operator>=</operator> <call><name>count_lines</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>added</name></name> <operator>=</operator> <call><name>count_lines</name><argument_list>(<argument><expr><name><name>two</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>same_contents</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>xpparam_t</name></type> <name>xpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdemitconf_t</name></type> <name>xecfg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fill_mmfile</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>fill_mmfile</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to read files to diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xecfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpp</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>xdl_opts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpp</name><operator>.</operator><name>anchors</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>anchors</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xpp</name><operator>.</operator><name>anchors_nr</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>anchors_nr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>ctxlen</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>context</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>interhunkctxlen</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>interhunkcontext</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdi_diff_outf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>, <argument><expr><name>discard_hunk_line</name></expr></argument>,

<argument><expr><name>diffstat_consume</name></expr></argument>, <argument><expr><name>diffstat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to generate diffstat for %s"</literal></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>builtin_checkdiff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_b</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_path</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>mf1</name></decl>, <decl><type ref="prev"/><name>mf2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>checkdiff_t</name></name></type> <name>data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>two</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>filename</name></name> <operator>=</operator> <ternary><condition><expr><name>name_b</name></expr> ?</condition><then> <expr><name>name_b</name></expr> </then><else>: <expr><name>name_a</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>lineno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>o</name></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>ws_rule</name></name> <operator>=</operator> <call><name>whitespace_rule</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>attr_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>conflict_marker_size</name></name> <operator>=</operator> <call><name>ll_merge_marker_size</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>attr_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fill_mmfile</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>fill_mmfile</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to read files to diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_and_return</name>;</goto></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>xpparam_t</name></type> <name>xpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdemitconf_t</name></type> <name>xecfg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xecfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>ctxlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>xpp</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdi_diff_outf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>, <argument><expr><name>checkdiff_consume_hunk</name></expr></argument>,

<argument><expr><name>checkdiff_consume</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to generate checkdiff for %s"</literal></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>ws_rule</name></name> <operator>&amp;</operator> <name>WS_BLANK_AT_EOF</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>emit_callback</name></name></type> <name>ecbdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blank_at_eof</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ecbdata</name><operator>.</operator><name>ws_rule</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>ws_rule</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_blank_at_eof</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecbdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blank_at_eof</name> <operator>=</operator> <name><name>ecbdata</name><operator>.</operator><name>blank_at_eof_in_postimage</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blank_at_eof</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>whitespace_error_string</name><argument_list>(<argument><expr><name>WS_BLANK_AT_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s:%d: %s.\n"</literal></expr></argument>,

<argument><expr><name><name>data</name><operator>.</operator><name>filename</name></name></expr></argument>, <argument><expr><name>blank_at_eof</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>status</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>free_and_return</name>:</label>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>status</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>check_failed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>alloc_filespec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>spec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FLEXPTR_ALLOC_STR</name><argument_list>(<argument><expr><name>spec</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>spec</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_filespec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name><name>spec</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>fill_filespec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>oid_valid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <call><name>canon_mode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>spec</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>spec</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>=</operator> <name>oid_valid</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reuse_worktree_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>want_file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>istate</name><operator>-&gt;</operator><name>cache</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>FAST_WORKING_DIRECTORY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>want_file</name> <operator>&amp;&amp;</operator> <call><name>has_object_pack</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>want_file</name> <operator>&amp;&amp;</operator> <call><name>would_convert_to_git</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>index_name_pos</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <name><name>istate</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_VALID</name><operator>)</operator> <operator>||</operator> <call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_uptodate</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>lstat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ie_match_stat</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_populate_gitlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size_only</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dirty</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>dirty_submodule</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dirty</name> <operator>=</operator> <literal type="string">"-dirty"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Subproject commit %s%s\n"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size_only</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>should_free</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>diff_populate_filespec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size_only</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>CHECK_SIZE_ONLY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>conv_flags</name> <init>= <expr><name>global_conv_flags_eol</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>conv_flags</name> <operator>&amp;</operator> <name>CONV_EOL_RNDTRP_DIE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>conv_flags</name> <operator>=</operator> <name>CONV_EOL_RNDTRP_WARN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"internal error: asking to populate invalid file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size_only</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>diff_populate_gitlink</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>size_only</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>||</operator>

<call><name>reuse_worktree_file</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<label><name>err_empty</name>:</label>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<label><name>empty</name>:</label>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>xsize_t</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>empty</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_readlink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err_empty</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>should_free</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size_only</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>would_convert_to_git</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CHECK_BINARY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>big_file_threshold</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err_empty</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>xmmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>should_munmap</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>convert_to_git</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>conv_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>should_munmap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>should_free</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size_only</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CHECK_BINARY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>oid_object_info</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to read %s"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size_only</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>big_file_threshold</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>repo_read_object_file</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to read %s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>should_free</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_free_filespec_blob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>should_free</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>should_munmap</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>should_free</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>should_munmap</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>should_free</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>should_munmap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_free_filespec_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>diff_free_filespec_blob</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cnt_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prep_temp_blob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_tempfile</name></name> <modifier>*</modifier></type><name>temp</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>blob</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>tempfile</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path_dup</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><call><name>basename</name><argument_list>(<argument><expr><name>path_dup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>checkout_metadata</name></name></type> <name>meta</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_checkout_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tempfile</name></expr></argument>, <argument><expr><literal type="string">"XXXXXX_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tempfile</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>tempfile</name></name> <operator>=</operator> <call><name>mks_tempfile_ts</name><argument_list>(<argument><expr><name><name>tempfile</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>temp</name><operator>-&gt;</operator><name>tempfile</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"unable to create temp-file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>convert_to_working_tree</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>blob</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>blob</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>tempfile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>close_tempfile_gently</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"unable to write temp-file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>get_tempfile_path</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oid_to_hex_r</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%06o"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tempfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>diff_tempfile</name></name> <modifier>*</modifier></type><name>prepare_temp_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_tempfile</name></name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>claim_diff_tempfile</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<label><name>not_a_valid_file</name>:</label>

<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"/dev/null"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>temp</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>||</operator>

<call><name>reuse_worktree_file</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>not_a_valid_file</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"stat(%s)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_readlink</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"readlink(%s)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prep_temp_blob</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_oid</name></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name></expr> ?</condition><then>

<expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr> </then><else>: <expr><name>S_IFLNK</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>temp</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oid_to_hex_r</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oid_to_hex_r</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>temp</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%06o"</literal></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>temp</name></expr>;</return>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot read data blob for %s"</literal></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prep_temp_blob</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>,

<argument><expr><name><name>one</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>temp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_external_diff_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>argv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>df</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_tempfile</name></name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><call><name>prepare_temp_file</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>hex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>temp</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_external_diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgm</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>other</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xfrm_msg</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>argv</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>env</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><name>pgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>one</name> <operator>&amp;&amp;</operator> <name>two</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>add_external_diff_name</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>other</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_external_diff_name</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>add_external_diff_name</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><name>xfrm_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><literal type="string">"GIT_DIFF_PATH_COUNTER=%d"</literal></expr></argument>, <argument><expr><operator>++</operator><name><name>o</name><operator>-&gt;</operator><name>diff_path_counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>, <argument><expr><literal type="string">"GIT_DIFF_PATH_TOTAL=%d"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_free_filespec_data</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>run_command_v_opt_cd_env</name><argument_list>(<argument><expr><name><name>argv</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><name>RUN_USING_SHELL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>env</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"external diff died, stopping at %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>remove_tempfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>similarity_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>MAX_SCORE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>diff_abbrev_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>abbrev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>startup_info</name><operator>-&gt;</operator><name>have_repository</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>abbrev</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>abbrev</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>abbrev</name> <operator>=</operator> <name>FALLBACK_DEFAULT_ABBREV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>abbrev</name> <operator>&gt;</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"oid abbreviation out of range: %d"</literal></expr></argument>, <argument><expr><name>abbrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>abbrev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hex</name><index>[<expr><name>abbrev</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hex</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_metainfo</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>other</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>must_show_header</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>use_color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name>use_color</name></expr></argument>, <argument><expr><name>DIFF_METAINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name> <init>= <expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name>use_color</name></expr></argument>, <argument><expr><name>DIFF_RESET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line_prefix</name> <init>= <expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>must_show_header</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>PATH_MAX</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DIFF_STATUS_COPIED</name></expr>:</case>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s%ssimilarity index %d%%"</literal></expr></argument>,

<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><call><name>similarity_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s\n%s%scopy from "</literal></expr></argument>,

<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s\n%s%scopy to "</literal></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_STATUS_RENAMED</name></expr>:</case>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s%ssimilarity index %d%%"</literal></expr></argument>,

<argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><call><name>similarity_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s\n%s%srename from "</literal></expr></argument>,

<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s\n%s%srename to "</literal></expr></argument>,

<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>other</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_STATUS_MODIFIED</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s%sdissimilarity index %d%%%s\n"</literal></expr></argument>,

<argument><expr><name>line_prefix</name></expr></argument>,

<argument><expr><name>set</name></expr></argument>, <argument><expr><call><name>similarity_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<default>default:</default>

<expr_stmt><expr><operator>*</operator><name>must_show_header</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>one</name> <operator>&amp;&amp;</operator> <name>two</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hexsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>abbrev</name> <init>= <expr><ternary><condition><expr><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>full_index</name></name></expr> ?</condition><then> <expr><name>hexsz</name></expr> </then><else>: <expr><name>DEFAULT_ABBREV</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>binary</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>mf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>fill_mmfile</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><call><name>fill_mmfile</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>abbrev</name> <operator>=</operator> <name>hexsz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s%sindex %s..%s"</literal></expr></argument>, <argument><expr><name>line_prefix</name></expr></argument>, <argument><expr><name>set</name></expr></argument>,

<argument><expr><call><name>diff_abbrev_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>abbrev</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>diff_abbrev_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>abbrev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">" %06o"</literal></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_diff_cmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgm</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>other</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_path</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xfrm_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>complete_rewrite</name> <init>= <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>DIFF_STATUS_MODIFIED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>must_show_header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>allow_external</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>drv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>drv</name> <operator>=</operator> <call><name>userdiff_find_by_path</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>attr_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>drv</name> <operator>&amp;&amp;</operator> <name><name>drv</name><operator>-&gt;</operator><name>external</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pgm</name> <operator>=</operator> <name><name>drv</name><operator>-&gt;</operator><name>external</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_metainfo</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>must_show_header</name></expr></argument>,

<argument><expr><call><name>want_color</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>pgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>xfrm_msg</name> <operator>=</operator> <ternary><condition><expr><name><name>msg</name><operator>-&gt;</operator><name>len</name></name></expr> ?</condition><then> <expr><name><name>msg</name><operator>-&gt;</operator><name>buf</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pgm</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>run_external_diff</name><argument_list>(<argument><expr><name>pgm</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><name>xfrm_msg</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>one</name> <operator>&amp;&amp;</operator> <name>two</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>builtin_diff</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><ternary><condition><expr><name>other</name></expr> ?</condition><then> <expr><name>other</name></expr> </then><else>: <expr><name>name</name></expr></else></ternary></expr></argument>,

<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><name>xfrm_msg</name></expr></argument>, <argument><expr><name>must_show_header</name></expr></argument>,

<argument><expr><name>o</name></expr></argument>, <argument><expr><name>complete_rewrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"* Unmerged path %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_fill_oid_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>one</name><operator>-&gt;</operator><name>is_stdin</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"stat '%s'"</literal></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>index_path</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot hash %s"</literal></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>strip_prefix</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prefix_length</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>namep</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>otherp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>namep</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_absolute_path</name><argument_list>(<argument><expr><operator>*</operator><name>namep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>namep</name> <operator>+=</operator> <name>prefix_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>namep</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>namep</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>otherp</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_absolute_path</name><argument_list>(<argument><expr><operator>*</operator><name>otherp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>otherp</name> <operator>+=</operator> <name>prefix_length</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>*</operator><name>otherp</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><operator>*</operator><name>otherp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgm</name> <init>= <expr><call><name>external_diff</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_path</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>other</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>two</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>attr_path</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>prefix_length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strip_prefix</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>allow_external</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pgm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DIFF_PAIR_UNMERGED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>run_diff_cmd</name><argument_list>(<argument><expr><name>pgm</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>attr_path</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>diff_fill_oid_info</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_fill_oid_info</name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgm</name> <operator>&amp;&amp;</operator>

<call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name>S_IFMT</name> <operator>&amp;</operator> <name><name>one</name><operator>-&gt;</operator><name>mode</name></name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>S_IFMT</name> <operator>&amp;</operator> <name><name>two</name><operator>-&gt;</operator><name>mode</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>null</name> <init>= <expr><call><name>alloc_filespec</name><argument_list>(<argument><expr><name><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>run_diff_cmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>attr_path</name></expr></argument>,

<argument><expr><name>one</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>,

<argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>null</name> <operator>=</operator> <call><name>alloc_filespec</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_diff_cmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>attr_path</name></expr></argument>,

<argument><expr><name>null</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>run_diff_cmd</name><argument_list>(<argument><expr><name>pgm</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>attr_path</name></expr></argument>,

<argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_diffstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diffstat_t</name></name> <modifier>*</modifier></type><name>diffstat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DIFF_PAIR_UNMERGED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>builtin_diffstat</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>diffstat</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>other</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>prefix_length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strip_prefix</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>diff_fill_oid_info</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_fill_oid_info</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>builtin_diffstat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>,

<argument><expr><name>diffstat</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_checkdiff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>other</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attr_path</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DIFF_PAIR_UNMERGED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>other</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>attr_path</name> <operator>=</operator> <ternary><condition><expr><name>other</name></expr> ?</condition><then> <expr><name>other</name></expr> </then><else>: <expr><name>name</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>prefix_length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strip_prefix</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>diff_fill_oid_info</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_fill_oid_info</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>builtin_checkdiff</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>other</name></expr></argument>, <argument><expr><name>attr_path</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>prep_parse_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>repo_diff_setup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>default_diff_options</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>options</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>output_indicators</name><index>[<expr><name>OUTPUT_INDICATOR_NEW</name></expr>]</index></name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>output_indicators</name><index>[<expr><name>OUTPUT_INDICATOR_OLD</name></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>output_indicators</name><index>[<expr><name>OUTPUT_INDICATOR_CONTEXT</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>abbrev</name></name> <operator>=</operator> <name>DEFAULT_ABBREV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>line_termination</name></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>break_opt</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>rename_limit</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>dirstat_permille</name></name> <operator>=</operator> <name>diff_dirstat_permille_default</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>diff_context_default</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>interhunkcontext</name></name> <operator>=</operator> <name>diff_interhunk_context_default</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>ws_error_highlight</name></name> <operator>=</operator> <name>ws_error_highlight_default</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>rename_empty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>objfind</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>change</name></name> <operator>=</operator> <name>diff_change</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>add_remove</name></name> <operator>=</operator> <name>diff_addremove</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>use_color</name></name> <operator>=</operator> <name>diff_use_color_default</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>detect_rename</name></name> <operator>=</operator> <name>diff_detect_rename_default</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name> <operator>|=</operator> <name>diff_algorithm</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_indent_heuristic</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DIFF_XDL_SET</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>INDENT_HEURISTIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>orderfile</name></name> <operator>=</operator> <name>diff_order_file_cfg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_no_prefix</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>a_prefix</name></name> <operator>=</operator> <name><name>options</name><operator>-&gt;</operator><name>b_prefix</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>diff_mnemonic_prefix</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>a_prefix</name></name> <operator>=</operator> <literal type="string">"a/"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>b_prefix</name></name> <operator>=</operator> <literal type="string">"b/"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>color_moved</name></name> <operator>=</operator> <name>diff_color_moved_default</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>color_moved_ws_handling</name></name> <operator>=</operator> <name>diff_color_moved_ws_default</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prep_parse_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_setup_done</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>check_mask</name> <init>= <expr><name>DIFF_FORMAT_NAME</name> <operator>|</operator>

<name>DIFF_FORMAT_NAME_STATUS</name> <operator>|</operator>

<name>DIFF_FORMAT_CHECKDIFF</name> <operator>|</operator>

<name>DIFF_FORMAT_NO_OUTPUT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hexsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>set_default</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>options</name><operator>-&gt;</operator><name>set_default</name></name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HAS_MULTI_BITS</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <name>check_mask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--name-only, --name-status, --check and -s are mutually exclusive"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HAS_MULTI_BITS</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>pickaxe_opts</name></name> <operator>&amp;</operator> <name>DIFF_PICKAXE_KINDS_MASK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"-G, -S and --find-object are mutually exclusive"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name> <operator>&amp;</operator> <name>XDF_WHITESPACE_FLAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>diff_from_contents</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>diff_from_contents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>find_copies_harder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>detect_rename</name></name> <operator>=</operator> <name>DIFF_DETECT_COPY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>relative_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>prefix_length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>prefix_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_FORMAT_NAME</name> <operator>|</operator>

<name>DIFF_FORMAT_NAME_STATUS</name> <operator>|</operator>

<name>DIFF_FORMAT_CHECKDIFF</name> <operator>|</operator>

<name>DIFF_FORMAT_NO_OUTPUT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DIFF_FORMAT_RAW</name> <operator>|</operator>

<name>DIFF_FORMAT_NUMSTAT</name> <operator>|</operator>

<name>DIFF_FORMAT_DIFFSTAT</name> <operator>|</operator>

<name>DIFF_FORMAT_SHORTSTAT</name> <operator>|</operator>

<name>DIFF_FORMAT_DIRSTAT</name> <operator>|</operator>

<name>DIFF_FORMAT_SUMMARY</name> <operator>|</operator>

<name>DIFF_FORMAT_PATCH</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_FORMAT_PATCH</name> <operator>|</operator>

<name>DIFF_FORMAT_NUMSTAT</name> <operator>|</operator>

<name>DIFF_FORMAT_DIFFSTAT</name> <operator>|</operator>

<name>DIFF_FORMAT_SHORTSTAT</name> <operator>|</operator>

<name>DIFF_FORMAT_DIRSTAT</name> <operator>|</operator>

<name>DIFF_FORMAT_SUMMARY</name> <operator>|</operator>

<name>DIFF_FORMAT_CHECKDIFF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>recursive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>pickaxe_opts</name></name> <operator>&amp;</operator> <name>DIFF_PICKAXE_KINDS_MASK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>recursive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <name>DIFF_FORMAT_PATCH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirty_submodules</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>detect_rename</name></name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>rename_limit</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>rename_limit</name></name> <operator>=</operator> <name>diff_rename_limit_default</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hexsz</name> <operator>&lt;</operator> <name><name>options</name><operator>-&gt;</operator><name>abbrev</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>abbrev</name></name> <operator>=</operator> <name>hexsz</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>quick</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name>DIFF_FORMAT_NO_OUTPUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>exit_with_status</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>diff_path_counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>follow_renames</name></name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>pathspec</name><operator>.</operator><name>nr</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--follow requires exactly one pathspec"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>use_color</name></name> <operator>||</operator> <call><name>external_diff</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>color_moved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>parseopts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_long_opt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>optarg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><operator>*</operator><name>optarg</name> <operator>=</operator> <name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Option '--%s' requires a value"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>optarg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>stat_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>name_width</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>stat_name_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>graph_width</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>stat_graph_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>stat_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><literal type="string">"stat"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name_width</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid --stat value: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><literal type="string">"stat-width"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s expects a numerical value"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><literal type="string">"stat-name-width"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>name_width</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s expects a numerical value"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><literal type="string">"stat-graph-width"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>graph_width</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s expects a numerical value"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><literal type="string">"stat-count"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s expects a numerical value"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"%s should not get here"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name> <operator>|=</operator> <name>DIFF_FORMAT_DIFFSTAT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>stat_name_width</name></name> <operator>=</operator> <name>name_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>stat_graph_width</name></name> <operator>=</operator> <name>graph_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>stat_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>stat_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_dirstat_opt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>errmsg</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_dirstat_params</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Failed to parse --dirstat/-X option parameter:\n%s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>errmsg</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name> <operator>|=</operator> <name>DIFF_FORMAT_DIRSTAT</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>diff_status_letters</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>DIFF_STATUS_ADDED</name></expr>,

<expr><name>DIFF_STATUS_COPIED</name></expr>,

<expr><name>DIFF_STATUS_DELETED</name></expr>,

<expr><name>DIFF_STATUS_MODIFIED</name></expr>,

<expr><name>DIFF_STATUS_RENAMED</name></expr>,

<expr><name>DIFF_STATUS_TYPE_CHANGED</name></expr>,

<expr><name>DIFF_STATUS_UNKNOWN</name></expr>,

<expr><name>DIFF_STATUS_UNMERGED</name></expr>,

<expr><name>DIFF_STATUS_FILTER_AON</name></expr>,

<expr><name>DIFF_STATUS_FILTER_BROKEN</name></expr>,

<expr><literal type="char">'\0'</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name><name>filter_bit</name><index>[<expr><literal type="char">'Z'</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_filter_bits</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter_bit</name><index>[<expr><name>DIFF_STATUS_ADDED</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>diff_status_letters</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filter_bit</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>diff_status_letters</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>filter_bit_tst</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>opt</name><operator>-&gt;</operator><name>filter</name></name> <operator>&amp;</operator> <name><name>filter_bit</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name>status</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>diff_filter_bit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>status</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>prepare_filter_bits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>filter_bit</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name>status</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_diff_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>option</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optarg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>option</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>optch</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prepare_filter_bits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>optch</name> <operator>=</operator> <name><name>optarg</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>optch</name> <operator>&lt;</operator> <literal type="char">'a'</literal> <operator>||</operator> <literal type="char">'z'</literal> <operator>&lt;</operator> <name>optch</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>diff_status_letters</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>filter</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>filter_bit</name><index>[<expr><name>DIFF_STATUS_FILTER_AON</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>optch</name> <operator>=</operator> <name><name>optarg</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>negate</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>optch</name> <operator>&amp;&amp;</operator> <name>optch</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>negate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>optch</name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><name>optch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>negate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>optch</name> <operator>&amp;&amp;</operator> <name>optch</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>filter_bit</name><index>[<expr><name>optch</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown change class '%c' in --diff-filter=%s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>optarg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>negate</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>filter</name></name> <operator>&amp;=</operator> <operator>~</operator><name>bit</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>filter</name></name> <operator>|=</operator> <name>bit</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>enable_patch_output</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name> <operator>&amp;=</operator> <operator>~</operator><name>DIFF_FORMAT_NO_OUTPUT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fmt</name> <operator>|=</operator> <name>DIFF_FORMAT_PATCH</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_ws_error_highlight</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>option</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>option</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>parse_ws_error_highlight</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown value after ws-error-highlight=%.*s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>val</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>ws_error_highlight</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_find_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>option</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>option</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to resolve '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>objfind</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>objfind</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>opt</name><operator>-&gt;</operator><name>objfind</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>pickaxe_opts</name></name> <operator>|=</operator> <name>DIFF_PICKAXE_KIND_OBJFIND</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>recursive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>tree_in_recursive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>objfind</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_anchored</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name> <operator>=</operator> <call><name>DIFF_WITH_ALG</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>PATIENCE_DIFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>anchors</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>anchors_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>options</name><operator>-&gt;</operator><name>anchors_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>anchors</name><index>[<expr><name><name>options</name><operator>-&gt;</operator><name>anchors_nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_binary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_ARG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enable_patch_output</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>binary</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_break_rewrites</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>break_opt</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt1</name></decl>, <decl><type ref="prev"/><name>opt2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opt1</name> <operator>=</operator> <call><name>parse_rename_score</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opt2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s expects &lt;n&gt;/&lt;m&gt; form"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>arg</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>opt2</name> <operator>=</operator> <call><name>parse_rename_score</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s expects &lt;n&gt;/&lt;m&gt; form"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>break_opt</name> <operator>=</operator> <name>opt1</name> <operator>|</operator> <operator>(</operator><name>opt2</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s expects a character, got '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_color_moved</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>color_moved</name></name> <operator>=</operator> <name>COLOR_MOVED_NO</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>diff_color_moved_default</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>color_moved</name></name> <operator>=</operator> <name>diff_color_moved_default</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>color_moved</name></name> <operator>==</operator> <name>COLOR_MOVED_NO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>color_moved</name></name> <operator>=</operator> <name>COLOR_MOVED_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cm</name> <init>= <expr><call><name>parse_color_moved</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cm</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad --color-moved argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>color_moved</name></name> <operator>=</operator> <name>cm</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_color_moved_ws</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cm</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>color_moved_ws_handling</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cm</name> <operator>=</operator> <call><name>parse_color_moved_ws</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cm</name> <operator>&amp;</operator> <name>COLOR_MOVED_WS_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid mode '%s' in --color-moved-ws"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>color_moved_ws_handling</name></name> <operator>=</operator> <name>cm</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_color_words</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>use_color</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>word_diff</name></name> <operator>=</operator> <name>DIFF_WORDS_COLOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>word_regex</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_compact_summary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_ARG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>stat_with_summary</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>stat_with_summary</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name> <operator>|=</operator> <name>DIFF_FORMAT_DIFFSTAT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_diff_algorithm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>value</name> <init>= <expr><call><name>parse_algorithm_value</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"option diff-algorithm accepts \"myers\", "</literal>

<literal type="string">"\"minimal\", \"patience\" and \"histogram\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DIFF_XDL_CLR</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>NEED_MINIMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name> <operator>&amp;=</operator> <operator>~</operator><name>XDF_DIFF_ALGORITHM_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name> <operator>|=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_dirstat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><literal type="string">"cumulative"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"how come --cumulative take a value?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"cumulative"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><literal type="string">"dirstat-by-file"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parse_dirstat_opt</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="string">"files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>parse_dirstat_opt</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><ternary><condition><expr><name>arg</name></expr> ?</condition><then> <expr><name>arg</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_find_copies</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>rename_score</name></name> <operator>=</operator> <call><name>parse_rename_score</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid argument to %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>detect_rename</name></name> <operator>==</operator> <name>DIFF_DETECT_COPY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>find_copies_harder</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>detect_rename</name></name> <operator>=</operator> <name>DIFF_DETECT_COPY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_find_renames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>rename_score</name></name> <operator>=</operator> <call><name>parse_rename_score</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid argument to %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>detect_rename</name></name> <operator>=</operator> <name>DIFF_DETECT_RENAME</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_follow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_ARG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>follow_renames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>default_follow_renames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>follow_renames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_ignore_submodules</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"all"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>override_submodule_config</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>handle_ignore_submodules_arg</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_line_prefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optarg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>line_prefix</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>line_prefix_length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>line_prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_setup_line_prefix</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_no_prefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optarg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_ARG</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>a_prefix</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>b_prefix</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>parse_opt_result</name></name></type> <name>diff_opt_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>prefix_filename</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>xfopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>close_file</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>use_color</name></name> <operator>!=</operator> <name>GIT_COLOR_ALWAYS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>use_color</name></name> <operator>=</operator> <name>GIT_COLOR_NEVER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_patience</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_ARG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name> <operator>=</operator> <call><name>DIFF_WITH_ALG</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>PATIENCE_DIFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>options</name><operator>-&gt;</operator><name>anchors_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>anchors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>anchors_nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_pickaxe_regex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>pickaxe</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>pickaxe_opts</name></name> <operator>|=</operator> <name>DIFF_PICKAXE_KIND_G</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_pickaxe_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>pickaxe</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>pickaxe_opts</name></name> <operator>|=</operator> <name>DIFF_PICKAXE_KIND_S</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_relative</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>relative_name</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_submodule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"log"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_submodule_params</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to parse --submodule option parameter: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_textconv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_ARG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>allow_textconv</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>allow_textconv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>textconv_set_via_cmdline</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_unified</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s expects a numerical value"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"--unified"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>enable_patch_output</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_word_diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"plain"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>word_diff</name></name> <operator>=</operator> <name>DIFF_WORDS_PLAIN</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"color"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>use_color</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>word_diff</name></name> <operator>=</operator> <name>DIFF_WORDS_COLOR</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"porcelain"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>word_diff</name></name> <operator>=</operator> <name>DIFF_WORDS_PORCELAIN</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>word_diff</name></name> <operator>=</operator> <name>DIFF_WORDS_NONE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad --word-diff argument: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>word_diff</name></name> <operator>==</operator> <name>DIFF_WORDS_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>word_diff</name></name> <operator>=</operator> <name>DIFF_WORDS_PLAIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_opt_word_diff_regex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>word_diff</name></name> <operator>==</operator> <name>DIFF_WORDS_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>word_diff</name></name> <operator>=</operator> <name>DIFF_WORDS_PLAIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>word_regex</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prep_parse_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>parseopts</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_GROUP</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Diff output format options"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BITOP</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="string">"patch"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate patch"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_FORMAT_PATCH</name></expr></argument>, <argument><expr><name>DIFF_FORMAT_NO_OUTPUT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="string">"no-patch"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"suppress diff output"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_FORMAT_NO_OUTPUT</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BITOP</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate patch"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_FORMAT_PATCH</name></expr></argument>, <argument><expr><name>DIFF_FORMAT_NO_OUTPUT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="char">'U'</literal></expr></argument>, <argument><expr><literal type="string">"unified"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;n&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate diffs with &lt;n&gt; lines context"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_OPTARG</name></expr></argument>, <argument><expr><name>diff_opt_unified</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="string">"function-context"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>funccontext</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate diffs with &lt;n&gt; lines context"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"raw"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate the diff in raw format"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_FORMAT_RAW</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BITOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"patch-with-raw"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"synonym for '-p --raw'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_FORMAT_PATCH</name> <operator>|</operator> <name>DIFF_FORMAT_RAW</name></expr></argument>,

<argument><expr><name>DIFF_FORMAT_NO_OUTPUT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BITOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"patch-with-stat"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"synonym for '-p --stat'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_FORMAT_PATCH</name> <operator>|</operator> <name>DIFF_FORMAT_DIFFSTAT</name></expr></argument>,

<argument><expr><name>DIFF_FORMAT_NO_OUTPUT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"numstat"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"machine friendly --stat"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_FORMAT_NUMSTAT</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"shortstat"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"output only the last line of --stat"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_FORMAT_SHORTSTAT</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="string">"dirstat"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;param1,param2&gt;..."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"output the distribution of relative amount of changes for each sub-directory"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_OPTARG</name></expr></argument>,

<argument><expr><name>diff_opt_dirstat</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"cumulative"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"synonym for --dirstat=cumulative"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_NOARG</name></expr></argument>,

<argument><expr><name>diff_opt_dirstat</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"dirstat-by-file"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;param1,param2&gt;..."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"synonym for --dirstat=files,param1,param2..."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_OPTARG</name></expr></argument>,

<argument><expr><name>diff_opt_dirstat</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"warn if changes introduce conflict markers or whitespace errors"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_FORMAT_CHECKDIFF</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"summary"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"condensed summary such as creations, renames and mode changes"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_FORMAT_SUMMARY</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"name-only"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show only names of changed files"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_FORMAT_NAME</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"name-status"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show only names and status of changed files"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_FORMAT_NAME_STATUS</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"stat"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;width&gt;[,&lt;name-width&gt;[,&lt;count&gt;]]"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate diffstat"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_OPTARG</name></expr></argument>, <argument><expr><name>diff_opt_stat</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"stat-width"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;width&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate diffstat with a given width"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_stat</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"stat-name-width"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;width&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate diffstat with a given name width"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_stat</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"stat-graph-width"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;width&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate diffstat with a given graph width"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_stat</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"stat-count"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;count&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate diffstat with limited lines"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_stat</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"compact-summary"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate compact summary in diffstat"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NOARG</name></expr></argument>, <argument><expr><name>diff_opt_compact_summary</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"binary"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"output a binary diff that can be applied"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_NOARG</name></expr></argument>, <argument><expr><name>diff_opt_binary</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"full-index"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>full_index</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show full pre- and post-image object names on the \"index\" lines"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_COLOR_FLAG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"color"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show colored diff"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ws-error-highlight"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;kind&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_ws_error_highlight</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_SET_INT</name><argument_list>(<argument><expr><literal type="char">'z'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>line_termination</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"do not munge pathnames and use NULs as output field terminators in --raw or --numstat"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT__ABBREV</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>abbrev</name></name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"src-prefix"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>a_prefix</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;prefix&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show the given source prefix instead of \"a/\""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"dst-prefix"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>b_prefix</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;prefix&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show the given destination prefix instead of \"b/\""</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"line-prefix"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;prefix&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"prepend an additional prefix to every line of output"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_line_prefix</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no-prefix"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"do not show any source or destination prefix"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_NOARG</name></expr></argument>, <argument><expr><name>diff_opt_no_prefix</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_INTEGER_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"inter-hunk-context"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>interhunkcontext</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show context between diff hunks up to the specified number of lines"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"output-indicator-new"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_indicators</name><index>[<expr><name>OUTPUT_INDICATOR_NEW</name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;char&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"specify the character to indicate a new line instead of '+'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_char</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"output-indicator-old"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_indicators</name><index>[<expr><name>OUTPUT_INDICATOR_OLD</name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;char&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"specify the character to indicate an old line instead of '-'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_char</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"output-indicator-context"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>output_indicators</name><index>[<expr><name>OUTPUT_INDICATOR_CONTEXT</name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;char&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"specify the character to indicate a context instead of ' '"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_char</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_GROUP</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Diff rename options"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>, <argument><expr><literal type="string">"break-rewrites"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>break_opt</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;n&gt;[/&lt;m&gt;]"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"break complete rewrite changes into pairs of delete and create"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_OPTARG</name></expr></argument>,

<argument><expr><name>diff_opt_break_rewrites</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="string">"find-renames"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;n&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"detect renames"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_OPTARG</name></expr></argument>,

<argument><expr><name>diff_opt_find_renames</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_SET_INT_F</name><argument_list>(<argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="string">"irreversible-delete"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>irreversible_delete</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"omit the preimage for deletes"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="string">"find-copies"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;n&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"detect copies"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_OPTARG</name></expr></argument>,

<argument><expr><name>diff_opt_find_copies</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"find-copies-harder"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>find_copies_harder</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use unmodified files as source to find copies"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_SET_INT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no-renames"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>detect_rename</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"disable rename detection"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"rename-empty"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>rename_empty</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use empty blobs as rename source"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"follow"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"continue listing the history of a file beyond renames"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NOARG</name></expr></argument>, <argument><expr><name>diff_opt_follow</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_INTEGER</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>rename_limit</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"prevent rename/copy detection if the number of rename/copy targets exceeds given limit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_GROUP</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Diff algorithm options"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"minimal"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"produce the smallest possible diff"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XDF_NEED_MINIMAL</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="string">"ignore-all-space"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ignore whitespace when comparing lines"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XDF_IGNORE_WHITESPACE</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><literal type="string">"ignore-space-change"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ignore changes in amount of whitespace"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XDF_IGNORE_WHITESPACE_CHANGE</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ignore-space-at-eol"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ignore changes in whitespace at EOL"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XDF_IGNORE_WHITESPACE_AT_EOL</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ignore-cr-at-eol"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ignore carrier-return at the end of line"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XDF_IGNORE_CR_AT_EOL</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ignore-blank-lines"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ignore changes whose lines are all blank"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XDF_IGNORE_BLANK_LINES</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"indent-heuristic"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"heuristic to shift diff hunk boundaries for easy reading"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XDF_INDENT_HEURISTIC</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"patience"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate diff using the \"patience diff\" algorithm"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_NOARG</name></expr></argument>,

<argument><expr><name>diff_opt_patience</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BITOP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"histogram"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>xdl_opts</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate diff using the \"histogram diff\" algorithm"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>XDF_HISTOGRAM_DIFF</name></expr></argument>, <argument><expr><name>XDF_DIFF_ALGORITHM_MASK</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"diff-algorithm"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;algorithm&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"choose a diff algorithm"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_diff_algorithm</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"anchored"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;text&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"generate diff using the \"anchored diff\" algorithm"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_anchored</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"word-diff"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;mode&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show word diff, using &lt;mode&gt; to delimit changed words"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_OPTARG</name></expr></argument>, <argument><expr><name>diff_opt_word_diff</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"word-diff-regex"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;regex&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use &lt;regex&gt; to decide what a word is"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_word_diff_regex</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"color-words"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;regex&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"equivalent to --word-diff=color --word-diff-regex=&lt;regex&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_OPTARG</name></expr></argument>, <argument><expr><name>diff_opt_color_words</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"color-moved"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;mode&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"moved lines of code are colored differently"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_OPTARG</name></expr></argument>, <argument><expr><name>diff_opt_color_moved</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"color-moved-ws"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;mode&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"how white spaces are ignored in --color-moved"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>diff_opt_color_moved_ws</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_GROUP</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Other diff options"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"relative"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;prefix&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"when run from subdir, exclude changes outside and show relative paths"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_OPTARG</name></expr></argument>,

<argument><expr><name>diff_opt_relative</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>text</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"treat all files as text"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>reverse_diff</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"swap two inputs, reverse the diff"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"exit-code"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>exit_with_status</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"exit with 1 if there were differences, 0 otherwise"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"quiet"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>quick</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"disable all output of the program"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ext-diff"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>allow_external</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"allow an external diff helper to be executed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"textconv"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"run external text conversion filters when comparing binary files"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NOARG</name></expr></argument>, <argument><expr><name>diff_opt_textconv</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ignore-submodules"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;when&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ignore changes to submodules in the diff generation"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_OPTARG</name></expr></argument>,

<argument><expr><name>diff_opt_ignore_submodules</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"submodule"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;format&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"specify how differences in submodules are shown"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name> <operator>|</operator> <name>PARSE_OPT_OPTARG</name></expr></argument>,

<argument><expr><name>diff_opt_submodule</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_SET_INT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ita-invisible-in-index"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>ita_invisible_in_index</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"hide 'git add -N' entries from the index"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_SET_INT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ita-visible-in-index"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>ita_invisible_in_index</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"treat 'git add -N' entries as real in the index"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"look for differences that change the number of occurrences of the specified string"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>diff_opt_pickaxe_string</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;regex&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"look for differences that change the number of occurrences of the specified regex"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>diff_opt_pickaxe_regex</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"pickaxe-all"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>pickaxe_opts</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show all changes in the changeset with -S or -G"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_PICKAXE_ALL</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"pickaxe-regex"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>pickaxe_opts</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"treat &lt;string&gt; in -S as extended POSIX regular expression"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>DIFF_PICKAXE_REGEX</name></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_FILENAME</name><argument_list>(<argument><expr><literal type="char">'O'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>-&gt;</operator><name>orderfile</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"control the order in which files appear in the output"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"find-object"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;object-id&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"look for differences that change the number of occurrences of the specified object"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_find_object</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"diff-filter"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"[(A|C|D|M|R|T|U|X|B)...[*]]"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"select files by diff type"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>diff_opt_diff_filter</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"output"</literal></expr>, <expr><name>options</name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;file&gt;"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Output to a specific file"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NONEG</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>diff_opt_output</name></expr> }</block></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>parseopts</name></name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>parseopts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>parseopts</name></name></expr></argument>, <argument><expr><name>parseopts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parseopts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>diff_opt_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>av</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ac</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prefix</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ac</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>av</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>parseopts</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>PARSE_OPT_KEEP_DASHDASH</name> <operator>|</operator>

<name>PARSE_OPT_KEEP_UNKNOWN</name> <operator>|</operator>

<name>PARSE_OPT_NO_INTERNAL_HELP</name> <operator>|</operator>

<name>PARSE_OPT_ONE_SHOT</name> <operator>|</operator>

<name>PARSE_OPT_STOP_AT_NON_OPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ac</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_rename_score</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>dot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><operator>*</operator><name>cp_p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>cp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>dot</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>==</operator> <literal type="char">'.'</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dot</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ch</name> <operator>==</operator> <literal type="char">'%'</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <ternary><condition><expr><name>dot</name></expr> ?</condition><then> <expr><name>scale</name><operator>*</operator><literal type="number">100</literal></expr> </then><else>: <expr><literal type="number">100</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>scale</name> <operator>&lt;</operator> <literal type="number">100000</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>scale</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <operator>(</operator><name>num</name><operator>*</operator><literal type="number">10</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>cp_p</name> <operator>=</operator> <name>cp</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>num</name> <operator>&gt;=</operator> <name>scale</name><operator>)</operator></expr> ?</condition><then> <expr><name>MAX_SCORE</name></expr> </then><else>: <expr><operator>(</operator><name>MAX_SCORE</name> <operator>*</operator> <name>num</name> <operator>/</operator> <name>scale</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name></type> <name>diff_queued_diff</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>diff_q</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>dp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>dp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>diff_queue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>dp</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>one</name></name> <operator>=</operator> <name>one</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dp</name><operator>-&gt;</operator><name>two</name></name> <operator>=</operator> <name>two</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>queue</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>dp</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_free_filepair</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_filespec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_filespec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>diff_aligned_abbrev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>abblen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>abbrev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>abbrev</name> <operator>=</operator> <call><name>diff_abbrev_oid</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>print_sha1_ellipsis</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>abbrev</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>abblen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>abbrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>abblen</name> <operator>&lt;</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>-</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>hex</name><index>[<expr><name>GIT_MAX_HEXSZ</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>abblen</name> <operator>&amp;&amp;</operator> <name>abblen</name> <operator>&lt;=</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%.*s"</literal></expr></argument>, <argument><expr><name>abbrev</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">3</literal><operator>-</operator><name>abblen</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s..."</literal></expr></argument>, <argument><expr><name>abbrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>hex</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_flush_raw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>line_termination</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>line_termination</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inter_name_termination</name> <init>= <expr><ternary><condition><expr><name>line_termination</name></expr> ?</condition><then> <expr><literal type="char">'\t'</literal></expr> </then><else>: <expr><literal type="char">'\0'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <name>DIFF_FORMAT_NAME_STATUS</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">":%06o %06o %s "</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>,

<argument><expr><call><name>diff_aligned_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>abbrev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>,

<argument><expr><call><name>diff_aligned_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>abbrev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%c%03d%c"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><call><name>similarity_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>inter_name_termination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%c%c"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>inter_name_termination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>DIFF_STATUS_COPIED</name> <operator>||</operator>

<name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>DIFF_STATUS_RENAMED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name_b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name_a</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>name_b</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strip_prefix</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name>name_a</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>inter_name_termination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name>name_b</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>line_termination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name_b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name_a</name> <operator>=</operator> <ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>name_b</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strip_prefix</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name>name_a</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>line_termination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>diff_unmodified_pair</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>two</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DIFF_PAIR_UNMERGED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>DIFF_PAIR_MODE_CHANGED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>strcmp</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>&amp;&amp;</operator> <name><name>two</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>&amp;&amp;</operator>

<call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>one</name><operator>-&gt;</operator><name>dirty_submodule</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>two</name><operator>-&gt;</operator><name>dirty_submodule</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>two</name><operator>-&gt;</operator><name>oid_valid</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_flush_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>diff_unmodified_pair</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>run_diff</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_flush_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diffstat_t</name></name> <modifier>*</modifier></type><name>diffstat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>diff_unmodified_pair</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>run_diffstat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>diffstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_flush_checkdiff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>diff_unmodified_pair</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>run_checkdiff</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>diff_queue_is_empty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>diff_unmodified_pair</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DIFF_DEBUG</name></expr></cpp:if>

<function><type><name>void</name></type> <name>diff_debug_filespec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>one</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"queue[%d] %s (%s) %s %06o %s\n"</literal></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><ternary><condition><expr><name>one</name></expr> ?</condition><then> <expr><name>one</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"valid"</literal></expr> </then><else>: <expr><literal type="string">"invalid"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>oid_valid</name></name></expr> ?</condition><then> <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"queue[%d] %s size %lu\n"</literal></expr></argument>,

<argument><expr><name>x</name></expr></argument>, <argument><expr><ternary><condition><expr><name>one</name></expr> ?</condition><then> <expr><name>one</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_debug_filepair</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>diff_debug_filespec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_debug_filespec</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"two"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"score %d, status %c rename_used %d broken %d\n"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr> </then><else>: <expr><literal type="char">'?'</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>rename_used</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>broken_pair</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_debug_queue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"q-&gt;nr = %d\n"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>diff_debug_filepair</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_resolve_rename_copy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>diff_debug_queue</name><argument_list>(<argument><expr><literal type="string">"resolve-rename-copy"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>DIFF_PAIR_UNMERGED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>DIFF_STATUS_UNMERGED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>DIFF_STATUS_ADDED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>DIFF_STATUS_DELETED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>DIFF_PAIR_TYPE_CHANGED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>DIFF_STATUS_TYPE_CHANGED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>DIFF_PAIR_RENAME</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>DIFF_STATUS_MODIFIED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>--</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>rename_used</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>DIFF_STATUS_COPIED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>DIFF_STATUS_RENAMED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name> <operator>||</operator>

<name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>dirty_submodule</name></name> <operator>||</operator>

<name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>dirty_submodule</name></name> <operator>||</operator>

<call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>DIFF_STATUS_MODIFIED</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"feeding unmodified %s to diffcore"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>DIFF_STATUS_UNKNOWN</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>diff_debug_queue</name><argument_list>(<argument><expr><literal type="string">"resolve-rename-copy done"</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_pair_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DIFF_STATUS_UNKNOWN</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"internal error in diff-resolve-rename-copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_one_pair</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fmt</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>&amp;</operator> <name>DIFF_FORMAT_CHECKDIFF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_flush_checkdiff</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>fmt</name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_FORMAT_RAW</name> <operator>|</operator> <name>DIFF_FORMAT_NAME_STATUS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_flush_raw</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>fmt</name> <operator>&amp;</operator> <name>DIFF_FORMAT_NAME</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name_b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name_a</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>name_b</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strip_prefix</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>diff_line_prefix</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name>name_a</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>line_termination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_file_mode_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newdelete</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>fs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fs</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">" %s mode %06o "</literal></expr></argument>, <argument><expr><name>newdelete</name></expr></argument>, <argument><expr><name><name>fs</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">" %s "</literal></expr></argument>, <argument><expr><name>newdelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_SUMMARY</name></expr></argument>,

<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_mode_change</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>show_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">" mode change %06o =&gt; %06o"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_SUMMARY</name></expr></argument>,

<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_rename_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>renamecopy</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>names</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pprint_rename</name><argument_list>(<argument><expr><operator>&amp;</operator><name>names</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">" %s %s (%d%%)\n"</literal></expr></argument>,

<argument><expr><name>renamecopy</name></expr></argument>, <argument><expr><name><name>names</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>similarity_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_SUMMARY</name></expr></argument>,

<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_mode_change</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_summary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DIFF_STATUS_DELETED</name></expr>:</case>

<expr_stmt><expr><call><name>show_file_mode_name</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"delete"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_STATUS_ADDED</name></expr>:</case>

<expr_stmt><expr><call><name>show_file_mode_name</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_STATUS_COPIED</name></expr>:</case>

<expr_stmt><expr><call><name>show_rename_copy</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"copy"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DIFF_STATUS_RENAMED</name></expr>:</case>

<expr_stmt><expr><call><name>show_rename_copy</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"rename"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">" rewrite "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">" (%d%%)\n"</literal></expr></argument>, <argument><expr><call><name>similarity_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_SUMMARY</name></expr></argument>,

<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>show_mode_change</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<struct>struct <name>patch_id_t</name> <block>{

<decl_stmt><decl><type><name>git_hash_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>patchlen</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_space</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>dst</name> <operator>-</operator> <name>line</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>flush_one_hunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>git_hash_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>GIT_MAX_RAWSZ</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>final_fn</name></name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>init_fn</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>carry</name> <operator>+=</operator> <name><name>result</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>hash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>hash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>patch_id_consume</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>patch_id_t</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>new_len</name> <operator>=</operator> <call><name>remove_space</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>patchlen</name></name> <operator>+=</operator> <name>new_len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>patch_id_add_string</name><parameter_list>(<parameter><decl><type><name>git_hash_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>patch_id_add_mode</name><parameter_list>(<parameter><decl><type><name>git_hash_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%06o"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_get_patch_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>diff_header_only</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>git_hash_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>patch_id_t</name></name></type> <name>data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>init_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>patch_id_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>ctx</name></name> <operator>=</operator> <operator>&amp;</operator><name>ctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>xpparam_t</name></type> <name>xpp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xdemitconf_t</name></type> <name>xecfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>mf1</name></decl>, <decl><type ref="prev"/><name>mf2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len1</name></decl>, <decl><type ref="prev"/><name>len2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xpp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xecfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"internal diff status error"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>DIFF_STATUS_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_unmodified_pair</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>DIFF_PAIR_UNMERGED</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>diff_fill_oid_info</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_fill_oid_info</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len1</name> <operator>=</operator> <call><name>remove_space</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>remove_space</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>patch_id_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"diff--git"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>patch_id_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"a/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>patch_id_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"b/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>patch_id_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"newfilemode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>patch_id_add_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>patch_id_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"---/dev/null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>patch_id_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"+++b/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>patch_id_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"deletedfilemode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>patch_id_add_mode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>patch_id_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"---a/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>patch_id_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"+++/dev/null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>patch_id_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"---a/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>patch_id_add_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"+++b/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>diff_header_only</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fill_mmfile</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>fill_mmfile</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to read files to diff"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>diff_filespec_is_binary</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>update_fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>xpp</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>ctxlen</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xecfg</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xdi_diff_outf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mf2</name></expr></argument>, <argument><expr><name>discard_hunk_line</name></expr></argument>,

<argument><expr><name>patch_id_consume</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xecfg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to generate patch-id diff for %s"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stable</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flush_one_hunk</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stable</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>the_hash_algo</name><operator>-&gt;</operator><name>final_fn</name></name><argument_list>(<argument><expr><name><name>oid</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>diff_flush_patch_id</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>diff_header_only</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>diff_get_patch_id</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>diff_header_only</name></expr></argument>, <argument><expr><name>stable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DIFF_QUEUE_CLEAR</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_summary_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DIFF_STATUS_DELETED</name></expr>:</case>

<case>case <expr><name>DIFF_STATUS_ADDED</name></expr>:</case>

<case>case <expr><name>DIFF_STATUS_COPIED</name></expr>:</case>

<case>case <expr><name>DIFF_STATUS_RENAMED</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;&amp;</operator>

<name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>rename_limit_warning</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"inexact rename detection was skipped due to too many files."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>degrade_cc_to_c_warning</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"only found copies from modified paths due to too many files."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>rename_limit_advice</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"you may want to set your %s variable to at least "</literal>

<literal type="string">"%d and retry the command."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>diff_warn_rename_limit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>needed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>degraded_cc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>degraded_cc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>degrade_cc_to_c_warning</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>needed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>rename_limit_warning</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>needed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>rename_limit_advice</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diff_flush_patch_all_file_pairs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>emitted_diff_symbols</name></name></type> <name>esm</name> <init>= <expr><name>EMITTED_DIFF_SYMBOLS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>WSEH_NEW</name> <operator>&amp;</operator> <name>WS_RULE_MASK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"WS rules bit mask overlaps with diff symbol flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>color_moved</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name></name> <operator>=</operator> <operator>&amp;</operator><name>esm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_pair_status</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_flush_patch</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>color_moved</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name></type> <name>add_lines</name></decl>, <decl><type ref="prev"/><name>del_lines</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>color_moved_ws_handling</name></name> <operator>&amp;</operator>

<name>COLOR_MOVED_WS_ALLOW_INDENTATION_CHANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>color_moved_ws_handling</name></name> <operator>|=</operator> <name>XDF_IGNORE_WHITESPACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hashmap_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>del_lines</name></expr></argument>, <argument><expr><name>moved_entry_cmp</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashmap_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>add_lines</name></expr></argument>, <argument><expr><name>moved_entry_cmp</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_lines_to_move_detection</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add_lines</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_color_as_moved</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>add_lines</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>del_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>color_moved</name></name> <operator>==</operator> <name>COLOR_MOVED_ZEBRA_DIM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dim_moved_lines</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hashmap_free_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>add_lines</name></expr></argument>, <argument><expr>struct <name>moved_entry</name></expr></argument>,

<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashmap_free_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>del_lines</name></expr></argument>, <argument><expr>struct <name>moved_entry</name></expr></argument>,

<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>esm</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_diff_symbol_from_struct</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>esm</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>esm</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>esm</name><operator>.</operator><name>buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>esm</name><operator>.</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>emitted_symbols</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_flush</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>output_format</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>output_format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>separator</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dirstat_by_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_queue</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_format</name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_FORMAT_RAW</name> <operator>|</operator>

<name>DIFF_FORMAT_NAME</name> <operator>|</operator>

<name>DIFF_FORMAT_NAME_STATUS</name> <operator>|</operator>

<name>DIFF_FORMAT_CHECKDIFF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_pair_status</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flush_one_pair</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>separator</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_format</name> <operator>&amp;</operator> <name>DIFF_FORMAT_DIRSTAT</name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>dirstat_by_line</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dirstat_by_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_format</name> <operator>&amp;</operator> <operator>(</operator><name>DIFF_FORMAT_DIFFSTAT</name><operator>|</operator><name>DIFF_FORMAT_SHORTSTAT</name><operator>|</operator><name>DIFF_FORMAT_NUMSTAT</name><operator>)</operator> <operator>||</operator>

<name>dirstat_by_line</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diffstat_t</name></name></type> <name>diffstat</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>compute_diffstat</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diffstat</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>output_format</name> <operator>&amp;</operator> <name>DIFF_FORMAT_NUMSTAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_numstat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffstat</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_format</name> <operator>&amp;</operator> <name>DIFF_FORMAT_DIFFSTAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_stats</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffstat</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_format</name> <operator>&amp;</operator> <name>DIFF_FORMAT_SHORTSTAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_shortstats</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffstat</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_format</name> <operator>&amp;</operator> <name>DIFF_FORMAT_DIRSTAT</name> <operator>&amp;&amp;</operator> <name>dirstat_by_line</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_dirstat_by_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffstat</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_diffstat_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>separator</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>output_format</name> <operator>&amp;</operator> <name>DIFF_FORMAT_DIRSTAT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>dirstat_by_line</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_dirstat</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_format</name> <operator>&amp;</operator> <name>DIFF_FORMAT_SUMMARY</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_summary_empty</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>diff_summary</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>separator</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_format</name> <operator>&amp;</operator> <name>DIFF_FORMAT_NO_OUTPUT</name> <operator>&amp;&amp;</operator>

<name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>exit_with_status</name></name> <operator>&amp;&amp;</operator>

<name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>diff_from_contents</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>close_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>xfopen</name><argument_list>(<argument><expr><literal type="string">"/dev/null"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>close_file</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>color_moved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_pair_status</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_flush_patch</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>found_changes</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_format</name> <operator>&amp;</operator> <name>DIFF_FORMAT_PATCH</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>separator</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_SEPARATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>stat_sep</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_diff_symbol</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>DIFF_SYMBOL_STAT_SEP</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>diff_flush_patch_all_file_pairs</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_format</name> <operator>&amp;</operator> <name>DIFF_FORMAT_CALLBACK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>options</name><operator>-&gt;</operator><name>format_callback</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>format_callback_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<label><name>free_queue</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DIFF_QUEUE_CLEAR</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>close_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>diff_from_contents</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>found_changes</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>has_changes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>has_changes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>DIFF_STATUS_MODIFIED</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>score</name></name> <operator>&amp;&amp;</operator>

<call><name>filter_bit_tst</name><argument_list>(<argument><expr><name>DIFF_STATUS_FILTER_BROKEN</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>score</name></name> <operator>&amp;&amp;</operator>

<call><name>filter_bit_tst</name><argument_list>(<argument><expr><name>DIFF_STATUS_MODIFIED</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>!=</operator> <name>DIFF_STATUS_MODIFIED</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>filter_bit_tst</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diffcore_apply_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name></type> <name>outq</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DIFF_QUEUE_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>filter</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>filter_bit_tst</name><argument_list>(<argument><expr><name>DIFF_STATUS_FILTER_AON</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>match_filter</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>found</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>match_filter</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>outq</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_filespec_is_identical</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>two</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diff_filespec_check_stat_unmatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>done_skip_stat_unmatch</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>skip_stat_unmatch_result</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>done_skip_stat_unmatch</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>skip_stat_unmatch_result</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call> <operator>||</operator> 

<operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>oid_valid</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>mode</name></name><operator>)</operator> <operator>||</operator>

<call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name>CHECK_SIZE_ONLY</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>, <argument><expr><name>CHECK_SIZE_ONLY</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>||</operator>

<operator>!</operator><call><name>diff_filespec_is_identical</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>skip_stat_unmatch_result</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>skip_stat_unmatch_result</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>diffcore_skip_stat_unmatch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>diffopt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name></type> <name>outq</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DIFF_QUEUE_CLEAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_filespec_check_stat_unmatch</name><argument_list>(<argument><expr><name><name>diffopt</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_q</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>diffopt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>no_index</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>diffopt</name><operator>-&gt;</operator><name>skip_stat_unmatch</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>diff_free_filepair</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>outq</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>diffnamecmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>diff_filepair</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a_</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> struct <name>diff_filepair</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b_</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name_b</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name_a</name> <operator>=</operator> <ternary><condition><expr><name><name>a</name><operator>-&gt;</operator><name>one</name></name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><name><name>a</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>name_b</name> <operator>=</operator> <ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>one</name></name></expr> ?</condition><then> <expr><name><name>b</name><operator>-&gt;</operator><name>one</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>two</name><operator>-&gt;</operator><name>path</name></name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name_a</name></expr></argument>, <argument><expr><name>name_b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diffcore_fix_diff_index</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><name>diffnamecmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_if_missing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>oid_array</name></name> <modifier>*</modifier></type><name>to_fetch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>filespec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>filespec</name> <operator>&amp;&amp;</operator> <name><name>filespec</name><operator>-&gt;</operator><name>oid_valid</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>filespec</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>oid_object_info_extended</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filespec</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>OBJECT_INFO_FOR_PREFETCH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><name>to_fetch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filespec</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diffcore_std</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name> <operator>==</operator> <name>the_repository</name> <operator>&amp;&amp;</operator> <call><name>has_promisor_remote</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name> <init>= <expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>to_fetch</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>add_if_missing</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_fetch</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_if_missing</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_fetch</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>to_fetch</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>promisor_remote_get_direct</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,

<argument><expr><name><name>to_fetch</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>to_fetch</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>to_fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>skip_stat_unmatch</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diffcore_skip_stat_unmatch</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>found_follow</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>break_opt</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diffcore_break</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>,

<argument><expr><name><name>options</name><operator>-&gt;</operator><name>break_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>detect_rename</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diffcore_rename</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>break_opt</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diffcore_merge_broken</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>pickaxe_opts</name></name> <operator>&amp;</operator> <name>DIFF_PICKAXE_KINDS_MASK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diffcore_pickaxe</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>orderfile</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diffcore_order</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>orderfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>found_follow</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_resolve_rename_copy</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>diffcore_apply_filter</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>diff_queued_diff</name><operator>.</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>diff_from_contents</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>has_changes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>has_changes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>found_follow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>diff_result_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>diff_warn_rename_limit</name><argument_list>(<argument><expr><literal type="string">"diff.renameLimit"</literal></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>needed_rename_limit</name></name></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>degraded_cc_to_c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>exit_with_status</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <name>DIFF_FORMAT_CHECKDIFF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>exit_with_status</name></name> <operator>&amp;&amp;</operator>

<name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>has_changes</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <literal type="number">01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name> <operator>&amp;</operator> <name>DIFF_FORMAT_CHECKDIFF</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>check_failed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <literal type="number">02</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>diff_can_quit_early</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>quick</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>filter</name></name> <operator>&amp;&amp;</operator>

<name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>has_changes</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_submodule_ignored</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ignored</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_flags</name></name></type> <name>orig_flags</name> <init>= <expr><name><name>options</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>override_submodule_config</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_diffopt_flags_from_submodule_config</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>ignore_submodules</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ignored</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>orig_flags</name></expr>;</expr_stmt>

<return>return <expr><name>ignored</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>compute_diffstat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diffstat_t</name></name> <modifier>*</modifier></type><name>diffstat</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>diffstat</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>diffstat_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_pair_status</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>diff_flush_stat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>diffstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_addremove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>addremove</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>oid_valid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>concatpath</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dirty_submodule</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>two</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_submodule_ignored</name><argument_list>(<argument><expr><name>concatpath</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>reverse_diff</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>addremove</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>addremove</name> <operator>==</operator> <literal type="char">'+'</literal></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>addremove</name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><name>addremove</name></expr></else></ternary></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;&amp;</operator>

<call><name>strncmp</name><argument_list>(<argument><expr><name>concatpath</name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>one</name> <operator>=</operator> <call><name>alloc_filespec</name><argument_list>(<argument><expr><name>concatpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>two</name> <operator>=</operator> <call><name>alloc_filespec</name><argument_list>(<argument><expr><name>concatpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>addremove</name> <operator>!=</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fill_filespec</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oid_valid</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>addremove</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_filespec</name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oid_valid</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>two</name><operator>-&gt;</operator><name>dirty_submodule</name></name> <operator>=</operator> <name>dirty_submodule</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>diff_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>diff_from_contents</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>has_changes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>diff_change</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>old_mode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>new_mode</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>old_oid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_oid</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>old_oid_valid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new_oid_valid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>concatpath</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>old_dirty_submodule</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>new_dirty_submodule</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>two</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name>old_mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name>new_mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>is_submodule_ignored</name><argument_list>(<argument><expr><name>concatpath</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>reverse_diff</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>old_mode</name></expr></argument>, <argument><expr><name>new_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>old_oid</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>old_oid_valid</name></expr></argument>, <argument><expr><name>new_oid_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>old_dirty_submodule</name></expr></argument>, <argument><expr><name>new_dirty_submodule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;&amp;</operator>

<call><name>strncmp</name><argument_list>(<argument><expr><name>concatpath</name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>one</name> <operator>=</operator> <call><name>alloc_filespec</name><argument_list>(<argument><expr><name>concatpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>two</name> <operator>=</operator> <call><name>alloc_filespec</name><argument_list>(<argument><expr><name>concatpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_filespec</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>old_oid</name></expr></argument>, <argument><expr><name>old_oid_valid</name></expr></argument>, <argument><expr><name>old_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_filespec</name><argument_list>(<argument><expr><name>two</name></expr></argument>, <argument><expr><name>new_oid</name></expr></argument>, <argument><expr><name>new_oid_valid</name></expr></argument>, <argument><expr><name>new_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>one</name><operator>-&gt;</operator><name>dirty_submodule</name></name> <operator>=</operator> <name>old_dirty_submodule</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>two</name><operator>-&gt;</operator><name>dirty_submodule</name></name> <operator>=</operator> <name>new_dirty_submodule</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>diff_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>diff_from_contents</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>quick</name></name> <operator>&amp;&amp;</operator> <name><name>options</name><operator>-&gt;</operator><name>skip_stat_unmatch</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>diff_filespec_check_stat_unmatch</name><argument_list>(<argument><expr><name><name>options</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>has_changes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>diff_unmerge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filepair</name></name> <modifier>*</modifier></type><name>pair</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>two</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;&amp;</operator>

<call><name>strncmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>one</name> <operator>=</operator> <call><name>alloc_filespec</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>two</name> <operator>=</operator> <call><name>alloc_filespec</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pair</name> <operator>=</operator> <call><name>diff_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diff_queued_diff</name></expr></argument>, <argument><expr><name>one</name></expr></argument>, <argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pair</name><operator>-&gt;</operator><name>is_unmerged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>pair</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>run_textconv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgm</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>spec</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>outsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_tempfile</name></name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>arg</name> <init>= <expr><name>argv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>child</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>prepare_temp_file</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>spec</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>spec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name><operator>++</operator> <operator>=</operator> <name>pgm</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name><operator>++</operator> <operator>=</operator> <name><name>temp</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>arg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>.</operator><name>use_shell</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child</name><operator>.</operator><name>out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_tempfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>child</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><literal type="string">"error reading from textconv command '%s'"</literal></expr></argument>, <argument><expr><name>pgm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>child</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_tempfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>remove_tempfile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>outsize</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>fill_textconv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>driver</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>df</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>outbuf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>driver</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DIFF_FILE_VALID</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>outbuf</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>diff_populate_filespec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>df</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to read files to diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outbuf</name> <operator>=</operator> <name><name>df</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>df</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>driver</name><operator>-&gt;</operator><name>textconv</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"fill_textconv called with non-textconv driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>textconv_cache</name></name> <operator>&amp;&amp;</operator> <name><name>df</name><operator>-&gt;</operator><name>oid_valid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>outbuf</name> <operator>=</operator> <call><name>notes_cache_get</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>textconv_cache</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>df</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outbuf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outbuf</name> <operator>=</operator> <call><name>run_textconv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>textconv</name></name></expr></argument>, <argument><expr><name>df</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>outbuf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to read files to diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>textconv_cache</name></name> <operator>&amp;&amp;</operator> <name><name>df</name><operator>-&gt;</operator><name>oid_valid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>notes_cache_put</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>textconv_cache</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>df</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>*</operator><name>outbuf</name></expr></argument>,

<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>notes_cache_write</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>textconv_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>textconv_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>oid_valid</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>df</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>userdiff_driver</name></name> <modifier>*</modifier></type><name>textconv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>df</name> <operator>=</operator> <call><name>alloc_filespec</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_filespec</name><argument_list>(<argument><expr><name>df</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oid_valid</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>textconv</name> <operator>=</operator> <call><name>get_textconv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>textconv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_filespec</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buf_size</name> <operator>=</operator> <call><name>fill_textconv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>textconv</name></expr></argument>, <argument><expr><name>df</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_filespec</name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>setup_diff_pager</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name><operator>.</operator><name>exit_with_status</name></name> <operator>&amp;&amp;</operator>

<call><name>check_pager_config</name><argument_list>(<argument><expr><literal type="string">"diff"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setup_pager</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
