<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\add-interactive.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"add-interactive.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"color.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diffcore.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lockfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_color</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slot_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"color.interactive.%s"</literal></expr></argument>, <argument><expr><name>slot_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>use_color</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>repo_config_get_value</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>color_parse</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>default_color</name></expr></argument>, <argument><expr><name>COLOR_MAXLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_add_i_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>repo_config_get_value</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"color.interactive"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_color</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_color</name></name> <operator>=</operator>

<call><name>git_config_colorbool</name><argument_list>(<argument><expr><literal type="string">"color.interactive"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_color</name></name> <operator>=</operator> <call><name>want_color</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_color</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"header"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_color</name></name></expr></argument>, <argument><expr><name>GIT_COLOR_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_color</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><name>GIT_COLOR_BOLD_RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_color</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"prompt"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prompt_color</name></name></expr></argument>, <argument><expr><name>GIT_COLOR_BOLD_BLUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_color</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>error_color</name></name></expr></argument>, <argument><expr><name>GIT_COLOR_BOLD_RED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_color</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>reset_color</name></name></expr></argument>, <argument><expr><name>GIT_COLOR_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_color</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"fraginfo"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>fraginfo_color</name></name></expr></argument>,

<argument><expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_FRAGINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_color</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"context"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>context_color</name></name></expr></argument>,

<argument><expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_CONTEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_color</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"old"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>file_old_color</name></name></expr></argument>,

<argument><expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_FILE_OLD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_color</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>file_new_color</name></name></expr></argument>,

<argument><expr><call><name>diff_get_color</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>use_color</name></name></expr></argument>, <argument><expr><name>DIFF_FILE_NEW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>interactive_diff_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config_get_string</name><argument_list>(<argument><expr><literal type="string">"interactive.difffilter"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interactive_diff_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>interactive_diff_algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config_get_string</name><argument_list>(<argument><expr><literal type="string">"diff.algorithm"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>interactive_diff_algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config_get_bool</name><argument_list>(<argument><expr><literal type="string">"interactive.singlekey"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>use_single_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_add_i_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>interactive_diff_filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>interactive_diff_algorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>use_color</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>prefix_item_list</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>items</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>sorted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>selected</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>min_length</name></decl>, <decl><type ref="prev"/><name>max_length</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFIX_ITEM_LIST_INIT</name></cpp:macro> <cpp:value>{ STRING_LIST_INIT_DUP, STRING_LIST_INIT_NODUP, NULL, 1, 4 }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prefix_item_list_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>sorted</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>selected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extend_prefix_length</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>other_string</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>util</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>len</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>other_string</name></expr></argument>, <argument><expr><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>string</name><index>[<expr><operator>*</operator><name>len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>++</operator><operator>*</operator><name>len</name> <operator>&gt;</operator> <name>max_length</name> <operator>||</operator> <operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name><name>other_string</name><index>[<expr><operator>*</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_unique_prefixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>nr</name></name> <operator>==</operator> <name><name>list</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>sorted</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>items</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>st_mult</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>items</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>list</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>nr</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>util</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>sorted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>sorted_item</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>items</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>sorted_item</name><operator>-&gt;</operator><name>util</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>len</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>min_length</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>string</name><index>[<expr><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>extend_prefix_length</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>sorted_item</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>,

<argument><expr><name><name>list</name><operator>-&gt;</operator><name>max_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>extend_prefix_length</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>sorted_item</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>,

<argument><expr><name><name>list</name><operator>-&gt;</operator><name>max_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>find_unique</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>string_list_find_insert_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>sorted</name></name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name> <operator>!=</operator> <name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"prefix_item_list in inconsistent state (%"</literal><name>PRIuMAX</name>

<literal type="string">" vs %"</literal><name>PRIuMAX</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>list</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>items</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <name>index</name></expr>]</index></name><operator>.</operator><name>util</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>starts_with</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>items</name><index>[<expr><name>index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>nr</name></name> <operator>&amp;&amp;</operator>

<call><name>starts_with</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>items</name><index>[<expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>sorted</name><operator>.</operator><name>items</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>util</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><name>item</name> <operator>-</operator> <name><name>list</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name></name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>list_options</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>columns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>print_item</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selected</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>print_item_data</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>print_item_data</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>selected</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>last_lf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>header</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_color</name></name></expr></argument>,

<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>list</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>opts</name><operator>-&gt;</operator><name>print_item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>selected</name></expr> ?</condition><then> <expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>items</name></name> <operator>+</operator> <name>i</name></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>print_item_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>columns</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>columns</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_lf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_lf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last_lf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<struct>struct <name>list_and_choose_options</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>list_options</name></name></type> <name>list_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>SINGLETON</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>,

<decl><name>IMMEDIATE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,

}</block> <decl><name>flags</name></decl>;</enum>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>print_help</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_AND_CHOOSE_ERROR</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_AND_CHOOSE_QUIT</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>list_and_choose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>items</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_and_choose_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>singleton</name> <init>= <expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SINGLETON</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>immediate</name> <init>= <expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IMMEDIATE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>input</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>res</name> <init>= <expr><ternary><condition><expr><name>singleton</name></expr> ?</condition><then> <expr><name>LIST_AND_CHOOSE_ERROR</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>singleton</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>items</name><operator>-&gt;</operator><name>selected</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>items</name><operator>-&gt;</operator><name>selected</name></name></expr></argument>, <argument><expr><name><name>items</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>singleton</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>immediate</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"singleton requires immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>find_unique_prefixes</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>items</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>items</name><operator>-&gt;</operator><name>selected</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>list_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prompt_color</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>prompt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><ternary><condition><expr><name>singleton</name></expr> ?</condition><then> <expr><literal type="string">"&gt; "</literal></expr> </then><else>: <expr><literal type="string">"&gt;&gt; "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>immediate</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>LIST_AND_CHOOSE_QUIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_trim</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>input</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>opts</name><operator>-&gt;</operator><name>print_help</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>input</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>sep</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" \t\r\n,"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>choose</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>from</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>to</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sep</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>choose</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sep</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sep</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>items</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>endp</name> <operator>==</operator> <name>p</name> <operator>+</operator> <name>sep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>endp</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>++</operator><name>endp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>to</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>endp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endp</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>items</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>endp</name> <operator>!=</operator> <name>p</name> <operator>+</operator> <name>sep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>sep</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>sep</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>from</name> <operator>=</operator> <call><name>find_unique</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>from</name> <operator>&gt;=</operator> <name><name>items</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name> <operator>||</operator>

<operator>(</operator><name>singleton</name> <operator>&amp;&amp;</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>to</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>error_color</name></name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Huh (%s)?"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>singleton</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>to</name> <operator>&gt;</operator> <name><name>items</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>items</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>from</name> <operator>&lt;</operator> <name>to</name></expr>;</condition> <incr><expr><name>from</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>items</name><operator>-&gt;</operator><name>selected</name><index>[<expr><name>from</name></expr>]</index></name> <operator>!=</operator> <name>choose</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>items</name><operator>-&gt;</operator><name>selected</name><index>[<expr><name>from</name></expr>]</index></name> <operator>=</operator> <name>choose</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <ternary><condition><expr><name>choose</name></expr> ?</condition><then> <expr><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>sep</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>immediate</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>!=</operator> <name>LIST_AND_CHOOSE_ERROR</name><operator>)</operator> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>adddel</name> <block>{

<decl_stmt><decl><type><name>uintmax_t</name></type> <name>add</name></decl>, <decl><type ref="prev"/><name>del</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>seen</name><range>:<expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>unmerged</name><range>:<expr><literal type="number">1</literal></expr></range></decl>, <decl><type ref="prev"/><name>binary</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>file_item</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>adddel</name></name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>worktree</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_file_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>files</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>file_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>util</name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>pathname_entry</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name></type> <name>ent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>file_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pathname_entry_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>unused_cmp_data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>he1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>hashmap_entry</name></name> <modifier>*</modifier></type><name>he2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathname_entry</name></name> <modifier>*</modifier></type><name>e1</name> <init>=

<expr><call><name>container_of</name><argument_list>(<argument><expr><name>he1</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>pathname_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathname_entry</name></name> <modifier>*</modifier></type><name>e2</name> <init>=

<expr><call><name>container_of</name><argument_list>(<argument><expr><name>he2</name></expr></argument>, <argument><expr><specifier>const</specifier> struct <name>pathname_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>e1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>name</name></expr> </then><else>: <expr><name><name>e2</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>collection_status</name> <block>{

<enum>enum <block>{ <decl><name>FROM_WORKTREE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>FROM_INDEX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block> <decl><name>mode</name></decl>;</enum>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reference</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>skip_unseen</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>unmerged_count</name></decl>, <decl><type ref="prev"/><name>binary_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name></type> <name>file_map</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>collect_changes_cb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>collection_status</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diffstat_t</name></name></type> <name>stat</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>compute_diffstat</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>stat</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>stat</name><operator>.</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><call><name>strhash</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pathname_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>file_item</name></name> <modifier>*</modifier></type><name>file_item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>adddel</name></name> <modifier>*</modifier></type><name>adddel</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>other_adddel</name></decl>;</decl_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hashmap_get_entry_from_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>file_map</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr>struct <name>pathname_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>skip_unseen</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_file_item</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashmap_entry_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>files</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>files</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>string</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>item</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>files</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>files</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>util</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashmap_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>file_map</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>ent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file_item</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>item</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>adddel</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>FROM_INDEX</name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>file_item</name><operator>-&gt;</operator><name>index</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>file_item</name><operator>-&gt;</operator><name>worktree</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>other_adddel</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>FROM_INDEX</name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>file_item</name><operator>-&gt;</operator><name>worktree</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>file_item</name><operator>-&gt;</operator><name>index</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>adddel</name><operator>-&gt;</operator><name>seen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>adddel</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>added</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>adddel</name><operator>-&gt;</operator><name>del</name></name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>deleted</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stat</name><operator>.</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>is_binary</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>other_adddel</name><operator>-&gt;</operator><name>binary</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>binary_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>adddel</name><operator>-&gt;</operator><name>binary</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stat</name><operator>.</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>is_unmerged</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>other_adddel</name><operator>-&gt;</operator><name>unmerged</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>unmerged_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>adddel</name><operator>-&gt;</operator><name>unmerged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free_diffstat_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<enum>enum <name>modified_files_filter</name> <block>{

<decl><name>NO_FILTER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>WORKTREE_ONLY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>INDEX_ONLY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_modified_files</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>modified_files_filter</name></name></type> <name>filter</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>files</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>unmerged_count</name></decl></parameter>,

<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>binary_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>head_oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_initial</name> <init>= <expr><operator>!</operator><call><name>resolve_ref_unsafe</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name>RESOLVE_REF_READING</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>head_oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>collection_status</name></name></type> <name>s</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>discard_index</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>repo_read_index_preload</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prefix_item_list_clear</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>files</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>files</name><operator>-&gt;</operator><name>items</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashmap_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>.</operator><name>file_map</name></name></expr></argument>, <argument><expr><name>pathname_entry_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name></type> <name>rev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>setup_revision_opt</name></name></type> <name>opt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>==</operator> <name>INDEX_ONLY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FROM_INDEX</name></expr> </then><else>: <expr><name>FROM_WORKTREE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>FROM_WORKTREE</name></expr> </then><else>: <expr><name>FROM_INDEX</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>.</operator><name>skip_unseen</name></name> <operator>=</operator> <name>filter</name> <operator>&amp;&amp;</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>def</name></name> <operator>=</operator> <ternary><condition><expr><name>is_initial</name></expr> ?</condition><then>

<expr><call><name>empty_tree_oid_hex</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head_oid</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_revisions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_revisions</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rev</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>output_format</name></name> <operator>=</operator> <name>DIFF_FORMAT_CALLBACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rev</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>format_callback</name></name> <operator>=</operator> <name>collect_changes_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rev</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>format_callback_data</name></name> <operator>=</operator> <operator>&amp;</operator><name>s</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ps</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev</name><operator>.</operator><name>prune_data</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>FROM_INDEX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>run_diff_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>rev</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>ignore_dirty_submodules</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_diff_files</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ps</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>clear_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev</name><operator>.</operator><name>prune_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hashmap_free_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>.</operator><name>file_map</name></name></expr></argument>, <argument><expr>struct <name>pathname_entry</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>unmerged_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>unmerged_count</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>unmerged_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>binary_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>binary_count</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>binary_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>files</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>render_adddel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>adddel</name></name> <modifier>*</modifier></type><name>ad</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>no_changes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>binary</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"binary"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ad</name><operator>-&gt;</operator><name>seen</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"+%"</literal><name>PRIuMAX</name><literal type="string">"/-%"</literal><name>PRIuMAX</name></expr></argument>,

<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>ad</name><operator>-&gt;</operator><name>add</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>ad</name><operator>-&gt;</operator><name>del</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>no_changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_valid_prefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>prefix_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>prefix_len</name> <operator>&amp;&amp;</operator> <name>prefix</name> <operator>&amp;&amp;</operator>

<call><name>strcspn</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="string">" \t\r\n,"</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>prefix_len</name> <operator>&amp;&amp;</operator> 

<operator>*</operator><name>prefix</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> 

<operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>prefix</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 

<operator>(</operator><name>prefix_len</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>(</operator><operator>*</operator><name>prefix</name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> 

<operator>*</operator><name>prefix</name> <operator>!=</operator> <literal type="char">'?'</literal><operator>)</operator><operator>)</operator></expr>;</return> 

</block_content>}</block></function>

<struct>struct <name>print_file_item_data</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modified_fmt</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>color</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name></decl>, <decl><type ref="prev"/><name>name</name></decl>, <decl><type ref="prev"/><name>index</name></decl>, <decl><type ref="prev"/><name>worktree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>only_names</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_file_item</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selected</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>print_file_item_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>file_item</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>print_file_item_data</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>print_file_item_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>highlighted</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>worktree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>prefix_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>is_valid_prefix</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"%s%.*s%s%s"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>color</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>reset</name></name></expr></argument>,

<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>highlighted</name> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>name</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>only_names</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%2d: %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>selected</name></expr> ?</condition><then> <expr><literal type="char">'*'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>highlighted</name></expr> ?</condition><then> <expr><name>highlighted</name></expr> </then><else>: <expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>render_adddel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>worktree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>worktree</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"nothing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>render_adddel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unchanged"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>modified_fmt</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>worktree</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>highlighted</name></expr> ?</condition><then> <expr><name>highlighted</name></expr> </then><else>: <expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%2d: %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>selected</name></expr> ?</condition><then> <expr><literal type="char">'*'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_status</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>files</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_and_choose_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_modified_files</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>NO_FILTER</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>list</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>files</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>list_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>files</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_and_choose_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>index_lock</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_modified_files</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>WORKTREE_ONLY</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>prompt</name></name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>list_and_choose</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>repo_hold_locked_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index_lock</name></expr></argument>, <argument><expr><name>LOCK_REPORT_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>files</name><operator>-&gt;</operator><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<call><name>add_file_to_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not stage '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>&amp;&amp;</operator> <call><name>write_locked_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index_lock</name></expr></argument>, <argument><expr><name>COMMIT_LOCK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"updated %d path\n"</literal></expr></argument>,

<argument><expr><literal type="string">"updated %d paths\n"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>revert_from_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_queue_struct</name></name> <modifier>*</modifier></type><name>q</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>add_flags</name> <init>= <expr><name>ADD_CACHE_OK_TO_ADD</name> <operator>|</operator> <name>ADD_CACHE_OK_TO_REPLACE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_filespec</name></name> <modifier>*</modifier></type><name>one</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>one</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>one</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_file_from_index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"note: %s is untracked now.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <call><name>make_cache_entry</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>one</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ce</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"make_cache_entry failed for path '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>one</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_index_entry</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><name>add_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_revert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>files</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_and_choose_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_initial</name> <init>= <expr><operator>!</operator><call><name>resolve_ref_unsafe</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name>RESOLVE_REF_READING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>index_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>paths</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name></type> <name>diffopt</name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_modified_files</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>INDEX_ONLY</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>prompt</name></name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Revert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>list_and_choose</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>finish_revert</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>repo_hold_locked_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index_lock</name></expr></argument>, <argument><expr><name>LOCK_REPORT_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>finish_revert</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_initial</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>hash_algo</name><operator>-&gt;</operator><name>empty_tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name>parse_tree_indirect</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tree</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not parse HEAD^{tree}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>finish_revert</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>files</name><operator>-&gt;</operator><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>paths</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>paths</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diffopt</name><operator>.</operator><name>pathspec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>PATHSPEC_PREFER_FULL</name> <operator>|</operator> <name>PATHSPEC_LITERAL_PATH</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diffopt</name><operator>.</operator><name>output_format</name></name> <operator>=</operator> <name>DIFF_FORMAT_CALLBACK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diffopt</name><operator>.</operator><name>format_callback</name></name> <operator>=</operator> <name>revert_from_diff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>override_submodule_config</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>diffopt</name><operator>.</operator><name>repo</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>do_diff_cache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diffopt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>diffcore_std</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>diffopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>diffopt</name><operator>.</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>&amp;&amp;</operator> <call><name>write_locked_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index_lock</name></expr></argument>,

<argument><expr><name>COMMIT_LOCK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>repo_refresh_and_write_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>REFRESH_QUIET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"reverted %d path\n"</literal></expr></argument>,

<argument><expr><literal type="string">"reverted %d paths\n"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>finish_revert</name>:</label>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_untracked_files</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>files</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dir_struct</name></name></type> <name>dir</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>repo_read_index</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prefix_item_list_clear</name><argument_list>(<argument><expr><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_standard_excludes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pattern_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name>EXC_CMDL</name></expr></argument>, <argument><expr><literal type="string">"--exclude option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_directory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dir</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dir_entry</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><name><name>dir</name><operator>.</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>index_name_is_other</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_file_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>files</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_add_untracked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>files</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_and_choose_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>print_file_item_data</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>opts</name><operator>-&gt;</operator><name>list_opts</name><operator>.</operator><name>print_item_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>index_lock</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_untracked_files</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No untracked files.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>finish_add_untracked</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>prompt</name></name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Add untracked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>only_names</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>list_and_choose</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>only_names</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>finish_add_untracked</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>repo_hold_locked_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index_lock</name></expr></argument>, <argument><expr><name>LOCK_REPORT_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>finish_add_untracked</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>files</name><operator>-&gt;</operator><name>selected</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<call><name>add_file_to_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not stage '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>&amp;&amp;</operator>

<call><name>write_locked_index</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>index_lock</name></expr></argument>, <argument><expr><name>COMMIT_LOCK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"added %d path\n"</literal></expr></argument>,

<argument><expr><literal type="string">"added %d paths\n"</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>finish_add_untracked</name>:</label>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>files</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_and_choose_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>unmerged_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>binary_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_modified_files</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>WORKTREE_ONLY</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>unmerged_count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>binary_count</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unmerged_count</name> <operator>||</operator> <name>binary_count</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>file_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>util</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>binary</name></name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>worktree</name><operator>.</operator><name>binary</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>index</name><operator>.</operator><name>unmerged</name></name> <operator>||</operator>

<name><name>item</name><operator>-&gt;</operator><name>worktree</name><operator>.</operator><name>unmerged</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>error_color</name></name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignoring unmerged: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>binary_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Only binary files changed.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No changes.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>prompt</name></name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Patch update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>list_and_choose</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>args</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pathspec</name></name></type> <name>ps_selected</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>files</name><operator>-&gt;</operator><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>,

<argument><expr><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>parse_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps_selected</name></expr></argument>,

<argument><expr><name>PATHSPEC_ALL_MAGIC</name> <operator>&amp;</operator> <operator>~</operator><name>PATHSPEC_LITERAL</name></expr></argument>,

<argument><expr><name>PATHSPEC_LITERAL_PATH</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>run_add_p</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>ADD_P_ADD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ps_selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ps_selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_diff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>files</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_and_choose_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_initial</name> <init>= <expr><operator>!</operator><call><name>resolve_ref_unsafe</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name>RESOLVE_REF_READING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_modified_files</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>INDEX_ONLY</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>prompt</name></name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Review diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>IMMEDIATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>list_and_choose</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>args</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="string">"git"</literal></expr></argument>, <argument><expr><literal type="string">"diff"</literal></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>, <argument><expr><literal type="string">"--cached"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><name>is_initial</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>oid</name></expr> </then><else>:

<expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>hash_algo</name><operator>-&gt;</operator><name>empty_tree</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>files</name><operator>-&gt;</operator><name>selected</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>,

<argument><expr><name><name>files</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>run_command_v_opt</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_help</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>unused_ps</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>unused_files</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_and_choose_options</name></name> <modifier>*</modifier></type><name>unused_opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"status - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"show paths with changes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"update - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"add working tree state to the staged set of changes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"revert - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"revert staged set of changes back to the HEAD version"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"patch - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"pick hunks and update selectively"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"diff - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"view diff between HEAD and index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"add untracked - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"add contents of untracked files to the staged set of changes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>choose_prompt_help</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Prompt help:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"1 - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"select a single item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"3-5 - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"select a range of items"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"2-3,6-9 - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"select multiple ranges"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"foo - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"select item based on unique prefix"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"-... - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unselect specified items"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">"* - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"choose all items"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></argument>, <argument><expr><literal type="string">" - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"(empty) finish selecting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>command_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>prefix_item_list</name></name> <modifier>*</modifier></type><name>files</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_and_choose_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>command_item</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>command_t</name></type> <name>command</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>print_command_item_data</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reset</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_command_item</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selected</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>print_command_item_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>print_command_item_data</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>print_command_item_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>command_item</name></name> <modifier>*</modifier></type><name>util</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>util</name><operator>-&gt;</operator><name>prefix_length</name></name> <operator>||</operator>

<operator>!</operator><call><name>is_valid_prefix</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>util</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %2d: %s"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %2d: %s%.*s%s%s"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>d</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>util</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>,

<argument><expr><name><name>d</name><operator>-&gt;</operator><name>reset</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name> <operator>+</operator> <name><name>util</name><operator>-&gt;</operator><name>prefix_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>command_prompt_help</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>add_i_state</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>help_color</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>help_color</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>help_color</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Prompt help:"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>help_color</name></expr></argument>, <argument><expr><literal type="string">"1 - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"select a numbered item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>help_color</name></expr></argument>, <argument><expr><literal type="string">"foo - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"select item based on unique prefix"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>color_fprintf_ln</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>help_color</name></expr></argument>, <argument><expr><literal type="string">" - %s"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"(empty) select nothing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>run_add_i</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>add_i_state</name></name></type> <name>s</name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>print_command_item_data</name></name></type> <name>data</name> <init>= <expr><block>{ <expr><literal type="string">"["</literal></expr>, <expr><literal type="string">"]"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>list_and_choose_options</name></name></type> <name>main_loop_opts</name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"*** Commands ***"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>print_command_item</name></expr>, <expr><operator>&amp;</operator><name>data</name></expr> }</block></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"What now"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>SINGLETON</name> <operator>|</operator> <name>IMMEDIATE</name></expr>, <expr><name>command_prompt_help</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>command_t</name></type> <name>command</name></decl>;</decl_stmt>

}</block> <decl><name><name>command_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"status"</literal></expr>, <expr><name>run_status</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"update"</literal></expr>, <expr><name>run_update</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"revert"</literal></expr>, <expr><name>run_revert</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"add untracked"</literal></expr>, <expr><name>run_add_untracked</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"patch"</literal></expr>, <expr><name>run_patch</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"diff"</literal></expr>, <expr><name>run_diff</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"quit"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><name>run_help</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>prefix_item_list</name></name></type> <name>commands</name> <init>= <expr><name>PREFIX_ITEM_LIST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>print_file_item_data</name></name></type> <name>print_file_item_data</name> <init>= <expr><block>{

<expr><literal type="string">"%12s %12s %s"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,

<expr><name>STRBUF_INIT</name></expr>, <expr><name>STRBUF_INIT</name></expr>, <expr><name>STRBUF_INIT</name></expr>, <expr><name>STRBUF_INIT</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>list_and_choose_options</name></name></type> <name>opts</name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>print_file_item</name></expr>, <expr><operator>&amp;</operator><name>print_file_item_data</name></expr> }</block></expr>,

<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>choose_prompt_help</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>header</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>prefix_item_list</name></name></type> <name>files</name> <init>= <expr><name>PREFIX_ITEM_LIST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>command_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>command_item</name></name> <modifier>*</modifier></type><name>util</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>util</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>util</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <name><name>command_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>command</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commands</name><operator>.</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>command_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call>

<operator>-&gt;</operator><name>util</name> <operator>=</operator> <name>util</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>init_add_i_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>use_color</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>prompt_color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>reset</name></name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>reset_color</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>print_file_item_data</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>color</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>print_file_item_data</name><operator>.</operator><name>reset</name></name> <operator>=</operator> <name><name>data</name><operator>.</operator><name>reset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name><name>print_file_item_data</name><operator>.</operator><name>modified_fmt</name></name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"staged"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unstaged"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>list_opts</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>discard_index</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>repo_read_index</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>repo_refresh_and_write_index</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REFRESH_QUIET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not refresh index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>run_status</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>files</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>command_item</name></name> <modifier>*</modifier></type><name>util</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>list_and_choose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commands</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>main_loop_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name><name>commands</name><operator>.</operator><name>items</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>util</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>util</name> <operator>=</operator> <name><name>commands</name><operator>.</operator><name>items</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>util</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>LIST_AND_CHOOSE_QUIT</name> <operator>||</operator> <operator>(</operator><name>util</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>util</name><operator>-&gt;</operator><name>command</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Bye.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>util</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>util</name><operator>-&gt;</operator><name>command</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>files</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>prefix_item_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>print_file_item_data</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>print_file_item_data</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>print_file_item_data</name><operator>.</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>print_file_item_data</name><operator>.</operator><name>worktree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prefix_item_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_add_i_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

</unit>
