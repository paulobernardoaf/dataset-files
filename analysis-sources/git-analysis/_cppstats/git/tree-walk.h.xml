<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\tree-walk.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TRAVERSE_TREES</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<struct>struct <name>name_entry</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pathlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>tree_desc</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>name_entry</name></name></type> <name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>tree_entry_extract</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pathp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>modep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pathp</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>path</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>modep</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>entry</name><operator>.</operator><name>oid</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>tree_entry_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>ne</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ne</name><operator>-&gt;</operator><name>pathlen</name></name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>update_tree_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>update_tree_entry_gently</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>init_tree_desc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>init_tree_desc_gently</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>tree_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>tree_entry_gently</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>fill_tree_descriptor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<struct_decl>struct <name>traverse_info</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>traverse_callback_t</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>dirmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>int</name></type> <name>traverse_trees</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tree_desc</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>get_oid_result</name></name></type> <name>get_tree_entry_follow_symlinks</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>tree_oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>result_path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>traverse_info</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>traverse_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pathlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>pathspec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>df_conflicts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>traverse_callback_t</name></type> <name>fn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_all_errors</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>int</name></type> <name>get_tree_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>make_traverse_path</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pathlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>strbuf_make_traverse_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setup_traverse_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>traverse_path_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>traverse_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>st_add</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>pathlen</name></name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<enum>enum <name>interesting</name> <block>{

<decl><name>all_entries_not_interesting</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, 

<decl><name>entry_not_interesting</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>entry_interesting</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>all_entries_interesting</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> 

}</block>;</enum>

<function_decl><type><name><name>enum</name> <name>interesting</name></name></type> <name>tree_entry_interesting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>name_entry</name></name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
