<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\object.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<struct_decl>struct <name>buffer_slab</name>;</struct_decl>

<struct>struct <name>parsed_object_pool</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>obj_hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr_objs</name></decl>, <decl><type ref="prev"/><name>obj_hash_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alloc_state</name></name> <modifier>*</modifier></type><name>blob_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alloc_state</name></name> <modifier>*</modifier></type><name>tree_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alloc_state</name></name> <modifier>*</modifier></type><name>commit_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alloc_state</name></name> <modifier>*</modifier></type><name>tag_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>alloc_state</name></name> <modifier>*</modifier></type><name>object_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>commit_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graft</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>grafts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>grafts_alloc</name></decl>, <decl><type ref="prev"/><name>grafts_nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_shallow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat_validity</name></name> <modifier>*</modifier></type><name>shallow_stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alternate_shallow_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>commit_graft_prepared</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>buffer_slab</name></name> <modifier>*</modifier></type><name>buffer_slab</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>parsed_object_pool</name></name> <modifier>*</modifier></type><name>parsed_object_pool_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>parsed_object_pool_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>parsed_object_pool</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>object_list</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>object_array</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>alloc</name></decl>;</decl_stmt>

<struct>struct <name>object_array_entry</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mode</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>objects</name></decl>;</struct>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OBJECT_ARRAY_INIT</name></cpp:macro> <cpp:value>{ 0, 0, NULL }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAG_BITS</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>

<struct>struct <name>object</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>parsed</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>type</name> <range>: <expr><name>TYPE_BITS</name></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <range>: <expr><name>FLAG_BITS</name></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>type_from_string_gently</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gentle</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>type_from_string</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type_from_string_gently(str, -1, 0)</cpp:value></cpp:define>

<function_decl><type><name>unsigned</name> <name>int</name></type> <name>get_max_object_index</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>get_indexed_object</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>lookup_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>create_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>object_as_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quiet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>parse_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>parse_object_or_die</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>parse_object_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>eaten_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>lookup_unknown_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>object_list_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>object_list_contains</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>object_list_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>add_object_array</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>add_object_array_with_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object_array_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>object_array_each_func_t</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_array_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>void</name></type> <name>object_array_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>,

<parameter><decl><type><name>object_array_each_func_t</name></type> <name>want</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>object_array_remove_duplicates</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>object_array_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>clear_object_flags</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>clear_commit_marks_all</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
