<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\convert.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sigchain.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pkt-line.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sub-process.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ll-merge.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_STAT_BITS_TXT_LF</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_STAT_BITS_TXT_CRLF</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_STAT_BITS_BIN</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<enum>enum <name>crlf_action</name> <block>{

<decl><name>CRLF_UNDEFINED</name></decl>,

<decl><name>CRLF_BINARY</name></decl>,

<decl><name>CRLF_TEXT</name></decl>,

<decl><name>CRLF_TEXT_INPUT</name></decl>,

<decl><name>CRLF_TEXT_CRLF</name></decl>,

<decl><name>CRLF_AUTO</name></decl>,

<decl><name>CRLF_AUTO_INPUT</name></decl>,

<decl><name>CRLF_AUTO_CRLF</name></decl>

}</block>;</enum>

<struct>struct <name>text_stat</name> <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>nul</name></decl>, <decl><type ref="prev"/><name>lonecr</name></decl>, <decl><type ref="prev"/><name>lonelf</name></decl>, <decl><type ref="prev"/><name>crlf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>printable</name></decl>, <decl><type ref="prev"/><name>nonprintable</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gather_stats</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>text_stat</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>crlf</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>lonecr</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>lonelf</name></name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>nonprintable</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\b'</literal></expr>:</case> <case>case <expr><literal type="char">'\t'</literal></expr>:</case> <case>case <expr><literal type="char">'\033'</literal></expr>:</case> <case>case <expr><literal type="char">'\014'</literal></expr>:</case>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>printable</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>nul</name></name><operator>++</operator></expr>;</expr_stmt>

<default>default:</default>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>nonprintable</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>printable</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\032'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>nonprintable</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_is_binary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>text_stat</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>-&gt;</operator><name>lonecr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>-&gt;</operator><name>nul</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>stats</name><operator>-&gt;</operator><name>printable</name></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;</operator> <name><name>stats</name><operator>-&gt;</operator><name>nonprintable</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>gather_convert_stats</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_stat</name></name></type> <name>stats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name> <operator>||</operator> <operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gather_stats</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>convert_is_binary</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>CONVERT_STAT_BITS_BIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>.</operator><name>crlf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>CONVERT_STAT_BITS_TXT_CRLF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>.</operator><name>lonelf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>CONVERT_STAT_BITS_TXT_LF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gather_convert_stats_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>convert_stats</name> <init>= <expr><call><name>gather_convert_stats</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>convert_stats</name> <operator>&amp;</operator> <name>CONVERT_STAT_BITS_BIN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"-text"</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>convert_stats</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CONVERT_STAT_BITS_TXT_LF</name></expr>:</case>

<return>return <expr><literal type="string">"lf"</literal></expr>;</return>

<case>case <expr><name>CONVERT_STAT_BITS_TXT_CRLF</name></expr>:</case>

<return>return <expr><literal type="string">"crlf"</literal></expr>;</return>

<case>case <expr><name>CONVERT_STAT_BITS_TXT_LF</name> <operator>|</operator> <name>CONVERT_STAT_BITS_TXT_CRLF</name></expr>:</case>

<return>return <expr><literal type="string">"mixed"</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="string">"none"</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_cached_convert_stats_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>read_blob_data_from_index</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gather_convert_stats_ascii</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_wt_convert_stats_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gather_convert_stats_ascii</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>text_eol_is_crlf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>auto_crlf</name> <operator>==</operator> <name>AUTO_CRLF_TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>auto_crlf</name> <operator>==</operator> <name>AUTO_CRLF_INPUT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>core_eol</name> <operator>==</operator> <name>EOL_CRLF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>core_eol</name> <operator>==</operator> <name>EOL_UNSET</name> <operator>&amp;&amp;</operator> <name>EOL_NATIVE</name> <operator>==</operator> <name>EOL_CRLF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>eol</name></name></type> <name>output_eol</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>crlf_action</name></name></type> <name>crlf_action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>crlf_action</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CRLF_BINARY</name></expr>:</case>

<return>return <expr><name>EOL_UNSET</name></expr>;</return>

<case>case <expr><name>CRLF_TEXT_CRLF</name></expr>:</case>

<return>return <expr><name>EOL_CRLF</name></expr>;</return>

<case>case <expr><name>CRLF_TEXT_INPUT</name></expr>:</case>

<return>return <expr><name>EOL_LF</name></expr>;</return>

<case>case <expr><name>CRLF_UNDEFINED</name></expr>:</case>

<case>case <expr><name>CRLF_AUTO_CRLF</name></expr>:</case>

<return>return <expr><name>EOL_CRLF</name></expr>;</return>

<case>case <expr><name>CRLF_AUTO_INPUT</name></expr>:</case>

<return>return <expr><name>EOL_LF</name></expr>;</return>

<case>case <expr><name>CRLF_TEXT</name></expr>:</case>

<case>case <expr><name>CRLF_AUTO</name></expr>:</case>

<return>return <expr><ternary><condition><expr><call><name>text_eol_is_crlf</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>EOL_CRLF</name></expr> </then><else>: <expr><name>EOL_LF</name></expr></else></ternary></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"illegal crlf_action %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>crlf_action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>core_eol</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_global_conv_flags_eol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>crlf_action</name></name></type> <name>crlf_action</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>text_stat</name></name> <modifier>*</modifier></type><name>old_stats</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>text_stat</name></name> <modifier>*</modifier></type><name>new_stats</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>conv_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>old_stats</name><operator>-&gt;</operator><name>crlf</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>new_stats</name><operator>-&gt;</operator><name>crlf</name></name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>conv_flags</name> <operator>&amp;</operator> <name>CONV_EOL_RNDTRP_DIE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"CRLF would be replaced by LF in %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>conv_flags</name> <operator>&amp;</operator> <name>CONV_EOL_RNDTRP_WARN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"CRLF will be replaced by LF in %s.\n"</literal>

<literal type="string">"The file will have its original line"</literal>

<literal type="string">" endings in your working directory"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>old_stats</name><operator>-&gt;</operator><name>lonelf</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>new_stats</name><operator>-&gt;</operator><name>lonelf</name></name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>conv_flags</name> <operator>&amp;</operator> <name>CONV_EOL_RNDTRP_DIE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"LF would be replaced by CRLF in %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>conv_flags</name> <operator>&amp;</operator> <name>CONV_EOL_RNDTRP_WARN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"LF will be replaced by CRLF in %s.\n"</literal>

<literal type="string">"The file will have its original line"</literal>

<literal type="string">" endings in your working directory"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_crlf_in_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>crp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_crlf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>read_blob_data_from_index</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>crp</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>crp</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ret_stats</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret_stats</name> <operator>=</operator> <call><name>gather_convert_stats</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret_stats</name> <operator>&amp;</operator> <name>CONVERT_STAT_BITS_BIN</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret_stats</name> <operator>&amp;</operator> <name>CONVERT_STAT_BITS_TXT_CRLF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_crlf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>has_crlf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>will_convert_lf_to_crlf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>text_stat</name></name> <modifier>*</modifier></type><name>stats</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>crlf_action</name></name></type> <name>crlf_action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>output_eol</name><argument_list>(<argument><expr><name>crlf_action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOL_CRLF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stats</name><operator>-&gt;</operator><name>lonelf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>crlf_action</name> <operator>==</operator> <name>CRLF_AUTO</name> <operator>||</operator> <name>crlf_action</name> <operator>==</operator> <name>CRLF_AUTO_INPUT</name> <operator>||</operator> <name>crlf_action</name> <operator>==</operator> <name>CRLF_AUTO_CRLF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>stats</name><operator>-&gt;</operator><name>lonecr</name></name> <operator>||</operator> <name><name>stats</name><operator>-&gt;</operator><name>crlf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>convert_is_binary</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>validate_encoding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>die_on_error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stripped</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_iprefix</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><literal type="string">"UTF"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stripped</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>stripped</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stripped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_prohibited_utf_bom</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_msg</name> <init>= <expr><call><name>_</name><argument_list>(

<argument><expr><literal type="string">"BOM is prohibited in '%s' if encoded as %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>advise_msg</name> <init>= <expr><call><name>_</name><argument_list>(

<argument><expr><literal type="string">"The file '%s' contains a byte order "</literal>

<literal type="string">"mark (BOM). Please use UTF-%.*s as "</literal>

<literal type="string">"working-tree-encoding."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stripped_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>stripped</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"BE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><name>advise_msg</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>stripped_len</name></expr></argument>, <argument><expr><name>stripped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die_on_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_missing_required_utf_bom</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_msg</name> <init>= <expr><call><name>_</name><argument_list>(

<argument><expr><literal type="string">"BOM is required in '%s' if encoded as %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>advise_msg</name> <init>= <expr><call><name>_</name><argument_list>(

<argument><expr><literal type="string">"The file '%s' is missing a byte order "</literal>

<literal type="string">"mark (BOM). Please use UTF-%sBE or UTF-%sLE "</literal>

<literal type="string">"(depending on the byte order) as "</literal>

<literal type="string">"working-tree-encoding."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><name>advise_msg</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>stripped</name></expr></argument>, <argument><expr><name>stripped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die_on_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><name>error_msg</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>trace_encoding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encoding</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>trace_key</name></name></type> <name>coe</name> <init>= <expr><call><name>TRACE_KEY_INIT</name><argument_list>(<argument><expr><name>WORKING_TREE_ENCODING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>trace</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>, <argument><expr><literal type="string">"%s (%s, considered %s):\n"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>buf</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(

<argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>, <argument><expr><literal type="string">"| \033[2m%2i:\033[0m %2x \033[2m%c\033[0m%c"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">127</literal></expr> ?</condition><then> <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>len</name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="char">'\n'</literal></expr></else></ternary><operator>)</operator></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_addchars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace_strbuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_roundtrip</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>enc_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>found</name> <init>= <expr><call><name>strcasestr</name><argument_list>(<argument><expr><name>check_roundtrip_encoding</name></expr></argument>, <argument><expr><name>enc_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>found</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>enc_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>check_roundtrip_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>(</operator>

<name>found</name> <operator>==</operator> <name>check_roundtrip_encoding</name> <operator>||</operator> <operator>(</operator>

<operator>(</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>found</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>found</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator>

<operator>)</operator>

<operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator>

<name>next</name> <operator>==</operator> <name>check_roundtrip_encoding</name> <operator>+</operator> <name>len</name> <operator>||</operator> <operator>(</operator>

<name>next</name> <operator>&lt;</operator> <name>check_roundtrip_encoding</name> <operator>+</operator> <name>len</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>next</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">','</literal><operator>)</operator>

<operator>)</operator>

<operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_encoding</name> <init>= <expr><literal type="string">"UTF-8"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_to_git</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>conv_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dst_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>die_on_error</name> <init>= <expr><name>conv_flags</name> <operator>&amp;</operator> <name>CONV_WRITE_OBJECT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name> <operator>||</operator> <operator>(</operator><name>src</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>src_len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>validate_encoding</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>, <argument><expr><name>die_on_error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>trace_encoding</name><argument_list>(<argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>reencode_string_len</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>, <argument><expr><name>default_encoding</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to encode '%s' from %s to %s"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>die_on_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>default_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>default_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>trace_encoding</name><argument_list>(<argument><expr><literal type="string">"destination"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>default_encoding</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>die_on_error</name> <operator>&amp;&amp;</operator> <call><name>check_roundtrip</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>re_src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>re_src_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>re_src</name> <operator>=</operator> <call><name>reencode_string_len</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_len</name></expr></argument>,

<argument><expr><name>enc</name></expr></argument>, <argument><expr><name>default_encoding</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>re_src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace_printf</name><argument_list>(<argument><expr><literal type="string">"Checking roundtrip encoding for %s...\n"</literal></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace_encoding</name><argument_list>(<argument><expr><literal type="string">"reencoded source"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>,

<argument><expr><name>re_src</name></expr></argument>, <argument><expr><name>re_src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>re_src</name> <operator>||</operator> <name>src_len</name> <operator>!=</operator> <name>re_src_len</name> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>re_src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"encoding '%s' from %s to %s and "</literal>

<literal type="string">"back is not the same"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>default_encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>re_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_attach</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_len</name></expr></argument>, <argument><expr><name>dst_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_to_worktree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>enc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dst_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>enc</name> <operator>||</operator> <operator>(</operator><name>src</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>src_len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>reencode_string_len</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name>default_encoding</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to encode '%s' from %s to %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>path</name></expr></argument>, <argument><expr><name>default_encoding</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_attach</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_len</name></expr></argument>, <argument><expr><name>dst_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>crlf_to_git</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>crlf_action</name></name></type> <name>crlf_action</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>conv_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_stat</name></name></type> <name>stats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>convert_crlf_into_lf</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>crlf_action</name> <operator>==</operator> <name>CRLF_BINARY</name> <operator>||</operator>

<operator>(</operator><name>src</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>len</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gather_stats</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>convert_crlf_into_lf</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name><name>stats</name><operator>.</operator><name>crlf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>crlf_action</name> <operator>==</operator> <name>CRLF_AUTO</name> <operator>||</operator> <name>crlf_action</name> <operator>==</operator> <name>CRLF_AUTO_INPUT</name> <operator>||</operator> <name>crlf_action</name> <operator>==</operator> <name>CRLF_AUTO_CRLF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>convert_is_binary</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>conv_flags</name> <operator>&amp;</operator> <name>CONV_EOL_RENORMALIZE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>has_crlf_in_index</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>convert_crlf_into_lf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>conv_flags</name> <operator>&amp;</operator> <name>CONV_EOL_RNDTRP_WARN</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>conv_flags</name> <operator>&amp;</operator> <name>CONV_EOL_RNDTRP_DIE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>len</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>text_stat</name></name></type> <name>new_stats</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_stats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_stats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>convert_crlf_into_lf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_stats</name><operator>.</operator><name>lonelf</name></name> <operator>+=</operator> <name><name>new_stats</name><operator>.</operator><name>crlf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_stats</name><operator>.</operator><name>crlf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>will_convert_lf_to_crlf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_stats</name></expr></argument>, <argument><expr><name>crlf_action</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_stats</name><operator>.</operator><name>crlf</name></name> <operator>+=</operator> <name><name>new_stats</name><operator>.</operator><name>lonelf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_stats</name><operator>.</operator><name>lonelf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>check_global_conv_flags_eol</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>crlf_action</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_stats</name></expr></argument>, <argument><expr><name>conv_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>convert_crlf_into_lf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_avail</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_grow</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>crlf_action</name> <operator>==</operator> <name>CRLF_AUTO</name> <operator>||</operator> <name>crlf_action</name> <operator>==</operator> <name>CRLF_AUTO_INPUT</name> <operator>||</operator> <name>crlf_action</name> <operator>==</operator> <name>CRLF_AUTO_CRLF</name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>src</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>len</name></expr>)</condition>;</do>

</block_content>}</block></if> <else>else <block>{<block_content>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>src</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>len</name></expr>)</condition>;</do>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dst</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>crlf_to_worktree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>crlf_action</name></name></type> <name>crlf_action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>to_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>text_stat</name></name></type> <name>stats</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <call><name>output_eol</name><argument_list>(<argument><expr><name>crlf_action</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOL_CRLF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>gather_stats</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>will_convert_lf_to_crlf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>, <argument><expr><name>crlf_action</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>to_free</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_grow</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name><name>stats</name><operator>.</operator><name>lonelf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nl</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nl</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nl</name> <operator>&gt;</operator> <name>src</name> <operator>&amp;&amp;</operator> <name><name>nl</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>nl</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>nl</name> <operator>-</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>nl</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>nl</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>filter_params</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_buffer_or_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>child_process</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>filter_params</name></name> <modifier>*</modifier></type><name>params</name> <init>= <expr><operator>(</operator>struct <name>filter_params</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>write_err</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>cmd</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf_expand_dict_entry</name></name></type> <name><name>dict</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"f"</literal></expr>, <expr><name>NULL</name></expr>, }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sq_quote_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>path</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_expand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>strbuf_expand_dict_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cmd</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_process</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_process</name><operator>.</operator><name>use_shell</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_process</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>child_process</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child_process</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot fork to run external filter '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>params</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sigchain_push</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>params</name><operator>-&gt;</operator><name>src</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>write_err</name> <operator>=</operator> <operator>(</operator><call><name>write_in_full</name><argument_list>(<argument><expr><name><name>child_process</name><operator>.</operator><name>in</name></name></expr></argument>,

<argument><expr><name><name>params</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EPIPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>write_err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>write_err</name> <operator>=</operator> <call><name>copy_fd</name><argument_list>(<argument><expr><name><name>params</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>child_process</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>write_err</name> <operator>==</operator> <name>COPY_WRITE_ERROR</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EPIPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>write_err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>child_process</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>write_err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>write_err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot feed the input to external filter '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>params</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sigchain_pop</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child_process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"external filter '%s' failed %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>params</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>write_err</name> <operator>||</operator> <name>status</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_single_file_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>nbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>async</name></name></type> <name>async</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>filter_params</name></name></type> <name>params</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>async</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>async</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>async</name><operator>.</operator><name>proc</name></name> <operator>=</operator> <name>filter_buffer_or_fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>async</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>params</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>async</name><operator>.</operator><name>out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>start_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>async</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nbuf</name></expr></argument>, <argument><expr><name><name>async</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"read from external filter '%s' failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name><name>async</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"read from external filter '%s' failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>finish_async</name><argument_list>(<argument><expr><operator>&amp;</operator><name>async</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"external filter '%s' failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_swap</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAP_CLEAN</name></cpp:macro> <cpp:value>(1u&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAP_SMUDGE</name></cpp:macro> <cpp:value>(1u&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAP_DELAY</name></cpp:macro> <cpp:value>(1u&lt;&lt;2)</cpp:value></cpp:define>

<struct>struct <name>cmd2process</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>subprocess_entry</name></name></type> <name>subprocess</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>supported_capabilities</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>subprocess_map_initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>hashmap</name></name></type> <name>subprocess_map</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>start_multi_file_filter_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>subprocess_entry</name></name> <modifier>*</modifier></type><name>subprocess</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>versions</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>subprocess_capability</name></name></type> <name><name>capabilities</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"clean"</literal></expr>, <expr><name>CAP_CLEAN</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"smudge"</literal></expr>, <expr><name>CAP_SMUDGE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"delay"</literal></expr>, <expr><name>CAP_DELAY</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cmd2process</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator>struct <name>cmd2process</name> <operator>*</operator><operator>)</operator><name>subprocess</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>subprocess_handshake</name><argument_list>(<argument><expr><name>subprocess</name></expr></argument>, <argument><expr><literal type="string">"git-filter"</literal></expr></argument>, <argument><expr><name>versions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>capabilities</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>supported_capabilities</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_filter_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>filter_status</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>cmd2process</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>wanted_capability</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>filter_status</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>filter_status</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"abort"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>wanted_capability</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>supported_capabilities</name></name> <operator>&amp;=</operator> <operator>~</operator><name>wanted_capability</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"external filter '%s' failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>subprocess</name><operator>.</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subprocess_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subprocess_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>subprocess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_multi_file_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>wanted_capability</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>delayed_checkout</name></name> <modifier>*</modifier></type><name>dco</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>can_delay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cmd2process</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>process</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>nbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>filter_status</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter_type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subprocess_map_initialized</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>subprocess_map_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashmap_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subprocess_map</name></expr></argument>, <argument><expr><name>cmd2process_cmp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator>struct <name>cmd2process</name> <operator>*</operator><operator>)</operator><call><name>subprocess_find_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subprocess_map</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>supported_capabilities</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>subprocess_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subprocess_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>subprocess</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>start_multi_file_filter_fn</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>process</name> <operator>=</operator> <operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>subprocess</name><operator>.</operator><name>process</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>supported_capabilities</name></name> <operator>&amp;</operator> <name>wanted_capability</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wanted_capability</name> <operator>&amp;</operator> <name>CAP_CLEAN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filter_type</name> <operator>=</operator> <literal type="string">"clean"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>wanted_capability</name> <operator>&amp;</operator> <name>CAP_SMUDGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filter_type</name> <operator>=</operator> <literal type="string">"smudge"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unexpected filter type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>sigchain_push</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>filter_type</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>LARGE_PACKET_DATA_MAX</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"command=\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>packet_write_fmt_gently</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="string">"command=%s\n"</literal></expr></argument>, <argument><expr><name>filter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>LARGE_PACKET_DATA_MAX</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"pathname=\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path name too long for external filter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>packet_write_fmt_gently</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="string">"pathname=%s\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>meta</name> <operator>&amp;&amp;</operator> <name><name>meta</name><operator>-&gt;</operator><name>refname</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>packet_write_fmt_gently</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="string">"ref=%s\n"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>meta</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>treeish</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>packet_write_fmt_gently</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="string">"treeish=%s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>treeish</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>meta</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>packet_write_fmt_gently</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="string">"blob=%s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>supported_capabilities</name></name> <operator>&amp;</operator> <name>CAP_DELAY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name>dco</name> <operator>&amp;&amp;</operator> <name><name>dco</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>CE_CAN_DELAY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>can_delay</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>packet_write_fmt_gently</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="string">"can-delay=1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>packet_flush_gently</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>write_packetized_from_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>process</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>write_packetized_from_buf</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>process</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>subprocess_read_status</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>can_delay</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>filter_status</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"delayed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>string_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dco</name><operator>-&gt;</operator><name>filters</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dco</name><operator>-&gt;</operator><name>paths</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>filter_status</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>read_packetized_to_strbuf</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbuf</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>subprocess_read_status</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>filter_status</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>sigchain_pop</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>handle_filter_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_status</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>wanted_capability</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_swap</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>async_query_available_blobs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>available_paths</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cmd2process</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>process</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>filter_status</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>subprocess_map_initialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator>struct <name>cmd2process</name> <operator>*</operator><operator>)</operator><call><name>subprocess_find_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>subprocess_map</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"external filter '%s' is not available anymore although "</literal>

<literal type="string">"not all paths have been filtered"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>process</name> <operator>=</operator> <operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>subprocess</name><operator>.</operator><name>process</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigchain_push</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>packet_write_fmt_gently</name><argument_list>(

<argument><expr><name><name>process</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="string">"command=list_available_blobs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>packet_flush_gently</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>packet_read_line</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"pathname="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_insert</name><argument_list>(<argument><expr><name>available_paths</name></expr></argument>, <argument><expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></while>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>subprocess_read_status</name><argument_list>(<argument><expr><name><name>process</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>filter_status</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>sigchain_pop</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>handle_filter_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter_status</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><name>err</name></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>convert_driver</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>convert_driver</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>smudge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clean</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>process</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>required</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>user_convert</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>user_convert_tail</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>convert_driver</name></name> <modifier>*</modifier></type><name>drv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>wanted_capability</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>delayed_checkout</name></name> <modifier>*</modifier></type><name>dco</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>drv</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wanted_capability</name> <operator>&amp;</operator> <name>CAP_CLEAN</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>drv</name><operator>-&gt;</operator><name>process</name></name> <operator>&amp;&amp;</operator> <name><name>drv</name><operator>-&gt;</operator><name>clean</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>drv</name><operator>-&gt;</operator><name>clean</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>wanted_capability</name> <operator>&amp;</operator> <name>CAP_SMUDGE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>drv</name><operator>-&gt;</operator><name>process</name></name> <operator>&amp;&amp;</operator> <name><name>drv</name><operator>-&gt;</operator><name>smudge</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <name><name>drv</name><operator>-&gt;</operator><name>smudge</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>apply_single_file_filter</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>drv</name><operator>-&gt;</operator><name>process</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>drv</name><operator>-&gt;</operator><name>process</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>apply_multi_file_filter</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>,

<argument><expr><name><name>drv</name><operator>-&gt;</operator><name>process</name></name></expr></argument>, <argument><expr><name>wanted_capability</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>dco</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_convert_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>namelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>convert_driver</name></name> <modifier>*</modifier></type><name>drv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_config_key</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"filter"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>namelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>drv</name> <operator>=</operator> <name>user_convert</name></expr>;</init> <condition><expr><name>drv</name></expr>;</condition> <incr><expr><name>drv</name> <operator>=</operator> <name><name>drv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>drv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>drv</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>namelen</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>drv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>drv</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>convert_driver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>drv</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>user_convert_tail</name> <operator>=</operator> <name>drv</name></expr>;</expr_stmt>

<expr_stmt><expr><name>user_convert_tail</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>drv</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"smudge"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>smudge</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"clean"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>clean</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"process"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>drv</name><operator>-&gt;</operator><name>process</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"required"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>drv</name><operator>-&gt;</operator><name>required</name></name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>count_ident</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"Id"</literal></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>cp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<return>return <expr><name>cnt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ident_to_git</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ident</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dollar</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ident</name> <operator>||</operator> <operator>(</operator><name>src</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>count_ident</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_avail</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_grow</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>dollar</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dollar</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dollar</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dollar</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>dollar</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>dollar</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="string">"Id:"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dollar</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dollar</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>dollar</name> <operator>-</operator> <name>src</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"Id$"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>dollar</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>dollar</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ident_to_worktree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ident</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>to_free</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dollar</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>spc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ident</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>count_ident</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cnt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>to_free</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hash_object_file</name><argument_list>(<argument><expr><name>the_hash_algo</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"blob"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_grow</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <name>cnt</name> <operator>*</operator> <operator>(</operator><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>dollar</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dollar</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dollar</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>dollar</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>dollar</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"Id"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dollar</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dollar</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>dollar</name> <operator>-</operator> <name>src</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>spc</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>dollar</name> <operator>-</operator> <name>src</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>spc</name> <operator>&amp;&amp;</operator> <name>spc</name> <operator>&lt;</operator> <name>dollar</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>dollar</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>dollar</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Id: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" $"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_path_check_encoding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_check_item</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>check</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATTR_UNSET</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATTR_TRUE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ATTR_FALSE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"true/false are no valid working-tree-encodings"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>same_encoding</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>default_encoding</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>crlf_action</name></name></type> <name>git_path_check_crlf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_check_item</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>check</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATTR_TRUE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CRLF_TEXT</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ATTR_FALSE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CRLF_BINARY</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ATTR_UNSET</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CRLF_TEXT_INPUT</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CRLF_AUTO</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CRLF_UNDEFINED</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>eol</name></name></type> <name>git_path_check_eol</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_check_item</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>check</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATTR_UNSET</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"lf"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EOL_LF</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"crlf"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EOL_CRLF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>EOL_UNSET</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>convert_driver</name></name> <modifier>*</modifier></type><name>git_path_check_convert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_check_item</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>check</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>convert_driver</name></name> <modifier>*</modifier></type><name>drv</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATTR_TRUE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ATTR_FALSE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ATTR_UNSET</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>drv</name> <operator>=</operator> <name>user_convert</name></expr>;</init> <condition><expr><name>drv</name></expr>;</condition> <incr><expr><name>drv</name> <operator>=</operator> <name><name>drv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>drv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>drv</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_path_check_ident</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>attr_check_item</name></name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name><name>check</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><call><name>ATTR_TRUE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>conv_attrs</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>convert_driver</name></name> <modifier>*</modifier></type><name>drv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>crlf_action</name></name></type> <name>attr_action</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>crlf_action</name></name></type> <name>crlf_action</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ident</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>working_tree_encoding</name></decl>;</decl_stmt> 

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>convert_attrs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>conv_attrs</name></name> <modifier>*</modifier></type><name>ca</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>attr_check_item</name></name> <modifier>*</modifier></type><name>ccheck</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>check</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>attr_check_initl</name><argument_list>(<argument><expr><literal type="string">"crlf"</literal></expr></argument>, <argument><expr><literal type="string">"ident"</literal></expr></argument>, <argument><expr><literal type="string">"filter"</literal></expr></argument>,

<argument><expr><literal type="string">"eol"</literal></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="string">"working-tree-encoding"</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>user_convert_tail</name> <operator>=</operator> <operator>&amp;</operator><name>user_convert</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>read_convert_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>git_check_attr</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ccheck</name> <operator>=</operator> <name><name>check</name><operator>-&gt;</operator><name>items</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>=</operator> <call><name>git_path_check_crlf</name><argument_list>(<argument><expr><name>ccheck</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>==</operator> <name>CRLF_UNDEFINED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>=</operator> <call><name>git_path_check_crlf</name><argument_list>(<argument><expr><name>ccheck</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>ident</name></name> <operator>=</operator> <call><name>git_path_check_ident</name><argument_list>(<argument><expr><name>ccheck</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>drv</name></name> <operator>=</operator> <call><name>git_path_check_convert</name><argument_list>(<argument><expr><name>ccheck</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>!=</operator> <name>CRLF_BINARY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>eol</name></name></type> <name>eol_attr</name> <init>= <expr><call><name>git_path_check_eol</name><argument_list>(<argument><expr><name>ccheck</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>==</operator> <name>CRLF_AUTO</name> <operator>&amp;&amp;</operator> <name>eol_attr</name> <operator>==</operator> <name>EOL_LF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>=</operator> <name>CRLF_AUTO_INPUT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>==</operator> <name>CRLF_AUTO</name> <operator>&amp;&amp;</operator> <name>eol_attr</name> <operator>==</operator> <name>EOL_CRLF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>=</operator> <name>CRLF_AUTO_CRLF</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>eol_attr</name> <operator>==</operator> <name>EOL_LF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>=</operator> <name>CRLF_TEXT_INPUT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>eol_attr</name> <operator>==</operator> <name>EOL_CRLF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>=</operator> <name>CRLF_TEXT_CRLF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>working_tree_encoding</name></name> <operator>=</operator> <call><name>git_path_check_encoding</name><argument_list>(<argument><expr><name>ccheck</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>attr_action</name></name> <operator>=</operator> <name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>==</operator> <name>CRLF_TEXT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>=</operator> <ternary><condition><expr><call><name>text_eol_is_crlf</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>CRLF_TEXT_CRLF</name></expr> </then><else>: <expr><name>CRLF_TEXT_INPUT</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>==</operator> <name>CRLF_UNDEFINED</name> <operator>&amp;&amp;</operator> <name>auto_crlf</name> <operator>==</operator> <name>AUTO_CRLF_FALSE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>=</operator> <name>CRLF_BINARY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>==</operator> <name>CRLF_UNDEFINED</name> <operator>&amp;&amp;</operator> <name>auto_crlf</name> <operator>==</operator> <name>AUTO_CRLF_TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>=</operator> <name>CRLF_AUTO_CRLF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>==</operator> <name>CRLF_UNDEFINED</name> <operator>&amp;&amp;</operator> <name>auto_crlf</name> <operator>==</operator> <name>AUTO_CRLF_INPUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ca</name><operator>-&gt;</operator><name>crlf_action</name></name> <operator>=</operator> <name>CRLF_AUTO_INPUT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_parsed_attributes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>convert_driver</name></name> <modifier>*</modifier></type><name>drv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>attr_check_free</name><argument_list>(<argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>check</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_merge_attributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>drv</name> <operator>=</operator> <name>user_convert</name></expr>;</init> <condition><expr><name>drv</name></expr>;</condition> <incr><expr><name>drv</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>drv</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>drv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>user_convert</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>user_convert_tail</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>would_convert_to_git_filter_fd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>conv_attrs</name></name></type> <name>ca</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>convert_attrs</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ca</name><operator>.</operator><name>drv</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>required</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>apply_filter</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>drv</name></name></expr></argument>, <argument><expr><name>CAP_CLEAN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_convert_attr_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>conv_attrs</name></name></type> <name>ca</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>convert_attrs</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>ca</name><operator>.</operator><name>attr_action</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CRLF_UNDEFINED</name></expr>:</case>

<return>return <expr><literal type="string">""</literal></expr>;</return>

<case>case <expr><name>CRLF_BINARY</name></expr>:</case>

<return>return <expr><literal type="string">"-text"</literal></expr>;</return>

<case>case <expr><name>CRLF_TEXT</name></expr>:</case>

<return>return <expr><literal type="string">"text"</literal></expr>;</return>

<case>case <expr><name>CRLF_TEXT_INPUT</name></expr>:</case>

<return>return <expr><literal type="string">"text eol=lf"</literal></expr>;</return>

<case>case <expr><name>CRLF_TEXT_CRLF</name></expr>:</case>

<return>return <expr><literal type="string">"text eol=crlf"</literal></expr>;</return>

<case>case <expr><name>CRLF_AUTO</name></expr>:</case>

<return>return <expr><literal type="string">"text=auto"</literal></expr>;</return>

<case>case <expr><name>CRLF_AUTO_CRLF</name></expr>:</case>

<return>return <expr><literal type="string">"text=auto eol=crlf"</literal></expr>;</return>

<case>case <expr><name>CRLF_AUTO_INPUT</name></expr>:</case>

<return>return <expr><literal type="string">"text=auto eol=lf"</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>convert_to_git</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>conv_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>conv_attrs</name></name></type> <name>ca</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>convert_attrs</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>apply_filter</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>drv</name></name></expr></argument>, <argument><expr><name>CAP_CLEAN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name><name>ca</name><operator>.</operator><name>drv</name></name> <operator>&amp;&amp;</operator> <name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>required</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: clean filter '%s' failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>encode_to_git</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>working_tree_encoding</name></name></expr></argument>, <argument><expr><name>conv_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>conv_flags</name> <operator>&amp;</operator> <name>CONV_EOL_KEEP_CRLF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>crlf_to_git</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>crlf_action</name></name></expr></argument>, <argument><expr><name>conv_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name> <operator>|</operator> <call><name>ident_to_git</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>convert_to_git_filter_fd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>conv_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>conv_attrs</name></name></type> <name>ca</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>convert_attrs</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>drv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>clean</name></name> <operator>||</operator> <name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>process</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>apply_filter</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>drv</name></name></expr></argument>, <argument><expr><name>CAP_CLEAN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: clean filter '%s' failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>encode_to_git</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>working_tree_encoding</name></name></expr></argument>, <argument><expr><name>conv_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>crlf_to_git</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>crlf_action</name></name></expr></argument>, <argument><expr><name>conv_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ident_to_git</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_to_working_tree_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>normalizing</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>delayed_checkout</name></name> <modifier>*</modifier></type><name>dco</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret_filter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>conv_attrs</name></name></type> <name>ca</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>convert_attrs</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>ident_to_worktree</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ca</name><operator>.</operator><name>drv</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>smudge</name></name> <operator>||</operator> <name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>process</name></name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>!</operator><name>normalizing</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>crlf_to_worktree</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>crlf_action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>encode_to_worktree</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>working_tree_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret_filter</name> <operator>=</operator> <call><name>apply_filter</name><argument_list>(

<argument><expr><name>path</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>drv</name></name></expr></argument>, <argument><expr><name>CAP_SMUDGE</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>dco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret_filter</name> <operator>&amp;&amp;</operator> <name><name>ca</name><operator>.</operator><name>drv</name></name> <operator>&amp;&amp;</operator> <name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>required</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: smudge filter %s failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name> <operator>|</operator> <name>ret_filter</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>async_convert_to_working_tree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dco</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>convert_to_working_tree_internal</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>dco</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>convert_to_working_tree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>convert_to_working_tree_internal</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>renormalize_buffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>convert_to_working_tree_internal</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name> <operator>|</operator> <call><name>convert_to_git</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>CONV_EOL_RENORMALIZE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>filter_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>isize_p</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize_p</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>stream_filter_vtbl</name> <block>{

<decl_stmt><decl><type><name>filter_fn</name></type> <name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>free_fn</name></type> <name>free</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>stream_filter</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>stream_filter_vtbl</name></name> <modifier>*</modifier></type><name>vtbl</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>null_filter_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>isize_p</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>*</operator><name>isize_p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>osize_p</name> <operator>&lt;</operator> <name>count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>*</operator><name>osize_p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>isize_p</name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>osize_p</name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>null_free_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<empty_stmt>;</empty_stmt> 

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>stream_filter_vtbl</name></name></type> <name>null_vtbl</name> <init>= <expr><block>{

<expr><name>null_filter_fn</name></expr>,

<expr><name>null_free_fn</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>stream_filter</name></name></type> <name>null_filter_singleton</name> <init>= <expr><block>{

<expr><operator>&amp;</operator><name>null_vtbl</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>is_null_stream_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>filter</name> <operator>==</operator> <operator>&amp;</operator><name>null_filter_singleton</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>lf_to_crlf_filter</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>stream_filter</name></name></type> <name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>has_held</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>held</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lf_to_crlf_filter_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>isize_p</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>o</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lf_to_crlf_filter</name></name> <modifier>*</modifier></type><name>lf_to_crlf</name> <init>= <expr><operator>(</operator>struct <name>lf_to_crlf_filter</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lf_to_crlf</name><operator>-&gt;</operator><name>has_held</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>lf_to_crlf</name><operator>-&gt;</operator><name>held</name></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>!</operator><name>input</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>o</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>lf_to_crlf</name><operator>-&gt;</operator><name>held</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lf_to_crlf</name><operator>-&gt;</operator><name>has_held</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>osize_p</name> <operator>-=</operator> <name>o</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>*</operator><name>isize_p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>||</operator> <name><name>lf_to_crlf</name><operator>-&gt;</operator><name>has_held</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>was_cr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>lf_to_crlf</name><operator>-&gt;</operator><name>has_held</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>was_cr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lf_to_crlf</name><operator>-&gt;</operator><name>has_held</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <operator>*</operator><name>osize_p</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>o</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>was_cr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>o</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>osize_p</name> <operator>&lt;=</operator> <name>o</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lf_to_crlf</name><operator>-&gt;</operator><name>has_held</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lf_to_crlf</name><operator>-&gt;</operator><name>held</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<continue>continue;</continue> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>was_cr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>was_cr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>o</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>osize_p</name> <operator>-=</operator> <name>o</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>isize_p</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lf_to_crlf</name><operator>-&gt;</operator><name>has_held</name></name> <operator>&amp;&amp;</operator> <name>was_cr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>lf_to_crlf</name><operator>-&gt;</operator><name>has_held</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lf_to_crlf</name><operator>-&gt;</operator><name>held</name></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lf_to_crlf_free_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>stream_filter_vtbl</name></name></type> <name>lf_to_crlf_vtbl</name> <init>= <expr><block>{

<expr><name>lf_to_crlf_filter_fn</name></expr>,

<expr><name>lf_to_crlf_free_fn</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>lf_to_crlf_filter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>lf_to_crlf_filter</name></name> <modifier>*</modifier></type><name>lf_to_crlf</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>lf_to_crlf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lf_to_crlf</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>vtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>lf_to_crlf_vtbl</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator>struct <name>stream_filter</name> <operator>*</operator><operator>)</operator><name>lf_to_crlf</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_BUFFER</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<struct>struct <name>cascade_filter</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>stream_filter</name></name></type> <name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>one</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>two</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>FILTER_BUFFER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name></decl>, <decl><type ref="prev"/><name>ptr</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cascade_filter_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>isize_p</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cascade_filter</name></name> <modifier>*</modifier></type><name>cas</name> <init>= <expr><operator>(</operator>struct <name>cascade_filter</name> <operator>*</operator><operator>)</operator> <name>filter</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>filled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><operator>*</operator><name>osize_p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>to_feed</name></decl>, <decl><type ref="prev"/><name>remaining</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>filled</name> <operator>&lt;</operator> <name>sz</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>sz</name> <operator>-</operator> <name>filled</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cas</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&lt;</operator> <name><name>cas</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>to_feed</name> <operator>=</operator> <name><name>cas</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>cas</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stream_filter</name><argument_list>(<argument><expr><name><name>cas</name><operator>-&gt;</operator><name>two</name></name></expr></argument>,

<argument><expr><name><name>cas</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>cas</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_feed</name></expr></argument>,

<argument><expr><name>output</name> <operator>+</operator> <name>filled</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remaining</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cas</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+=</operator> <operator>(</operator><name><name>cas</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>cas</name><operator>-&gt;</operator><name>ptr</name></name><operator>)</operator> <operator>-</operator> <name>to_feed</name></expr>;</expr_stmt>

<expr_stmt><expr><name>filled</name> <operator>=</operator> <name>sz</name> <operator>-</operator> <name>remaining</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>to_feed</name> <operator>=</operator> <ternary><condition><expr><name>input</name></expr> ?</condition><then> <expr><operator>*</operator><name>isize_p</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>to_feed</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cas</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stream_filter</name><argument_list>(<argument><expr><name><name>cas</name><operator>-&gt;</operator><name>one</name></name></expr></argument>,

<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_feed</name></expr></argument>,

<argument><expr><name><name>cas</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remaining</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cas</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cas</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>remaining</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cas</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>fed</name> <init>= <expr><operator>*</operator><name>isize_p</name> <operator>-</operator> <name>to_feed</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>isize_p</name> <operator>-=</operator> <name>fed</name></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>+=</operator> <name>fed</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name> <operator>||</operator> <name><name>cas</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>to_feed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>sz</name> <operator>-</operator> <name>filled</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>stream_filter</name><argument_list>(<argument><expr><name><name>cas</name><operator>-&gt;</operator><name>two</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_feed</name></expr></argument>,

<argument><expr><name>output</name> <operator>+</operator> <name>filled</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>remaining</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>==</operator> <operator>(</operator><name>sz</name> <operator>-</operator> <name>filled</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>filled</name> <operator>=</operator> <name>sz</name> <operator>-</operator> <name>remaining</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>osize_p</name> <operator>-=</operator> <name>filled</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cascade_free_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cascade_filter</name></name> <modifier>*</modifier></type><name>cas</name> <init>= <expr><operator>(</operator>struct <name>cascade_filter</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free_stream_filter</name><argument_list>(<argument><expr><name><name>cas</name><operator>-&gt;</operator><name>one</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_stream_filter</name><argument_list>(<argument><expr><name><name>cas</name><operator>-&gt;</operator><name>two</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>stream_filter_vtbl</name></name></type> <name>cascade_vtbl</name> <init>= <expr><block>{

<expr><name>cascade_filter_fn</name></expr>,

<expr><name>cascade_free_fn</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>cascade_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>one</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>two</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cascade_filter</name></name> <modifier>*</modifier></type><name>cascade</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>one</name> <operator>||</operator> <call><name>is_null_stream_filter</name><argument_list>(<argument><expr><name>one</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>two</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>two</name> <operator>||</operator> <call><name>is_null_stream_filter</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>one</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cascade</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cascade</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cascade</name><operator>-&gt;</operator><name>one</name></name> <operator>=</operator> <name>one</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cascade</name><operator>-&gt;</operator><name>two</name></name> <operator>=</operator> <name>two</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cascade</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>cascade</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cascade</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>vtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>cascade_vtbl</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator>struct <name>stream_filter</name> <operator>*</operator><operator>)</operator><name>cascade</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDENT_DRAINING</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDENT_SKIPPING</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>

<struct>struct <name>ident_filter</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>stream_filter</name></name></type> <name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ident</name><index>[<expr><name>GIT_MAX_HEXSZ</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_foreign_ident</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"$Id: "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ident_drain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ident_filter</name></name> <modifier>*</modifier></type><name>ident</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>output_p</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>to_drain</name> <init>= <expr><name><name>ident</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>osize_p</name> <operator>&lt;</operator> <name>to_drain</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>to_drain</name> <operator>=</operator> <operator>*</operator><name>osize_p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>to_drain</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>output_p</name></expr></argument>, <argument><expr><name><name>ident</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>to_drain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>to_drain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>output_p</name> <operator>+=</operator> <name>to_drain</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>osize_p</name> <operator>-=</operator> <name>to_drain</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ident_filter_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>isize_p</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ident_filter</name></name> <modifier>*</modifier></type><name>ident</name> <init>= <expr><operator>(</operator>struct <name>ident_filter</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>head</name><index>[]</index></name> <init>= <expr><literal type="string">"$Id"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>input</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>IDENT_SKIPPING</name></expr>:</case>

<case>case <expr><name>IDENT_DRAINING</name></expr>:</case>

<expr_stmt><expr><call><name>ident_drain</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name>osize_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>isize_p</name> <operator>||</operator> <operator>(</operator><name><name>ident</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>IDENT_DRAINING</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>IDENT_DRAINING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ident_drain</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name>osize_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>osize_p</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>input</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>isize_p</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>IDENT_SKIPPING</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_foreign_ident</name><argument_list>(<argument><expr><name><name>ident</name><operator>-&gt;</operator><name>left</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>ident</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>IDENT_DRAINING</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>

<name><name>head</name><index>[<expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name> <operator>==</operator> <name>ch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>IDENT_SKIPPING</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>ident</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>IDENT_DRAINING</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>IDENT_DRAINING</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ident_free_fn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ident_filter</name></name> <modifier>*</modifier></type><name>ident</name> <init>= <expr><operator>(</operator>struct <name>ident_filter</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>stream_filter_vtbl</name></name></type> <name>ident_vtbl</name> <init>= <expr><block>{

<expr><name>ident_filter_fn</name></expr>,

<expr><name>ident_free_fn</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>ident_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ident_filter</name></name> <modifier>*</modifier></type><name>ident</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ident</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name><name>ident</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ident</name><operator>-&gt;</operator><name>ident</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">": %s $"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ident</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ident</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>vtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>ident_vtbl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ident</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>(</operator>struct <name>stream_filter</name> <operator>*</operator><operator>)</operator><name>ident</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>get_stream_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>conv_attrs</name></name></type> <name>ca</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>convert_attrs</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ca</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>drv</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>process</name></name> <operator>||</operator> <name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>smudge</name></name> <operator>||</operator> <name><name>ca</name><operator>.</operator><name>drv</name><operator>-&gt;</operator><name>clean</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>working_tree_encoding</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>crlf_action</name></name> <operator>==</operator> <name>CRLF_AUTO</name> <operator>||</operator> <name><name>ca</name><operator>.</operator><name>crlf_action</name></name> <operator>==</operator> <name>CRLF_AUTO_CRLF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>.</operator><name>ident</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>ident_filter</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>output_eol</name><argument_list>(<argument><expr><name><name>ca</name><operator>.</operator><name>crlf_action</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOL_CRLF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>cascade_filter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><call><name>lf_to_crlf_filter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>cascade_filter</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null_filter_singleton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>filter</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_stream_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>filter</name><operator>-&gt;</operator><name>vtbl</name><operator>-&gt;</operator><name>free</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>stream_filter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stream_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>isize_p</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>osize_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>filter</name><operator>-&gt;</operator><name>vtbl</name><operator>-&gt;</operator><name>filter</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>isize_p</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>osize_p</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_checkout_metadata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>treeish</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>blob</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>meta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>refname</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>refname</name></name> <operator>=</operator> <name>refname</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>treeish</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>treeish</name></name></expr></argument>, <argument><expr><name>treeish</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blob</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>, <argument><expr><name>blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>clone_checkout_metadata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_metadata</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>blob</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blob</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>, <argument><expr><name>blob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
