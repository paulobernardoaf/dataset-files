<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\graph.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"color.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graph.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>graph_padding_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>graph_show_strbuf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>,

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>column</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>color</name></decl>;</decl_stmt>

}</block>;</struct>

<enum>enum <name>graph_state</name> <block>{

<decl><name>GRAPH_PADDING</name></decl>,

<decl><name>GRAPH_SKIP</name></decl>,

<decl><name>GRAPH_PRE_COMMIT</name></decl>,

<decl><name>GRAPH_COMMIT</name></decl>,

<decl><name>GRAPH_POST_MERGE</name></decl>,

<decl><name>GRAPH_COLLAPSING</name></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_show_line_prefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>diffopt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>diffopt</name> <operator>||</operator> <operator>!</operator><name><name>diffopt</name><operator>-&gt;</operator><name>line_prefix</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>diffopt</name><operator>-&gt;</operator><name>line_prefix</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>diffopt</name><operator>-&gt;</operator><name>line_prefix_length</name></name></expr></argument>,

<argument><expr><name><name>diffopt</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>column_colors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>column_colors_max</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_graph_colors_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>colors</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>string</name></expr>;</expr_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>string</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><call><name>strchrnul</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>color</name><index>[<expr><name>COLOR_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>color_parse_mem</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>comma</name> <operator>-</operator> <name>start</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><name>colors</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignore invalid color '%.*s' in log.graphColors"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>comma</name> <operator>-</operator> <name>start</name><operator>)</operator></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>comma</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><name>colors</name></expr></argument>, <argument><expr><name>GIT_COLOR_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>graph_set_column_colors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>colors</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>colors_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>column_colors</name> <operator>=</operator> <name>colors</name></expr>;</expr_stmt>

<expr_stmt><expr><name>column_colors_max</name> <operator>=</operator> <name>colors_max</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>column_get_color_code</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>column_colors</name><index>[<expr><name>color</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>graph_line</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>width</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>graph_line_addch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>width</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>graph_line_addchars</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addchars</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>width</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>graph_line_addstr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>line</name><operator>-&gt;</operator><name>width</name></name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>graph_line_addcolor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name><name>line</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><call><name>column_get_color_code</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_line_write_column</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>column</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>char</name></type> <name>col_char</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>color</name></name> <operator>&lt;</operator> <name>column_colors_max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_addcolor</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>graph_line_addch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>color</name></name> <operator>&lt;</operator> <name>column_colors_max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_addcolor</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>column_colors_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<struct>struct <name>git_graph</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_parents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>expansion_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>graph_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>graph_state</name></name></type> <name>prev_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>commit_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_commit_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>merge_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>edges_added</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prev_edges_added</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>column_capacity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_columns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_new_columns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mapping_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>column</name></name> <modifier>*</modifier></type><name>columns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>column</name></name> <modifier>*</modifier></type><name>new_columns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>mapping</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>old_mapping</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>default_column_color</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>diff_output_prefix_callback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>msgbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>line_prefix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>line_prefix</name></name></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>line_prefix_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>graph</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_padding_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name>msgbuf</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>default_diffopt</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>graph_setup_line_prefix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>diffopt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>default_diffopt</name> <operator>=</operator> <name>diffopt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diffopt</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>diffopt</name><operator>-&gt;</operator><name>output_prefix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>diffopt</name><operator>-&gt;</operator><name>output_prefix</name></name> <operator>=</operator> <name>diff_output_prefix_callback</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>git_graph</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>column_colors</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_config_get_string</name><argument_list>(<argument><expr><literal type="string">"log.graphcolors"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>graph_set_column_colors</name><argument_list>(<argument><expr><name>column_colors_ansi</name></expr></argument>,

<argument><expr><name>column_colors_ansi_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>argv_array</name></name></type> <name>custom_colors</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>custom_colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_graph_colors_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name>custom_colors</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_set_column_colors</name><argument_list>(<argument><expr><name><name>custom_colors</name><operator>.</operator><name>argv</name></name></expr></argument>,

<argument><expr><name><name>custom_colors</name><operator>.</operator><name>argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>commit</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name></name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>expansion_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>GRAPH_PADDING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name>GRAPH_PADDING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>commit_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>prev_commit_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>merge_layout</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>edges_added</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>prev_edges_added</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>num_new_columns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>default_column_color</name></name> <operator>=</operator> <name>column_colors_max</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>column_capacity</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>column_capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>new_columns</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>column_capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>graph</name><operator>-&gt;</operator><name>column_capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>old_mapping</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>graph</name><operator>-&gt;</operator><name>column_capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>output_prefix</name></name> <operator>=</operator> <name>diff_output_prefix_callback</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>output_prefix_data</name></name> <operator>=</operator> <name>graph</name></expr>;</expr_stmt>

<return>return <expr><name>graph</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_update_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>graph_state</name></name></type> <name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_ensure_capacity</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_columns</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>column_capacity</name></name> <operator>&gt;=</operator> <name>num_columns</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>column_capacity</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>column_capacity</name></name> <operator>&lt;</operator> <name>num_columns</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>column_capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>new_columns</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>column_capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>column_capacity</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>old_mapping</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>column_capacity</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>graph_is_interesting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name></name> <operator>&amp;&amp;</operator> <name><name>graph</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>boundary</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>CHILD_SHOWN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>get_commit_action</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name></name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>commit_show</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>next_interesting_parent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>first_parent_only</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>list</name></expr>;</condition> <incr><expr><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>graph_is_interesting</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>list</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>first_interesting_parent</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parents</name> <init>= <expr><name><name>graph</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parents</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>graph_is_interesting</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name><name>parents</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>parents</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>next_interesting_parent</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>parents</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>graph_get_current_column_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>want_color</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>use_color</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>column_colors_max</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>graph</name><operator>-&gt;</operator><name>default_column_color</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_increment_column_color</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>default_column_color</name></name> <operator>=</operator> <operator>(</operator><name><name>graph</name><operator>-&gt;</operator><name>default_column_color</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator>

<name>column_colors_max</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>graph_find_commit_color</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>commit</name> <operator>==</operator> <name>commit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>graph</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>graph_get_current_column_color</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>graph_find_new_column_by_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_new_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>new_columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>commit</name> <operator>==</operator> <name>commit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_insert_into_new_columns</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>graph_find_new_column_by_commit</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mapping_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_new_columns</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>new_columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>commit</name> <operator>=</operator> <name>commit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>new_columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>color</name> <operator>=</operator> <call><name>graph_find_commit_color</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>graph</name><operator>-&gt;</operator><name>merge_layout</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dist</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name>dist</name> <operator>-</operator> <literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>merge_layout</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>dist</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>edges_added</name></name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>+</operator> <name><name>graph</name><operator>-&gt;</operator><name>merge_layout</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mapping_idx</name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <operator>(</operator><name><name>graph</name><operator>-&gt;</operator><name>merge_layout</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>width</name></name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>graph</name><operator>-&gt;</operator><name>merge_layout</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>edges_added</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name><name>graph</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mapping_idx</name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>edges_added</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mapping_idx</name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>width</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>mapping_idx</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_update_columns</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_new_columns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>seen_this</name></decl>, <decl><type ref="prev"/><name>is_commit_in_columns</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>new_columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_new_columns</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>num_new_columns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_new_columns</name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name> <operator>+</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_ensure_capacity</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>max_new_columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>max_new_columns</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>prev_edges_added</name></name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>edges_added</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>edges_added</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>seen_this</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is_commit_in_columns</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>col_commit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>seen_this</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>is_commit_in_columns</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>col_commit</name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>commit</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>col_commit</name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>commit</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col_commit</name> <operator>==</operator> <name><name>graph</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>seen_this</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>commit_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>merge_layout</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>parent</name> <operator>=</operator> <call><name>first_interesting_parent</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</init>

<condition><expr><name>parent</name></expr>;</condition>

<incr><expr><name>parent</name> <operator>=</operator> <call><name>next_interesting_parent</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>!</operator><name>is_commit_in_columns</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>graph_increment_column_color</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>graph_insert_into_new_columns</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>width</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>graph_insert_into_new_columns</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>col_commit</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>graph_num_dashed_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>+</operator> <name><name>graph</name><operator>-&gt;</operator><name>merge_layout</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>graph_num_expansion_rows</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>graph_num_dashed_parents</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>graph_needs_pre_commit_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>

<name><name>graph</name><operator>-&gt;</operator><name>commit_index</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>graph</name><operator>-&gt;</operator><name>expansion_row</name></name> <operator>&lt;</operator> <call><name>graph_num_expansion_rows</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>graph_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>commit</name></name> <operator>=</operator> <name>commit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>parent</name> <operator>=</operator> <call><name>first_interesting_parent</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</init>

<condition><expr><name>parent</name></expr>;</condition>

<incr><expr><name>parent</name> <operator>=</operator> <call><name>next_interesting_parent</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>prev_commit_index</name></name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>commit_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_update_columns</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>expansion_row</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>GRAPH_PADDING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>GRAPH_SKIP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>graph_needs_pre_commit_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>GRAPH_PRE_COMMIT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>GRAPH_COMMIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>graph_is_mapping_correct</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>target</name> <init>= <expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>==</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></for>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_pad_horizontally</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>width</name></name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_addchars</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name><name>line</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_output_padding_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_new_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>new_columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_line_addch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>graph_width</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>graph</name><operator>-&gt;</operator><name>width</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_output_skip_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>graph_line_addstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>graph_needs_pre_commit_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_update_state</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>GRAPH_PRE_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_update_state</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>GRAPH_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_output_pre_commit_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>seen_this</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>graph</name><operator>-&gt;</operator><name>expansion_row</name></name> <operator>&amp;&amp;</operator>

<name><name>graph</name><operator>-&gt;</operator><name>expansion_row</name></name> <operator>&lt;</operator> <call><name>graph_num_expansion_rows</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>seen_this</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>column</name></name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>commit</name></name> <operator>==</operator> <name><name>graph</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>seen_this</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_line_addchars</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>expansion_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>seen_this</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>graph</name><operator>-&gt;</operator><name>expansion_row</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>==</operator> <name>GRAPH_POST_MERGE</name> <operator>&amp;&amp;</operator>

<name><name>graph</name><operator>-&gt;</operator><name>prev_commit_index</name></name> <operator>&lt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>seen_this</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>graph</name><operator>-&gt;</operator><name>expansion_row</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>graph_line_addch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>expansion_row</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>graph_needs_pre_commit_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_update_state</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>GRAPH_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_output_commit_char</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>BOUNDARY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>boundary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_line_addch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>graph_line_addstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><call><name>get_revision_mark</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_draw_octopus_merge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>column</name></name> <modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dashed_parents</name> <init>= <expr><call><name>graph_num_dashed_parents</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dashed_parents</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><operator>(</operator><name><name>graph</name><operator>-&gt;</operator><name>commit_index</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>col</name> <operator>=</operator> <operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>new_columns</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>dashed_parents</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'.'</literal></expr> </then><else>: <expr><literal type="char">'-'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_output_commit_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>seen_this</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>seen_this</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>column</name></name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>col_commit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>seen_this</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>col_commit</name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>commit</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>col_commit</name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>commit</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col_commit</name> <operator>==</operator> <name><name>graph</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>seen_this</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_output_commit_char</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_draw_octopus_merge</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>seen_this</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>graph</name><operator>-&gt;</operator><name>edges_added</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>seen_this</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>graph</name><operator>-&gt;</operator><name>edges_added</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>==</operator> <name>GRAPH_POST_MERGE</name> <operator>&amp;&amp;</operator>

<name><name>graph</name><operator>-&gt;</operator><name>prev_edges_added</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>graph</name><operator>-&gt;</operator><name>prev_commit_index</name></name> <operator>&lt;</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>==</operator> <name>GRAPH_COLLAPSING</name> <operator>&amp;&amp;</operator>

<name><name>graph</name><operator>-&gt;</operator><name>old_mapping</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>i</name> <operator>&amp;&amp;</operator>

<name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>graph_line_addch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_update_state</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>GRAPH_POST_MERGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>graph_is_mapping_correct</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_update_state</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>GRAPH_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_update_state</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>GRAPH_COLLAPSING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>merge_chars</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'/'</literal></expr>, <expr><literal type="char">'|'</literal></expr>, <expr><literal type="char">'\\'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_output_post_merge_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>seen_this</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>first_parent</name> <init>= <expr><call><name>first_interesting_parent</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>column</name></name> <modifier>*</modifier></type><name>parent_col</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>column</name></name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>col_commit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>seen_this</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>col_commit</name> <operator>=</operator> <name><name>graph</name><operator>-&gt;</operator><name>commit</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>col_commit</name> <operator>=</operator> <name><name>col</name><operator>-&gt;</operator><name>commit</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col_commit</name> <operator>==</operator> <name><name>graph</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parents</name> <init>= <expr><name>first_parent</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>par_column</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>graph</name><operator>-&gt;</operator><name>merge_layout</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>seen_this</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>par_column</name> <operator>=</operator> <call><name>graph_find_new_column_by_commit</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name><name>parents</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>par_column</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>merge_chars</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>new_columns</name><index>[<expr><name>par_column</name></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>edges_added</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_addch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>parents</name> <operator>=</operator> <call><name>next_interesting_parent</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>parents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>edges_added</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_addch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>seen_this</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>edges_added</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>graph_line_addch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>merge_layout</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>!=</operator> <name><name>graph</name><operator>-&gt;</operator><name>commit_index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>parent_col</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(

<argument><expr><name>line</name></expr></argument>, <argument><expr><name>parent_col</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_addch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>col_commit</name> <operator>==</operator> <name><name>first_parent</name><operator>-&gt;</operator><name>item</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parent_col</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>graph_is_mapping_correct</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_update_state</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>GRAPH_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_update_state</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>GRAPH_COLLAPSING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_output_collapsing_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>graph_line</name></name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>used_horizontal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>horizontal_edge</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>horizontal_edge_target</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>old_mapping</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>target</name> <init>= <expr><name><name>graph</name><operator>-&gt;</operator><name>old_mapping</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>target</name> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>*</operator> <literal type="number">2</literal> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>horizontal_edge</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>horizontal_edge</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>horizontal_edge_target</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>target</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>target</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>horizontal_edge</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>horizontal_edge_target</name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

<expr_stmt><expr><name>horizontal_edge</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>target</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>old_mapping</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>mapping_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>target</name> <init>= <expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_addch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>target</name> <operator>*</operator> <literal type="number">2</literal> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>new_columns</name><index>[<expr><name>target</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>target</name> <operator>==</operator> <name>horizontal_edge_target</name> <operator>&amp;&amp;</operator>

<name>i</name> <operator>!=</operator> <name>horizontal_edge</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <operator>(</operator><name>target</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>used_horizontal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>new_columns</name><index>[<expr><name>target</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>used_horizontal</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>horizontal_edge</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>mapping</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>new_columns</name><index>[<expr><name>target</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>graph_is_mapping_correct</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_update_state</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>GRAPH_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>graph_next_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>shown_commit_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>graph_line</name></name></type> <name>line</name> <init>= <expr><block>{ <expr><operator>.</operator><name>buf</name> <operator>=</operator> <name>sb</name></expr>, <expr><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>graph</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GRAPH_PADDING</name></expr>:</case>

<expr_stmt><expr><call><name>graph_output_padding_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_SKIP</name></expr>:</case>

<expr_stmt><expr><call><name>graph_output_skip_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_PRE_COMMIT</name></expr>:</case>

<expr_stmt><expr><call><name>graph_output_pre_commit_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_COMMIT</name></expr>:</case>

<expr_stmt><expr><call><name>graph_output_commit_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shown_commit_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_POST_MERGE</name></expr>:</case>

<expr_stmt><expr><call><name>graph_output_post_merge_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_COLLAPSING</name></expr>:</case>

<expr_stmt><expr><call><name>graph_output_collapsing_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>graph_pad_horizontally</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>shown_commit_line</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_padding_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>graph_line</name></name></type> <name>line</name> <init>= <expr><block>{ <expr><operator>.</operator><name>buf</name> <operator>=</operator> <name>sb</name></expr>, <expr><operator>.</operator><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>GRAPH_COMMIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>graph_next_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>column</name></name> <modifier>*</modifier></type><name>col</name> <init>= <expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>graph_line_write_column</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>col</name><operator>-&gt;</operator><name>commit</name></name> <operator>==</operator> <name><name>graph</name><operator>-&gt;</operator><name>commit</name></name> <operator>&amp;&amp;</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name><name>graph</name><operator>-&gt;</operator><name>num_parents</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>graph_line_addchars</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>graph_line_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>graph_pad_horizontally</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>prev_state</name></name> <operator>=</operator> <name>GRAPH_PADDING</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>graph_is_commit_finished</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>graph</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>GRAPH_PADDING</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>graph_show_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>msgbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shown_commit_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>graph_show_line_prefix</name><argument_list>(<argument><expr><name>default_diffopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>graph_is_commit_finished</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>graph_show_padding</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shown_commit_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name>shown_commit_line</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>graph_is_commit_finished</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shown_commit_line</name> <operator>=</operator> <call><name>graph_next_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>msgbuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>msgbuf</name><operator>.</operator><name>len</name></name></expr></argument>,

<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shown_commit_line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_show_line_prefix</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>graph_show_oneline</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>msgbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>graph_show_line_prefix</name><argument_list>(<argument><expr><name>default_diffopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>graph_next_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>msgbuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>msgbuf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>graph_show_padding</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>msgbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>graph_show_line_prefix</name><argument_list>(<argument><expr><name>default_diffopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>graph_padding_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>msgbuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>msgbuf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>graph_show_remainder</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>msgbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shown</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>graph_show_line_prefix</name><argument_list>(<argument><expr><name>default_diffopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>graph_is_commit_finished</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>graph_next_line</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>msgbuf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>msgbuf</name><operator>.</operator><name>len</name></name></expr></argument>,

<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shown</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>graph_is_commit_finished</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>diffopt</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>graph_show_line_prefix</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graph</name><operator>-&gt;</operator><name>revs</name><operator>-&gt;</operator><name>diffopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>shown</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_show_strbuf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>,

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next_p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next_p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>next_p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>next_p</name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>sb</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator> <operator>-</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next_p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>next_p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_show_oneline</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>next_p</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>graph_show_commit_msg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>git_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl></parameter>,

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>newline_terminated</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>graph_show_strbuf</name><argument_list>(<argument><expr><name>graph</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>newline_terminated</name> <operator>=</operator> <operator>(</operator><name><name>sb</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>sb</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>sb</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>graph_is_commit_finished</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>newline_terminated</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>graph_show_remainder</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>newline_terminated</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
