<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\apply.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"delta.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ll-merge.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lockfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rerere.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apply.h"</cpp:file></cpp:include>

<struct>struct <name>gitdiff_data</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linenr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_value</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>git_apply_config</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>git_config_get_string_const</name><argument_list>(<argument><expr><literal type="string">"apply.whitespace"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>apply_default_whitespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config_get_string_const</name><argument_list>(<argument><expr><literal type="string">"apply.ignorewhitespace"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>apply_default_ignorewhitespace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>git_xmerge_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_whitespace_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>option</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>=</operator> <name>warn_on_ws_error</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"warn"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>=</operator> <name>warn_on_ws_error</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"nowarn"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>=</operator> <name>nowarn_ws_error</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>=</operator> <name>die_on_ws_error</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"error-all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>=</operator> <name>die_on_ws_error</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>squelch_whitespace_errors</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"strip"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"fix"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>=</operator> <name>correct_ws_error</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unrecognized whitespace option '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_ignorewhitespace_option</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>option</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"never"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_ignore_action</name></name> <operator>=</operator> <name>ignore_ws_none</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"change"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_ignore_action</name></name> <operator>=</operator> <name>ignore_ws_change</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unrecognized whitespace ignore option '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>init_apply_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name></name> <operator>=</operator> <name>repo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>apply</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>line_termination</name></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>p_context</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>squelch_whitespace_errors</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>=</operator> <name>warn_on_ws_error</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_ignore_action</name></name> <operator>=</operator> <name>ignore_ws_none</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>fn_table</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>limit_by_name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>symlink_changes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_apply_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>apply_default_whitespace</name> <operator>&amp;&amp;</operator> <call><name>parse_whitespace_option</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>apply_default_whitespace</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>apply_default_ignorewhitespace</name> <operator>&amp;&amp;</operator> <call><name>parse_ignorewhitespace_option</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>apply_default_ignorewhitespace</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_apply_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>limit_by_name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>symlink_changes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mute_routine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>params</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>check_apply_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_apply</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_not_gitdir</name> <init>= <expr><operator>!</operator><name><name>startup_info</name><operator>-&gt;</operator><name>have_repository</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_with_reject</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>threeway</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--reject and --3way cannot be used together."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>threeway</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--cached and --3way cannot be used together."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>threeway</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_not_gitdir</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--3way outside a repository"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>check_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_with_reject</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>apply</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>==</operator> <name>verbosity_normal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>=</operator> <name>verbosity_verbose</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_apply</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>diffstat</name></name> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>numstat</name></name> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>summary</name></name> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>check</name></name> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>fake_ancestor</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>apply</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>check_index</name></name> <operator>&amp;&amp;</operator> <name>is_not_gitdir</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--index outside a repository"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>cached</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_not_gitdir</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--cached outside a repository"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>check_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ita_only</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>check_index</name></name> <operator>||</operator> <name>is_not_gitdir</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ita_only</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>check_index</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>unsafe_paths</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&lt;=</operator> <name>verbosity_silent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>saved_error_routine</name></name> <operator>=</operator> <call><name>get_error_routine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>saved_warn_routine</name></name> <operator>=</operator> <call><name>get_warn_routine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_error_routine</name><argument_list>(<argument><expr><name>mute_routine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_warn_routine</name><argument_list>(<argument><expr><name>mute_routine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_default_whitespace_mode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>whitespace_option</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>apply_default_whitespace</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>apply</name></name></expr> ?</condition><then> <expr><name>warn_on_ws_error</name></expr> </then><else>: <expr><name>nowarn_ws_error</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<struct>struct <name>fragment</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>leading</name></decl>, <decl><type ref="prev"/><name>trailing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>oldpos</name></decl>, <decl><type ref="prev"/><name>oldlines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>newpos</name></decl>, <decl><type ref="prev"/><name>newlines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>free_patch</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>rejected</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linenr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>binary_patch_method</name></cpp:macro> <cpp:value>leading</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINARY_DELTA_DEFLATED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINARY_LITERAL_DEFLATED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_fragment_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>free_patch</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>list</name><operator>-&gt;</operator><name>patch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_fragment_list</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>def_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_patch_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free_patch</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<struct>struct <name>line</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>hash</name> <range>: <expr><literal type="number">24</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flag</name> <range>: <expr><literal type="number">8</literal></expr></range></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_COMMON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE_PATCHED</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

}</block>;</struct>

<struct>struct <name>image</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>line_allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>line</name></name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>hash_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>h</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name><name>cp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>h</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fuzzy_matchlines</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end1</name> <init>= <expr><name>s1</name> <operator>+</operator> <name>n1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end2</name> <init>= <expr><name>s2</name> <operator>+</operator> <name>n2</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>s1</name> <operator>&lt;</operator> <name>end1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>end1</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>end1</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end1</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>s2</name> <operator>&lt;</operator> <name>end2</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>end2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>end2</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end2</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>s1</name> <operator>&lt;</operator> <name>end1</name> <operator>&amp;&amp;</operator> <name>s2</name> <operator>&lt;</operator> <name>end2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>s1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>s2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>s1</name> <operator>&lt;</operator> <name>end1</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>s1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>s2</name> <operator>&lt;</operator> <name>end2</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>s2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>s1</name><operator>++</operator> <operator>!=</operator> <operator>*</operator><name>s2</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>s1</name> <operator>==</operator> <name>end1</name> <operator>&amp;&amp;</operator> <name>s2</name> <operator>==</operator> <name>end2</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_line_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bol</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>line_allocated</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>line_allocated</name><index>[<expr><name><name>img</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>line_allocated</name><index>[<expr><name><name>img</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>hash</name> <operator>=</operator> <call><name>hash_line</name><argument_list>(<argument><expr><name>bol</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>line_allocated</name><index>[<expr><name><name>img</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_image</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>image</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prepare_linetable</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prepare_linetable</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>image</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cp</name> <operator>&lt;</operator> <name>ep</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name>cp</name></expr>;</init> <condition><expr><name>next</name> <operator>&lt;</operator> <name>ep</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>next</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>next</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&lt;</operator> <name>ep</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_line_info</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name>next</name> <operator>-</operator> <name>cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name><name>image</name><operator>-&gt;</operator><name>line_allocated</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_image</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>image</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>image</name><operator>-&gt;</operator><name>line_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>image</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>say_patch_name</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>&amp;&amp;</operator> <name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">" =&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOP</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_patch_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"git apply: failed to read"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_grow</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>SLOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sb</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>sb</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>linelen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>size</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buffer</name><operator>++</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_dev_null</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"/dev/null"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_SPACE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TERM_TAB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>name_terminate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>terminate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>terminate</name> <operator>&amp;</operator> <name>TERM_SPACE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>terminate</name> <operator>&amp;</operator> <name>TERM_TAB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>squash_slash</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>name</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>name</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>name</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>find_name_gnu</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>p_value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>name</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unquote_c_style</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name><name>name</name><operator>.</operator><name>buf</name></name></expr>;</init> <condition><expr><name>p_value</name></expr>;</condition> <incr><expr><name>p_value</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cp</name> <operator>-</operator> <name><name>name</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>squash_slash</name><argument_list>(<argument><expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>sane_tz_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tz</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">" +0500"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">" +0500"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tz</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">" +0500"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>tz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>tz</name> <operator>+</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>line</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>tz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>tz_with_colon_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tz</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">" +08:00"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">":00"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tz</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">" +08:00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>(</operator><name><name>tz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>tz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tz</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">':'</literal> <operator>||</operator>

<operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>tz</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>date_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"72-02-05"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"-05"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>date</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"72-02-05"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'-'</literal> <operator>||</operator>

<operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'-'</literal> <operator>||</operator>

<operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>date</name> <operator>-</operator> <name>line</name> <operator>&gt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"19"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>isdigit</name><argument_list>(<argument><expr><name><name>date</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><name><name>date</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>date</name> <operator>-=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"19"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>date</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>short_time_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>time</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">" 07:01:32"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">":32"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>time</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">" 07:01:32"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">' '</literal> <operator>||</operator>

<operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">':'</literal> <operator>||</operator>

<operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">':'</literal> <operator>||</operator>

<operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>time</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>fractional_time_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>line</name> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>short_time_len</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>p</name> <operator>+</operator> <name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>trailing_spaces_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>line</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>line</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>diff_timestamp_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>line</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sane_tz_len</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tz_with_colon_len</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>short_time_len</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>fractional_time_len</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>date_len</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>line</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>end</name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>end</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>-=</operator> <call><name>trailing_spaces_len</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>line</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>end</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>find_name_common</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>p_value</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>terminate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>line</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>line</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>name_terminate</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>terminate</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>--</operator><name>p_value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>squash_slash</name><argument_list>(<argument><expr><call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>line</name> <operator>-</operator> <name>start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>squash_slash</name><argument_list>(<argument><expr><call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>def</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>deflen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>deflen</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>def</name></expr></argument>, <argument><expr><name>deflen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>squash_slash</name><argument_list>(<argument><expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>def</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%s%.*s"</literal></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>squash_slash</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>squash_slash</name><argument_list>(<argument><expr><call><name>xmemdupz</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>find_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>p_value</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>terminate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>find_name_gnu</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>p_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>name</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>find_name_common</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>def</name></expr></argument>, <argument><expr><name>p_value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>terminate</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>find_name_traditional</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>def</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>p_value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>date_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>find_name_gnu</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>p_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>name</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strchrnul</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>date_len</name> <operator>=</operator> <call><name>diff_timestamp_len</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>date_len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>find_name_common</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>def</name></expr></argument>, <argument><expr><name>p_value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TERM_TAB</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>date_len</name></expr>;</expr_stmt>

<return>return <expr><call><name>find_name_common</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>def</name></expr></argument>, <argument><expr><name>p_value</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>guess_p_value</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nameline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_dev_null</name><argument_list>(<argument><expr><name>nameline</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>find_name_traditional</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>nameline</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>count_slashes</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>count_slashes</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_epoch_timestamp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nameline</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>stamp_regexp</name><index>[]</index></name> <init>=

<expr><literal type="string">"^[0-2][0-9]:([0-5][0-9]):00(\\.0+)?"</literal>

<literal type="string">" "</literal>

<literal type="string">"([-+][0-2][0-9]:?[0-5][0-9])\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timestamp</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>colon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>stamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>regmatch_t</name></type> <name><name>m</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zoneoffset</name></decl>, <decl><type ref="prev"/><name>epoch_hour</name></decl>, <decl><type ref="prev"/><name>hour</name></decl>, <decl><type ref="prev"/><name>minute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>nameline</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timestamp</name> <operator>=</operator> <name>cp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timestamp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="string">"1969-12-31 "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>epoch_hour</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="string">"1970-01-01 "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>epoch_hour</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stamp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stamp</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>stamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>regcomp</name><argument_list>(<argument><expr><name>stamp</name></expr></argument>, <argument><expr><name>stamp_regexp</name></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot prepare timestamp regexp %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>stamp_regexp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>regexec</name><argument_list>(<argument><expr><name>stamp</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>REG_NOMATCH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"regexec returned %d for input: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>status</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hour</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>minute</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>timestamp</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zoneoffset</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>timestamp</name> <operator>+</operator> <name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>rm_so</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>colon</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>colon</name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>zoneoffset</name> <operator>=</operator> <name>zoneoffset</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>colon</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>zoneoffset</name> <operator>=</operator> <operator>(</operator><name>zoneoffset</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <operator>(</operator><name>zoneoffset</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>timestamp</name><index>[<expr><name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>rm_so</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>zoneoffset</name> <operator>=</operator> <operator>-</operator><name>zoneoffset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hour</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>minute</name> <operator>-</operator> <name>zoneoffset</name> <operator>==</operator> <name>epoch_hour</name> <operator>*</operator> <literal type="number">60</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_traditional_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>first</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>second</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>first</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>second</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>p_value_known</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>guess_p_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>guess_p_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>==</operator> <name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>p_value_known</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_dev_null</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>find_name_traditional</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_dev_null</name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>find_name_traditional</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>first_name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>first_name</name> <operator>=</operator> <call><name>find_name_traditional</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>find_name_traditional</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>first_name</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>first_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_epoch_timestamp</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>has_epoch_timestamp</name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>=</operator> <call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to find filename in patch at line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_hdrend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_OLD_NAME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_NEW_NAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_verify_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>isnull</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>side</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isnull</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>find_name</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument>, <argument><expr><name>TERM_TAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>another</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git apply: bad git-diff - expected /dev/null, got %s on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>*</operator><name>name</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>another</name> <operator>=</operator> <call><name>find_name</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument>, <argument><expr><name>TERM_TAB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>another</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>another</name></expr></argument>, <argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>another</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>side</name> <operator>==</operator> <name>DIFF_NEW_NAME</name><operator>)</operator></expr> ?</condition><then>

<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git apply: bad git-diff - inconsistent new filename on line %d"</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git apply: bad git-diff - inconsistent old filename on line %d"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>another</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_dev_null</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git apply: bad git-diff - expected /dev/null on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_oldname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gitdiff_verify_name</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>,

<argument><expr><name>DIFF_OLD_NAME</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_newname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>gitdiff_verify_name</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>,

<argument><expr><name>DIFF_NEW_NAME</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_mode_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linenr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>mode</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <name>line</name> <operator>||</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid mode on line %d: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>linenr</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_oldmode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>parse_mode_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_newmode</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>parse_mode_line</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_delete</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>=</operator> <call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>def_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>gitdiff_oldmode</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_newfile</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>=</operator> <call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>def_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>gitdiff_newmode</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_copysrc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_copy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>=</operator> <call><name>find_name</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name></expr> ?</condition><then> <expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_copydst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_copy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>=</operator> <call><name>find_name</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name></expr> ?</condition><then> <expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_renamesrc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_rename</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>=</operator> <call><name>find_name</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name></expr> ?</condition><then> <expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_renamedst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_rename</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>=</operator> <call><name>find_name</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name></expr> ?</condition><then> <expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_similarity</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_dissimilarity</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>score</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>eol</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hexsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name> <operator>||</operator> <name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>||</operator> <name>hexsz</name> <operator>&lt;</operator> <name>ptr</name> <operator>-</operator> <name>line</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_oid_prefix</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>old_oid_prefix</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>eol</name> <operator>=</operator> <call><name>strchrnul</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name> <operator>||</operator> <name>eol</name> <operator>&lt;</operator> <name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>eol</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>line</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hexsz</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_oid_prefix</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>new_oid_prefix</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>gitdiff_oldmode</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>gitdiff_unrecognized</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>skip_tree_prefix</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p_value</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>llen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nslash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>llen</name> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>line</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nslash</name> <operator>=</operator> <name>p_value</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>llen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>--</operator><name>nslash</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>line</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>git_header_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p_value</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>llen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>second</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>line_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"diff --git "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>llen</name> <operator>-=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"diff --git "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>first</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sp</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unquote_c_style</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>second</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_and_fail1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>skip_tree_prefix</name><argument_list>(<argument><expr><name>p_value</name></expr></argument>, <argument><expr><name><name>first</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>first</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_and_fail1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cp</name> <operator>-</operator> <name><name>first</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>second</name> <operator>&lt;</operator> <name>line</name> <operator>+</operator> <name>llen</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>second</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>second</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>+</operator> <name>llen</name> <operator>&lt;=</operator> <name>second</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_and_fail1</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>second</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unquote_c_style</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_and_fail1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>skip_tree_prefix</name><argument_list>(<argument><expr><name>p_value</name></expr></argument>, <argument><expr><name><name>sp</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sp</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_and_fail1</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>first</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_and_fail1</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>skip_tree_prefix</name><argument_list>(<argument><expr><name>p_value</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>llen</name> <operator>-</operator> <name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_and_fail1</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>line</name> <operator>+</operator> <name>llen</name> <operator>-</operator> <name>cp</name> <operator>!=</operator> <name><name>first</name><operator>.</operator><name>len</name></name> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>first</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>first</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_and_fail1</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>free_and_fail1</name>:</label>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>skip_tree_prefix</name><argument_list>(<argument><expr><name>p_value</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>second</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><name>second</name> <operator>&lt;</operator> <name>line</name> <operator>+</operator> <name>llen</name></expr>;</condition> <incr><expr><name>second</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>second</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sp</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>np</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unquote_c_style</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_and_fail2</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>np</name> <operator>=</operator> <call><name>skip_tree_prefix</name><argument_list>(<argument><expr><name>p_value</name></expr></argument>, <argument><expr><name><name>sp</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>sp</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>np</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>free_and_fail2</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>sp</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>sp</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>np</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>second</name> <operator>-</operator> <name>name</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>np</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>isspace</name><argument_list>(<argument><expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>np</name> <operator>-</operator> <name><name>sp</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<label><name>free_and_fail2</name>:</label>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>second</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line_len</name> <operator>=</operator> <name>second</name> <operator>-</operator> <name>name</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>name</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<continue>continue;</continue>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<return>return <expr><name>NULL</name></expr>;</return>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case> <case>case <expr><literal type="char">' '</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>name</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>second</name> <operator>=</operator> <call><name>skip_tree_prefix</name><argument_list>(<argument><expr><name>p_value</name></expr></argument>, <argument><expr><name>name</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>line_len</name> <operator>-</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>second</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>second</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>second</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>xmemdupz</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_header_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>linenr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>extensions</name> <init>= <expr><operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>is_rename</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>is_copy</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>extensions</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"inconsistent header lines %d and %d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>extension_linenr</name></name></expr></argument>, <argument><expr><name>linenr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extensions</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>extension_linenr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>extension_linenr</name></name> <operator>=</operator> <name>linenr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_git_diff_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>linenr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>p_value</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>gitdiff_data</name></name></type> <name>parse_hdr_state</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>def_name</name></name> <operator>=</operator> <call><name>git_header_name</name><argument_list>(<argument><expr><name>p_value</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>def_name</name></name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>root</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>def_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>def_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>def_name</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>linenr</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parse_hdr_state</name><operator>.</operator><name>root</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parse_hdr_state</name><operator>.</operator><name>linenr</name></name> <operator>=</operator> <operator>*</operator><name>linenr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parse_hdr_state</name><operator>.</operator><name>p_value</name></name> <operator>=</operator> <name>p_value</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <name>len</name></expr> ;</init> <condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>offset</name> <operator>+=</operator> <name>len</name></expr><operator>,</operator> <expr><name>size</name> <operator>-=</operator> <name>len</name></expr><operator>,</operator> <expr><name>line</name> <operator>+=</operator> <name>len</name></expr><operator>,</operator> <expr><operator>(</operator><operator>*</operator><name>linenr</name><operator>)</operator><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>opentry</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>gitdiff_data</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block> <decl><name><name>optable</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"@@ -"</literal></expr>, <expr><name>gitdiff_hdrend</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"--- "</literal></expr>, <expr><name>gitdiff_oldname</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"+++ "</literal></expr>, <expr><name>gitdiff_newname</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"old mode "</literal></expr>, <expr><name>gitdiff_oldmode</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"new mode "</literal></expr>, <expr><name>gitdiff_newmode</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"deleted file mode "</literal></expr>, <expr><name>gitdiff_delete</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"new file mode "</literal></expr>, <expr><name>gitdiff_newfile</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"copy from "</literal></expr>, <expr><name>gitdiff_copysrc</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"copy to "</literal></expr>, <expr><name>gitdiff_copydst</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rename old "</literal></expr>, <expr><name>gitdiff_renamesrc</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rename new "</literal></expr>, <expr><name>gitdiff_renamedst</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rename from "</literal></expr>, <expr><name>gitdiff_renamesrc</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"rename to "</literal></expr>, <expr><name>gitdiff_renamedst</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"similarity index "</literal></expr>, <expr><name>gitdiff_similarity</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dissimilarity index "</literal></expr>, <expr><name>gitdiff_dissimilarity</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"index "</literal></expr>, <expr><name>gitdiff_index</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><name>gitdiff_unrecognized</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>linelen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>optable</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>opentry</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>optable</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oplen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>oplen</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>oplen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_hdr_state</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>oplen</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_header_line</name><argument_list>(<argument><expr><operator>*</operator><name>linenr</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

</block_content>}</block></for>

<label><name>done</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>def_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"git diff header lacks filename information when removing "</literal>

<literal type="string">"%d leading pathname component (line %d)"</literal></expr></argument>,

<argument><expr><literal type="string">"git diff header lacks filename information when removing "</literal>

<literal type="string">"%d leading pathname components (line %d)"</literal></expr></argument>,

<argument><expr><name><name>parse_hdr_state</name><operator>.</operator><name>p_value</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>parse_hdr_state</name><operator>.</operator><name>p_value</name></name></expr></argument>, <argument><expr><operator>*</operator><name>linenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">128</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>def_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>def_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git diff header lacks filename information "</literal>

<literal type="string">"(line %d)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>linenr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">128</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_toplevel_relative</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ptr</name> <operator>-</operator> <name>line</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_range</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>digits</name></decl>, <decl><type ref="prev"/><name>ex</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>digits</name> <operator>=</operator> <call><name>parse_num</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>digits</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>digits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>digits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>digits</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>digits</name> <operator>=</operator> <call><name>parse_num</name><argument_list>(<argument><expr><name>line</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>digits</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>digits</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>digits</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>digits</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ex</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>expect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ex</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>expect</name></expr></argument>, <argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>offset</name> <operator>+</operator> <name>ex</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>recount_diff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>fragment</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>oldlines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>newlines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"recount: ignore empty hunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>linelen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">' '</literal></expr>:</case> <case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<expr_stmt><expr><name>newlines</name><operator>++</operator></expr>;</expr_stmt>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><name>oldlines</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<expr_stmt><expr><name>newlines</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<continue>continue;</continue>

<case>case <expr><literal type="char">'@'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"@@ "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>||</operator> <operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"diff "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"recount: unexpected line: %.*s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>linelen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<expr_stmt><expr><name><name>fragment</name><operator>-&gt;</operator><name>oldlines</name></name> <operator>=</operator> <name>oldlines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fragment</name><operator>-&gt;</operator><name>newlines</name></name> <operator>=</operator> <name>newlines</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_fragment_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>fragment</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>parse_range</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">" +"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fragment</name><operator>-&gt;</operator><name>oldpos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fragment</name><operator>-&gt;</operator><name>oldlines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>parse_range</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">" @@"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fragment</name><operator>-&gt;</operator><name>newpos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fragment</name><operator>-&gt;</operator><name>newlines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>hdrsize</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_toplevel_relative</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_rename</name></name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_copy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>offset</name> <operator>+=</operator> <name>len</name></expr><operator>,</operator> <expr><name>size</name> <operator>-=</operator> <name>len</name></expr><operator>,</operator> <expr><name>line</name> <operator>+=</operator> <name>len</name></expr><operator>,</operator> <expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>nextlen</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>linelen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"@@ -"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name></type> <name>dummy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_fragment_header</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"patch fragment without header at line %d: %.*s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">128</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>len</name> <operator>+</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"diff --git "</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>git_hdr_len</name> <init>= <expr><call><name>parse_git_diff_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,

<argument><expr><name>size</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>git_hdr_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">128</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>git_hdr_len</name> <operator>&lt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>hdrsize</name> <operator>=</operator> <name>git_hdr_len</name></expr>;</expr_stmt>

<return>return <expr><name>offset</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"--- "</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"+++ "</literal></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nextlen</name> <operator>=</operator> <call><name>linelen</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>nextlen</name> <operator>+</operator> <literal type="number">14</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"@@ -"</literal></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <name>len</name> <operator>+</operator> <name>nextlen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_traditional_patch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>line</name><operator>+</operator><name>len</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">128</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>hdrsize</name> <operator>=</operator> <name>len</name> <operator>+</operator> <name>nextlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>offset</name></expr>;</return>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>record_ws_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>result</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>linenr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>whitespace_error</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>squelch_whitespace_errors</name></name> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>squelch_whitespace_errors</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>whitespace_error</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>whitespace_error_string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s:%d: %s.\n%.*s\n"</literal></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>patch_input_file</name></name></expr></argument>, <argument><expr><name>linenr</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_whitespace</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>result</name> <init>= <expr><call><name>ws_check</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>record_ws_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>line</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_old_for_crlf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>ws_rule</name></name> <operator>|=</operator> <name>WS_CR_AT_EOL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>crlf_in_old</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_fragment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>fragment</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>added</name></decl>, <decl><type ref="prev"/><name>deleted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>linelen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>oldlines</name></decl>, <decl><type ref="prev"/><name>newlines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>leading</name></decl>, <decl><type ref="prev"/><name>trailing</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>parse_fragment_header</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>patch</name><operator>-&gt;</operator><name>recount</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>recount_diff</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>oldlines</name> <operator>=</operator> <name><name>fragment</name><operator>-&gt;</operator><name>oldlines</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>newlines</name> <operator>=</operator> <name><name>fragment</name><operator>-&gt;</operator><name>newlines</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>leading</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>trailing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>added</name> <operator>=</operator> <name>deleted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>offset</name> <operator>=</operator> <name>len</name></expr>;</init>

<condition><expr><literal type="number">0</literal> <operator>&lt;</operator> <name>size</name></expr>;</condition>

<incr><expr><name>offset</name> <operator>+=</operator> <name>len</name></expr><operator>,</operator> <expr><name>size</name> <operator>-=</operator> <name>len</name></expr><operator>,</operator> <expr><name>line</name> <operator>+=</operator> <name>len</name></expr><operator>,</operator> <expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldlines</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>newlines</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>linelen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name> <operator>||</operator> <name><name>line</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>line</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case> 

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<expr_stmt><expr><name>oldlines</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>newlines</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>deleted</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>added</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>leading</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>trailing</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_old_for_crlf</name><argument_list>(<argument><expr><name>patch</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>apply_in_reverse</name></name> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>==</operator> <name>correct_ws_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_whitespace</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>ws_rule</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>apply_in_reverse</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_old_for_crlf</name><argument_list>(<argument><expr><name>patch</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_in_reverse</name></name> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>!=</operator> <name>nowarn_ws_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_whitespace</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>ws_rule</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>deleted</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>oldlines</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>trailing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_in_reverse</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_old_for_crlf</name><argument_list>(<argument><expr><name>patch</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>apply_in_reverse</name></name> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>!=</operator> <name>nowarn_ws_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_whitespace</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>ws_rule</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>added</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>newlines</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>trailing</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">12</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"\\ "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>oldlines</name> <operator>||</operator> <name>newlines</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>recount</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>deleted</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>added</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fragment</name><operator>-&gt;</operator><name>leading</name></name> <operator>=</operator> <name>leading</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fragment</name><operator>-&gt;</operator><name>trailing</name></name> <operator>=</operator> <name>trailing</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">12</literal> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"\\ "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>linelen</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>lines_added</name></name> <operator>+=</operator> <name>added</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>lines_deleted</name></name> <operator>+=</operator> <name>deleted</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>&amp;&amp;</operator> <name>oldlines</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"new file depends on old contents"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>&amp;&amp;</operator> <name>newlines</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"deleted file still has contents"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_single_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>oldlines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>newlines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>context</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>fragp</name> <init>= <expr><operator>&amp;</operator><name><name>patch</name><operator>-&gt;</operator><name>fragments</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"@@ -"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>fragment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fragment</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>fragment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fragment</name><operator>-&gt;</operator><name>linenr</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>linenr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>parse_fragment</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"corrupt patch at line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fragment</name><operator>-&gt;</operator><name>patch</name></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fragment</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>oldlines</name> <operator>+=</operator> <name><name>fragment</name><operator>-&gt;</operator><name>oldlines</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>newlines</name> <operator>+=</operator> <name><name>fragment</name><operator>-&gt;</operator><name>newlines</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>context</name> <operator>+=</operator> <name><name>fragment</name><operator>-&gt;</operator><name>leading</name></name> <operator>+</operator> <name><name>fragment</name><operator>-&gt;</operator><name>trailing</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fragp</name> <operator>=</operator> <name>fragment</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fragp</name> <operator>=</operator> <operator>&amp;</operator><name><name>fragment</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>oldlines</name> <operator>||</operator> <operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>fragments</name></name> <operator>&amp;&amp;</operator> <name><name>patch</name><operator>-&gt;</operator><name>fragments</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>newlines</name> <operator>||</operator> <operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>fragments</name></name> <operator>&amp;&amp;</operator> <name><name>patch</name><operator>-&gt;</operator><name>fragments</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>&amp;&amp;</operator> <name>oldlines</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"new file %s depends on old contents"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>&amp;&amp;</operator> <name>newlines</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"deleted file %s still has contents"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>newlines</name> <operator>&amp;&amp;</operator> <name>context</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"** warning: "</literal>

<literal type="string">"file %s becomes empty but is not deleted"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>offset</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>metadata_changes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>patch</name><operator>-&gt;</operator><name>is_rename</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>patch</name><operator>-&gt;</operator><name>is_copy</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>||</operator>

<operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name> <operator>&amp;&amp;</operator> <name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name> <operator>&amp;&amp;</operator>

<name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name> <operator>!=</operator> <name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>inflate_it</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inflated_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>git_zstream</name></type> <name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>out</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>inflated_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>inflated_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_inflate_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>git_inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><name>Z_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_inflate_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>st</name> <operator>!=</operator> <name>Z_STREAM_END</name><operator>)</operator> <operator>||</operator> <name><name>stream</name><operator>.</operator><name>total_out</name></name> <operator>!=</operator> <name>inflated_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>parse_binary_hunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf_p</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>sz_p</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status_p</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>used_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>llen</name></decl>, <decl><type ref="prev"/><name>used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name> <init>= <expr><operator>*</operator><name>sz_p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>*</operator><name>buf_p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>patch_method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>origlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hunk_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>frag</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llen</name> <operator>=</operator> <call><name>linelen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <name>llen</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>status_p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"delta "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>patch_method</name> <operator>=</operator> <name>BINARY_DELTA_DEFLATED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>origlen</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"literal "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>patch_method</name> <operator>=</operator> <name>BINARY_LITERAL_DEFLATED</name></expr>;</expr_stmt>

<expr_stmt><expr><name>origlen</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <name>llen</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>byte_length</name></decl>, <decl><type ref="prev"/><name>max_byte_length</name></decl>, <decl><type ref="prev"/><name>newsize</name></decl>;</decl_stmt>

<expr_stmt><expr><name>llen</name> <operator>=</operator> <call><name>linelen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>used</name> <operator>+=</operator> <name>llen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>llen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buffer</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>llen</name> <operator>&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>llen</name><operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>max_byte_length</name> <operator>=</operator> <operator>(</operator><name>llen</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>byte_length</name> <operator>=</operator> <operator>*</operator><name>buffer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="char">'A'</literal> <operator>&lt;=</operator> <name>byte_length</name> <operator>&amp;&amp;</operator> <name>byte_length</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>byte_length</name> <operator>=</operator> <name>byte_length</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>byte_length</name> <operator>&amp;&amp;</operator> <name>byte_length</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>byte_length</name> <operator>=</operator> <name>byte_length</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">27</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>corrupt</name>;</goto></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_byte_length</name> <operator>&lt;</operator> <name>byte_length</name> <operator>||</operator>

<name>byte_length</name> <operator>&lt;=</operator> <name>max_byte_length</name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>newsize</name> <operator>=</operator> <name>hunk_size</name> <operator>+</operator> <name>byte_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>decode_85</name><argument_list>(<argument><expr><name>data</name> <operator>+</operator> <name>hunk_size</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>byte_length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hunk_size</name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <name>llen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>llen</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>frag</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>frag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>patch</name></name> <operator>=</operator> <call><name>inflate_it</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>hunk_size</name></expr></argument>, <argument><expr><name>origlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>free_patch</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frag</name><operator>-&gt;</operator><name>patch</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>corrupt</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>origlen</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf_p</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>sz_p</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>used_p</name> <operator>=</operator> <name>used</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>binary_patch_method</name></name> <operator>=</operator> <name>patch_method</name></expr>;</expr_stmt>

<return>return <expr><name>frag</name></expr>;</return>

<label><name>corrupt</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>status_p</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"corrupt binary patch at line %d: %.*s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>llen</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>forward</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>reverse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>, <decl><type ref="prev"/><name>used_1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>forward</name> <operator>=</operator> <call><name>parse_binary_hunk</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>forward</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unrecognized binary patch at line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>reverse</name> <operator>=</operator> <call><name>parse_binary_hunk</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>used_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>reverse</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>used</name> <operator>+=</operator> <name>used_1</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>forward</name><operator>-&gt;</operator><name>patch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>forward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>forward</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>reverse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>fragments</name></name> <operator>=</operator> <name>forward</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>used</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prefix_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_name</name> <init>= <expr><operator>*</operator><name>name</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <call><name>prefix_filename</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prefix_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>is_toplevel_relative</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prefix_one</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prefix_one</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_name_limit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>exclude</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>limit_by_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <ternary><condition><expr><name>exclude</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>use_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name> <init>= <expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>new_name</name></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>new_name</name></name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>old_name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rest</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><operator>*</operator><name>rest</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>limit_by_name</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>it</name> <init>= <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>limit_by_name</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wildmatch</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>util</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>has_include</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_chunk</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hdrsize</name></decl>, <decl><type ref="prev"/><name>patchsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><call><name>find_header</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdrsize</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>offset</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prefix_patch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>use_patch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>ws_rule</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>ws_rule</name></name> <operator>=</operator> <call><name>whitespace_rule</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>ws_rule</name></name> <operator>=</operator> <call><name>whitespace_rule</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>patchsize</name> <operator>=</operator> <call><name>parse_single_patch</name><argument_list>(<argument><expr><name>state</name></expr></argument>,

<argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <name>hdrsize</name></expr></argument>,

<argument><expr><name>size</name> <operator>-</operator> <name>offset</name> <operator>-</operator> <name>hdrsize</name></expr></argument>,

<argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>patchsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">128</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>patchsize</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>git_binary</name><index>[]</index></name> <init>= <expr><literal type="string">"GIT binary patch\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hd</name> <init>= <expr><name>hdrsize</name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>llen</name> <init>= <expr><call><name>linelen</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>hd</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>hd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>llen</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>git_binary</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>git_binary</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>hd</name></expr></argument>, <argument><expr><name>llen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>used</name> <operator>=</operator> <call><name>parse_binary</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>hd</name> <operator>+</operator> <name>llen</name></expr></argument>,

<argument><expr><name>size</name> <operator>-</operator> <name>hd</name> <operator>-</operator> <name>llen</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>used</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>used</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>patchsize</name> <operator>=</operator> <name>used</name> <operator>+</operator> <name>llen</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>patchsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">" differ\n"</literal></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>hd</name> <operator>+</operator> <name>llen</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>binhdr</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Binary files "</literal></expr>,

<expr><literal type="string">"Files "</literal></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>binhdr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>binhdr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <name>hd</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>binhdr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>hd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>patchsize</name> <operator>=</operator> <name>llen</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>apply</name></name> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>check</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>is_binary</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>metadata_changes</name><argument_list>(<argument><expr><name>patch</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"patch with only garbage at line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>linenr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">128</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>offset</name> <operator>+</operator> <name>hdrsize</name> <operator>+</operator> <name>patchsize</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>reverse_patches</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>frag</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>fragments</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>new_mode</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>is_new</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>is_delete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>lines_added</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>lines_deleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>old_oid_prefix</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>new_oid_prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>frag</name></expr>;</condition> <incr><expr><name>frag</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>newpos</name></name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>oldpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>frag</name><operator>-&gt;</operator><name>newlines</name></name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>oldlines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>pluses</name><index>[]</index></name> <init>=

<expr><literal type="string">"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>minuses</name><index>[]</index></name><init>=

<expr><literal type="string">"----------------------------------------------------------------------"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_stats</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>qname</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><ternary><condition><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr> ?</condition><then> <expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr> </then><else>: <expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name></decl>, <decl><type ref="prev"/><name>add</name></decl>, <decl><type ref="prev"/><name>del</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>max_len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>qname</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name><name>qname</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>qname</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name>max</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <name><name>qname</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>qname</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_splice</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cp</name> <operator>-</operator> <name><name>qname</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_binary</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %-*s | Bin\n"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>qname</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %-*s |"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>qname</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <ternary><condition><expr><name>max</name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>max_change</name></name> <operator>&gt;</operator> <literal type="number">70</literal></expr> ?</condition><then> <expr><literal type="number">70</literal> <operator>-</operator> <name>max</name></expr> </then><else>: <expr><name><name>state</name><operator>-&gt;</operator><name>max_change</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>lines_added</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>del</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>lines_deleted</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>max_change</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><operator>(</operator><operator>(</operator><name>add</name> <operator>+</operator> <name>del</name><operator>)</operator> <operator>*</operator> <name>max</name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>max_change</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name><name>state</name><operator>-&gt;</operator><name>max_change</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>add</name> <operator>=</operator> <operator>(</operator><name>add</name> <operator>*</operator> <name>max</name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>max_change</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name><name>state</name><operator>-&gt;</operator><name>max_change</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>del</name> <operator>=</operator> <name>total</name> <operator>-</operator> <name>add</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5d %.*s%.*s\n"</literal></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>lines_added</name></name> <operator>+</operator> <name><name>patch</name><operator>-&gt;</operator><name>lines_deleted</name></name></expr></argument>,

<argument><expr><name>add</name></expr></argument>, <argument><expr><name>pluses</name></expr></argument>, <argument><expr><name>del</name></expr></argument>, <argument><expr><name>minuses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_old_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>conv_flags</name> <init>= <expr><ternary><condition><expr><name><name>patch</name><operator>-&gt;</operator><name>crlf_in_old</name></name></expr> ?</condition><then>

<expr><name>CONV_EOL_KEEP_CRLF</name></expr> </then><else>: <expr><name>CONV_EOL_RENORMALIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IFMT</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>S_IFLNK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_readlink</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to read symlink %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>S_IFREG</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read_file</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>st_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to open or read %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>convert_to_git</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>conv_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_pre_post_images</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>preimage</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>postimage</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>postlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ctx</name></decl>, <decl><type ref="prev"/><name>reduced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fixed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>image</name></name></type> <name>fixed_preimage</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prepare_image</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed_preimage</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><ternary><condition><expr><name>postlen</name></expr>

?</condition><then> <expr><name><name>fixed_preimage</name><operator>.</operator><name>nr</name></name> <operator>==</operator> <name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name></expr>

</then><else>: <expr><name><name>fixed_preimage</name><operator>.</operator><name>nr</name></name> <operator>&lt;=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fixed_preimage</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fixed_preimage</name><operator>.</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>preimage</name><operator>-&gt;</operator><name>line_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>preimage</name> <operator>=</operator> <name>fixed_preimage</name></expr>;</expr_stmt>

<expr_stmt><expr><name>old_buf</name> <operator>=</operator> <name><name>postimage</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>postlen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_buf</name> <operator>=</operator> <name><name>postimage</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>postlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>new_buf</name> <operator>=</operator> <name>old_buf</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>fixed</name> <operator>=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>reduced</name> <operator>=</operator> <name>ctx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>postimage</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>l_len</name> <init>= <expr><name><name>postimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>postimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>LINE_COMMON</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>new_buf</name></expr></argument>, <argument><expr><name>old_buf</name></expr></argument>, <argument><expr><name>l_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old_buf</name> <operator>+=</operator> <name>l_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_buf</name> <operator>+=</operator> <name>l_len</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_buf</name> <operator>+=</operator> <name>l_len</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>ctx</name> <operator>&lt;</operator> <name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>preimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>ctx</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>LINE_COMMON</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fixed</name> <operator>+=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>ctx</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name> <operator>&lt;=</operator> <name>ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>reduced</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>l_len</name> <operator>=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>ctx</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_buf</name></expr></argument>, <argument><expr><name>fixed</name></expr></argument>, <argument><expr><name>l_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>new_buf</name> <operator>+=</operator> <name>l_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fixed</name> <operator>+=</operator> <name>l_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>postimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>l_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ctx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>postlen</name></expr>

?</condition><then> <expr><name>postlen</name> <operator>&lt;</operator> <name>new_buf</name> <operator>-</operator> <name><name>postimage</name><operator>-&gt;</operator><name>buf</name></name></expr>

</then><else>: <expr><name><name>postimage</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>new_buf</name> <operator>-</operator> <name><name>postimage</name><operator>-&gt;</operator><name>buf</name></name></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"caller miscounted postlen: asked %d, orig = %d, used = %d"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>postlen</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>postimage</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>new_buf</name> <operator>-</operator> <name><name>postimage</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>postimage</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>new_buf</name> <operator>-</operator> <name><name>postimage</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>postimage</name><operator>-&gt;</operator><name>nr</name></name> <operator>-=</operator> <name>reduced</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>line_by_line_fuzzy_match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>preimage</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>postimage</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>current</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>current_lno</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>preimage_limit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>imgoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>preoff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>postlen</name> <init>= <expr><name><name>postimage</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>extra_chars</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>preimage_eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>preimage_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>fixed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fixed_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fixed_len</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>preimage_limit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>prelen</name> <init>= <expr><name><name>preimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>imglen</name> <init>= <expr><name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>current_lno</name><operator>+</operator><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fuzzy_matchlines</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>current</name> <operator>+</operator> <name>imgoff</name></expr></argument>, <argument><expr><name>imglen</name></expr></argument>,

<argument><expr><name><name>preimage</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>preoff</name></expr></argument>, <argument><expr><name>prelen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>preimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>LINE_COMMON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>postlen</name> <operator>+=</operator> <name>imglen</name> <operator>-</operator> <name>prelen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>imgoff</name> <operator>+=</operator> <name>imglen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>preoff</name> <operator>+=</operator> <name>prelen</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>preimage_eof</name> <operator>=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>preoff</name></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>preoff</name> <operator>+=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>preimage_end</name> <operator>=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>preoff</name></expr>;</expr_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>buf</name> <operator>&lt;</operator> <name>preimage_end</name></expr>;</condition> <incr><expr><name>buf</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>extra_chars</name> <operator>=</operator> <name>preimage_end</name> <operator>-</operator> <name>preimage_eof</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed</name></expr></argument>, <argument><expr><name>imgoff</name> <operator>+</operator> <name>extra_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>current</name></expr></argument>, <argument><expr><name>imgoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed</name></expr></argument>, <argument><expr><name>preimage_eof</name></expr></argument>, <argument><expr><name>extra_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fixed_buf</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fixed_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_pre_post_images</name><argument_list>(<argument><expr><name>preimage</name></expr></argument>, <argument><expr><name>postimage</name></expr></argument>,

<argument><expr><name>fixed_buf</name></expr></argument>, <argument><expr><name>fixed_len</name></expr></argument>, <argument><expr><name>postlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>match_fragment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>preimage</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>postimage</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>current</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>current_lno</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>match_beginning</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>match_end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fixed_buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>orig</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>fixed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fixed_len</name></decl>, <decl><type ref="prev"/><name>postlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>preimage_limit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>current_lno</name> <operator>&lt;=</operator> <name><name>img</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>preimage_limit</name> <operator>=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match_end</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>current_lno</name> <operator>!=</operator> <name><name>img</name><operator>-&gt;</operator><name>nr</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>==</operator> <name>correct_ws_error</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ws_rule</name> <operator>&amp;</operator> <name>WS_BLANK_AT_EOF</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>preimage_limit</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <name>current_lno</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>match_beginning</name> <operator>&amp;&amp;</operator> <name>current_lno</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>preimage_limit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>current_lno</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>LINE_PATCHED</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>preimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name> <operator>!=</operator> <name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>current_lno</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>hash</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>preimage_limit</name> <operator>==</operator> <name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name>match_end</name></expr>

?</condition><then> <expr><operator>(</operator><name>current</name> <operator>+</operator> <name><name>preimage</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>img</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><name>current</name> <operator>+</operator> <name><name>preimage</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <name><name>img</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>current</name></expr></argument>, <argument><expr><name><name>preimage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>preimage</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>preimage_limit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf_end</name> <operator>+=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>( <init>;</init> <condition><expr><name>buf</name> <operator>&lt;</operator> <name>buf_end</name></expr>;</condition> <incr><expr><name>buf</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>buf_end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ws_ignore_action</name></name> <operator>==</operator> <name>ignore_ws_change</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>line_by_line_fuzzy_match</name><argument_list>(<argument><expr><name>img</name></expr></argument>, <argument><expr><name>preimage</name></expr></argument>, <argument><expr><name>postimage</name></expr></argument>,

<argument><expr><name>current</name></expr></argument>, <argument><expr><name>current_lno</name></expr></argument>, <argument><expr><name>preimage_limit</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>!=</operator> <name>correct_ws_error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>postlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>postimage</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>postimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>LINE_COMMON</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>postlen</name> <operator>+=</operator> <name><name>postimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed</name></expr></argument>, <argument><expr><name><name>preimage</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>orig</name> <operator>=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>current</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>preimage_limit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>oldlen</name> <init>= <expr><name><name>preimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>tgtlen</name> <init>= <expr><name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>current_lno</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>fixstart</name> <init>= <expr><name><name>fixed</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>tgtfix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>match</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ws_fix_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>, <argument><expr><name>oldlen</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tgtfix</name></expr></argument>, <argument><expr><name>tgtlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ws_fix_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tgtfix</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>tgtlen</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name><name>tgtfix</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name><name>fixed</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>fixstart</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>tgtfix</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>fixed</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>fixstart</name></expr></argument>,

<argument><expr><name><name>fixed</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>fixstart</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>preimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>&amp;</operator> <name>LINE_COMMON</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>postlen</name> <operator>+=</operator> <name><name>tgtfix</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tgtfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>unmatch_exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>orig</name> <operator>+=</operator> <name>oldlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>+=</operator> <name>tgtlen</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>fixstart</name> <init>= <expr><name><name>fixed</name><operator>.</operator><name>len</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>oldlen</name> <init>= <expr><name><name>preimage</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ws_fix_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>, <argument><expr><name>oldlen</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>fixstart</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>fixed</name><operator>.</operator><name>len</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><name><name>fixed</name><operator>.</operator><name>buf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>unmatch_exit</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>orig</name> <operator>+=</operator> <name>oldlen</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>fixed_buf</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fixed_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>postlen</name> <operator>&lt;</operator> <name><name>postimage</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>postlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_pre_post_images</name><argument_list>(<argument><expr><name>preimage</name></expr></argument>, <argument><expr><name>postimage</name></expr></argument>,

<argument><expr><name>fixed_buf</name></expr></argument>, <argument><expr><name>fixed_len</name></expr></argument>, <argument><expr><name>postlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>unmatch_exit</name>:</label>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fixed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_pos</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>preimage</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>postimage</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>match_beginning</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>match_end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>backwards</name></decl>, <decl><type ref="prev"/><name>forwards</name></decl>, <decl><type ref="prev"/><name>current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>backwards_lno</name></decl>, <decl><type ref="prev"/><name>forwards_lno</name></decl>, <decl><type ref="prev"/><name>current_lno</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>allow_overlap</name></name> <operator>&amp;&amp;</operator> <name>match_beginning</name> <operator>&amp;&amp;</operator> <name>match_end</name> <operator>&amp;&amp;</operator>

<name><name>img</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>match_beginning</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>match_beginning</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>match_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>line</name> <operator>&gt;</operator> <name><name>img</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>line</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>current</name> <operator>+=</operator> <name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>backwards</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

<expr_stmt><expr><name>backwards_lno</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>forwards</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

<expr_stmt><expr><name>forwards_lno</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lno</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>match_fragment</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>preimage</name></expr></argument>, <argument><expr><name>postimage</name></expr></argument>,

<argument><expr><name>current</name></expr></argument>, <argument><expr><name>current_lno</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>,

<argument><expr><name>match_beginning</name></expr></argument>, <argument><expr><name>match_end</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>current_lno</name></expr>;</return></block_content></block></if></if_stmt>

<label><name>again</name>:</label>

<if_stmt><if>if <condition>(<expr><name>backwards_lno</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>forwards_lno</name> <operator>==</operator> <name><name>img</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>backwards_lno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>again</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>backwards_lno</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>backwards</name> <operator>-=</operator> <name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>backwards_lno</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current</name> <operator>=</operator> <name>backwards</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lno</name> <operator>=</operator> <name>backwards_lno</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>forwards_lno</name> <operator>==</operator> <name><name>img</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>again</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>forwards</name> <operator>+=</operator> <name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>forwards_lno</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>forwards_lno</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>current</name> <operator>=</operator> <name>forwards</name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_lno</name> <operator>=</operator> <name>forwards_lno</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_first_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name> <operator>+=</operator> <name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>line</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>nr</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_last_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><operator>--</operator><name><name>img</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_image</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>applied_pos</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>preimage</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>postimage</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>remove_count</name></decl>, <decl><type ref="prev"/><name>insert_count</name></decl>, <decl><type ref="prev"/><name>applied_at</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>preimage_limit</name></decl>;</decl_stmt>

<expr_stmt><expr><name>preimage_limit</name> <operator>=</operator> <name><name>preimage</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>preimage_limit</name> <operator>&gt;</operator> <name><name>img</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <name>applied_pos</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>preimage_limit</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <name>applied_pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>applied_pos</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>applied_at</name> <operator>+=</operator> <name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>remove_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>preimage_limit</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>remove_count</name> <operator>+=</operator> <name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>applied_pos</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>insert_count</name> <operator>=</operator> <name><name>postimage</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>st_add3</name><argument_list>(<argument><expr><call><name>st_sub</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>remove_count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>insert_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>applied_at</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>applied_at</name></expr></argument>, <argument><expr><name><name>postimage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>postimage</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>applied_at</name> <operator>+</operator> <name><name>postimage</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,

<argument><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <operator>(</operator><name>applied_at</name> <operator>+</operator> <name>remove_count</name><operator>)</operator></expr></argument>,

<argument><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <operator>(</operator><name>applied_at</name> <operator>+</operator> <name>remove_count</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>insert_count</name> <operator>-</operator> <name>remove_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><index>[<expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name><name>postimage</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <name>preimage_limit</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>preimage_limit</name> <operator>&lt;</operator> <name><name>postimage</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>REALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>line_allocated</name></name> <operator>=</operator> <name><name>img</name><operator>-&gt;</operator><name>line</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>preimage_limit</name> <operator>!=</operator> <name><name>postimage</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MOVE_ARRAY</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <name>applied_pos</name> <operator>+</operator> <name><name>postimage</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>,

<argument><expr><name><name>img</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <name>applied_pos</name> <operator>+</operator> <name>preimage_limit</name></expr></argument>,

<argument><expr><name><name>img</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <operator>(</operator><name>applied_pos</name> <operator>+</operator> <name>preimage_limit</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>line</name></name> <operator>+</operator> <name>applied_pos</name></expr></argument>, <argument><expr><name><name>postimage</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>postimage</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>allow_overlap</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>postimage</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>applied_pos</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>|=</operator> <name>LINE_PATCHED</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_one_fragment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>inaccurate_eof</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nth_fragment</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>match_beginning</name></decl>, <decl><type ref="prev"/><name>match_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patch</name> <init>= <expr><name><name>frag</name><operator>-&gt;</operator><name>patch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>frag</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>oldlines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>newlines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_blank_lines_at_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>found_new_blank_lines_at_end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hunk_linenr</name> <init>= <expr><name><name>frag</name><operator>-&gt;</operator><name>linenr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>leading</name></decl>, <decl><type ref="prev"/><name>trailing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>, <decl><type ref="prev"/><name>applied_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>image</name></name></type> <name>preimage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>image</name></name></type> <name>postimage</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>preimage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>preimage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>postimage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>postimage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldlines</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newlines</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old</name> <operator>=</operator> <name>oldlines</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>linelen</name><argument_list>(<argument><expr><name>patch</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>added_blank_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_blank_context</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>start</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>plen</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name><name>patch</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>plen</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <operator>*</operator><name>patch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_in_reverse</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="char">'+'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>old</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newlines</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_line_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>preimage</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LINE_COMMON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_line_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>postimage</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LINE_COMMON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>is_blank_context</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ws_rule</name> <operator>&amp;</operator> <name>WS_BLANK_AT_EOF</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>ws_blank_line</name><argument_list>(<argument><expr><name>patch</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>is_blank_context</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'-'</literal></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>patch</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_line_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>preimage</name></expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>first</name> <operator>==</operator> <literal type="char">' '</literal></expr> ?</condition><then> <expr><name>LINE_COMMON</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>old</name> <operator>+=</operator> <name>plen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'+'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>no_add</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>newlines</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>||</operator>

<operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>whitespace_error</name></name> <operator>||</operator>

<name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>!=</operator> <name>correct_ws_error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newlines</name></expr></argument>, <argument><expr><name>patch</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>ws_fix_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newlines</name></expr></argument>, <argument><expr><name>patch</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>applied_after_fixing_ws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>add_line_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>postimage</name></expr></argument>, <argument><expr><name><name>newlines</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name><name>newlines</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>start</name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>first</name> <operator>==</operator> <literal type="char">'+'</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>LINE_COMMON</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ws_rule</name> <operator>&amp;</operator> <name>WS_BLANK_AT_EOF</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>ws_blank_line</name><argument_list>(<argument><expr><name>patch</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>added_blank_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'@'</literal></expr>:</case> <case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_normal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid start of line: '%c'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>applied_pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>added_blank_line</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_blank_lines_at_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>found_new_blank_lines_at_end</name> <operator>=</operator> <name>hunk_linenr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_blank_lines_at_end</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>is_blank_context</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>new_blank_lines_at_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>patch</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hunk_linenr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>inaccurate_eof</name> <operator>&amp;&amp;</operator>

<name>old</name> <operator>&gt;</operator> <name>oldlines</name> <operator>&amp;&amp;</operator> <name><name>old</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>

<name><name>newlines</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>newlines</name><operator>.</operator><name>buf</name><index>[<expr><name><name>newlines</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>old</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newlines</name></expr></argument>, <argument><expr><name><name>newlines</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>preimage</name><operator>.</operator><name>line_allocated</name><index>[<expr><name><name>preimage</name><operator>.</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>postimage</name><operator>.</operator><name>line_allocated</name><index>[<expr><name><name>postimage</name><operator>.</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>leading</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>leading</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>trailing</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>trailing</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>match_beginning</name> <operator>=</operator> <operator>(</operator><operator>!</operator><name><name>frag</name><operator>-&gt;</operator><name>oldpos</name></name> <operator>||</operator>

<operator>(</operator><name><name>frag</name><operator>-&gt;</operator><name>oldpos</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>unidiff_zero</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>match_end</name> <operator>=</operator> <operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>unidiff_zero</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>trailing</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <ternary><condition><expr><name><name>frag</name><operator>-&gt;</operator><name>newpos</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>frag</name><operator>-&gt;</operator><name>newpos</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>preimage</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name>oldlines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>preimage</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>old</name> <operator>-</operator> <name>oldlines</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>postimage</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <name><name>newlines</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>postimage</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>newlines</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>preimage</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name><name>preimage</name><operator>.</operator><name>line_allocated</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>postimage</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name><name>postimage</name><operator>.</operator><name>line_allocated</name></name></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>applied_pos</name> <operator>=</operator> <call><name>find_pos</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>preimage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>postimage</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,

<argument><expr><name>ws_rule</name></expr></argument>, <argument><expr><name>match_beginning</name></expr></argument>, <argument><expr><name>match_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>applied_pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>leading</name> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>p_context</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>trailing</name> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>p_context</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>match_beginning</name> <operator>||</operator> <name>match_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>match_beginning</name> <operator>=</operator> <name>match_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>leading</name> <operator>&gt;=</operator> <name>trailing</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_first_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>preimage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_first_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>postimage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>leading</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trailing</name> <operator>&gt;</operator> <name>leading</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_last_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>preimage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_last_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>postimage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>trailing</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>applied_pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>new_blank_lines_at_end</name> <operator>&amp;&amp;</operator>

<name><name>preimage</name><operator>.</operator><name>nr</name></name> <operator>+</operator> <name>applied_pos</name> <operator>&gt;=</operator> <name><name>img</name><operator>-&gt;</operator><name>nr</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ws_rule</name> <operator>&amp;</operator> <name>WS_BLANK_AT_EOF</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>!=</operator> <name>nowarn_ws_error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>record_ws_error</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WS_BLANK_AT_EOF</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>found_new_blank_lines_at_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>==</operator> <name>correct_ws_error</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>new_blank_lines_at_end</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_last_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>postimage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>==</operator> <name>die_on_ws_error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>apply</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_normal</name> <operator>&amp;&amp;</operator> <name>applied_pos</name> <operator>!=</operator> <name>pos</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>applied_pos</name> <operator>-</operator> <name>pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_in_reverse</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal> <operator>-</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"Hunk #%d succeeded at %d (offset %d line)."</literal></expr></argument>,

<argument><expr><literal type="string">"Hunk #%d succeeded at %d (offset %d lines)."</literal></expr></argument>,

<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>nth_fragment</name></expr></argument>, <argument><expr><name>applied_pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>leading</name> <operator>!=</operator> <name><name>frag</name><operator>-&gt;</operator><name>leading</name></name> <operator>||</operator>

<name>trailing</name> <operator>!=</operator> <name><name>frag</name><operator>-&gt;</operator><name>trailing</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Context reduced to (%ld/%ld)"</literal>

<literal type="string">" to apply fragment at %d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>leading</name></expr></argument>, <argument><expr><name>trailing</name></expr></argument>, <argument><expr><name>applied_pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_image</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>applied_pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>preimage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>postimage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_normal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"while searching for:\n%.*s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>old</name> <operator>-</operator> <name>oldlines</name><operator>)</operator></expr></argument>, <argument><expr><name>oldlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oldlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>newlines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>preimage</name><operator>.</operator><name>line_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>postimage</name><operator>.</operator><name>line_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>applied_pos</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_binary_fragment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>fragment</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>fragments</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fragment</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"missing binary patch data for '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr> ?</condition><then>

<expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr> </then><else>:

<expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_in_reverse</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fragment</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot reverse-apply a binary patch "</literal>

<literal type="string">"without the reverse hunk to '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr>

?</condition><then> <expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr> </then><else>: <expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fragment</name> <operator>=</operator> <name><name>fragment</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>fragment</name><operator>-&gt;</operator><name>binary_patch_method</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>BINARY_DELTA_DEFLATED</name></expr>:</case>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>patch_delta</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>fragment</name><operator>-&gt;</operator><name>patch</name></name></expr></argument>,

<argument><expr><name><name>fragment</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clear_image</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>BINARY_LITERAL_DEFLATED</name></expr>:</case>

<expr_stmt><expr><call><name>clear_image</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>fragment</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name><name>fragment</name><operator>-&gt;</operator><name>patch</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr> ?</condition><then> <expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr> </then><else>: <expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hexsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_oid_prefix</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>hexsz</name> <operator>||</operator>

<call><name>strlen</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_oid_prefix</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>hexsz</name> <operator>||</operator>

<call><name>get_oid_hex</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_oid_prefix</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>get_oid_hex</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_oid_prefix</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot apply binary patch to '%s' "</literal>

<literal type="string">"without full index line"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hash_object_file</name><argument_list>(<argument><expr><name>the_hash_algo</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>blob_type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_oid_prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"the patch applies to '%s' (%s), "</literal>

<literal type="string">"which does not match the "</literal>

<literal type="string">"current contents."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"the patch applies to an empty "</literal>

<literal type="string">"'%s' but it is not empty"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>get_oid_hex</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_oid_prefix</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_image</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_object_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"the necessary postimage %s for "</literal>

<literal type="string">"'%s' cannot be read"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_oid_prefix</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clear_image</name><argument_list>(<argument><expr><name>img</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>apply_binary_fragment</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"binary patch does not apply to '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hash_object_file</name><argument_list>(<argument><expr><name>the_hash_algo</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>blob_type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_oid_prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"binary patch to '%s' creates incorrect result (expecting %s, got %s)"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_oid_prefix</name></name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_fragments</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>img</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>frag</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>fragments</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr> ?</condition><then> <expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr> </then><else>: <expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ws_rule</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>ws_rule</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>inaccurate_eof</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>inaccurate_eof</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_binary</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>apply_binary</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>frag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nth</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>apply_one_fragment</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>inaccurate_eof</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"patch failed: %s:%ld"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>oldpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>apply_with_reject</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frag</name><operator>-&gt;</operator><name>rejected</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frag</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_blob_object</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_grow</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Subproject commit %s\n"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_attach</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_file_or_gitlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ce</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>read_blob_object</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>in_fn_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>string_list_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>fn_table</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator>struct <name>patch</name> <operator>*</operator><operator>)</operator><name><name>item</name><operator>-&gt;</operator><name>util</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_TO_BE_DELETED</name></cpp:macro> <cpp:value>((struct patch *) -2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_WAS_DELETED</name></cpp:macro> <cpp:value>((struct patch *) -1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>to_be_deleted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>patch</name> <operator>==</operator> <name>PATH_TO_BE_DELETED</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>was_deleted</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>patch</name> <operator>==</operator> <name>PATH_WAS_DELETED</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_to_fn_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>string_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>fn_table</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <name>patch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>is_rename</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>string_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>fn_table</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <name>PATH_WAS_DELETED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_fn_table</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>patch</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>is_rename</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>string_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>fn_table</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <name>PATH_TO_BE_DELETED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>patch</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkout_target</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>checkout</name></name></type> <name>costate</name> <init>= <expr><name>CHECKOUT_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>costate</name><operator>.</operator><name>refresh_cache</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>costate</name><operator>.</operator><name>istate</name></name> <operator>=</operator> <name>istate</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>checkout_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>costate</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>lstat</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot checkout %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>previous_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>gone</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>gone</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_copy</name></name> <operator>||</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_rename</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>previous</name> <operator>=</operator> <call><name>in_fn_table</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>previous</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>to_be_deleted</name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>was_deleted</name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>gone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>previous</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_index_match</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ie_match_stat</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><name>st</name></expr></argument>,

<argument><expr><name>CE_MATCH_IGNORE_VALID</name> <operator>|</operator> <name>CE_MATCH_IGNORE_SKIP_WORKTREE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBMODULE_PATCH_WITHOUT_INDEX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_patch_target</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>expected_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>cached</name></name> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>check_index</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_file_or_gitlink</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to read %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name>expected_mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ce</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>read_file_or_gitlink</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>SUBMODULE_PATCH_WITHOUT_INDEX</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>has_symlink_leading_path</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"reading from '%s' beyond a symbolic link"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_old_data</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to read %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_preimage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>image</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>previous</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>previous</name> <operator>=</operator> <call><name>previous_patch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path %s has been renamed/deleted"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>previous</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>previous</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name><name>previous</name><operator>-&gt;</operator><name>resultsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>load_patch_target</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>status</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <name>SUBMODULE_PATCH_WITHOUT_INDEX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_fragment_list</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>fragments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>fragments</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to read %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prepare_image</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>is_binary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>three_way_merge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>image</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>ours</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>theirs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>base_file</name></decl>, <decl><type ref="prev"/><name>our_file</name></decl>, <decl><type ref="prev"/><name>their_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mmbuffer_t</name></type> <name>result</name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>read_mmblob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>base_file</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_mmblob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>our_file</name></expr></argument>, <argument><expr><name>ours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_mmblob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>their_file</name></expr></argument>, <argument><expr><name>theirs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ll_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>base_file</name></expr></argument>, <argument><expr><literal type="string">"base"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>our_file</name></expr></argument>, <argument><expr><literal type="string">"ours"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>their_file</name></expr></argument>, <argument><expr><literal type="string">"theirs"</literal></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>base_file</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>our_file</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>their_file</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>result</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>clear_image</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>image</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>load_current</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>image</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mode</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"patch to %s is not a creation"</literal></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>index_name_pos</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: does not exist in index"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>checkout_target</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>verify_index_match</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: does not match index"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>load_patch_target</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>status</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prepare_image</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>is_binary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>try_threeway</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>image</name></name> <modifier>*</modifier></type><name>image</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>pre_oid</name></decl>, <decl><type ref="prev"/><name>post_oid</name></decl>, <decl><type ref="prev"/><name>our_oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>img</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>image</name></name></type> <name>tmp_image</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>||</operator>

<call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_object_file</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>blob_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pre_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_oid_prefix</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pre_oid</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>read_blob_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pre_oid</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"repository lacks the necessary blob to fall back on 3-way merge."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Falling back to three-way merge...\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>img</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prepare_image</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_image</name></expr></argument>, <argument><expr><name>img</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>apply_fragments</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_image</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_image</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>write_object_file</name><argument_list>(<argument><expr><name><name>tmp_image</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>tmp_image</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>blob_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>post_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_image</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>load_current</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_image</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot read the current contents of '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>load_preimage</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_image</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot read the current contents of '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>write_object_file</name><argument_list>(<argument><expr><name><name>tmp_image</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>tmp_image</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name>blob_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>our_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_image</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>three_way_merge</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>image</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pre_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>our_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>post_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Failed to fall back on three-way merge...\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>conflicted_threeway</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidclr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>patch</name><operator>-&gt;</operator><name>threeway_stage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>patch</name><operator>-&gt;</operator><name>threeway_stage</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pre_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>patch</name><operator>-&gt;</operator><name>threeway_stage</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>our_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>patch</name><operator>-&gt;</operator><name>threeway_stage</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>post_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Applied patch to '%s' with conflicts.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Applied patch to '%s' cleanly.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>image</name></name></type> <name>image</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>load_preimage</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>direct_to_threeway</name></name> <operator>||</operator>

<call><name>apply_fragments</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>threeway</name></name> <operator>||</operator> <call><name>try_threeway</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>resultsize</name></name> <operator>=</operator> <name><name>image</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_to_fn_table</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>image</name><operator>.</operator><name>line_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>&amp;&amp;</operator> <name><name>patch</name><operator>-&gt;</operator><name>resultsize</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"removal patch leaves file contents"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_preimage</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>previous</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stat_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>st_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>previous</name> <operator>=</operator> <call><name>previous_patch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path %s has been renamed/deleted"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>previous</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>st_mode</name> <operator>=</operator> <name><name>previous</name><operator>-&gt;</operator><name>new_mode</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>cached</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stat_ret</name> <operator>=</operator> <call><name>lstat</name><argument_list>(<argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stat_ret</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>check_index</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>previous</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>index_name_pos</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>old_name</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>is_new</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: does not exist in index"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ce</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stat_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>checkout_target</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ce</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;&amp;</operator> <call><name>verify_index_match</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>*</operator><name>ce</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: does not match index"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>cached</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>st_mode</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>ce</name><operator>)</operator><operator>-&gt;</operator><name>ce_mode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>stat_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>is_new</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>cached</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>previous</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>st_mode</name> <operator>=</operator> <call><name>ce_mode_from_stat</name><argument_list>(<argument><expr><operator>*</operator><name>ce</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name> <operator>=</operator> <name>st_mode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>st_mode</name> <operator>^</operator> <name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name><operator>)</operator> <operator>&amp;</operator> <name>S_IFMT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: wrong type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>st_mode</name> <operator>!=</operator> <name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s has type %o, expected %o"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>st_mode</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name> <operator>=</operator> <name>st_mode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>is_new</name>:</label>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXISTS_IN_INDEX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXISTS_IN_WORKTREE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_to_create</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ok_if_exists</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>nst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>check_index</name></name> <operator>&amp;&amp;</operator>

<call><name>index_name_pos</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><name>ok_if_exists</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EXISTS_IN_INDEX</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>cached</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lstat</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>nst</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>ok_if_exists</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_symlink_leading_path</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>EXISTS_IN_WORKTREE</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>is_missing_file_error</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uintptr_t</name></type> <name>register_symlink_changes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>uintptr_t</name></type> <name>what</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>string_list_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>symlink_changes</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>string_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>symlink_changes</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ent</name><operator>-&gt;</operator><name>util</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>what</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>ent</name><operator>-&gt;</operator><name>util</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>ent</name><operator>-&gt;</operator><name>util</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uintptr_t</name></type> <name>check_symlink_changes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>string_list_lookup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>symlink_changes</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ent</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>ent</name><operator>-&gt;</operator><name>util</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_symlink_changes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>( <init>;</init> <condition><expr><name>patch</name></expr>;</condition> <incr><expr><name>patch</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>&amp;&amp;</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>is_rename</name></name> <operator>||</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>register_symlink_changes</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>, <argument><expr><name>APPLY_SYMLINK_GOES_AWAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>&amp;&amp;</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>register_symlink_changes</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>, <argument><expr><name>APPLY_SYMLINK_IN_RESULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>path_is_beyond_symlink_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>change</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>--</operator><name><name>name</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name><name>name</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>name</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>name</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name><name>name</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>change</name> <operator>=</operator> <call><name>check_symlink_changes</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>change</name> <operator>&amp;</operator> <name>APPLY_SYMLINK_IN_RESULT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>change</name> <operator>&amp;</operator> <name>APPLY_SYMLINK_GOES_AWAY</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>check_index</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <call><name>index_file_exists</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,

<argument><expr><name><name>name</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>ignore_case</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ce</name> <operator>&amp;&amp;</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lstat</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>path_is_beyond_symlink</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>name</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>name_</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><name>name_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>path_is_beyond_symlink_1</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_unsafe_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_name</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>is_copy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_name</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>new_name</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>verify_path</name><argument_list>(<argument><expr><name>old_name</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid path '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>verify_path</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid path '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><ternary><condition><expr><name>old_name</name></expr> ?</condition><then> <expr><name>old_name</name></expr> </then><else>: <expr><name>new_name</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>tpatch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok_if_exists</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>rejected</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>check_preimage</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_name</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tpatch</name> <operator>=</operator> <call><name>in_fn_table</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>was_deleted</name><argument_list>(<argument><expr><name>tpatch</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>to_be_deleted</name><argument_list>(<argument><expr><name>tpatch</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ok_if_exists</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ok_if_exists</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_name</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name><operator>)</operator> <operator>||</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_rename</name></name> <operator>||</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_copy</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>check_to_create</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>ok_if_exists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>threeway</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>direct_to_threeway</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <switch>switch <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<break>break;</break> 

<case>case <expr><name>EXISTS_IN_INDEX</name></expr>:</case>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: already exists in index"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</return>

<break>break;</break>

<case>case <expr><name>EXISTS_IN_WORKTREE</name></expr>:</case>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: already exists in working directory"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></switch></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name> <operator>=</operator> <name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>new_name</name> <operator>&amp;&amp;</operator> <name>old_name</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>same</name> <init>= <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name> <operator>^</operator> <name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name><operator>)</operator> <operator>&amp;</operator> <name>S_IFMT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>same</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"new mode (%o) of %s does not "</literal>

<literal type="string">"match old mode (%o)"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"new mode (%o) of %s does not "</literal>

<literal type="string">"match old mode (%o) of %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>, <argument><expr><name>old_name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>unsafe_paths</name></name> <operator>&amp;&amp;</operator> <call><name>check_unsafe_path</name><argument_list>(<argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">128</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>&amp;&amp;</operator> <call><name>path_is_beyond_symlink</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"affected file '%s' is beyond a symbolic link"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>apply_data</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: patch does not apply"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>rejected</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_patch_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prepare_symlink_changes</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prepare_fn_table</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>patch</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_normal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>say_patch_name</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Checking patch %s..."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>check_patch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">128</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>|=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name>patch</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_apply_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>index_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>read_index_from</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>index_file</name></name></expr></argument>,

<argument><expr><call><name>get_git_dir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>repo_read_index</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_current_oid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_apply_cache</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>index_name_pos</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name><operator>-&gt;</operator><name>cache</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>preimage_oid_in_gitlink_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>hunk</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>fragments</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>heading</name><index>[]</index></name> <init>= <expr><literal type="string">"-Subproject commit "</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>preimage</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(

<expr><name>hunk</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>hunk</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator>

<name><name>hunk</name><operator>-&gt;</operator><name>oldpos</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>hunk</name><operator>-&gt;</operator><name>oldlines</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>preimage</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name><name>hunk</name><operator>-&gt;</operator><name>patch</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name><name>hunk</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<call><name>starts_with</name><argument_list>(<argument><expr><operator>++</operator><name>preimage</name></expr></argument>, <argument><expr><name>heading</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>get_oid_hex</name><argument_list>(<argument><expr><name>preimage</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>heading</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>preimage</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>heading</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>

<call><name>starts_with</name><argument_list>(<argument><expr><name>preimage</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>heading</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>old_oid_prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<return>return <expr><call><name>get_oid_hex</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>old_oid_prefix</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>build_fake_ancestor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name></type> <name>result</name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>patch</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><name>patch</name></expr>;</condition> <incr><expr><name>patch</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <ternary><condition><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr> ?</condition><then> <expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr> </then><else>: <expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>preimage_oid_in_gitlink_patch</name><argument_list>(<argument><expr><name>patch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"sha1 information is lacking or "</literal>

<literal type="string">"useless for submodule %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>get_oid_blob</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_oid_prefix</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<empty_stmt>;</empty_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>lines_added</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>lines_deleted</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_current_oid</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"mode change for %s, which is not "</literal>

<literal type="string">"in current HEAD"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"sha1 information is lacking or useless "</literal>

<literal type="string">"(%s)."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <call><name>make_cache_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ce</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"make_cache_entry failed for path '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>add_index_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><name>ADD_CACHE_OK_TO_ADD</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not add %s to temporary index"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hold_lock_file_for_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>fake_ancestor</name></name></expr></argument>, <argument><expr><name>LOCK_DIE_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_locked_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><name>COMMIT_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write temporary index to %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>fake_ancestor</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stat_patch_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>files</name></decl>, <decl><type ref="prev"/><name>adds</name></decl>, <decl><type ref="prev"/><name>dels</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>files</name> <operator>=</operator> <name>adds</name> <operator>=</operator> <name>dels</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>patch</name></expr> ;</condition> <incr><expr><name>patch</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>files</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>adds</name> <operator>+=</operator> <name><name>patch</name><operator>-&gt;</operator><name>lines_added</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dels</name> <operator>+=</operator> <name><name>patch</name><operator>-&gt;</operator><name>lines_deleted</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_stats</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>print_stat_summary</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>files</name></expr></argument>, <argument><expr><name>adds</name></expr></argument>, <argument><expr><name>dels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>numstat_patch_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>( <init>;</init> <condition><expr><name>patch</name></expr>;</condition> <incr><expr><name>patch</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <ternary><condition><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr> ?</condition><then> <expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr> </then><else>: <expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_binary</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-\t-\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\t%d\t"</literal></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>lines_added</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>lines_deleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>line_termination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_file_mode_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newdelete</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s mode %06o %s\n"</literal></expr></argument>, <argument><expr><name>newdelete</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s %s\n"</literal></expr></argument>, <argument><expr><name>newdelete</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_mode_change</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>show_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>old_mode</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>new_mode</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>old_mode</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>new_mode</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>show_name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" mode change %06o =&gt; %06o %s\n"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>new_mode</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" mode change %06o =&gt; %06o\n"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>new_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_rename_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>renamecopy</name> <init>= <expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>is_rename</name></name></expr> ?</condition><then> <expr><literal type="string">"rename"</literal></expr> </then><else>: <expr><literal type="string">"copy"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_name</name></decl>;</decl_stmt>

<expr_stmt><expr><name>old_name</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>old_name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_name</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>new_name</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slash_old</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>slash_new</name></decl>;</decl_stmt>

<expr_stmt><expr><name>slash_old</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>old_name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slash_new</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slash_old</name> <operator>||</operator>

<operator>!</operator><name>slash_new</name> <operator>||</operator>

<name>slash_old</name> <operator>-</operator> <name>old_name</name> <operator>!=</operator> <name>slash_new</name> <operator>-</operator> <name>new_name</name> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>slash_new</name> <operator>-</operator> <name>new_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_name</name> <operator>=</operator> <name>slash_old</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>new_name</name> <operator>=</operator> <name>slash_new</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>old_name</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>old_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s %.*s{%s =&gt; %s} (%d%%)\n"</literal></expr></argument>, <argument><expr><name>renamecopy</name></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>old_name</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>old_name</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>,

<argument><expr><name>old_name</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s %s =&gt; %s (%d%%)\n"</literal></expr></argument>, <argument><expr><name>renamecopy</name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>show_mode_change</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>summary_patch_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>patch</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>is_new</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_file_mode_name</name><argument_list>(<argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>new_mode</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>is_delete</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_file_mode_name</name><argument_list>(<argument><expr><literal type="string">"delete"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>is_rename</name></name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>is_copy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_rename_copy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" rewrite %s (%d%%)\n"</literal></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>score</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>show_mode_change</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_mode_change</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>patch_stats</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lines</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>lines_added</name></name> <operator>+</operator> <name><name>patch</name><operator>-&gt;</operator><name>lines_deleted</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>lines</name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>max_change</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>max_change</name></name> <operator>=</operator> <name>lines</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>max_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>max_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>quote_c_style</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>max_len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>max_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rmdir_empty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>update_index</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>ita_only</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>remove_file_from_index</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to remove %s from index"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>cached</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>remove_or_warn</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_mode</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rmdir_empty</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remove_path</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_index_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <call><name>make_empty_cache_entry</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name> <operator>=</operator> <call><name>create_ce_mode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>=</operator> <call><name>create_ce_flags</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_namelen</name></name> <operator>=</operator> <name>namelen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ita_only</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_INTENT_TO_ADD</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_object_name_for_intent_to_add_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"Subproject commit "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>get_oid_hex</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"corrupt patch for submodule %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>cached</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to stat newly "</literal>

<literal type="string">"created file '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fill_stat_cache_info</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_object_file</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>blob_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to create backing store "</literal>

<literal type="string">"for newly created file %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>add_index_entry</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><name>ADD_CACHE_OK_TO_ADD</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to add cache entry for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>try_create_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>nbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><call><name>mkdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>has_symlinks</name> <operator>&amp;&amp;</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>!</operator><operator>!</operator><call><name>symlink</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>O_WRONLY</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">0100</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0777</literal></expr> </then><else>: <expr><literal type="number">0666</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>convert_to_working_tree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>nbuf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>nbuf</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to write to '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"closing file '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>res</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_one_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>cached</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>try_create_file</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>safe_create_leading_directories</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>try_create_file</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EEXIST</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EACCES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lstat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>rmdir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EEXIST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EEXIST</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nr</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>newpath</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mksnpath</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>newpath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s~%u"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>try_create_file</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rename</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>nr</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to write file '%s' mode %o"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_conflicted_stages_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stage</name></decl>, <decl><type ref="prev"/><name>namelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>update_index</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <ternary><condition><expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name></expr> ?</condition><then> <expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name></expr> </then><else>: <expr><operator>(</operator><name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_file_from_index</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>stage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>stage</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>stage</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>patch</name><operator>-&gt;</operator><name>threeway_stage</name><index>[<expr><name>stage</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <call><name>make_empty_cache_entry</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name> <operator>=</operator> <call><name>create_ce_mode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>=</operator> <call><name>create_ce_flags</name><argument_list>(<argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_namelen</name></name> <operator>=</operator> <name>namelen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>patch</name><operator>-&gt;</operator><name>threeway_stage</name><index>[<expr><name>stage</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>add_index_entry</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><name>ADD_CACHE_OK_TO_ADD</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to add cache entry for %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>create_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mode</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>new_mode</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>resultsize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>patch</name><operator>-&gt;</operator><name>result</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mode</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>S_IFREG</name> <operator>|</operator> <literal type="number">0644</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>create_one_file</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>conflicted_threeway</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>add_conflicted_stages_file</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>update_index</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>add_index_file</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_out_one_result</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>phase</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_delete</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>phase</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>remove_file</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>patch</name><operator>-&gt;</operator><name>is_new</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>patch</name><operator>-&gt;</operator><name>is_copy</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>phase</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>create_file</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>phase</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>remove_file</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>is_rename</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>phase</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>create_file</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_out_one_reject</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>rej</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>namebuf</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>fragment</name></name> <modifier>*</modifier></type><name>frag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>frag</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>fragments</name></name></expr>;</init> <condition><expr><name>frag</name></expr>;</condition> <incr><expr><name>frag</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frag</name><operator>-&gt;</operator><name>rejected</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cnt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_normal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>say_patch_name</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Applied patch %s cleanly."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"Applying patch %%s with %d reject..."</literal></expr></argument>,

<argument><expr><literal type="string">"Applying patch %%s with %d rejects..."</literal></expr></argument>,

<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>say_patch_name</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>cnt</name> <operator>+</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"truncating .rej filename to %.*s.rej"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>cnt</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>namebuf</name> <operator>+</operator> <name>cnt</name></expr></argument>, <argument><expr><literal type="string">".rej"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rej</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rej</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot open %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>rej</name></expr></argument>, <argument><expr><literal type="string">"diff a/%s b/%s\t(rejected hunks)\n"</literal></expr></argument>,

<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>, <argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>frag</name> <operator>=</operator> <name><name>patch</name><operator>-&gt;</operator><name>fragments</name></name></expr>;</init>

<condition><expr><name>frag</name></expr>;</condition>

<incr><expr><name>cnt</name><operator>++</operator></expr><operator>,</operator> <expr><name>frag</name> <operator>=</operator> <name><name>frag</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frag</name><operator>-&gt;</operator><name>rejected</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Hunk #%d applied cleanly."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Rejected hunk #%d."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>rej</name></expr></argument>, <argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>patch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frag</name><operator>-&gt;</operator><name>patch</name><index>[<expr><name><name>frag</name><operator>-&gt;</operator><name>size</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>rej</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>rej</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_out_results</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>phase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>cpath</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>phase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>phase</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>phase</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>l</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>rejected</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>write_out_one_result</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>phase</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>phase</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>write_out_one_reject</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>conflicted_threeway</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpath</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>cpath</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition> <block>{<block_content>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>&amp;cpath</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"U %s\n"</literal></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cpath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>repo_rerere</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>errs</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_patch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>listp</name> <init>= <expr><operator>&amp;</operator><name>list</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skipped_patch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flush_attributes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>patch_input_file</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_patch_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">128</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>patch</name></name> <modifier>*</modifier></type><name>patch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<expr_stmt><expr><name>patch</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>patch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>inaccurate_eof</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>APPLY_OPT_INACCURATE_EOF</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>patch</name><operator>-&gt;</operator><name>recount</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>APPLY_OPT_RECOUNT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <call><name>parse_chunk</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_patch</name><argument_list>(<argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>==</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_in_reverse</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>reverse_patches</name><argument_list>(<argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>use_patch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>patch_stats</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>listp</name> <operator>=</operator> <name>patch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>listp</name> <operator>=</operator> <operator>&amp;</operator><name><name>patch</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name> <operator>&amp;&amp;</operator>

<call><name>ends_with_path_components</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>new_name</name></name></expr></argument>,

<argument><expr><name>GITATTRIBUTES_FILE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name> <operator>&amp;&amp;</operator>

<call><name>ends_with_path_components</name><argument_list>(<argument><expr><name><name>patch</name><operator>-&gt;</operator><name>old_name</name></name></expr></argument>,

<argument><expr><name>GITATTRIBUTES_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flush_attributes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_normal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>say_patch_name</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Skipped patch '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_patch</name><argument_list>(<argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>skipped_patch</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>nr</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>skipped_patch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unrecognized input"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>whitespace_error</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>==</operator> <name>die_on_ws_error</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>apply</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>update_index</name></name> <operator>=</operator> <operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>check_index</name></name> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>ita_only</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>apply</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>update_index</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_lock_file_locked</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>lock_file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>index_file</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hold_lock_file_for_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>lock_file</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>index_file</name></name></expr></argument>,

<argument><expr><name>LOCK_DIE_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>repo_hold_locked_index</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>lock_file</name></name></expr></argument>,

<argument><expr><name>LOCK_DIE_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>check_index</name></name> <operator>&amp;&amp;</operator> <call><name>read_apply_cache</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to read index file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>check</name></name> <operator>||</operator> <name><name>state</name><operator>-&gt;</operator><name>apply</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>check_patch_list</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>apply_with_reject</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>write_res</name> <init>= <expr><call><name>write_out_results</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>write_res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>write_res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name><name>state</name><operator>-&gt;</operator><name>apply_with_reject</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>fake_ancestor</name></name> <operator>&amp;&amp;</operator>

<call><name>build_fake_ancestor</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>diffstat</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stat_patch_list</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>numstat</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>numstat_patch_list</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>summary</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&gt;</operator> <name>verbosity_silent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>summary_patch_list</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flush_attributes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>reset_parsed_attributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>free_patch_list</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>fn_table</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_option_parse_exclude</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_name_limit</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_option_parse_include</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_name_limit</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>has_include</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_option_parse_p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>p_value</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>p_value_known</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_option_parse_space_change</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_ARG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_ignore_action</name></name> <operator>=</operator> <name>ignore_ws_none</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ws_ignore_action</name></name> <operator>=</operator> <name>ignore_ws_change</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_option_parse_whitespace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>whitespace_option</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_whitespace_option</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_option_parse_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>apply_all_patches</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_stdin</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>to_free</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>apply_patch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"&lt;stdin&gt;"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name>read_stdin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>to_free</name> <operator>=</operator> <call><name>prefix_filename</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"can't open patch '%s': %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>read_stdin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_default_whitespace_mode</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>apply_patch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>set_default_whitespace_mode</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>read_stdin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>apply_patch</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"&lt;stdin&gt;"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>whitespace_error</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>squelch_whitespace_errors</name></name> <operator>&amp;&amp;</operator>

<name><name>state</name><operator>-&gt;</operator><name>squelch_whitespace_errors</name></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>whitespace_error</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>squelched</name> <init>=

<expr><name><name>state</name><operator>-&gt;</operator><name>whitespace_error</name></name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>squelch_whitespace_errors</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"squelched %d whitespace error"</literal></expr></argument>,

<argument><expr><literal type="string">"squelched %d whitespace errors"</literal></expr></argument>,

<argument><expr><name>squelched</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>squelched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>ws_error_action</name></name> <operator>==</operator> <name>die_on_ws_error</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%d line adds whitespace errors."</literal></expr></argument>,

<argument><expr><literal type="string">"%d lines add whitespace errors."</literal></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>whitespace_error</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>whitespace_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>applied_after_fixing_ws</name></name> <operator>&amp;&amp;</operator> <name><name>state</name><operator>-&gt;</operator><name>apply</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%d line applied after"</literal>

<literal type="string">" fixing whitespace errors."</literal></expr></argument>,

<argument><expr><literal type="string">"%d lines applied after"</literal>

<literal type="string">" fixing whitespace errors."</literal></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>applied_after_fixing_ws</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>applied_after_fixing_ws</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>whitespace_error</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"%d line adds whitespace errors."</literal></expr></argument>,

<argument><expr><literal type="string">"%d lines add whitespace errors."</literal></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>whitespace_error</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>whitespace_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>update_index</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_locked_index</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>lock_file</name></name></expr></argument>, <argument><expr><name>COMMIT_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unable to write new index file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">128</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>errs</name></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>lock_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name> <operator>&lt;=</operator> <name>verbosity_silent</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>set_error_routine</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>saved_error_routine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_warn_routine</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>saved_warn_routine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>apply_parse_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>apply_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>force_apply</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>apply_usage</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>builtin_apply_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"exclude"</literal></expr>, <expr><name>state</name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"don't apply changes matching the given path"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NONEG</name></expr>, <expr><name>apply_option_parse_exclude</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"include"</literal></expr>, <expr><name>state</name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"apply changes matching the given path"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NONEG</name></expr>, <expr><name>apply_option_parse_include</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>state</name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"num"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"remove &lt;num&gt; leading slashes from traditional diff paths"</literal></expr></argument>)</argument_list></call></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>apply_option_parse_p</name></expr> }</block></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no-add"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>no_add</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ignore additions made by the patch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"stat"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>diffstat</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"instead of applying the patch, output diffstat for the input"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_NOOP_NOARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"allow-binary-replacement"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_NOOP_NOARG</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"binary"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"numstat"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>numstat</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show number of added and deleted lines in decimal notation"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"summary"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"instead of applying the patch, output a summary for the input"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>check</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"instead of applying the patch, see if the patch is applicable"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>check_index</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"make sure the patch is applicable to the current index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="string">"intent-to-add"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>ita_only</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"mark new files with `git add --intent-to-add`"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"cached"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>cached</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"apply a patch without touching the working tree"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"unsafe-paths"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>unsafe_paths</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"accept a patch that touches outside the working area"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NOCOMPLETE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"apply"</literal></expr></argument>, <argument><expr><name>force_apply</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"also apply the patch (use with --stat/--summary/--check)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="string">"3way"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>threeway</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>( <argument><expr><literal type="string">"attempt three-way merge if a patch does not apply"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_FILENAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"build-fake-ancestor"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>fake_ancestor</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"build a temporary index based on embedded index information"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_SET_INT</name><argument_list>(<argument><expr><literal type="char">'z'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>line_termination</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"paths are separated with NUL character"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_INTEGER</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>p_context</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ensure at least &lt;n&gt; lines of context match"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"whitespace"</literal></expr>, <expr><name>state</name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"action"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"detect new or modified lines that have whitespace errors"</literal></expr></argument>)</argument_list></call></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>apply_option_parse_whitespace</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ignore-space-change"</literal></expr>, <expr><name>state</name></expr>, <expr><name>NULL</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ignore changes in whitespace when finding context"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NOARG</name></expr>, <expr><name>apply_option_parse_space_change</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ignore-whitespace"</literal></expr>, <expr><name>state</name></expr>, <expr><name>NULL</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ignore changes in whitespace when finding context"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NOARG</name></expr>, <expr><name>apply_option_parse_space_change</name></expr> }</block></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>, <argument><expr><literal type="string">"reverse"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>apply_in_reverse</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"apply the patch in reverse"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"unidiff-zero"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>unidiff_zero</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"don't expect at least one line of context"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"reject"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>apply_with_reject</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"leave the rejected hunks in corresponding *.rej files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"allow-overlap"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>allow_overlap</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"allow overlapping hunks"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT__VERBOSE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>apply_verbosity</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"be verbose"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"inaccurate-eof"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"tolerate incorrectly detected missing new-line at the end of file"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>APPLY_OPT_INACCURATE_EOF</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"recount"</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"do not trust the line counts in the hunk headers"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>APPLY_OPT_RECOUNT</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"directory"</literal></expr>, <expr><name>state</name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"prepend &lt;root&gt; to all filenames"</literal></expr></argument>)</argument_list></call></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>apply_option_parse_directory</name></expr> }</block></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>builtin_apply_options</name></expr></argument>, <argument><expr><name>apply_usage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
