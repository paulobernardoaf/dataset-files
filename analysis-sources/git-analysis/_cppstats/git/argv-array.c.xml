<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\argv-array.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>empty_argv</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>argv_array_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>empty_argv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>argc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>argv_array_push_nodup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>argv</name></name> <operator>==</operator> <name>empty_argv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>argv</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>argc</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>array</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>argc</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>argc</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv_array_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>argv_array_push_nodup</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>array</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv_array_pushf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>v</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_vaddf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push_nodup</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>array</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>argv_array_pushl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>argv_array_pushv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>argv</name></expr>;</condition> <incr><expr><name>argv</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>argv_array_pop</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>array</name><operator>-&gt;</operator><name>argc</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>array</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>array</name><operator>-&gt;</operator><name>argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><operator>-&gt;</operator><name>argc</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>argv_array_split</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>to_split</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>to_split</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>to_split</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>to_split</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>argv_array_push_nodup</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>xstrndup</name><argument_list>(<argument><expr><name>to_split</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>to_split</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>to_split</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>argv_array_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>argv</name></name> <operator>!=</operator> <name>empty_argv</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>array</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>array</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>array</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>argv_array_init</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv_array_detach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>array</name><operator>-&gt;</operator><name>argv</name></name> <operator>==</operator> <name>empty_argv</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret</name> <init>= <expr><name><name>array</name><operator>-&gt;</operator><name>argv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_init</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
