<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\list.h"><struct>struct <name>list_head</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LIST_HEAD</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_HEAD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>struct list_head name = { &amp;(name), &amp;(name) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_LIST_HEAD</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ptr)-&gt;next = (ptr)-&gt;prev = (ptr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_HEAD_INIT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ &amp;(name), &amp;(name) }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_add_tail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>newp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>__list_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_del</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>__list_del</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_del_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>list_del</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_LIST_HEAD</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_move</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>elem</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>__list_del</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_add</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_replace</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>old</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>newp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>old</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>old</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_splice</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>add</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>add</name> <operator>!=</operator> <name><name>add</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>add</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>add</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>add</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_entry</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type *) ((char *) (ptr) - offsetof(type, member)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_first_entry</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>list_entry((ptr)-&gt;next, type, member)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_for_each</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (pos = (head)-&gt;next; pos != (head); pos = pos-&gt;next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_for_each_safe</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (pos = (head)-&gt;next, p = pos-&gt;next; pos != (head); pos = p, p = pos-&gt;next)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_for_each_prev</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (pos = (head)-&gt;prev; pos != (head); pos = pos-&gt;prev)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>list_for_each_prev_safe</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>p</name></type></parameter>, <parameter><type><name>head</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (pos = (head)-&gt;prev, p = pos-&gt;prev; pos != (head); pos = p, p = pos-&gt;prev)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>list_empty</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>head</name> <operator>==</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>list_replace_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>old</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>newp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>list_head</name></name> <modifier>*</modifier></type><name>head</name> <init>= <expr><name><name>old</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>list_del</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>list_add_tail</name><argument_list>(<argument><expr><name>newp</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INIT_LIST_HEAD</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>volatile_list_head</name> <block>{

<decl_stmt><decl><type><specifier>volatile</specifier> <name><name>struct</name> <name>volatile_list_head</name></name> <modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOLATILE_LIST_HEAD</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>volatile struct volatile_list_head name = { &amp;(name), &amp;(name) }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>__volatile_list_del</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name><name>struct</name> <name>volatile_list_head</name></name> <modifier>*</modifier></type><name>prev</name></decl></parameter>,

<parameter><decl><type><specifier>volatile</specifier> <name><name>struct</name> <name>volatile_list_head</name></name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>volatile_list_del</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name><name>struct</name> <name>volatile_list_head</name></name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>__volatile_list_del</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>volatile_list_empty</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name><name>struct</name> <name>volatile_list_head</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>head</name> <operator>==</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>volatile_list_add</name><parameter_list>(<parameter><decl><type><specifier>volatile</specifier> <name><name>struct</name> <name>volatile_list_head</name></name> <modifier>*</modifier></type><name>newp</name></decl></parameter>,

<parameter><decl><type><specifier>volatile</specifier> <name><name>struct</name> <name>volatile_list_head</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newp</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>head</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>head</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newp</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
