<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\compat\mingw.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../git-compat-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;conio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../strbuf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../run-command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32/lazyload.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCAST</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>handle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((type)(intptr_t)handle)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>delay</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">40</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>open_in_gdb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>child_process</name></name></type> <name>cp</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>_pgmptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cp</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"mintty"</literal></expr></argument>, <argument><expr><literal type="string">"gdb"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cp</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--pid=%d"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cp</name><operator>.</operator><name>clean_on_exit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"Could not start gdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>err_win_to_posix</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>winerr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><name>ENOSYS</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>winerr</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ERROR_ACCESS_DENIED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_ACCOUNT_DISABLED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_ACCOUNT_RESTRICTION</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_ALREADY_ASSIGNED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_ALREADY_EXISTS</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EEXIST</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_ARITHMETIC_OVERFLOW</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BAD_COMMAND</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BAD_DEVICE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENODEV</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BAD_DRIVER_LEVEL</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENXIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BAD_EXE_FORMAT</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOEXEC</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BAD_FORMAT</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOEXEC</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BAD_LENGTH</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BAD_PATHNAME</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BAD_PIPE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BAD_UNIT</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENODEV</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BAD_USERNAME</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BROKEN_PIPE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BUFFER_OVERFLOW</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENAMETOOLONG</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BUSY</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_BUSY_DRIVE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_CALL_NOT_IMPLEMENTED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_CANNOT_MAKE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_CANTOPEN</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_CANTREAD</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_CANTWRITE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_CRC</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_CURRENT_DIRECTORY</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_DEVICE_IN_USE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_DEV_NOT_EXIST</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENODEV</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_DIRECTORY</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_DIR_NOT_EMPTY</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOTEMPTY</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_DISK_CHANGE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_DISK_FULL</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_DRIVE_LOCKED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_ENVVAR_NOT_FOUND</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_EXE_MARKED_INVALID</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOEXEC</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_FILENAME_EXCED_RANGE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENAMETOOLONG</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_FILE_EXISTS</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EEXIST</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_FILE_INVALID</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENODEV</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_FILE_NOT_FOUND</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_GEN_FAILURE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_HANDLE_DISK_FULL</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INSUFFICIENT_BUFFER</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_ACCESS</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_ADDRESS</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EFAULT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_BLOCK</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EFAULT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_DATA</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_DRIVE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENODEV</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_EXE_SIGNATURE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOEXEC</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_FLAGS</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_FUNCTION</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_HANDLE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_LOGON_HOURS</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_NAME</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_OWNER</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_PARAMETER</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_PASSWORD</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPERM</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_PRIMARY_GROUP</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_SIGNAL_NUMBER</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_TARGET_HANDLE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_INVALID_WORKSTATION</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_IO_DEVICE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_IO_INCOMPLETE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_LOCKED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_LOCK_VIOLATION</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_LOGON_FAILURE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_MAPPED_ALIGNMENT</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_META_EXPANSION_TOO_LONG</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>E2BIG</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_MORE_DATA</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_NEGATIVE_SEEK</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ESPIPE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_NOACCESS</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EFAULT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_NONE_MAPPED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_NOT_ENOUGH_MEMORY</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_NOT_READY</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_NOT_SAME_DEVICE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EXDEV</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_NO_DATA</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_NO_MORE_SEARCH_HANDLES</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_NO_PROC_SLOTS</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_NO_SUCH_PRIVILEGE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_OPEN_FAILED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_OPEN_FILES</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_OPERATION_ABORTED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EINTR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_OUTOFMEMORY</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_PASSWORD_EXPIRED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_PATH_BUSY</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_PATH_NOT_FOUND</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_PIPE_BUSY</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EBUSY</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_PIPE_CONNECTED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_PIPE_LISTENING</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_PIPE_NOT_CONNECTED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_PRIVILEGE_NOT_HELD</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_READ_FAULT</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_SEEK</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_SEEK_ON_DEVICE</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ESPIPE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_SHARING_BUFFER_EXCEEDED</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENFILE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_SHARING_VIOLATION</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_STACK_OVERFLOW</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_SUCCESS</name></expr>:</case> <expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"err_win_to_posix() called without an error!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ERROR_SWAPERROR</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_TOO_MANY_MODULES</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EMFILE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_TOO_MANY_OPEN_FILES</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EMFILE</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_UNRECOGNIZED_MEDIA</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENXIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_UNRECOGNIZED_VOLUME</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ENODEV</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_WAIT_NO_CHILDREN</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>ECHILD</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_WRITE_FAULT</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ERROR_WRITE_PROTECT</name></expr>:</case> <expr_stmt><expr><name>error</name> <operator>=</operator> <name>EROFS</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>error</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_file_in_use_error</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>errcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>errcode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ERROR_SHARING_VIOLATION</name></expr>:</case>

<case>case <expr><name>ERROR_ACCESS_DENIED</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_yes_no_answer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>answer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>answer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>answer_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>answer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_full_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>answer_len</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>answer</name><index>[<expr><name>answer_len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>answer</name><index>[<expr><name>answer_len</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>got_full_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>answer_len</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>answer</name><index>[<expr><name>answer_len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>answer</name><index>[<expr><name>answer_len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>got_full_line</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_full_line</name></expr>)</condition><block type="pseudo"><block_content>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><name><name>answer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'y'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>answer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>answer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tolower</name><argument_list>(<argument><expr><name><name>answer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>answer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>answer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ask_yes_no_if_possible</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>question</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>retry_hook</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>question</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>question</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>retry_hook</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mingw_getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_ASK_YESNO"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>retry_hook</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>question</name></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><call><name>run_command_v_opt</name><argument_list>(<argument><expr><name>retry_hook</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>answer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s (y/n) "</literal></expr></argument>, <argument><expr><name>question</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>answer</name> <operator>=</operator> <call><name>read_yes_no_answer</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>answer</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Sorry, I did not understand your answer. "</literal>

<literal type="string">"Please type 'y' or 'n'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<enum>enum <name>hide_dotfiles_type</name> <block>{

<decl><name>HIDE_DOTFILES_FALSE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>HIDE_DOTFILES_TRUE</name></decl>,

<decl><name>HIDE_DOTFILES_DOTGITONLY</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>core_restrict_inherited_handles</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>hide_dotfiles_type</name></name></type> <name>hide_dotfiles</name> <init>= <expr><name>HIDE_DOTFILES_DOTGITONLY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>unset_environment_variables</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>mingw_core_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.hidedotfiles"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"dotgitonly"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hide_dotfiles</name> <operator>=</operator> <name>HIDE_DOTFILES_DOTGITONLY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hide_dotfiles</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.unsetenvvars"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>unset_environment_variables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unset_environment_variables</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"core.restrictinheritedhandles"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>core_restrict_inherited_handles</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>core_restrict_inherited_handles</name> <operator>=</operator>

<call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>normalize_ntpath</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wbuf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wcsncmp</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><literal type="string">L"\\??\\"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>wcsncmp</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><literal type="string">L"\\\\?\\"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wbuf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>wcsnicmp</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><literal type="string">L"\\DosDevices\\"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wbuf</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wcsnicmp</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><literal type="string">L"UNC\\"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>wbuf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>wbuf</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>wbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>wbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wbuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>wbuf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_unlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>tries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wpathname</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wpathname</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_wchmod</name><argument_list>(<argument><expr><name>wpathname</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_wunlink</name><argument_list>(<argument><expr><name>wpathname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tries</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_file_in_use_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>tries</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tries</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>is_file_in_use_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>ask_yes_no_if_possible</name><argument_list>(<argument><expr><literal type="string">"Unlink of file '%s' failed. "</literal>

<literal type="string">"Should I try again?"</literal></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_wunlink</name><argument_list>(<argument><expr><name>wpathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_dir_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wpath</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>findbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wbuf</name><index>[<expr><name>MAX_PATH</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcscat</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><literal type="string">L"\\*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>findbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_NO_MORE_FILES</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>wcscmp</name><argument_list>(<argument><expr><name><name>findbuf</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><literal type="string">L"."</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>wcscmp</name><argument_list>(<argument><expr><name><name>findbuf</name><operator>.</operator><name>cFileName</name></name></expr></argument>, <argument><expr><literal type="string">L".."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FindNextFileW</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>findbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name> <operator>==</operator> <name>ERROR_NO_MORE_FILES</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_rmdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>tries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wpathname</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wpathname</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>_wrmdir</name><argument_list>(<argument><expr><name>wpathname</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tries</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_file_in_use_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>err_win_to_posix</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EACCES</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_dir_empty</name><argument_list>(<argument><expr><name>wpathname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTEMPTY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>tries</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tries</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EACCES</name> <operator>&amp;&amp;</operator> <call><name>is_file_in_use_error</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>ask_yes_no_if_possible</name><argument_list>(<argument><expr><literal type="string">"Deletion of directory '%s' failed. "</literal>

<literal type="string">"Should I try again?"</literal></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_wrmdir</name><argument_list>(<argument><expr><name>wpathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>needs_hiding</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basename</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hide_dotfiles</name> <operator>==</operator> <name>HIDE_DOTFILES_FALSE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>win32_skip_dos_drive_prefix</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>basename</name> <operator>=</operator> <name>path</name></expr>;</init> <condition><expr><operator>*</operator><name>path</name></expr>;</condition> <incr><expr><name>path</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_dir_sep</name><argument_list>(<argument><expr><operator>*</operator><name>path</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>path</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><call><name>is_dir_sep</name><argument_list>(<argument><expr><operator>*</operator><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>basename</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>hide_dotfiles</name> <operator>==</operator> <name>HIDE_DOTFILES_TRUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>*</operator><name>basename</name> <operator>==</operator> <literal type="char">'.'</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hide_dotfiles</name> <operator>==</operator> <name>HIDE_DOTFILES_DOTGITONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><literal type="string">".git"</literal></expr></argument>, <argument><expr><name>basename</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>basename</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>||</operator> <call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>basename</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_hidden_flag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>set</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>original</name> <init>= <expr><call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>modified</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>set</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>modified</name> <operator>=</operator> <name>original</name> <operator>|</operator> <name>FILE_ATTRIBUTE_HIDDEN</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>modified</name> <operator>=</operator> <name>original</name> <operator>&amp;</operator> <operator>~</operator><name>FILE_ATTRIBUTE_HIDDEN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>original</name> <operator>==</operator> <name>modified</name> <operator>||</operator> <call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>err_win_to_posix</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_mkdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wpath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_win32_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>_wmkdir</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <call><name>needs_hiding</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>set_hidden_flag</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mingw_open_append</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>wfilename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oflags</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>create</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>O_CREAT</name><operator>)</operator></expr> ?</condition><then> <expr><name>OPEN_ALWAYS</name></expr> </then><else>: <expr><name>OPEN_EXISTING</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <operator>~</operator><name>O_CREAT</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>O_WRONLY</name> <operator>|</operator> <name>O_APPEND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>FILE_APPEND_DATA</name></expr></argument>,

<argument><expr><name>FILE_SHARE_WRITE</name> <operator>|</operator> <name>FILE_SHARE_READ</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>create</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <call><name>err_win_to_posix</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>handle</name></expr></argument>, <argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>fd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_local_named_pipe_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>filename</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>filename</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator>

<call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>filename</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strncasecmp</name><argument_list>(<argument><expr><name>filename</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"pipe"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>filename</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>filename</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_open</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oflags</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>open_fn_t</name>)<parameter_list>(<parameter><decl><type><name>wchar_t</name> <specifier>const</specifier> <modifier>*</modifier></type><name>wfilename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oflags</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>create</name> <init>= <expr><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <operator>(</operator><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wfilename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>open_fn_t</name></type> <name>open_fn</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_win32_path</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>!</operator><name>create</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <ternary><condition><expr><name>create</name></expr> ?</condition><then> <expr><name>EINVAL</name></expr> </then><else>: <expr><name>ENOENT</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>O_APPEND</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_local_named_pipe_path</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>open_fn</name> <operator>=</operator> <name>mingw_open_append</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>open_fn</name> <operator>=</operator> <name>_wopen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"/dev/null"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><literal type="string">L"nul"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open_fn</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>O_ACCMODE</name><operator>)</operator> <operator>!=</operator> <name>O_RDONLY</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EACCES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>attrs</name> <init>= <expr><call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attrs</name> <operator>!=</operator> <name>INVALID_FILE_ATTRIBUTES</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>attrs</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EISDIR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>oflags</name> <operator>&amp;</operator> <name>O_CREAT</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>needs_hiding</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EACCES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open_fn</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>oflags</name> <operator>&amp;</operator> <operator>~</operator><name>O_CREAT</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>set_hidden_flag</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"could not mark '%s' as hidden."</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>fd</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name> <name>WINAPI</name></type> <name>ctrl_ignore</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>TRUE</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fgetc</name></cpp:undef>

<function><type><name>int</name></type> <name>mingw_fgetc</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isatty</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>fgetc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>ctrl_ignore</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <name>EOF</name> <operator>||</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_OPERATION_ABORTED</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mingw_raise</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>SetConsoleCtrlHandler</name><argument_list>(<argument><expr><name>ctrl_ignore</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ch</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fopen</name></cpp:undef>

<function><type><name>FILE</name> <modifier>*</modifier></type><name>mingw_fopen</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>otype</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hide</name> <init>= <expr><call><name>needs_hiding</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wfilename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>wotype</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"/dev/null"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><literal type="string">L"nul"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>is_valid_win32_path</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>create</name> <init>= <expr><name>otype</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>otype</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <ternary><condition><expr><name>create</name></expr> ?</condition><then> <expr><name>EINVAL</name></expr> </then><else>: <expr><name>ENOENT</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs</name><argument_list>(<argument><expr><name>wotype</name></expr></argument>, <argument><expr><name>otype</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wotype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hide</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>access</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>set_hidden_flag</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"could not unhide %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>_wfopen</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>wotype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>file</name> <operator>&amp;&amp;</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_INVALID_NAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <name>hide</name> <operator>&amp;&amp;</operator> <call><name>set_hidden_flag</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"could not mark '%s' as hidden."</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>file</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>FILE</name> <modifier>*</modifier></type><name>mingw_freopen</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>otype</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hide</name> <init>= <expr><call><name>needs_hiding</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wfilename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>wotype</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"/dev/null"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><literal type="string">L"nul"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>is_valid_win32_path</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>create</name> <init>= <expr><name>otype</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>otype</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <ternary><condition><expr><name>create</name></expr> ?</condition><then> <expr><name>EINVAL</name></expr> </then><else>: <expr><name>ENOENT</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs</name><argument_list>(<argument><expr><name>wotype</name></expr></argument>, <argument><expr><name>otype</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wotype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>hide</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>access</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>set_hidden_flag</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"could not unhide %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>_wfreopen</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>wotype</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&amp;&amp;</operator> <name>hide</name> <operator>&amp;&amp;</operator> <call><name>set_hidden_flag</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"could not mark '%s' as hidden."</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>file</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fflush</name></cpp:undef>

<function><type><name>int</name></type> <name>mingw_fflush</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fflush</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>write</name></cpp:undef>

<function><type><name>ssize_t</name></type> <name>mingw_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>result</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name> <operator>&amp;&amp;</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetFileType</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FILE_TYPE_PIPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EPIPE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_access</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wfilename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>_waccess</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>mode</name> <operator>&amp;</operator> <operator>~</operator><name>X_OK</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_chdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wdirname</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wdirname</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>_wchdir</name><argument_list>(<argument><expr><name>wdirname</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_chmod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wfilename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>_wchmod</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name> <name>long</name></type> <name>filetime_to_hnsec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>winTime</name> <init>= <expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>ft</name><operator>-&gt;</operator><name>dwHighDateTime</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <name><name>ft</name><operator>-&gt;</operator><name>dwLowDateTime</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name>winTime</name> <operator>-</operator> <literal type="number">116444736000000000LL</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>filetime_to_timespec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>ts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>hnsec</name> <init>= <expr><call><name>filetime_to_hnsec</name><argument_list>(<argument><expr><name>ft</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>hnsec</name> <operator>/</operator> <literal type="number">10000000</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>=</operator> <operator>(</operator><name>hnsec</name> <operator>%</operator> <literal type="number">10000000</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>has_valid_directory_prefix</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wfilename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name>c</name> <init>= <expr><name><name>wfilename</name><index>[<expr><operator>--</operator><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>attributes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_dir_sep</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wfilename</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>attributes</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wfilename</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attributes</name> <operator>==</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name> <operator>||</operator>

<name>attributes</name> <operator>==</operator> <name>FILE_ATTRIBUTE_DEVICE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attributes</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ERROR_PATH_NOT_FOUND</name></expr>:</case>

<continue>continue;</continue>

<case>case <expr><name>ERROR_FILE_NOT_FOUND</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_lstat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>follow</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WIN32_FILE_ATTRIBUTE_DATA</name></type> <name>fdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wfilename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetFileAttributesExW</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>GetFileExInfoStandard</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdata</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_ino</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_gid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <call><name>file_attr_to_st_mode</name><argument_list>(<argument><expr><name><name>fdata</name><operator>.</operator><name>dwFileAttributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <name><name>fdata</name><operator>.</operator><name>nFileSizeLow</name></name> <operator>|</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name>off_t</name><operator>)</operator><name><name>fdata</name><operator>.</operator><name>nFileSizeHigh</name></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_dev</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_rdev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>filetime_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>fdata</name><operator>.</operator><name>ftLastAccessTime</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>st_atim</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filetime_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>fdata</name><operator>.</operator><name>ftLastWriteTime</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>st_mtim</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filetime_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>fdata</name><operator>.</operator><name>ftCreationTime</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>st_ctim</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fdata</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>WIN32_FIND_DATAW</name></type> <name>findbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name> <init>= <expr><call><name>FindFirstFileW</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>findbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>findbuf</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_REPARSE_POINT</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>findbuf</name><operator>.</operator><name>dwReserved0</name></name> <operator>==</operator> <name>IO_REPARSE_TAG_SYMLINK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>follow</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAXIMUM_REPARSE_DATA_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <call><name>readlink</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAXIMUM_REPARSE_DATA_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <name>S_IFLNK</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IREAD</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>findbuf</name><operator>.</operator><name>dwFileAttributes</name></name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>|=</operator> <name>S_IWRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FindClose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ERROR_ACCESS_DENIED</name></expr>:</case>

<case>case <expr><name>ERROR_SHARING_VIOLATION</name></expr>:</case>

<case>case <expr><name>ERROR_LOCK_VIOLATION</name></expr>:</case>

<case>case <expr><name>ERROR_SHARING_BUFFER_EXCEEDED</name></expr>:</case>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ERROR_BUFFER_OVERFLOW</name></expr>:</case>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENAMETOOLONG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ERROR_NOT_ENOUGH_MEMORY</name></expr>:</case>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ERROR_PATH_NOT_FOUND</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_valid_directory_prefix</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOTDIR</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<default>default:</default>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_stat_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>follow</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>namelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>alt_name</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_lstat</name><argument_list>(<argument><expr><name>follow</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&amp;&amp;</operator> <name><name>file_name</name><index>[<expr><name>namelen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>namelen</name> <operator>&amp;&amp;</operator> <name><name>file_name</name><index>[<expr><name>namelen</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name>namelen</name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>namelen</name> <operator>||</operator> <name>namelen</name> <operator>&gt;=</operator> <name>PATH_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>alt_name</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>alt_name</name><index>[<expr><name>namelen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>do_lstat</name><argument_list>(<argument><expr><name>follow</name></expr></argument>, <argument><expr><name>alt_name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_file_info_by_handle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hnd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>fdata</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name>hnd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fdata</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>err_win_to_posix</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_ino</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_gid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <call><name>file_attr_to_st_mode</name><argument_list>(<argument><expr><name><name>fdata</name><operator>.</operator><name>dwFileAttributes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <name><name>fdata</name><operator>.</operator><name>nFileSizeLow</name></name> <operator>|</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name>off_t</name><operator>)</operator><name><name>fdata</name><operator>.</operator><name>nFileSizeHigh</name></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_dev</name></name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>st_rdev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>filetime_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>fdata</name><operator>.</operator><name>ftLastAccessTime</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>st_atim</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filetime_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>fdata</name><operator>.</operator><name>ftLastWriteTime</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>st_mtim</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filetime_to_timespec</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>fdata</name><operator>.</operator><name>ftCreationTime</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>st_ctim</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_lstat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>do_stat_internal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>do_stat_internal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_fstat</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>fh</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>avail</name></decl>, <decl><type ref="prev"/><name>type</name> <init>= <expr><call><name>GetFileType</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>FILE_TYPE_REMOTE</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FILE_TYPE_DISK</name></expr>:</case>

<return>return <expr><call><name>get_file_info_by_handle</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>FILE_TYPE_CHAR</name></expr>:</case>

<case>case <expr><name>FILE_TYPE_PIPE</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_nlink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>FILE_TYPE_CHAR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <name>_S_IFCHR</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_mode</name></name> <operator>=</operator> <name>_S_IFIFO</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PeekNamedPipe</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>st_size</name></name> <operator>=</operator> <name>avail</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>time_t_to_filetime</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>FILETIME</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>winTime</name> <init>= <expr><name>t</name> <operator>*</operator> <literal type="number">10000000LL</literal> <operator>+</operator> <literal type="number">116444736000000000LL</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>dwLowDateTime</name></name> <operator>=</operator> <name>winTime</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>dwHighDateTime</name></name> <operator>=</operator> <name>winTime</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_utime</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>utimbuf</name></name> <modifier>*</modifier></type><name>times</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>mft</name></decl>, <decl><type ref="prev"/><name>aft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fh</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>attrs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wfilename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>attrs</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attrs</name> <operator>!=</operator> <name>INVALID_FILE_ATTRIBUTES</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>attrs</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>attrs</name> <operator>&amp;</operator> <operator>~</operator><name>FILE_ATTRIBUTE_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fh</name> <operator>=</operator> <call><name>_wopen</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_BINARY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>revert_attrs</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>times</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>time_t_to_filetime</name><argument_list>(<argument><expr><name><name>times</name><operator>-&gt;</operator><name>modtime</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>time_t_to_filetime</name><argument_list>(<argument><expr><name><name>times</name><operator>-&gt;</operator><name>actime</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>aft</name> <operator>=</operator> <name>mft</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetFileTime</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aft</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mft</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>revert_attrs</name>:</label>

<if_stmt><if>if <condition>(<expr><name>attrs</name> <operator>!=</operator> <name>INVALID_FILE_ATTRIBUTES</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>attrs</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>wfilename</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strftime</name></cpp:undef>

<function><type><name>size_t</name></type> <name>mingw_strftime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>strftime</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid strftime format: '%s'"</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>sleep</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seconds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>seconds</name><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>mingw_mktemp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>template</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wtemplate</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wtemplate</name></expr></argument>, <argument><expr><name>template</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_wmktemp</name><argument_list>(<argument><expr><name>wtemplate</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xwcstoutf</name><argument_list>(<argument><expr><name>template</name></expr></argument>, <argument><expr><name>wtemplate</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>template</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>template</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mkstemp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>template</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><call><name>mktemp</name><argument_list>(<argument><expr><name>template</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>gettimeofday</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>ft</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>hnsec</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hnsec</name> <operator>=</operator> <call><name>filetime_to_hnsec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name>hnsec</name> <operator>/</operator> <literal type="number">10000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>hnsec</name> <operator>%</operator> <literal type="number">10000000</literal><operator>)</operator> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>pipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>filedes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreatePipe</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>err_win_to_posix</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filedes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><call><name>HCAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_NOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filedes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>filedes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><call><name>HCAST</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_NOINHERIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filedes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>filedes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>gmtime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>timep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>gmtime_s</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>timep</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>localtime_r</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name> <modifier>*</modifier></type><name>timep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>localtime_s</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>timep</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>mingw_getcwd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>cwd</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>wpointer</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name> <init>= <expr><call><name>GetCurrentDirectoryW</name><argument_list>(<argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>||</operator> <name>ret</name> <operator>&gt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ENAMETOOLONG</name></expr> </then><else>: <expr><call><name>err_win_to_posix</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetLongPathNameW</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>wpointer</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wpointer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_ACCESS_DENIED</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hnd</name> <init>= <expr><call><name>CreateFileW</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name> <operator>|</operator> <name>FILE_SHARE_DELETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><name>FILE_FLAG_BACKUP_SEMANTICS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hnd</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetFinalPathNameByHandleW</name><argument_list>(<argument><expr><name>hnd</name></expr></argument>, <argument><expr><name>wpointer</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wpointer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>||</operator> <name>ret</name> <operator>&gt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wpointer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xwcstoutf</name><argument_list>(<argument><expr><name>pointer</name></expr></argument>, <argument><expr><call><name>normalize_ntpath</name><argument_list>(<argument><expr><name>wpointer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>pointer</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>||</operator> <name>ret</name> <operator>&gt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wpointer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xwcstoutf</name><argument_list>(<argument><expr><name>pointer</name></expr></argument>, <argument><expr><name>wpointer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>convert_slashes</name><argument_list>(<argument><expr><name>pointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pointer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>quote_arg_msvc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>force_quotes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>force_quotes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'*'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>force_quotes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>+=</operator> <name>count</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force_quotes</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>arg</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>q</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>st_add3</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>arg</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>!</operator><operator>*</operator><name>arg</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>arg</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'"'</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>d</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><name>q</name></expr>;</return>

</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>quote_arg_msys2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name>arg</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>arg</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ws</name> <init>= <expr><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ws</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'{'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\''</literal> <operator>&amp;&amp;</operator>

<operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'~'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>p2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>arg</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_interpreter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".exe"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>||</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>buf</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>opt</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>lookup_prog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>isexe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exe_only</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wpath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%.*s\\%s.exe"</literal></expr></argument>, <argument><expr><name>dirlen</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isexe</name> <operator>&amp;&amp;</operator> <call><name>_waccess</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>wpath</name><index>[<expr><call><name>wcslen</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>exe_only</name> <operator>||</operator> <name>isexe</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>_waccess</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>wpath</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>path</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>path_lookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exe_only</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prog</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>isexe</name> <init>= <expr><name>len</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>cmd</name><operator>+</operator><name>len</name><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">".exe"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strpbrk</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"/\\"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>mingw_getenv</name><argument_list>(<argument><expr><literal type="string">"PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><name>prog</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep</name> <init>= <expr><call><name>strchrnul</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dirlen</name> <init>= <expr><name>sep</name> <operator>-</operator> <name>path</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dirlen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prog</name> <operator>=</operator> <call><name>lookup_prog</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>dirlen</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>isexe</name></expr></argument>, <argument><expr><name>exe_only</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>sep</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name>sep</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>prog</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wcschrnul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>wchar_t</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>!=</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>s</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>wenvcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name> <init>= <expr><operator>*</operator><operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>p_len</name></decl>, <decl><type ref="prev"/><name>q_len</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_len</name> <operator>=</operator> <call><name>wcschrnul</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'='</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q_len</name> <operator>=</operator> <call><name>wcschrnul</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'='</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>q</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_len</name> <operator>&lt;</operator> <name>q_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_len</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>p_len</name> <operator>&gt;</operator> <name>q_len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_len</name> <operator>=</operator> <name>q_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>_wcsnicmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>p_len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>make_environment_block</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>deltaenv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wenv</name> <init>= <expr><call><name>GetEnvironmentStringsW</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wdeltaenv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>result</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>wlen</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>delta_size</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>array</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>deltaenv</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>deltaenv</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>wenv</name></expr>;</init> <condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>wenv</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeEnvironmentStringsW</name><argument_list>(<argument><expr><name>wenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>wenv</name></expr>;</init> <condition><expr><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><index>[<expr><name>nr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>delta_size</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>deltaenv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta_size</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>deltaenv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>wdeltaenv</name></expr></argument>, <argument><expr><name>delta_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <name>wdeltaenv</name></expr>;</init> <condition><expr><name><name>deltaenv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wlen</name> <operator>=</operator> <call><name>xutftowcs</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>deltaenv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>wdeltaenv</name> <operator>+</operator> <name>delta_size</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>array</name><index>[<expr><name>nr</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>wlen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>git_stable_qsort</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>array</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>wenvcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>delta_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>result</name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<while>while <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>nr</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>wenvcmp</name><argument_list>(<argument><expr><name>array</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>array</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wcschr</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>L</name><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wdeltaenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeEnvironmentStringsW</name><argument_list>(<argument><expr><name>wenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_unset_environment_variables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>unset_environment_variables</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>done</name> <operator>||</operator> <operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>comma</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>comma</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>comma</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>comma</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<struct>struct <name>pinfo_t</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>pinfo_t</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>proc</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>pinfo_t</name></name> <modifier>*</modifier></type><name>pinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>pinfo_cs</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>match_last_path_component</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>component</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>component_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&lt;</operator> <name>component_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>!</operator><call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><operator>*</operator><name>len</name> <operator>-</operator> <name>component_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>fspathncmp</name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <operator>*</operator><name>len</name> <operator>-</operator> <name>component_len</name></expr></argument>, <argument><expr><name>component</name></expr></argument>, <argument><expr><name>component_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>-=</operator> <name>component_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><operator>*</operator><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_msys2_sh</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>path_lookup</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>match_last_path_component</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"sh.exe"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>match_last_path_component</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"bin"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>match_last_path_component</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"usr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ends_with</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"\\sh.exe"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>sh</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sh</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <call><name>path_lookup</name><argument_list>(<argument><expr><literal type="string">"sh"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><call><name>fspathcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>sh</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pid_t</name></type> <name>mingw_spawnve_fd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>deltaenv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prepend_cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fhin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fhout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fherr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>restrict_handle_inheritance</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STARTUPINFOEXW</name></type> <name>si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PROCESS_INFORMATION</name></type> <name>pi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPPROC_THREAD_ATTRIBUTE_LIST</name></type> <name>attr_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>stdhandles</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>stdhandles_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SIZE_T</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wcmd</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>wdir</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wargs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>wenvblk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name>CREATE_UNICODE_ENVIRONMENT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>cons</name></decl>;</decl_stmt>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>quote_arg</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <init>=

<expr><ternary><condition><expr><call><name>is_msys2_sh</name><argument_list>(<argument><expr><ternary><condition><expr><name>cmd</name></expr> ?</condition><then> <expr><name>cmd</name></expr></then></ternary></expr></argument></argument_list></call></expr></condition></ternary></expr> <operator>:</operator> <expr><operator>*</operator><name>argv</name></expr>)</init> ?

quote_arg_msys2 : quote_arg_msvc;</function_decl>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restrict_handle_inheritance</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restrict_handle_inheritance</name> <operator>=</operator> <name>core_restrict_inherited_handles</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>restrict_handle_inheritance</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>restrict_handle_inheritance</name> <operator>=</operator> <call><name>GetVersion</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&gt;=</operator> <literal type="number">7601</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>do_unset_environment_variables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cons</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><literal type="string">L"CONOUT$"</literal></expr></argument>, <argument><expr><name>GENERIC_WRITE</name></expr></argument>,

<argument><expr><name>FILE_SHARE_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>,

<argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cons</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>DETACHED_PROCESS</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>cb</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdInput</name></name> <operator>=</operator> <call><name>winansi_get_osfhandle</name><argument_list>(<argument><expr><name>fhin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdOutput</name></name> <operator>=</operator> <call><name>winansi_get_osfhandle</name><argument_list>(<argument><expr><name>fhout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdError</name></name> <operator>=</operator> <call><name>winansi_get_osfhandle</name><argument_list>(<argument><expr><name>fherr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdInput</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stdhandles</name><index>[<expr><name>stdhandles_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdInput</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdOutput</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name> <operator>&amp;&amp;</operator>

<name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdOutput</name></name> <operator>!=</operator> <name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdInput</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stdhandles</name><index>[<expr><name>stdhandles_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdOutput</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdError</name></name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name> <operator>&amp;&amp;</operator>

<name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdError</name></name> <operator>!=</operator> <name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdInput</name></name> <operator>&amp;&amp;</operator>

<name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdError</name></name> <operator>!=</operator> <name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdOutput</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stdhandles</name><index>[<expr><name>stdhandles_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>hStdError</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stdhandles_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>StartupInfo</name><operator>.</operator><name>dwFlags</name></name> <operator>|=</operator> <name>STARTF_USESTDHANDLES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>argv</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wcmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wcmd</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dir</name> <operator>&amp;&amp;</operator> <call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wdir</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prepend_cmd</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quoted</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>quote_arg</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>quoted</name> <operator>!=</operator> <name>cmd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>argv</name></expr>;</condition> <incr><expr><name>argv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>quoted</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>quote_arg</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>args</name><operator>.</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>quoted</name> <operator>!=</operator> <operator>*</operator><name>argv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>quoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>wargs</name></expr></argument>, <argument><expr><call><name>st_add</name><argument_list>(<argument><expr><call><name>st_mult</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xutftowcs</name><argument_list>(<argument><expr><name>wargs</name></expr></argument>, <argument><expr><name><name>args</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>args</name><operator>.</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wenvblk</name> <operator>=</operator> <call><name>make_environment_block</name><argument_list>(<argument><expr><name>deltaenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>restrict_handle_inheritance</name> <operator>&amp;&amp;</operator> <name>stdhandles_count</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>InitializeProcThreadAttributeList</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_INSUFFICIENT_BUFFER</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>attr_list</name> <operator>=</operator> <operator>(</operator><name>LPPROC_THREAD_ATTRIBUTE_LIST</name><operator>)</operator>

<operator>(</operator><call><name>HeapAlloc</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>InitializeProcThreadAttributeList</name><argument_list>(<argument><expr><name>attr_list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>UpdateProcThreadAttribute</name><argument_list>(<argument><expr><name>attr_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>PROC_THREAD_ATTRIBUTE_HANDLE_LIST</name></expr></argument>,

<argument><expr><name>stdhandles</name></expr></argument>,

<argument><expr><name>stdhandles_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>si</name><operator>.</operator><name>lpAttributeList</name></name> <operator>=</operator> <name>attr_list</name></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>EXTENDED_STARTUPINFO_PRESENT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CreateProcessW</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>wcmd</name></expr> ?</condition><then> <expr><name>wcmd</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>wargs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>stdhandles_count</name></expr> ?</condition><then> <expr><name>TRUE</name></expr> </then><else>: <expr><name>FALSE</name></expr></else></ternary></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>wenvblk</name></expr></argument>, <argument><expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name>wdir</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>si</name><operator>.</operator><name>StartupInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name>restrict_handle_inheritance</name> <operator>&amp;&amp;</operator> <name>stdhandles_count</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>err</name> <init>= <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERROR_NO_SYSTEM_RESOURCES</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name>err</name> <operator>==</operator> <name>ERROR_INVALID_PARAMETER</name> <operator>&amp;&amp;</operator>

<call><name>GetVersion</name><argument_list>()</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&lt;</operator> <literal type="number">9200</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SUPPRESS_HANDLE_INHERITANCE_WARNING"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>fl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"SUPPRESS_HANDLE_INHERITANCE_WARNING"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>stdhandles_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><name><name>stdhandles</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"handle #%d: %p (type %lx, "</literal>

<literal type="string">"handle info (%d) %lx\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>h</name></expr></argument>,

<argument><expr><call><name>GetFileType</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>GetHandleInformation</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fl</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\nThis is a bug; please report it "</literal>

<literal type="string">"at\nhttps://github.com/git-for-windows/"</literal>

<literal type="string">"git/issues/new\n\n"</literal>

<literal type="string">"To suppress this warning, please set "</literal>

<literal type="string">"the environment variable\n\n"</literal>

<literal type="string">"\tSUPPRESS_HANDLE_INHERITANCE_WARNING=1"</literal>

<literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>restrict_handle_inheritance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>EXTENDED_STARTUPINFO_PRESENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>CreateProcessW</name><argument_list>(<argument><expr><ternary><condition><expr><operator>*</operator><name>wcmd</name></expr> ?</condition><then> <expr><name>wcmd</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>wargs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>wenvblk</name></expr></argument>, <argument><expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name>wdir</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>si</name><operator>.</operator><name>StartupInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>err_win_to_posix</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"failed to restrict file handles (%ld)\n\n%s"</literal></expr></argument>,

<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>err_win_to_posix</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>si</name><operator>.</operator><name>lpAttributeList</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DeleteProcThreadAttributeList</name><argument_list>(<argument><expr><name><name>si</name><operator>.</operator><name>lpAttributeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr_list</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>attr_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wenvblk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pi</name><operator>.</operator><name>hThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pinfo_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pinfo_t</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pinfo_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name><name>pi</name><operator>.</operator><name>hProcess</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pinfo</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pinfo</name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pinfo_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>pid_t</name><operator>)</operator><name><name>pi</name><operator>.</operator><name>dwProcessId</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pid_t</name></type> <name>mingw_spawnv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prepend_cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>mingw_spawnve_fd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>prepend_cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>pid_t</name></type> <name>mingw_spawnvpe</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>deltaenv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fhin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fhout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fherr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prog</name> <init>= <expr><call><name>path_lookup</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prog</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interpr</name> <init>= <expr><call><name>parse_interpreter</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>interpr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>iprog</name> <init>= <expr><call><name>path_lookup</name><argument_list>(<argument><expr><name>interpr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>prog</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iprog</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>mingw_spawnve_fd</name><argument_list>(<argument><expr><name>iprog</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>deltaenv</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>fhin</name></expr></argument>, <argument><expr><name>fhout</name></expr></argument>, <argument><expr><name>fherr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iprog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>argv0</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>mingw_spawnve_fd</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>deltaenv</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>fhin</name></expr></argument>, <argument><expr><name>fhout</name></expr></argument>, <argument><expr><name>fherr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>pid</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>try_shell_exec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interpr</name> <init>= <expr><call><name>parse_interpreter</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interpr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prog</name> <operator>=</operator> <call><name>path_lookup</name><argument_list>(<argument><expr><name>interpr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prog</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>exec_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv2</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>argc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>, <argument><expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cmd</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>argv2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exec_id</name> <operator>=</operator> <call><name>trace2_exec</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>argv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>mingw_spawnv</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>argv2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>waitpid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>trace2_exec_result</name><argument_list>(<argument><expr><name>exec_id</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>trace2_exec_result</name><argument_list>(<argument><expr><name>exec_id</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>pid</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_execv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>try_shell_exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pid</name></decl>, <decl><type ref="prev"/><name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exec_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>exec_id</name> <operator>=</operator> <call><name>trace2_exec</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>mingw_spawnv</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>trace2_exec_result</name><argument_list>(<argument><expr><name>exec_id</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>waitpid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>trace2_exec_result</name><argument_list>(<argument><expr><name>exec_id</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_execvp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prog</name> <init>= <expr><call><name>path_lookup</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prog</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mingw_execv</name><argument_list>(<argument><expr><name>prog</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_kill</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sig</name> <operator>==</operator> <name>SIGTERM</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>OpenProcess</name><argument_list>(<argument><expr><name>PROCESS_TERMINATE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>TerminateProcess</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>err_win_to_posix</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sig</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>OpenProcess</name><argument_list>(<argument><expr><name>PROCESS_QUERY_INFORMATION</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>mingw_getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETENV_MAX_RETAIN</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>values</name><index>[<expr><name>GETENV_MAX_RETAIN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>value_counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len_key</name></decl>, <decl><type ref="prev"/><name>len_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>w_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>w_value</name><index>[<expr><literal type="number">32768</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len_key</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>w_key</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>len_key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w_key</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Out of memory, (tried to allocate %u wchar_t's)"</literal></expr></argument>, <argument><expr><name>len_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xutftowcs</name><argument_list>(<argument><expr><name>w_key</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><name>ERROR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len_value</name> <operator>=</operator> <call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><name>w_key</name></expr></argument>, <argument><expr><name>w_value</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>w_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len_value</name> <operator>&amp;&amp;</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_ENVVAR_NOT_FOUND</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>w_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>w_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len_value</name> <operator>=</operator> <name>len_value</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>len_value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Out of memory, (tried to allocate %u bytes)"</literal></expr></argument>, <argument><expr><name>len_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xwcstoutf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>w_value</name></expr></argument>, <argument><expr><name>len_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>value_counter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>value_counter</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value_counter</name> <operator>&gt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_putenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>namevalue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wide</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>equal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>namevalue</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>namevalue</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>namevalue</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>wide</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wide</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Out of memory, (tried to allocate %u wchar_t's)"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>xutftowcs</name><argument_list>(<argument><expr><name>wide</name></expr></argument>, <argument><expr><name>namevalue</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>equal</name> <operator>=</operator> <call><name>wcschr</name><argument_list>(<argument><expr><name>wide</name></expr></argument>, <argument><expr><name>L</name><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>equal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>SetEnvironmentVariableW</name><argument_list>(<argument><expr><name>wide</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>equal</name> <operator>=</operator> <name>L</name><literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>SetEnvironmentVariableW</name><argument_list>(<argument><expr><name>wide</name></expr></argument>, <argument><expr><name>equal</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>wide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>err_win_to_posix</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>result</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ensure_socket_initialization</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WSADATA</name></type> <name>wsa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>initialized</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WSAStartup</name><argument_list>(<argument><expr><call><name>MAKEWORD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>wsa</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to initialize winsock subsystem, error %d"</literal></expr></argument>,

<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator> <name>WSACleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>gethostname</name></cpp:undef>

<function><type><name>int</name></type> <name>mingw_gethostname</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>namelen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ensure_socket_initialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>gethostname</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>gethostbyname</name></cpp:undef>

<function><type><name><name>struct</name> <name>hostent</name></name> <modifier>*</modifier></type><name>mingw_gethostbyname</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ensure_socket_initialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>gethostbyname</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>getaddrinfo</name></cpp:undef>

<function><type><name>int</name></type> <name>mingw_getaddrinfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>service</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hints</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ensure_socket_initialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>getaddrinfo</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><name>hints</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_socket</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>protocol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sockfd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ensure_socket_initialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>WSASocket</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>INVALID_SOCKET</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockfd</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>O_RDWR</name><operator>|</operator><name>O_BINARY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to make a socket file descriptor: %s"</literal></expr></argument>,

<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sockfd</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>connect</name></cpp:undef>

<function><type><name>int</name></type> <name>mingw_connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>connect</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>bind</name></cpp:undef>

<function><type><name>int</name></type> <name>mingw_bind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>bind</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>setsockopt</name></cpp:undef>

<function><type><name>int</name></type> <name>mingw_setsockopt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optname</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>optval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>optlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>optval</name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>shutdown</name></cpp:undef>

<function><type><name>int</name></type> <name>mingw_shutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>how</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>shutdown</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>how</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>listen</name></cpp:undef>

<function><type><name>int</name></type> <name>mingw_listen</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backlog</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SOCKET</name></type> <name>s</name> <init>= <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>sockfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>listen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>backlog</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>accept</name></cpp:undef>

<function><type><name>int</name></type> <name>mingw_accept</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sockfd1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name></decl></parameter>, <parameter><decl><type><name>socklen_t</name> <modifier>*</modifier></type><name>sz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sockfd2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SOCKET</name></type> <name>s1</name> <init>= <expr><operator>(</operator><name>SOCKET</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>sockfd1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SOCKET</name></type> <name>s2</name> <init>= <expr><call><name>accept</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sockfd2</name> <operator>=</operator> <call><name>_open_osfhandle</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>O_RDWR</name><operator>|</operator><name>O_BINARY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"unable to make a socket file descriptor: %s"</literal></expr></argument>,

<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sockfd2</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>rename</name></cpp:undef>

<function><type><name>int</name></type> <name>mingw_rename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pold</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pnew</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>attrs</name></decl>, <decl><type ref="prev"/><name>gle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wpold</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>wpnew</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wpold</name></expr></argument>, <argument><expr><name>pold</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wpnew</name></expr></argument>, <argument><expr><name>pnew</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>_wrename</name><argument_list>(<argument><expr><name>wpold</name></expr></argument>, <argument><expr><name>wpnew</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<label><name>repeat</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>MoveFileExW</name><argument_list>(<argument><expr><name>wpold</name></expr></argument>, <argument><expr><name>wpnew</name></expr></argument>, <argument><expr><name>MOVEFILE_REPLACE_EXISTING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gle</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gle</name> <operator>==</operator> <name>ERROR_ACCESS_DENIED</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>attrs</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>wpnew</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>INVALID_FILE_ATTRIBUTES</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>attrs</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>attrsold</name> <init>= <expr><call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>wpold</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>attrsold</name> <operator>==</operator> <name>INVALID_FILE_ATTRIBUTES</name> <operator>||</operator>

<operator>!</operator><operator>(</operator><name>attrsold</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_DIRECTORY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EISDIR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>_wrmdir</name><argument_list>(<argument><expr><name>wpnew</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>repeat</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>attrs</name> <operator>&amp;</operator> <name>FILE_ATTRIBUTE_READONLY</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>wpnew</name></expr></argument>, <argument><expr><name>attrs</name> <operator>&amp;</operator> <operator>~</operator><name>FILE_ATTRIBUTE_READONLY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>MoveFileExW</name><argument_list>(<argument><expr><name>wpold</name></expr></argument>, <argument><expr><name>wpnew</name></expr></argument>, <argument><expr><name>MOVEFILE_REPLACE_EXISTING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gle</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetFileAttributesW</name><argument_list>(<argument><expr><name>wpnew</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tries</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>gle</name> <operator>==</operator> <name>ERROR_ACCESS_DENIED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>tries</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tries</name><operator>++</operator></expr>;</expr_stmt>

<goto>goto <name>repeat</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gle</name> <operator>==</operator> <name>ERROR_ACCESS_DENIED</name> <operator>&amp;&amp;</operator>

<call><name>ask_yes_no_if_possible</name><argument_list>(<argument><expr><literal type="string">"Rename from '%s' to '%s' failed. "</literal>

<literal type="string">"Should I try again?"</literal></expr></argument>, <argument><expr><name>pold</name></expr></argument>, <argument><expr><name>pnew</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>repeat</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mingw_getpagesize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>si</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>si</name><operator>.</operator><name>dwAllocationGranularity</name></name></expr>;</return>

</block_content>}</block></function>

<enum>enum <name>EXTENDED_NAME_FORMAT</name> <block>{

<decl><name>NameDisplay</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>NameUserPrincipal</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_extended_user_info</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>EXTENDED_NAME_FORMAT</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DECLARE_PROC_ADDR</name><argument_list>(<argument><expr><name><name>secur32</name><operator>.</operator><name>dll</name></name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>GetUserNameExW</name></expr></argument>,

<argument><expr>enum <name>EXTENDED_NAME_FORMAT</name></expr></argument>, <argument><expr><name>LPCWSTR</name></expr></argument>, <argument><expr><name>PULONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>wchar_t</name></type> <name><name>wbuffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>INIT_PROC_ADDR</name><argument_list>(<argument><expr><name>GetUserNameExW</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetUserNameExW</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>wbuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>converted</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>*=</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xwcstoutf</name><argument_list>(<argument><expr><name>converted</name></expr></argument>, <argument><expr><name>wbuffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>converted</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>converted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>mingw_query_user_email</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_extended_user_info</name><argument_list>(<argument><expr><name>NameUserPrincipal</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>getpwuid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>uid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>user_name</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>initialized</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetUserNameW</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xwcstoutf</name><argument_list>(<argument><expr><name>user_name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>user_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pw_name</name></name> <operator>=</operator> <name>user_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pw_gecos</name></name> <operator>=</operator> <call><name>get_extended_user_info</name><argument_list>(<argument><expr><name>NameDisplay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>pw_gecos</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pw_gecos</name></name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pw_dir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>timer_event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>timer_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>timer_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>one_shot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>sig_handler_t</name></type> <name>timer_fn</name> <init>= <expr><name>SIG_DFL</name></expr></init></decl>, <decl><type ref="prev"/><name>sigint_fn</name> <init>= <expr><name>SIG_DFL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>__stdcall</name></type> <name>ticktack</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dummy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>timer_event</name></expr></argument>, <argument><expr><name>timer_interval</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mingw_raise</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>one_shot</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>start_timer_thread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>timer_event</name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timer_event</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>timer_thread</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ticktack</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timer_thread</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr><operator>,</operator>

<expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot start timer thread"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr><operator>,</operator>

<expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"cannot allocate resources for timer"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stop_timer_thread</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>timer_event</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>timer_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>timer_thread</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>timer_thread</name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"timer thread did not terminate timely"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"waiting for timer thread failed: %lu"</literal></expr></argument>,

<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>timer_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timer_event</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>timer_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>timer_event</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>timer_thread</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_timeval_eq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>i1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>i2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>i1</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>==</operator> <name><name>i2</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>&amp;&amp;</operator> <name><name>i1</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>==</operator> <name><name>i2</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>setitimer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>itimerval</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>itimerval</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>zero</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>atexit_done</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr><operator>,</operator>

<expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"setitimer param 3 != NULL not implemented"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_timeval_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>it_interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>is_timeval_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>it_interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>it_value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr><operator>,</operator>

<expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"setitimer: it_interval must be zero or eq it_value"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timer_thread</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>stop_timer_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_timeval_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>it_value</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>is_timeval_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>it_interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>timer_interval</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>it_value</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name><name>in</name><operator>-&gt;</operator><name>it_value</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>one_shot</name> <operator>=</operator> <call><name>is_timeval_eq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>it_interval</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>atexit_done</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>stop_timer_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>atexit_done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>start_timer_thread</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sigaction</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sigaction</name></name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sigaction</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sig</name> <operator>!=</operator> <name>SIGALRM</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr><operator>,</operator>

<expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"sigaction only implemented for SIGALRM"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr><operator>,</operator>

<expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"sigaction: param 3 != NULL not implemented"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>timer_fn</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>sa_handler</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>signal</name></cpp:undef>

<function><type><name>sig_handler_t</name></type> <name>mingw_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>, <parameter><decl><type><name>sig_handler_t</name></type> <name>handler</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sig_handler_t</name></type> <name>old</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>sig</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SIGALRM</name></expr>:</case>

<expr_stmt><expr><name>old</name> <operator>=</operator> <name>timer_fn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>timer_fn</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIGINT</name></expr>:</case>

<expr_stmt><expr><name>old</name> <operator>=</operator> <name>sigint_fn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sigint_fn</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>signal</name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>old</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>raise</name></cpp:undef>

<function><type><name>int</name></type> <name>mingw_raise</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>sig</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SIGALRM</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>timer_fn</name> <operator>==</operator> <name>SIG_DFL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"Alarm clock\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>+</operator> <name>SIGALRM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>timer_fn</name> <operator>!=</operator> <name>SIG_IGN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>timer_fn</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>SIGINT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>sigint_fn</name> <operator>==</operator> <name>SIG_DFL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">128</literal> <operator>+</operator> <name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>sigint_fn</name> <operator>!=</operator> <name>SIG_IGN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sigint_fn</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<case>case <expr><name>SIGILL</name></expr>:</case>

<case>case <expr><name>SIGFPE</name></expr>:</case>

<case>case <expr><name>SIGSEGV</name></expr>:</case>

<case>case <expr><name>SIGTERM</name></expr>:</case>

<case>case <expr><name>SIGBREAK</name></expr>:</case>

<case>case <expr><name>SIGABRT</name></expr>:</case>

<case>case <expr><name>SIGABRT_COMPAT</name></expr>:</case>

<return>return <expr><call><name>raise</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<default>default:</default>

<return>return <expr><call><name>raise</name><argument_list>(<argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>link</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oldpath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newpath</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>woldpath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>wnewpath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>woldpath</name></expr></argument>, <argument><expr><name>oldpath</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>xutftowcs_path</name><argument_list>(<argument><expr><name>wnewpath</name></expr></argument>, <argument><expr><name>newpath</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CreateHardLinkW</name><argument_list>(<argument><expr><name>wnewpath</name></expr></argument>, <argument><expr><name>woldpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>err_win_to_posix</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>pid_t</name></type> <name>waitpid</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><call><name>OpenProcess</name><argument_list>(<argument><expr><name>SYNCHRONIZE</name> <operator>|</operator> <name>PROCESS_QUERY_INFORMATION</name></expr></argument>,

<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ECHILD</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>options</name> <operator>&amp;</operator> <name>WNOHANG</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>WAIT_OBJECT_0</name> <operator>!=</operator> <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>options</name> <operator>&amp;=</operator> <operator>~</operator><name>WNOHANG</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>options</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pinfo_t</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>ppinfo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>WAIT_OBJECT_0</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>GetExitCodeProcess</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>(</operator><name>LPDWORD</name><operator>)</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pinfo_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ppinfo</name> <operator>=</operator> <operator>&amp;</operator><name>pinfo</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>ppinfo</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>pinfo_t</name></name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>*</operator><name>ppinfo</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppinfo</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ppinfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pinfo_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pid</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>xutftowcsn</name><parameter_list>(<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>wcs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>utfs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wcslen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>utflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>upos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>wpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>utf</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>utfs</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>utf</name> <operator>||</operator> <operator>!</operator><name>wcs</name> <operator>||</operator> <name>wcslen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>wcslen</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>utflen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>utflen</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>upos</name> <operator>&lt;</operator> <name>utflen</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>utf</name><index>[<expr><name>upos</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>utflen</name> <operator>==</operator> <name>INT_MAX</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>wpos</name> <operator>&gt;=</operator> <name>wcslen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wcs</name><index>[<expr><name>wpos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wcs</name><index>[<expr><name>wpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xc2</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0xe0</literal> <operator>&amp;&amp;</operator> <name>upos</name> <operator>&lt;</operator> <name>utflen</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>utf</name><index>[<expr><name>upos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>|=</operator> <operator>(</operator><name><name>utf</name><index>[<expr><name>upos</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wcs</name><index>[<expr><name>wpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xe0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0xf0</literal> <operator>&amp;&amp;</operator> <name>upos</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>utflen</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0xe0</literal> <operator>&amp;&amp;</operator> <name><name>utf</name><index>[<expr><name>upos</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xa0</literal><operator>)</operator> <operator>&amp;&amp;</operator> 

<operator>(</operator><name><name>utf</name><index>[<expr><name>upos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>utf</name><index>[<expr><name>upos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>utf</name><index>[<expr><name>upos</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>|=</operator> <operator>(</operator><name><name>utf</name><index>[<expr><name>upos</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wcs</name><index>[<expr><name>wpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xf0</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="number">0xf5</literal> <operator>&amp;&amp;</operator> <name>upos</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>utflen</name> <operator>&amp;&amp;</operator>

<name>wpos</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>wcslen</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0xf0</literal> <operator>&amp;&amp;</operator> <name><name>utf</name><index>[<expr><name>upos</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0x90</literal><operator>)</operator> <operator>&amp;&amp;</operator> 

<operator>!</operator><operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">0xf4</literal> <operator>&amp;&amp;</operator> <name><name>utf</name><index>[<expr><name>upos</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x90</literal><operator>)</operator> <operator>&amp;&amp;</operator> 

<operator>(</operator><name><name>utf</name><index>[<expr><name>upos</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>utf</name><index>[<expr><name>upos</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>utf</name><index>[<expr><name>upos</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>utf</name><index>[<expr><name>upos</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>utf</name><index>[<expr><name>upos</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>|=</operator> <operator>(</operator><name><name>utf</name><index>[<expr><name>upos</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wcs</name><index>[<expr><name>wpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xd800</literal> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wcs</name><index>[<expr><name>wpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xdc00</literal> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0xa0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wcs</name><index>[<expr><name>wpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>wcs</name><index>[<expr><name>wpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>hex</name><index>[<expr><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wpos</name> <operator>&lt;</operator> <name>wcslen</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>wcs</name><index>[<expr><name>wpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>hex</name><index>[<expr><name>c</name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>wcs</name><index>[<expr><name>wpos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>wpos</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>xwcstoutf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>utf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wcs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>utflen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>wcs</name> <operator>||</operator> <operator>!</operator><name>utf</name> <operator>||</operator> <name>utflen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>utflen</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wcs</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>utf</name></expr></argument>, <argument><expr><name>utflen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>utflen</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>utflen</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_windows_environment</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TMPDIR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TMP"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TEMP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"TMPDIR"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TMPDIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>convert_slashes</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"TERM"</literal></expr></argument>, <argument><expr><literal type="string">"cygwin"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOMEDRIVE"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOMEPATH"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_directory</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"USERPROFILE"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>is_valid_win32_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_literal_nul</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>path</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>preceding_space_or_period</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>periods</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>protect_ntfs</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_dos_drive_prefix</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>segment_start</name>;</goto>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>path</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>

<case>case <expr><literal type="char">'/'</literal></expr>:</case> <case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>preceding_space_or_period</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>i</name> <operator>!=</operator> <name>periods</name> <operator>||</operator> <name>periods</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>periods</name> <operator>=</operator> <name>preceding_space_or_period</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>segment_start</name>:</label>

<switch>switch <condition>(<expr><operator>*</operator><name>path</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'A'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'u'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'U'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'x'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'X'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<label><name>not_a_reserved_name</name>:</label>

<expr_stmt><expr><name>path</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'o'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'O'</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>not_a_reserved_name</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>not_a_reserved_name</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'i'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'I'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator>

<name>c</name> <operator>==</operator> <literal type="char">'N'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>path</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'o'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'O'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator>

<name>c</name> <operator>==</operator> <literal type="char">'U'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="char">'t'</literal> <operator>||</operator>

<name>c</name> <operator>==</operator> <literal type="char">'T'</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>path</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<goto>goto <name>not_a_reserved_name</name>;</goto></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case> <case>case <expr><literal type="char">'L'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'p'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'P'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'T'</literal><operator>)</operator> <operator>||</operator>

<operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>not_a_reserved_name</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case> <case>case <expr><literal type="char">'N'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'u'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'U'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'l'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'L'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>allow_literal_nul</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>path</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>p</name> <operator>==</operator> <name>path</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>not_a_reserved_name</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case> <case>case <expr><literal type="char">'P'</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'r'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'R'</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'N'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>not_a_reserved_name</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<continue>continue;</continue>

</block_content>}</block></switch>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>preceding_space_or_period</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>path</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>not_a_reserved_name</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<expr_stmt><expr><name>periods</name><operator>++</operator></expr>;</expr_stmt>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<expr_stmt><expr><name>preceding_space_or_period</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

<case>case <expr><literal type="char">':'</literal></expr>:</case> 

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <case>case <expr><literal type="char">'"'</literal></expr>:</case> <case>case <expr><literal type="char">'|'</literal></expr>:</case> <case>case <expr><literal type="char">'?'</literal></expr>:</case> <case>case <expr><literal type="char">'*'</literal></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;</operator> <literal type="char">'\x20'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>preceding_space_or_period</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>_CRT_glob</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>NORETURN</name> <name>void</name></type> <name>die_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"fatal: not enough memory for initialization"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>malloc_startup</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_startup</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>wcstoutfdup_startup</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>wcs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>xwcstoutf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>wcs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>malloc_startup</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>maybe_redirect_std_handle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>std_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,

<parameter><decl><type><name>DWORD</name></type> <name>desired_access</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>create_flag</name> <init>= <expr><ternary><condition><expr><name>fd</name></expr> ?</condition><then> <expr><name>OPEN_ALWAYS</name></expr> </then><else>: <expr><name>OPEN_EXISTING</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>buf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>max</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name> <init>= <expr><call><name>GetEnvironmentVariableW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>||</operator> <name>ret</name> <operator>&gt;=</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetEnvironmentVariableW</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wcscmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">L"off"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>std_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>std_id</name> <operator>==</operator> <name>STD_ERROR_HANDLE</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>wcscmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">L"2&gt;&amp;1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>std_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_fd</name> <init>= <expr><call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>handle</name></expr></argument>, <argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetStdHandle</name><argument_list>(<argument><expr><name>std_id</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>new_fd</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>desired_access</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>create_flag</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>handle</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_fd</name> <init>= <expr><call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>handle</name></expr></argument>, <argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetStdHandle</name><argument_list>(<argument><expr><name>std_id</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>new_fd</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>new_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>maybe_redirect_std_handles</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>maybe_redirect_std_handle</name><argument_list>(<argument><expr><literal type="string">L"GIT_REDIRECT_STDIN"</literal></expr></argument>, <argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>GENERIC_READ</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_redirect_std_handle</name><argument_list>(<argument><expr><literal type="string">L"GIT_REDIRECT_STDOUT"</literal></expr></argument>, <argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>GENERIC_WRITE</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_redirect_std_handle</name><argument_list>(<argument><expr><literal type="string">L"GIT_REDIRECT_STDERR"</literal></expr></argument>, <argument><expr><name>STD_ERROR_HANDLE</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>GENERIC_WRITE</name></expr></argument>, <argument><expr><name>FILE_FLAG_NO_BUFFERING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crtdbg.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>wmain</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>wargv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>maxlen</name></decl>, <decl><type ref="prev"/><name>exit_status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>trace2_initialize_clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_CrtSetReportMode</name><argument_list>(<argument><expr><name>_CRT_ASSERT</name></expr></argument>, <argument><expr><name>_CRTDBG_MODE_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_MSVC_CRTDBG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>_CrtSetDbgFlag</name><argument_list>(<argument><expr><name>_CRTDBG_ALLOC_MEM_DF</name> <operator>|</operator> <name>_CRTDBG_LEAK_CHECK_DF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>maybe_redirect_std_handles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name><name>wargv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>maxlen</name></expr></argument>, <argument><expr><call><name>wcslen</name><argument_list>(<argument><expr><name><name>wargv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>maxlen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>malloc_startup</name><argument_list>(<argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>save</name></expr></argument>, <argument><expr><name>argc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>save</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>wcstoutfdup_startup</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>wargv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>save</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_windows_environment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unset_environment_variables</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">"PERL5LIB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pinfo_cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>_fmode</name> <operator>=</operator> <name>_O_BINARY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_setmode</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_setmode</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_setmode</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>_O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>winansi_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exit_status</name> <operator>=</operator> <call><name>main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>save</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>exit_status</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>uname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>utsname</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>v</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>GetVersion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>sysname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>sysname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Windows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>release</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>release</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%u.%u"</literal></expr></argument>, <argument><expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>, <argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7fff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
