<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\compat\win32\trace2_win32_process_info.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../json-writer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lazyload.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Psapi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tlHelp32.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NR_PIDS_LIMIT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_pid</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>hSnapshot</name></decl></parameter>, <parameter><decl><type><name>PROCESSENTRY32</name> <modifier>*</modifier></type><name>pe32</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>pe32</name><operator>-&gt;</operator><name>dwSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PROCESSENTRY32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>Process32First</name><argument_list>(<argument><expr><name>hSnapshot</name></expr></argument>, <argument><expr><name>pe32</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pe32</name><operator>-&gt;</operator><name>th32ProcessID</name></name> <operator>==</operator> <name>pid</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>Process32Next</name><argument_list>(<argument><expr><name>hSnapshot</name></expr></argument>, <argument><expr><name>pe32</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_processes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>hSnapshot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PROCESSENTRY32</name></type> <name>pe32</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name><name>pid_list</name><index>[<expr><name>NR_PIDS_LIMIT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>nr_pids</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>find_pid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>hSnapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pe32</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nr_pids</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>jw_array_string</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><name><name>pe32</name><operator>.</operator><name>szExeFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nr_pids</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <name><name>pid_list</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>jw_array_string</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><literal type="string">"(cycle)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>nr_pids</name> <operator>==</operator> <name>NR_PIDS_LIMIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>jw_array_string</name><argument_list>(<argument><expr><name>jw</name></expr></argument>, <argument><expr><literal type="string">"(truncated)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pid_list</name><index>[<expr><name>nr_pids</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pid</name> <operator>=</operator> <name><name>pe32</name><operator>.</operator><name>th32ParentProcessID</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_ancestry</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hSnapshot</name> <init>= <expr><call><name>CreateToolhelp32Snapshot</name><argument_list>(<argument><expr><name>TH32CS_SNAPPROCESS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hSnapshot</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>json_writer</name></name></type> <name>jw</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>jw_array_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_processes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>hSnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_data_json</name><argument_list>(<argument><expr><literal type="string">"process"</literal></expr></argument>, <argument><expr><name>the_repository</name></expr></argument>, <argument><expr><literal type="string">"windows/ancestry"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hSnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_is_being_debugged</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsDebuggerPresent</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>trace2_data_intmax</name><argument_list>(<argument><expr><literal type="string">"process"</literal></expr></argument>, <argument><expr><name>the_repository</name></expr></argument>,

<argument><expr><literal type="string">"windows/debugger_present"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_peak_memory_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DECLARE_PROC_ADDR</name><argument_list>(<argument><expr><name><name>psapi</name><operator>.</operator><name>dll</name></name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>GetProcessMemoryInfo</name></expr></argument>, <argument><expr><name>HANDLE</name></expr></argument>,

<argument><expr><name>PPROCESS_MEMORY_COUNTERS</name></expr></argument>, <argument><expr><name>DWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INIT_PROC_ADDR</name><argument_list>(<argument><expr><name>GetProcessMemoryInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>PROCESS_MEMORY_COUNTERS</name></type> <name>pmc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetProcessMemoryInfo</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmc</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pmc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>json_writer</name></name></type> <name>jw</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KV</name><parameter_list>(<parameter><type><name>kv</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#kv, (intmax_t)pmc.kv</cpp:value></cpp:define>

<expr_stmt><expr><call><name>jw_object_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><call><name>KV</name><argument_list>(<argument><expr><name>PageFaultCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><call><name>KV</name><argument_list>(<argument><expr><name>PeakWorkingSetSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><call><name>KV</name><argument_list>(<argument><expr><name>PeakPagefileUsage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_data_json</name><argument_list>(<argument><expr><literal type="string">"process"</literal></expr></argument>, <argument><expr><name>the_repository</name></expr></argument>,

<argument><expr><literal type="string">"windows/memory"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_collect_process_info</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>trace2_process_info_reason</name></name></type> <name>reason</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>trace2_is_enabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>reason</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TRACE2_PROCESS_INFO_STARTUP</name></expr>:</case>

<expr_stmt><expr><call><name>get_is_being_debugged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_ancestry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><name>TRACE2_PROCESS_INFO_EXIT</name></expr>:</case>

<expr_stmt><expr><call><name>get_peak_memory_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<default>default:</default>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"trace2_collect_process_info: unknown reason '%d'"</literal></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

</unit>
