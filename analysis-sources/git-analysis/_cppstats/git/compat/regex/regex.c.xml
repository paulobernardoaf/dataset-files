<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\compat\regex\regex.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This is C code, use a C compiler"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_LIBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>regfree</name><parameter_list>(<parameter><type><name>preg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__regfree (preg)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>regexec</name><parameter_list>(<parameter><type><name>pr</name></type></parameter>, <parameter><type><name>st</name></type></parameter>, <parameter><type><name>nm</name></type></parameter>, <parameter><type><name>pm</name></type></parameter>, <parameter><type><name>ef</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__regexec (pr, st, nm, pm, ef)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>regcomp</name><parameter_list>(<parameter><type><name>preg</name></type></parameter>, <parameter><type><name>pattern</name></type></parameter>, <parameter><type><name>cflags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__regcomp (preg, pattern, cflags)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>regerror</name><parameter_list>(<parameter><type><name>errcode</name></type></parameter>, <parameter><type><name>preg</name></type></parameter>, <parameter><type><name>errbuf</name></type></parameter>, <parameter><type><name>errbuf_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__regerror(errcode, preg, errbuf, errbuf_size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re_set_registers</name><parameter_list>(<parameter><type><name>bu</name></type></parameter>, <parameter><type><name>re</name></type></parameter>, <parameter><type><name>nu</name></type></parameter>, <parameter><type><name>st</name></type></parameter>, <parameter><type><name>en</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__re_set_registers (bu, re, nu, st, en)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re_match_2</name><parameter_list>(<parameter><type><name>bufp</name></type></parameter>, <parameter><type><name>string1</name></type></parameter>, <parameter><type><name>size1</name></type></parameter>, <parameter><type><name>string2</name></type></parameter>, <parameter><type><name>size2</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>, <parameter><type><name>regs</name></type></parameter>, <parameter><type><name>stop</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re_match</name><parameter_list>(<parameter><type><name>bufp</name></type></parameter>, <parameter><type><name>string</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>, <parameter><type><name>regs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__re_match (bufp, string, size, pos, regs)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re_search</name><parameter_list>(<parameter><type><name>bufp</name></type></parameter>, <parameter><type><name>string</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>startpos</name></type></parameter>, <parameter><type><name>range</name></type></parameter>, <parameter><type><name>regs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__re_search (bufp, string, size, startpos, range, regs)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re_compile_pattern</name><parameter_list>(<parameter><type><name>pattern</name></type></parameter>, <parameter><type><name>length</name></type></parameter>, <parameter><type><name>bufp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__re_compile_pattern (pattern, length, bufp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re_set_syntax</name><parameter_list>(<parameter><type><name>syntax</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__re_set_syntax (syntax)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re_search_2</name><parameter_list>(<parameter><type><name>bufp</name></type></parameter>, <parameter><type><name>st1</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>st2</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>startpos</name></type></parameter>, <parameter><type><name>range</name></type></parameter>, <parameter><type><name>regs</name></type></parameter>, <parameter><type><name>stop</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__re_search_2 (bufp, st1, s1, st2, s2, startpos, range, regs, stop)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re_compile_fastmap</name><parameter_list>(<parameter><type><name>bufp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__re_compile_fastmap (bufp)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../locale/localeinfo.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GAWK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>alloca</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>alloca</name></cpp:macro> <cpp:value>alloca_is_bad_you_should_never_use_it</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regex.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex_internal.c"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GAWK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bool</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>true</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>false</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regcomp.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regexec.c"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_LIBC</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlib-compat.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SHLIB_COMPAT</name> <argument_list>(<argument><expr><name>libc</name><operator>,</operator> <name>GLIBC_2_0</name><operator>,</operator> <name>GLIBC_2_3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>link_warning</name> <argument_list>(<argument>re_max_failures</argument>, <argument><literal type="string">"the 're_max_failures' variable is obsolete and will go away."</literal></argument>)</argument_list></macro>

<decl_stmt><decl><type><name>int</name></type> <name>re_max_failures</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
