<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\compat\vcbuild\include\unistd.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MODE_T_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MODE_T_</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>_mode_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_NO_OLDNAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>_mode_t</name></type> <name>mode_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_SSIZE_T_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SSIZE_T_</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>long</name></type> <name>_ssize_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_OFF_T_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_OFF_T_</name></cpp:macro></cpp:define>

<typedef>typedef <type><name>long</name></type> <name>_off_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_NO_OLDNAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>_off_t</name></type> <name>off_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_NO_OLDNAMES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>_ssize_t</name></type> <name>ssize_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>int8_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uint8_t</name>;</typedef>

<typedef>typedef <type><name>short</name></type> <name>int16_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>uint16_t</name>;</typedef>

<typedef>typedef <type><name>int</name></type> <name>int32_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name></type> <name>uint32_t</name>;</typedef>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>int64_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>uint64_t</name>;</typedef>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>intmax_t</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>uintmax_t</name>;</typedef>

<typedef>typedef <type><name>int64_t</name></type> <name>off64_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>_MSC_VER</name> <operator>&lt;</operator> <literal type="number">1600</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTMAX_MIN</name></cpp:macro> <cpp:value>_I64_MIN</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTMAX_MAX</name></cpp:macro> <cpp:value>_I64_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINTMAX_MAX</name></cpp:macro> <cpp:value>_UI64_MAX</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT32_MAX</name></cpp:macro> <cpp:value>0xffffffff</cpp:value></cpp:define> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDIN_FILENO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDOUT_FILENO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDERR_FILENO</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W_OK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R_OK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFIFO</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFCHR</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFBLK</name></cpp:macro> <cpp:value>0x3000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFDIR</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFREG</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IFMT</name></cpp:macro> <cpp:value>0xF000</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IXUSR</name></cpp:macro> <cpp:value>_S_IEXEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IWUSR</name></cpp:macro> <cpp:value>_S_IWRITE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_IRUSR</name></cpp:macro> <cpp:value>_S_IREAD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S_ISDIR</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; _S_IFMT) == _S_IFDIR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IFIFO</name></cpp:macro> <cpp:value>_S_IFIFO</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IFCHR</name></cpp:macro> <cpp:value>_S_IFCHR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IFBLK</name></cpp:macro> <cpp:value>_S_IFBLK</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IFDIR</name></cpp:macro> <cpp:value>_S_IFDIR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IFREG</name></cpp:macro> <cpp:value>_S_IFREG</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IFMT</name></cpp:macro> <cpp:value>_S_IFMT</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IEXEC</name></cpp:macro> <cpp:value>_S_IEXEC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IWRITE</name></cpp:macro> <cpp:value>_S_IWRITE</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IREAD</name></cpp:macro> <cpp:value>_S_IREAD</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IRWXU</name></cpp:macro> <cpp:value>_S_IRWXU</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IXUSR</name></cpp:macro> <cpp:value>_S_IXUSR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IWUSR</name></cpp:macro> <cpp:value>_S_IWUSR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IRUSR</name></cpp:macro> <cpp:value>_S_IRUSR</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISDIR</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; S_IFMT) == S_IFDIR)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISREG</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; S_IFMT) == S_IFREG)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISFIFO</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; S_IFMT) == S_IFIFO)</cpp:value></cpp:define>

</unit>
