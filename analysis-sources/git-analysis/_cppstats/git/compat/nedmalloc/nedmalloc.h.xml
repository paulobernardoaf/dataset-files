<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\compat\nedmalloc\nedmalloc.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>EXTSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTSPEC</name></cpp:macro> <cpp:value>extern</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name><operator>&gt;=</operator><literal type="number">1400</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCATTR</name></cpp:macro> <cpp:value>__declspec(restrict)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCATTR</name></cpp:macro> <cpp:value>__attribute__ ((malloc))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MALLOCATTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MALLOCATTR</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>REPLACE_SYSTEM_ALLOCATOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedmalloc</name></cpp:macro> <cpp:value>malloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedcalloc</name></cpp:macro> <cpp:value>calloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedrealloc</name></cpp:macro> <cpp:value>realloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedfree</name></cpp:macro> <cpp:value>free</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedmemalign</name></cpp:macro> <cpp:value>memalign</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedmallinfo</name></cpp:macro> <cpp:value>mallinfo</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedmallopt</name></cpp:macro> <cpp:value>mallopt</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedmalloc_trim</name></cpp:macro> <cpp:value>malloc_trim</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedmalloc_stats</name></cpp:macro> <cpp:value>malloc_stats</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedmalloc_footprint</name></cpp:macro> <cpp:value>malloc_footprint</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedindependent_calloc</name></cpp:macro> <cpp:value>independent_calloc</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedindependent_comalloc</name></cpp:macro> <cpp:value>independent_comalloc</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nedblksize</name></cpp:macro> <cpp:value>_msize</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_MALLINFO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_MALLINFO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>NO_MALLINFO</name></expr></cpp:if>

<struct_decl>struct <name>mallinfo</name>;</struct_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_NED_NAMESPACE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>namespace</name></type> <name>nedalloc</name> <block>{<block_content>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<extern>extern <literal type="string">"C"</literal> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THROWSPEC</name></cpp:macro> <cpp:value>throw()</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THROWSPEC</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>size_t</name></type> <name>nedblksize</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>mem</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>void</name></type> <name>nedsetvalue</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>v</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>void</name> <modifier>*</modifier></type> <name>nedmalloc</name><argument_list>(<argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>void</name> <modifier>*</modifier></type> <name>nedcalloc</name><argument_list>(<argument><expr><name>size_t</name> <name>no</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>void</name> <modifier>*</modifier></type> <name>nedrealloc</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>mem</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>void</name></type> <name>nedfree</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>mem</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>void</name> <modifier>*</modifier></type> <name>nedmemalign</name><argument_list>(<argument><expr><name>size_t</name> <name>alignment</name></expr></argument>, <argument><expr><name>size_t</name> <name>bytes</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>NO_MALLINFO</name></expr></cpp:if>

<decl_stmt><decl><type><name>EXTSPEC</name> <name><name>struct</name> <name>mallinfo</name></name></type> <name>nedmallinfo</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>int</name></type> <name>nedmallopt</name><argument_list>(<argument><expr><name>int</name> <name>parno</name></expr></argument>, <argument><expr><name>int</name> <name>value</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>int</name></type> <name>nedmalloc_trim</name><argument_list>(<argument><expr><name>size_t</name> <name>pad</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>void</name></type> <name>nedmalloc_stats</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>size_t</name></type> <name>nedmalloc_footprint</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>nedindependent_calloc</name><argument_list>(<argument><expr><name>size_t</name> <name>elemsno</name></expr></argument>, <argument><expr><name>size_t</name> <name>elemsize</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>chunks</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>nedindependent_comalloc</name><argument_list>(<argument><expr><name>size_t</name> <name>elems</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>sizes</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>chunks</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<struct_decl>struct <name>nedpool_t</name>;</struct_decl>

<typedef>typedef <type><name><name>struct</name> <name>nedpool_t</name></name></type> <name>nedpool</name>;</typedef>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>nedpool</name> <modifier>*</modifier></type><name>nedcreatepool</name><argument_list>(<argument><expr><name>size_t</name> <name>capacity</name></expr></argument>, <argument><expr><name>int</name> <name>threads</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>void</name></type> <name>neddestroypool</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>void</name></type> <name>nedpsetvalue</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>v</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>void</name> <modifier>*</modifier></type><name>nedgetvalue</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>mem</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>void</name></type> <name>neddisablethreadcache</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>void</name> <modifier>*</modifier></type> <name>nedpmalloc</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>void</name> <modifier>*</modifier></type> <name>nedpcalloc</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>size_t</name> <name>no</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>void</name> <modifier>*</modifier></type> <name>nedprealloc</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>mem</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>void</name></type> <name>nedpfree</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>mem</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>void</name> <modifier>*</modifier></type> <name>nedpmemalign</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>size_t</name> <name>alignment</name></expr></argument>, <argument><expr><name>size_t</name> <name>bytes</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>NO_MALLINFO</name></expr></cpp:if>

<decl_stmt><decl><type><name>EXTSPEC</name> <name><name>struct</name> <name>mallinfo</name></name></type> <name>nedpmallinfo</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>int</name></type> <name>nedpmallopt</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>int</name> <name>parno</name></expr></argument>, <argument><expr><name>int</name> <name>value</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>int</name></type> <name>nedpmalloc_trim</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>size_t</name> <name>pad</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>void</name></type> <name>nedpmalloc_stats</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>size_t</name></type> <name>nedpmalloc_footprint</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>nedpindependent_calloc</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>size_t</name> <name>elemsno</name></expr></argument>, <argument><expr><name>size_t</name> <name>elemsize</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>chunks</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>EXTSPEC</name> <name>MALLOCATTR</name> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>nedpindependent_comalloc</name><argument_list>(<argument><expr><name>nedpool</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>size_t</name> <name>elems</name></expr></argument>, <argument><expr><name>size_t</name> <operator>*</operator><name>sizes</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><operator>*</operator><name>chunks</name></expr></argument>)</argument_list> <name>THROWSPEC</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></extern></block_content></block></decl></decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MALLOCATTR</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXTSPEC</name></cpp:undef>

</unit>
