<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\compat\winansi.c"><cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NOGDI</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../git-compat-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wingdi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winreg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32/lazyload.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>fd_is_interactive</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_CONSOLE</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_SWAPPED</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD_MSYS</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>console</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>WORD</name></type> <name>plain_attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>WORD</name></type> <name>attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>negative</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>non_ascii_used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>hthread</name></decl>, <decl><type ref="prev"/><name>hread</name></decl>, <decl><type ref="prev"/><name>hwrite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>hconsole1</name></decl>, <decl><type ref="prev"/><name>hconsole2</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW64_VERSION_MAJOR</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__MINGW64_VERSION_MAJOR</name> <operator>&lt;</operator> <literal type="number">5</literal></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>_CONSOLE_FONT_INFOEX</name> <block>{

<decl_stmt><decl><type><name>ULONG</name></type> <name>cbSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>nFont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COORD</name></type> <name>dwFontSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>FontFamily</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>UINT</name></type> <name>FontWeight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>FaceName</name><index>[<expr><name>LF_FACESIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>CONSOLE_FONT_INFOEX</name><operator>,</operator> *<name>PCONSOLE_FONT_INFOEX</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>warn_if_raster_font</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>fontFamily</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_PROC_ADDR</name><argument_list>(<argument><expr><name><name>kernel32</name><operator>.</operator><name>dll</name></name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>GetCurrentConsoleFontEx</name></expr></argument>,

<argument><expr><name>HANDLE</name></expr></argument>, <argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>PCONSOLE_FONT_INFOEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>non_ascii_used</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>INIT_PROC_ADDR</name><argument_list>(<argument><expr><name>GetCurrentConsoleFontEx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>CONSOLE_FONT_INFOEX</name></type> <name>cfi</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cfi</name><operator>.</operator><name>cbSize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cfi</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetCurrentConsoleFontEx</name><argument_list>(<argument><expr><name>console</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fontFamily</name> <operator>=</operator> <name><name>cfi</name><operator>.</operator><name>FontFamily</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>HKEY</name></type> <name>hkey</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ERROR_SUCCESS</name> <operator>==</operator> <call><name>RegOpenKeyExA</name><argument_list>(<argument><expr><name>HKEY_CURRENT_USER</name></expr></argument>, <argument><expr><literal type="string">"Console"</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hkey</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>fontFamily</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RegQueryValueExA</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><literal type="string">"FontFamily"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>(</operator><name>LPVOID</name><operator>)</operator> <operator>&amp;</operator><name>fontFamily</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fontFamily</name> <operator>&amp;</operator> <name>TMPF_TRUETYPE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><literal type="string">L"\nWarning: Your console font probably "</literal>

<literal type="string">L"doesn\'t support Unicode. If you experience strange "</literal>

<literal type="string">L"characters in the output, consider switching to a "</literal>

<literal type="string">L"TrueType font such as Consolas!\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dummy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WriteConsoleW</name><argument_list>(<argument><expr><name>console</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>wcslen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_console</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>sbi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hcon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>hcon</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hcon</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetFileType</name><argument_list>(<argument><expr><name>hcon</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FILE_TYPE_CHAR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>hcon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sbi</name><operator>.</operator><name>wAttributes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>hcon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fd</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fd_is_interactive</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>|=</operator> <name>FD_CONSOLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>initialized</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>console</name> <operator>=</operator> <name>hcon</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>plain_attr</name> <operator>=</operator> <name><name>sbi</name><operator>.</operator><name>wAttributes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PARAMS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_console</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>wchar_t</name></type> <name><name>wbuf</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>BUFFER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wlen</name> <init>= <expr><call><name>xutftowcsn</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>str</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><literal type="string">L"[invalid]"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WriteConsoleW</name><argument_list>(<argument><expr><name>console</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>wcslen</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>WriteConsoleW</name><argument_list>(<argument><expr><name>console</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><name>wlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>wlen</name> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>non_ascii_used</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREGROUND_ALL</name></cpp:macro> <cpp:value>(FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKGROUND_ALL</name></cpp:macro> <cpp:value>(BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_console_attr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WORD</name></type> <name>attributes</name> <init>= <expr><name>attr</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>attributes</name> <operator>&amp;=</operator> <operator>~</operator><name>FOREGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attributes</name> <operator>&amp;=</operator> <operator>~</operator><name>BACKGROUND_ALL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>FOREGROUND_RED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attributes</name> <operator>|=</operator> <name>BACKGROUND_RED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>FOREGROUND_GREEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attributes</name> <operator>|=</operator> <name>BACKGROUND_GREEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>FOREGROUND_BLUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attributes</name> <operator>|=</operator> <name>BACKGROUND_BLUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>BACKGROUND_RED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attributes</name> <operator>|=</operator> <name>FOREGROUND_RED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>BACKGROUND_GREEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attributes</name> <operator>|=</operator> <name>FOREGROUND_GREEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>attr</name> <operator>&amp;</operator> <name>BACKGROUND_BLUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attributes</name> <operator>|=</operator> <name>FOREGROUND_BLUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetConsoleTextAttribute</name><argument_list>(<argument><expr><name>console</name></expr></argument>, <argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>erase_in_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>sbi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>dummy</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>console</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><name>console</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FillConsoleOutputCharacterA</name><argument_list>(<argument><expr><name>console</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>,

<argument><expr><name><name>sbi</name><operator>.</operator><name>dwSize</name><operator>.</operator><name>X</name></name> <operator>-</operator> <name><name>sbi</name><operator>.</operator><name>dwCursorPosition</name><operator>.</operator><name>X</name></name></expr></argument>, <argument><expr><name><name>sbi</name><operator>.</operator><name>dwCursorPosition</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_attr</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>paramlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>func</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>paramlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>params</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>=</operator> <name>plain_attr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FOREGROUND_INTENSITY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<case>case <expr><literal type="number">22</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>FOREGROUND_INTENSITY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<case>case <expr><literal type="number">21</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> 

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>BACKGROUND_INTENSITY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">25</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>BACKGROUND_INTENSITY</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> 

<expr_stmt><expr><name>negative</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">27</literal></expr>:</case> 

<expr_stmt><expr><name>negative</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> 

<case>case <expr><literal type="number">28</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="number">30</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>FOREGROUND_ALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">31</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>FOREGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FOREGROUND_RED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>FOREGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FOREGROUND_GREEN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">33</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>FOREGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FOREGROUND_RED</name> <operator>|</operator> <name>FOREGROUND_GREEN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">34</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>FOREGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FOREGROUND_BLUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">35</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>FOREGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FOREGROUND_RED</name> <operator>|</operator> <name>FOREGROUND_BLUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">36</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>FOREGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FOREGROUND_GREEN</name> <operator>|</operator> <name>FOREGROUND_BLUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">37</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>FOREGROUND_RED</name> <operator>|</operator>

<name>FOREGROUND_GREEN</name> <operator>|</operator>

<name>FOREGROUND_BLUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">38</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="number">39</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>FOREGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <operator>(</operator><name>plain_attr</name> <operator>&amp;</operator> <name>FOREGROUND_ALL</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">40</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>BACKGROUND_ALL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">41</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>BACKGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>BACKGROUND_RED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">42</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>BACKGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>BACKGROUND_GREEN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">43</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>BACKGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>BACKGROUND_RED</name> <operator>|</operator> <name>BACKGROUND_GREEN</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">44</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>BACKGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>BACKGROUND_BLUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">45</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>BACKGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>BACKGROUND_RED</name> <operator>|</operator> <name>BACKGROUND_BLUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">46</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>BACKGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>BACKGROUND_GREEN</name> <operator>|</operator> <name>BACKGROUND_BLUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">47</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <name>BACKGROUND_RED</name> <operator>|</operator>

<name>BACKGROUND_GREEN</name> <operator>|</operator>

<name>BACKGROUND_BLUE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">48</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="number">49</literal></expr>:</case> 

<expr_stmt><expr><name>attr</name> <operator>&amp;=</operator> <operator>~</operator><name>BACKGROUND_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>attr</name> <operator>|=</operator> <operator>(</operator><name>plain_attr</name> <operator>&amp;</operator> <name>BACKGROUND_ALL</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><call><name>set_console_attr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'K'</literal></expr>:</case>

<expr_stmt><expr><call><name>erase_in_line</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<enum>enum <block>{

<decl><name>TEXT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>ESCAPE</name> <init>= <expr><literal type="number">033</literal></expr></init></decl>, <decl><name>BRACKET</name> <init>= <expr><literal type="char">'['</literal></expr></init></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>console_thread</name><parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>unused</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>parampos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>state</name> <init>= <expr><name>TEXT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>params</name><index>[<expr><name>MAX_PARAMS</name></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><name>hread</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>end</name></expr></argument>, <argument><expr><name>BUFFER_SIZE</name> <operator>-</operator> <name>end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytes</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_PIPE_NOT_CONNECTED</name> <operator>||</operator>

<call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_BROKEN_PIPE</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes</name> <operator>+=</operator> <name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>bytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>end</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TEXT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>ESCAPE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_console</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>start</name></expr></argument>,

<argument><expr><name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parampos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>ESCAPE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>ESCAPE</name></expr>:</case>

<expr_stmt><expr><name>state</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <name>BRACKET</name><operator>)</operator></expr> ?</condition><then> <expr><name>BRACKET</name></expr> </then><else>: <expr><name>TEXT</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>BRACKET</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>params</name><index>[<expr><name>parampos</name></expr>]</index></name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><index>[<expr><name>parampos</name></expr>]</index></name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parampos</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parampos</name> <operator>&gt;=</operator> <name>MAX_PARAMS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>TEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>set_attr</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>parampos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <name>TEXT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>TEXT</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>&gt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>end</name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0xc0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>end</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>start</name> <operator>&amp;&amp;</operator>

<name><name>buffer</name><index>[<expr><name>end</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0xe0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>end</name> <operator>-</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>start</name> <operator>&amp;&amp;</operator>

<name><name>buffer</name><index>[<expr><name>end</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0xf0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_console</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <name>bytes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>end</name></expr></argument>, <argument><expr><name>bytes</name> <operator>-</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>bytes</name> <operator>-</operator> <name>end</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>warn_if_raster_font</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>winansi_exit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_flushall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FlushFileBuffers</name><argument_list>(<argument><expr><name>hwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DisconnectNamedPipe</name><argument_list>(<argument><expr><name>hwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>hthread</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hwrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hthread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>die_lasterr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>params</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <call><name>err_win_to_posix</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>dup2</name></cpp:undef>

<function><type><name>int</name></type> <name>winansi_dup2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>oldfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newfd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>dup2</name><argument_list>(<argument><expr><name>oldfd</name></expr></argument>, <argument><expr><name>newfd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <name>newfd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>newfd</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fd_is_interactive</name><index>[<expr><name>newfd</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>oldfd</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>oldfd</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr> ?</condition><then>

<expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>fd_is_interactive</name><index>[<expr><name>oldfd</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HANDLE</name></type> <name>duplicate_handle</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>hresult</name></decl>, <decl><type ref="prev"/><name>hproc</name> <init>= <expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DuplicateHandle</name><argument_list>(<argument><expr><name>hproc</name></expr></argument>, <argument><expr><name>hnd</name></expr></argument>, <argument><expr><name>hproc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hresult</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,

<argument><expr><name>DUPLICATE_SAME_ACCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_lasterr</name><argument_list>(<argument><expr><literal type="string">"DuplicateHandle(%li) failed"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>intptr_t</name><operator>)</operator> <name>hnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>hresult</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HANDLE</name></type> <name>swap_osfhnd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>HANDLE</name></type> <name>new_handle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>handle</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>duplicate</name> <init>= <expr><call><name>duplicate_handle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_fd</name> <init>= <expr><call><name>_open_osfhandle</name><argument_list>(<argument><expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>new_handle</name></expr></argument>, <argument><expr><name>O_BINARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>fd</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>fd</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>console</name> <operator>==</operator> <name>handle</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>console</name> <operator>=</operator> <name>duplicate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>new_fd</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>new_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IONBF</name></expr></argument>, <argument><expr><name>BUFSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fd_is_interactive</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>|=</operator> <name>FD_SWAPPED</name></expr>;</expr_stmt>

<return>return <expr><name>duplicate</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DETECT_MSYS_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winternl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <name>_OBJECT_NAME_INFORMATION</name>

<block>{

<decl_stmt><decl><type><name>UNICODE_STRING</name></type> <name>Name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>NameBuffer</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>OBJECT_NAME_INFORMATION</name><operator>,</operator> *<name>POBJECT_NAME_INFORMATION</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ObjectNameInformation</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ntstatus.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>detect_msys_tty</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ULONG</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>POBJECT_NAME_INFORMATION</name></type> <name>nameinfo</name> <init>= <expr><operator>(</operator><name>POBJECT_NAME_INFORMATION</name><operator>)</operator> <name>buffer</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PWSTR</name></type> <name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetFileType</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FILE_TYPE_PIPE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NT_SUCCESS</name><argument_list>(<argument><expr><call><name>NtQueryObject</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>ObjectNameInformation</name></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>nameinfo</name><operator>-&gt;</operator><name>Name</name><operator>.</operator><name>Buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><index>[<expr><name><name>nameinfo</name><operator>-&gt;</operator><name>Name</name><operator>.</operator><name>Length</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>name</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><call><name>wcsstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">L"msys-"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>wcsstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">L"cygwin-"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>

<operator>!</operator><call><name>wcsstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">L"-pty"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IONBF</name></expr></argument>, <argument><expr><name>BUFSIZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fd_is_interactive</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>|=</operator> <name>FD_MSYS</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>isatty</name></cpp:undef>

<function><type><name>int</name></type> <name>winansi_isatty</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fd</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>fd_is_interactive</name><index>[<expr><name>fd</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>isatty</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>winansi_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>con1</name></decl>, <decl><type ref="prev"/><name>con2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>con1</name> <operator>=</operator> <call><name>is_console</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>con2</name> <operator>=</operator> <call><name>is_console</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>is_console</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>con1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>con2</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DETECT_MSYS_TTY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>detect_msys_tty</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>detect_msys_tty</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>detect_msys_tty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>swprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">L"\\\\.\\pipe\\winansi%lu"</literal></expr></argument>,

<argument><expr><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Could not initialize winansi pipe name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hwrite</name> <operator>=</operator> <call><name>CreateNamedPipeW</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>PIPE_ACCESS_OUTBOUND</name></expr></argument>,

<argument><expr><name>PIPE_TYPE_BYTE</name> <operator>|</operator> <name>PIPE_WAIT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>BUFFER_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hwrite</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_lasterr</name><argument_list>(<argument><expr><literal type="string">"CreateNamedPipe failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hread</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>GENERIC_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hread</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_lasterr</name><argument_list>(<argument><expr><literal type="string">"CreateFile for named pipe failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hthread</name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>console_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hthread</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_lasterr</name><argument_list>(<argument><expr><literal type="string">"CreateThread(console_thread) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atexit</name><argument_list>(<argument><expr><name>winansi_exit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"atexit(winansi_exit) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>con1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hconsole1</name> <operator>=</operator> <call><name>swap_osfhnd</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>duplicate_handle</name><argument_list>(<argument><expr><name>hwrite</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>con2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hconsole2</name> <operator>=</operator> <call><name>swap_osfhnd</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>duplicate_handle</name><argument_list>(<argument><expr><name>hwrite</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>HANDLE</name></type> <name>winansi_get_osfhandle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fd_is_interactive</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>FD_SWAPPED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>hconsole1</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fd_is_interactive</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>FD_SWAPPED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>hconsole2</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><call><name>_get_osfhandle</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr> ?</condition><then> <expr><name>INVALID_HANDLE_VALUE</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

</unit>
