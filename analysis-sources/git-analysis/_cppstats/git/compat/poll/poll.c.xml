<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\compat\poll\poll.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>__GNUC__</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <literal type="number">3</literal> <operator>&lt;=</operator> <name>__GNUC_MINOR__</name><operator>)</operator> <operator>||</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name>__GNUC__</name></expr></cpp:if>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wtype-limits"</cpp:literal></cpp:pragma>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>_WIN32</name> <operator>||</operator> <name>defined</name> <name>__WIN32__</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator> <name>defined</name> <name>__CYGWIN__</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_NATIVE</name></cpp:macro></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WINNT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0502</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;conio.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_SYS_SELECT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"poll.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_IOCTL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYS_FILIO_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/filio.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INFTIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFTIM</name></cpp:macro> <cpp:value>(-1)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>MSG_PEEK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSG_PEEK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsConsoleHandle</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((long) (intptr_t) (h) &amp; 3) == 3)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>BOOL</name></type>

<name>IsSocketHandle</name> <parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>WSANETWORKEVENTS</name></type> <name>ev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsConsoleHandle</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>=</operator> <literal type="number">0xDEADBEEF</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WSAEnumNetworkEvents</name> <argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator> <name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>ev</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>!=</operator> <literal type="number">0xDEADBEEF</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>_FILE_PIPE_LOCAL_INFORMATION</name> <block>{

<decl_stmt><decl><type><name>ULONG</name></type> <name>NamedPipeType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>NamedPipeConfiguration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>MaximumInstances</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>CurrentInstances</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>InboundQuota</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>ReadDataAvailable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>OutboundQuota</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>WriteQuotaAvailable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>NamedPipeState</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>NamedPipeEnd</name></decl>;</decl_stmt>

}</block></struct></type> <name>FILE_PIPE_LOCAL_INFORMATION</name><operator>,</operator> *<name>PFILE_PIPE_LOCAL_INFORMATION</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_IO_STATUS_BLOCK</name>

<block>{

<union>union <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>Status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PVOID</name></type> <name>Pointer</name></decl>;</decl_stmt>

}</block> <decl><name>u</name></decl>;</union>

<decl_stmt><decl><type><name>ULONG_PTR</name></type> <name>Information</name></decl>;</decl_stmt>

}</block></struct></type> <name>IO_STATUS_BLOCK</name><operator>,</operator> *<name>PIO_STATUS_BLOCK</name>;</typedef>

<typedef>typedef <type><enum>enum <name>_FILE_INFORMATION_CLASS</name> <block>{

<decl><name>FilePipeLocalInformation</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>

}</block></enum></type> <name>FILE_INFORMATION_CLASS</name><operator>,</operator> *<name>PFILE_INFORMATION_CLASS</name>;</typedef>

<typedef>typedef <function_decl><type><name>DWORD</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>PNtQueryInformationFile</name>)

<parameter_list>(<parameter><decl><type><name>HANDLE</name></type></decl></parameter>, <parameter><decl><type><name>IO_STATUS_BLOCK</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>VOID</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ULONG</name></type></decl></parameter>, <parameter><decl><type><name>FILE_INFORMATION_CLASS</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PIPE_BUF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIPE_BUF</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>win32_compute_revents</name> <parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_sought</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>happened</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INPUT_RECORD</name> <modifier>*</modifier></type><name>irbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>avail</name></decl>, <decl><type ref="prev"/><name>nbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>bRet</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><call><name>GetFileType</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>FILE_TYPE_PIPE</name></expr>:</case>

<expr_stmt><expr><name>happened</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>PeekNamedPipe</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>avail</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <operator>*</operator><name>p_sought</name> <operator>&amp;</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>GetLastError</name> <argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_BROKEN_PIPE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <name>POLLHUP</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <operator>*</operator><name>p_sought</name> <operator>&amp;</operator> <operator>(</operator><name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name> <operator>|</operator> <name>POLLWRBAND</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>happened</name></expr>;</return>

<case>case <expr><name>FILE_TYPE_CHAR</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsConsoleHandle</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr> ?</condition><then> <expr><operator>*</operator><name>p_sought</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>POLLPRI</name> <operator>|</operator> <name>POLLRDBAND</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nbuffer</name> <operator>=</operator> <name>avail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bRet</name> <operator>=</operator> <call><name>GetNumberOfConsoleInputEvents</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bRet</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_sought</name> <operator>&amp;=</operator> <name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nbuffer</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>POLLHUP</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p_sought</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>irbuffer</name> <operator>=</operator> <operator>(</operator><name>INPUT_RECORD</name> <operator>*</operator><operator>)</operator> <call><name>alloca</name> <argument_list>(<argument><expr><name>nbuffer</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>INPUT_RECORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bRet</name> <operator>=</operator> <call><name>PeekConsoleInput</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>irbuffer</name></expr></argument>, <argument><expr><name>nbuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bRet</name> <operator>||</operator> <name>avail</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>POLLHUP</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>avail</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>irbuffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>EventType</name> <operator>==</operator> <name>KEY_EVENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>*</operator><name>p_sought</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_sought</name> <operator>&amp;=</operator> <name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name> <operator>|</operator> <name>POLLWRBAND</name></expr>;</expr_stmt>

<return>return <expr><operator>*</operator><name>p_sought</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WaitForSingleObject</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>*</operator><name>p_sought</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>POLLPRI</name> <operator>|</operator> <name>POLLRDBAND</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>*</operator><name>p_sought</name> <operator>&amp;</operator> <operator>(</operator><name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name> <operator>|</operator> <name>POLLWRBAND</name><operator>)</operator></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>win32_compute_revents_socket</name> <parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sought</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lNetworkEvents</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>happened</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lNetworkEvents</name> <operator>&amp;</operator> <operator>(</operator><name>FD_READ</name> <operator>|</operator> <name>FD_ACCEPT</name> <operator>|</operator> <name>FD_CLOSE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>FD_ACCEPT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name><operator>)</operator> <operator>&amp;</operator> <name>sought</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>lNetworkEvents</name> <operator>&amp;</operator> <operator>(</operator><name>FD_READ</name> <operator>|</operator> <name>FD_ACCEPT</name> <operator>|</operator> <name>FD_CLOSE</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>WSASetLastError</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recv</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>MSG_PEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>WSAGetLastError</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WSASetLastError</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>error</name> <operator>==</operator> <name>WSAENOTCONN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name><operator>)</operator> <operator>&amp;</operator> <name>sought</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>error</name> <operator>==</operator> <name>WSAESHUTDOWN</name> <operator>||</operator> <name>error</name> <operator>==</operator> <name>WSAECONNRESET</name>

<operator>||</operator> <name>error</name> <operator>==</operator> <name>WSAECONNABORTED</name> <operator>||</operator> <name>error</name> <operator>==</operator> <name>WSAENETRESET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <name>POLLHUP</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <name>POLLERR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lNetworkEvents</name> <operator>&amp;</operator> <operator>(</operator><name>FD_WRITE</name> <operator>|</operator> <name>FD_CONNECT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <operator>(</operator><name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name> <operator>|</operator> <name>POLLWRBAND</name><operator>)</operator> <operator>&amp;</operator> <name>sought</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lNetworkEvents</name> <operator>&amp;</operator> <name>FD_OOB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <operator>(</operator><name>POLLPRI</name> <operator>|</operator> <name>POLLRDBAND</name><operator>)</operator> <operator>&amp;</operator> <name>sought</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>happened</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><specifier>static</specifier> <name>int</name></type>

<name>compute_revents</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sought</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>rfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>wfds</name></decl></parameter>, <parameter><decl><type><name>fd_set</name> <modifier>*</modifier></type><name>efds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>happened</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>rfds</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>socket_errno</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__MACH__</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>__APPLE__</name></expr></cpp:if>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recv</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MSG_PEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>socket_errno</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>socket_errno</name> <operator>==</operator> <name>ENOTSOCK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ioctl</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIONREAD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>recv</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>MSG_PEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>socket_errno</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <name>POLLHUP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator> <name>socket_errno</name> <operator>==</operator> <name>ENOTCONN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name><operator>)</operator> <operator>&amp;</operator> <name>sought</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>socket_errno</name> <operator>==</operator> <name>ESHUTDOWN</name> <operator>||</operator> <name>socket_errno</name> <operator>==</operator> <name>ECONNRESET</name>

<operator>||</operator> <name>socket_errno</name> <operator>==</operator> <name>ECONNABORTED</name> <operator>||</operator> <name>socket_errno</name> <operator>==</operator> <name>ENETRESET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <name>POLLHUP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name>socket_errno</name> <operator>==</operator> <name>ENOTSOCK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name><operator>)</operator> <operator>&amp;</operator> <name>sought</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <name>POLLERR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>wfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <operator>(</operator><name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name> <operator>|</operator> <name>POLLWRBAND</name><operator>)</operator> <operator>&amp;</operator> <name>sought</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>efds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>happened</name> <operator>|=</operator> <operator>(</operator><name>POLLPRI</name> <operator>|</operator> <name>POLLRDBAND</name><operator>)</operator> <operator>&amp;</operator> <name>sought</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>happened</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><name>int</name></type>

<name>poll</name> <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>pfd</name></decl></parameter>, <parameter><decl><type><name>nfds_t</name></type> <name>nfd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timeout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>fd_set</name></type> <name>rfds</name></decl>, <decl><type ref="prev"/><name>wfds</name></decl>, <decl><type ref="prev"/><name>efds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>ptv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxfd</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nfds_t</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_SC_OPEN_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>sc_open_max</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nfd</name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>nfd</name> <operator>&gt;</operator> <name>sc_open_max</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>sc_open_max</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal>

<operator>||</operator> <name>nfd</name> <operator>&gt;</operator> <operator>(</operator><name>sc_open_max</name> <operator>=</operator> <call><name>sysconf</name> <argument_list>(<argument><expr><name>_SC_OPEN_MAX</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPEN_MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>nfd</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>nfd</name></expr></argument> &gt;</argument_list></name> <name>OPEN_MAX</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pfd</name> <operator>&amp;&amp;</operator> <name>nfd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EFAULT</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptv</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ptv</name> <operator>=</operator> <operator>&amp;</operator><name>tv</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptv</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <name>timeout</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptv</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>timeout</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>timeout</name> <operator>==</operator> <name>INFTIM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ptv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>efds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name> <operator>|</operator> <name>POLLWRBAND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>POLLPRI</name> <operator>|</operator> <name>POLLRDBAND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>efds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&gt;=</operator> <name>maxfd</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLOUT</name> <operator>|</operator> <name>POLLPRI</name>

<operator>|</operator> <name>POLLRDNORM</name> <operator>|</operator> <name>POLLRDBAND</name>

<operator>|</operator> <name>POLLWRNORM</name> <operator>|</operator> <name>POLLWRBAND</name><operator>)</operator><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>maxfd</name> <operator>=</operator> <name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>maxfd</name> <operator>&gt;</operator> <name>FD_SETSIZE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EOVERFLOW</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>select</name> <argument_list>(<argument><expr><name>maxfd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>efds</name></expr></argument>, <argument><expr><name>ptv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>happened</name> <init>= <expr><call><name>compute_revents</name> <argument_list>(<argument><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>efds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>happened</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <name>happened</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt></block_content></block></for>

<return>return <expr><name>rc</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>tv0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>hEvent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WSANETWORKEVENTS</name></type> <name>ev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name><name>handle_array</name><index>[<expr><name>FD_SETSIZE</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>wait_timeout</name></decl>, <decl><type ref="prev"/><name>nhandles</name></decl>, <decl><type ref="prev"/><name>orig_timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fd_set</name></type> <name>rfds</name></decl>, <decl><type ref="prev"/><name>wfds</name></decl>, <decl><type ref="prev"/><name>xfds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BOOL</name></type> <name>poll_again</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>nfds_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nfd</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>timeout</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>!=</operator> <name>INFTIM</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>orig_timeout</name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>GetTickCount64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hEvent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hEvent</name> <operator>=</operator> <call><name>CreateEvent</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>restart</name>:</label>

<expr_stmt><expr><name><name>handle_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>hEvent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nhandles</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_ZERO</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>xfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sought</name> <init>= <expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sought</name> <operator>&amp;</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name> <operator>|</operator> <name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name> <operator>|</operator> <name>POLLWRBAND</name>

<operator>|</operator> <name>POLLPRI</name> <operator>|</operator> <name>POLLRDBAND</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_get_osfhandle</name> <argument_list>(<argument><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><name>h</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IsSocketHandle</name> <argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>requested</name> <init>= <expr><name>FD_CLOSE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sought</name> <operator>&amp;</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>requested</name> <operator>|=</operator> <name>FD_READ</name> <operator>|</operator> <name>FD_ACCEPT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator> <name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sought</name> <operator>&amp;</operator> <operator>(</operator><name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name> <operator>|</operator> <name>POLLWRBAND</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>requested</name> <operator>|=</operator> <name>FD_WRITE</name> <operator>|</operator> <name>FD_CONNECT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator> <name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sought</name> <operator>&amp;</operator> <operator>(</operator><name>POLLPRI</name> <operator>|</operator> <name>POLLRDBAND</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>requested</name> <operator>|=</operator> <name>FD_OOB</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FD_SET</name> <argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator> <name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>requested</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WSAEventSelect</name> <argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator> <name>h</name></expr></argument>, <argument><expr><name>hEvent</name></expr></argument>, <argument><expr><name>requested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>=</operator> <call><name>win32_compute_revents</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sought</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sought</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>handle_array</name><index>[<expr><name>nhandles</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>select</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv0</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>poll_again</name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wait_timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>poll_again</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timeout</name> <operator>==</operator> <name>INFTIM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>wait_timeout</name> <operator>=</operator> <name>INFINITE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>wait_timeout</name> <operator>=</operator> <name>timeout</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MsgWaitForMultipleObjects</name> <argument_list>(<argument><expr><name>nhandles</name></expr></argument>, <argument><expr><name>handle_array</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,

<argument><expr><name>wait_timeout</name></expr></argument>, <argument><expr><name>QS_ALLINPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WAIT_OBJECT_0</name> <operator>+</operator> <name>nhandles</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>BOOL</name></type> <name>bRet</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>bRet</name> <operator>=</operator> <call><name>PeekMessage</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PM_REMOVE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TranslateMessage</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DispatchMessage</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>poll_again</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>select</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xfds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>handle_array</name><index>[<expr><name>nhandles</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nhandles</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nfd</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>happened</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <operator>(</operator><name>POLLIN</name> <operator>|</operator> <name>POLLRDNORM</name> <operator>|</operator>

<name>POLLOUT</name> <operator>|</operator> <name>POLLWRNORM</name> <operator>|</operator> <name>POLLWRBAND</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_get_osfhandle</name> <argument_list>(<argument><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>!=</operator> <name><name>handle_array</name><index>[<expr><name>nhandles</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>WSAEnumNetworkEvents</name> <argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator> <name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WSAEventSelect</name> <argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator> <name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator> <name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rfds</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ev</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>&amp;</operator> <operator>(</operator><name>FD_READ</name> <operator>|</operator> <name>FD_ACCEPT</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>|=</operator> <name>FD_READ</name> <operator>|</operator> <name>FD_ACCEPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator> <name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>|=</operator> <name>FD_WRITE</name> <operator>|</operator> <name>FD_CONNECT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FD_ISSET</name> <argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator> <name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ev</name><operator>.</operator><name>lNetworkEvents</name></name> <operator>|=</operator> <name>FD_OOB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>happened</name> <operator>=</operator> <call><name>win32_compute_revents_socket</name> <argument_list>(<argument><expr><operator>(</operator><name>SOCKET</name><operator>)</operator> <name>h</name></expr></argument>, <argument><expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name></expr></argument>,

<argument><expr><name><name>ev</name><operator>.</operator><name>lNetworkEvents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sought</name> <init>= <expr><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>happened</name> <operator>=</operator> <call><name>win32_compute_revents</name> <argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sought</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nhandles</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pfd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>|=</operator> <name>happened</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <name>orig_timeout</name> <operator>&amp;&amp;</operator> <name>timeout</name> <operator>!=</operator> <name>INFTIM</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ULONGLONG</name></type> <name>elapsed</name> <init>= <expr><call><name>GetTickCount64</name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>timeout</name> <operator>=</operator> <ternary><condition><expr><name>elapsed</name> <operator>&gt;=</operator> <name>orig_timeout</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>orig_timeout</name> <operator>-</operator> <name>elapsed</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rc</name> <operator>&amp;&amp;</operator> <name>timeout</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SleepEx</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>restart</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>rc</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
