<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\compat\apple-common-crypto.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSSL_NO_MD5</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_HMAC_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEADER_SHA_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CommonCrypto/CommonHMAC.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVP_md5</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>kCCHmacAlgMD5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HMAC</name></cpp:macro> <cpp:value>git_CC_HMAC</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>git_CC_HMAC</name><parameter_list>(<parameter><decl><type><name>CCHmacAlgorithm</name></type> <name>alg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>data_len</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>md_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>CCHmac</name><argument_list>(<argument><expr><name>alg</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>md</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__MAC_OS_X_VERSION_MIN_REQUIRED</name> <operator>&gt;=</operator> <literal type="number">1070</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPLE_LION_OR_NEWER</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Security/Security.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TYPE_BOOL</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SHA1_MAX_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Using Apple Common Crypto library requires setting SHA1_MAX_BLOCK_SIZE</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>APPLE_LION_OR_NEWER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>git_CC_error_check</name><parameter_list>(<parameter><type><name>pattern</name></type></parameter>, <parameter><type><name>err</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (err) { die(pattern, (long)CFErrorGetCode(err)); } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVP_EncodeBlock</name></cpp:macro> <cpp:value>git_CC_EVP_EncodeBlock</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>git_CC_EVP_EncodeBlock</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFErrorRef</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecTransformRef</name></type> <name>encoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDataRef</name></type> <name>input</name></decl>, <decl><type ref="prev"/><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFIndex</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>encoder</name> <operator>=</operator> <call><name>SecEncodeTransformCreate</name><argument_list>(<argument><expr><name>kSecBase64Encoding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_CC_error_check</name><argument_list>(<argument><expr><literal type="string">"SecEncodeTransformCreate failed: %ld"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>CFDataCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SecTransformSetAttribute</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><name>kSecTransformInputAttributeName</name></expr></argument>,

<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_CC_error_check</name><argument_list>(<argument><expr><literal type="string">"SecTransformSetAttribute failed: %ld"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>SecTransformExecute</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_CC_error_check</name><argument_list>(<argument><expr><literal type="string">"SecTransformExecute failed: %ld"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>CFDataGetLength</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDataGetBytes</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><call><name>CFRangeMake</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVP_DecodeBlock</name></cpp:macro> <cpp:value>git_CC_EVP_DecodeBlock</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name> <specifier>inline</specifier></type> <name>git_CC_EVP_DecodeBlock</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFErrorRef</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SecTransformRef</name></type> <name>decoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDataRef</name></type> <name>input</name></decl>, <decl><type ref="prev"/><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFIndex</name></type> <name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><name>decoder</name> <operator>=</operator> <call><name>SecDecodeTransformCreate</name><argument_list>(<argument><expr><name>kSecBase64Encoding</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_CC_error_check</name><argument_list>(<argument><expr><literal type="string">"SecEncodeTransformCreate failed: %ld"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>CFDataCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SecTransformSetAttribute</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><name>kSecTransformInputAttributeName</name></expr></argument>,

<argument><expr><name>input</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_CC_error_check</name><argument_list>(<argument><expr><literal type="string">"SecTransformSetAttribute failed: %ld"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>SecTransformExecute</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_CC_error_check</name><argument_list>(<argument><expr><literal type="string">"SecTransformExecute failed: %ld"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>CFDataGetLength</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDataGetBytes</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><call><name>CFRangeMake</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
