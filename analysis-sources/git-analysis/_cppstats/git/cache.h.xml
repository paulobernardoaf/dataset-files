<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\cache.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"advice.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gettext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"convert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-revindex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem-pool.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>git_zstream</name> <block>{

<decl_stmt><decl><type><name>z_stream</name></type> <name>z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>avail_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>avail_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>total_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>total_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>next_out</name></decl>;</decl_stmt>

}</block></struct></type> <name>git_zstream</name>;</typedef>

<function_decl><type><name>void</name></type> <name>git_inflate_init</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>git_inflate_init_gzip_only</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>git_inflate_end</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>git_inflate</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>git_deflate_init</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>git_deflate_init_gzip</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>git_deflate_init_raw</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>git_deflate_end</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>git_deflate_abort</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>git_deflate_end_gently</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>git_deflate</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>git_deflate_bound</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DT_UNKNOWN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NO_D_TYPE_IN_DIRENT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DTYPE</name><parameter_list>(<parameter><type><name>de</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((de)-&gt;d_type)</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DT_UNKNOWN</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DT_DIR</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DT_REG</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DT_LNK</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_UNKNOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_DIR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_REG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DT_LNK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DTYPE</name><parameter_list>(<parameter><type><name>de</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DT_UNKNOWN</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IFINVALID</name></cpp:macro> <cpp:value>0030000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_IFGITLINK</name></cpp:macro> <cpp:value>0160000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_ISGITLINK</name><parameter_list>(<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((m) &amp; S_IFMT) == S_IFGITLINK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S_DIFFTREE_IFXMIN_NEQ</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_GIT_PORT</name></cpp:macro> <cpp:value>9418</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_SIGNATURE</name></cpp:macro> <cpp:value>0x44495243</cpp:value></cpp:define> 

<struct>struct <name>cache_header</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hdr_signature</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hdr_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>hdr_entries</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_FORMAT_LB</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_FORMAT_UB</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<struct>struct <name>cache_time</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nsec</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>stat_data</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>cache_time</name></name></type> <name>sd_ctime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_time</name></name></type> <name>sd_mtime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sd_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sd_ino</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sd_uid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sd_gid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sd_size</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>cache_entry</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name></type> <name>ent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat_data</name></name></type> <name>ce_stat_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ce_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ce_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mem_pool_allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ce_namelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt> 

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_STAGEMASK</name></cpp:macro> <cpp:value>(0x3000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_EXTENDED</name></cpp:macro> <cpp:value>(0x4000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_VALID</name></cpp:macro> <cpp:value>(0x8000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_STAGESHIFT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_UPDATE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_REMOVE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 17)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_UPTODATE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 18)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_ADDED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 19)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_HASHED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_FSMONITOR_VALID</name></cpp:macro> <cpp:value>(1 &lt;&lt; 21)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_WT_REMOVE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 22)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_CONFLICTED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 23)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_UNPACKED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 24)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_NEW_SKIP_WORKTREE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 25)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_MATCHED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 26)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_UPDATE_IN_BASE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 27)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_STRIP_NAME</name></cpp:macro> <cpp:value>(1 &lt;&lt; 28)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_INTENT_TO_ADD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 29)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_SKIP_WORKTREE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 30)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_EXTENDED2</name></cpp:macro> <cpp:value>(1U &lt;&lt; 31)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_EXTENDED_FLAGS</name></cpp:macro> <cpp:value>(CE_INTENT_TO_ADD | CE_SKIP_WORKTREE)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CE_EXTENDED_FLAGS</name> <operator>&amp;</operator> <literal type="number">0x803FFFFF</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"CE_EXTENDED_FLAGS out of range"</cpp:literal></cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>pathspec</name>;</struct_decl>

<struct_decl>struct <name>child_process</name>;</struct_decl>

<struct_decl>struct <name>tree</name>;</struct_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>copy_cache_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>state</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_HASHED</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mem_pool_allocated</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>mem_pool_allocated</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>ce_stat_data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>ce_stat_data</name></name></expr></argument>,

<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>cache_entry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>-</operator>

<call><name>offsetof</name><argument_list>(<argument><expr>struct <name>cache_entry</name></expr></argument>, <argument><expr><name>ce_stat_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>=</operator> <operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>CE_HASHED</name><operator>)</operator> <operator>|</operator> <name>state</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>mem_pool_allocated</name></name> <operator>=</operator> <name>mem_pool_allocated</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name></type> <name>create_ce_flags</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>stage</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>stage</name> <operator>&lt;&lt;</operator> <name>CE_STAGESHIFT</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ce_namelen</name><parameter_list>(<parameter><type><name>ce</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ce)-&gt;ce_namelen)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ce_size</name><parameter_list>(<parameter><type><name>ce</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cache_entry_size(ce_namelen(ce))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ce_stage</name><parameter_list>(<parameter><type><name>ce</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((CE_STAGEMASK &amp; (ce)-&gt;ce_flags) &gt;&gt; CE_STAGESHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ce_uptodate</name><parameter_list>(<parameter><type><name>ce</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ce)-&gt;ce_flags &amp; CE_UPTODATE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ce_skip_worktree</name><parameter_list>(<parameter><type><name>ce</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ce)-&gt;ce_flags &amp; CE_SKIP_WORKTREE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ce_mark_uptodate</name><parameter_list>(<parameter><type><name>ce</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ce)-&gt;ce_flags |= CE_UPTODATE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ce_intent_to_add</name><parameter_list>(<parameter><type><name>ce</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ce)-&gt;ce_flags &amp; CE_INTENT_TO_ADD)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ce_permissions</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((mode) &amp; 0100) ? 0755 : 0644)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>create_ce_mode</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>S_IFLNK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>S_IFGITLINK</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>S_IFREG</name> <operator>|</operator> <call><name>ce_permissions</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>ce_mode_from_stat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>trust_executable_bit</name></decl>, <decl><type ref="prev"/><name>has_symlinks</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_symlinks</name> <operator>&amp;&amp;</operator> <call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name>ce</name> <operator>&amp;&amp;</operator> <call><name>S_ISLNK</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trust_executable_bit</name> <operator>&amp;&amp;</operator> <call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ce</name> <operator>&amp;&amp;</operator> <call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>create_ce_mode</name><argument_list>(<argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>create_ce_mode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ce_to_dtype</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ce_mode</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name>ce_mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DT_REG</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>ce_mode</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name>ce_mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DT_DIR</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name>ce_mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DT_LNK</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>DT_UNKNOWN</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>canon_mode</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>S_IFREG</name> <operator>|</operator> <call><name>ce_permissions</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISLNK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>S_IFLNK</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>S_IFDIR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>S_IFGITLINK</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cache_entry_size</name><parameter_list>(<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(offsetof(struct cache_entry,name) + (len) + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOMETHING_CHANGED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_ENTRY_CHANGED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_ENTRY_REMOVED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_ENTRY_ADDED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESOLVE_UNDO_CHANGED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_TREE_CHANGED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLIT_INDEX_ORDERED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNTRACKED_CHANGED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSMONITOR_CHANGED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>

<struct_decl>struct <name>split_index</name>;</struct_decl>

<struct_decl>struct <name>untracked_cache</name>;</struct_decl>

<struct_decl>struct <name>progress</name>;</struct_decl>

<struct>struct <name>index_state</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>cache_nr</name></decl>, <decl><type ref="prev"/><name>cache_alloc</name></decl>, <decl><type ref="prev"/><name>cache_changed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>resolve_undo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_tree</name></name> <modifier>*</modifier></type><name>cache_tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>split_index</name></name> <modifier>*</modifier></type><name>split_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_time</name></name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>name_hash_initialized</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>initialized</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>drop_cache_tree</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>updated_workdir</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>updated_skipworktree</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>fsmonitor_has_run_once</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name></type> <name>name_hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap</name></name></type> <name>dir_hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>untracked_cache</name></name> <modifier>*</modifier></type><name>untracked</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fsmonitor_last_update</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>fsmonitor_dirty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mem_pool</name></name> <modifier>*</modifier></type><name>ce_mem_pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>int</name></type> <name>test_lazy_init_name_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>try_threaded</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>add_name_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>remove_name_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>free_name_hash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>make_cache_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>refresh_options</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>make_empty_cache_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>make_transient_cache_entry</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>make_empty_transient_cache_entry</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>name_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>discard_cache_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>should_validate_cache_entries</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>dup_cache_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>validate_cache_entries</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_THE_INDEX_COMPATIBILITY_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>index_state</name></name></type> <name>the_index</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>active_cache</name></cpp:macro> <cpp:value>(the_index.cache)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>active_nr</name></cpp:macro> <cpp:value>(the_index.cache_nr)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>active_alloc</name></cpp:macro> <cpp:value>(the_index.cache_alloc)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>active_cache_changed</name></cpp:macro> <cpp:value>(the_index.cache_changed)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>active_cache_tree</name></cpp:macro> <cpp:value>(the_index.cache_tree)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_cache</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>repo_read_index(the_repository)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_cache_from</name><parameter_list>(<parameter><type><name>path</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>read_index_from(&amp;the_index, (path), (get_git_dir()))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_cache_preload</name><parameter_list>(<parameter><type><name>pathspec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_read_index_preload(the_repository, (pathspec), 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is_cache_unborn</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>is_index_unborn(&amp;the_index)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_cache_unmerged</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>repo_read_index_unmerged(the_repository)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>discard_cache</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>discard_index(&amp;the_index)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unmerged_cache</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>unmerged_index(&amp;the_index)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cache_name_pos</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>namelen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>index_name_pos(&amp;the_index,(name),(namelen))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_cache_entry</name><parameter_list>(<parameter><type><name>ce</name></type></parameter>, <parameter><type><name>option</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_index_entry(&amp;the_index, (ce), (option))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rename_cache_entry_at</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>, <parameter><type><name>new_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rename_index_entry_at(&amp;the_index, (pos), (new_name))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>remove_cache_entry_at</name><parameter_list>(<parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>remove_index_entry_at(&amp;the_index, (pos))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>remove_file_from_cache</name><parameter_list>(<parameter><type><name>path</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>remove_file_from_index(&amp;the_index, (path))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_to_cache</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>st</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_to_index(&amp;the_index, (path), (st), (flags))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add_file_to_cache</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add_file_to_index(&amp;the_index, (path), (flags))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chmod_cache_entry</name><parameter_list>(<parameter><type><name>ce</name></type></parameter>, <parameter><type><name>flip</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>chmod_index_entry(&amp;the_index, (ce), (flip))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>refresh_cache</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>refresh_index(&amp;the_index, (flags), NULL, NULL, NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>refresh_and_write_cache</name><parameter_list>(<parameter><type><name>refresh_flags</name></type></parameter>, <parameter><type><name>write_flags</name></type></parameter>, <parameter><type><name>gentle</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_refresh_and_write_index(the_repository, (refresh_flags), (write_flags), (gentle), NULL, NULL, NULL)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ce_match_stat</name><parameter_list>(<parameter><type><name>ce</name></type></parameter>, <parameter><type><name>st</name></type></parameter>, <parameter><type><name>options</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ie_match_stat(&amp;the_index, (ce), (st), (options))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ce_modified</name><parameter_list>(<parameter><type><name>ce</name></type></parameter>, <parameter><type><name>st</name></type></parameter>, <parameter><type><name>options</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ie_modified(&amp;the_index, (ce), (st), (options))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cache_dir_exists</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>namelen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>index_dir_exists(&amp;the_index, (name), (namelen))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cache_file_exists</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>namelen</name></type></parameter>, <parameter><type><name>igncase</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>index_file_exists(&amp;the_index, (name), (namelen), (igncase))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cache_name_is_other</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>namelen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>index_name_is_other(&amp;the_index, (name), (namelen))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>resolve_undo_clear</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>resolve_undo_clear_index(&amp;the_index)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unmerge_cache_entry_at</name><parameter_list>(<parameter><type><name>at</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unmerge_index_entry_at(&amp;the_index, at)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>unmerge_cache</name><parameter_list>(<parameter><type><name>pathspec</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>unmerge_index(&amp;the_index, pathspec)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_blob_data_from_cache</name><parameter_list>(<parameter><type><name>path</name></type></parameter>, <parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>read_blob_data_from_index(&amp;the_index, (path), (sz))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hold_locked_index</name><parameter_list>(<parameter><type><name>lock_file</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_hold_locked_index(the_repository, (lock_file), (flags))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_BITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<enum>enum <name>object_type</name> <block>{

<decl><name>OBJ_BAD</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>OBJ_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>OBJ_COMMIT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>OBJ_TREE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>OBJ_BLOB</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>OBJ_TAG</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>OBJ_OFS_DELTA</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>OBJ_REF_DELTA</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>OBJ_ANY</name></decl>,

<decl><name>OBJ_MAX</name></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>enum</name> <name>object_type</name></name></type> <name>object_type</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OBJ_TREE</name></expr> </then><else>:

<expr><ternary><condition><expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OBJ_COMMIT</name></expr> </then><else>:

<expr><name>OBJ_BLOB</name></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_DIR_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_DIR"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_COMMON_DIR_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_COMMON_DIR"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_NAMESPACE_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_NAMESPACE"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_WORK_TREE_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_WORK_TREE"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_PREFIX_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_PREFIX"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_SUPER_PREFIX_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_INTERNAL_SUPER_PREFIX"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_GIT_DIR_ENVIRONMENT</name></cpp:macro> <cpp:value>".git"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_OBJECT_DIRECTORY"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_INDEX_FILE"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAFT_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_GRAFT_FILE"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_SHALLOW_FILE_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_SHALLOW_FILE"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPLATE_DIR_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_TEMPLATE_DIR"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_CONFIG"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_DATA_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_CONFIG_PARAMETERS"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC_PATH_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_EXEC_PATH"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CEILING_DIRECTORIES_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_CEILING_DIRECTORIES"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_REPLACE_OBJECTS_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_NO_REPLACE_OBJECTS"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_REPLACE_REF_BASE_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_REPLACE_REF_BASE"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GITATTRIBUTES_FILE</name></cpp:macro> <cpp:value>".gitattributes"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFOATTRIBUTES_FILE</name></cpp:macro> <cpp:value>"info/attributes"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATTRIBUTE_MACRO_PREFIX</name></cpp:macro> <cpp:value>"[attr]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GITMODULES_FILE</name></cpp:macro> <cpp:value>".gitmodules"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GITMODULES_INDEX</name></cpp:macro> <cpp:value>":.gitmodules"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GITMODULES_HEAD</name></cpp:macro> <cpp:value>"HEAD:.gitmodules"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_NOTES_REF_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_NOTES_REF"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_NOTES_DEFAULT_REF</name></cpp:macro> <cpp:value>"refs/notes/commits"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_NOTES_DISPLAY_REF_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_NOTES_DISPLAY_REF"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_NOTES_REWRITE_REF_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_NOTES_REWRITE_REF"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_NOTES_REWRITE_MODE_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_NOTES_REWRITE_MODE"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_LITERAL_PATHSPECS_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_LITERAL_PATHSPECS"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_GLOB_PATHSPECS_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_GLOB_PATHSPECS"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_NOGLOB_PATHSPECS_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_NOGLOB_PATHSPECS"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_ICASE_PATHSPECS_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_ICASE_PATHSPECS"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_QUARANTINE_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_QUARANTINE_PATH"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_OPTIONAL_LOCKS_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_OPTIONAL_LOCKS"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_TEXT_DOMAIN_DIR_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_TEXTDOMAINDIR"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_PROTOCOL_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_PROTOCOL"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_PROTOCOL_HEADER</name></cpp:macro> <cpp:value>"Git-Protocol"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_IMPLICIT_WORK_TREE_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_IMPLICIT_WORK_TREE"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>local_repo_env</name><index>[]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>setup_git_env</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_dir</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>have_git_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>is_bare_repository_cfg</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>is_bare_repository</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_inside_git_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>git_work_tree_cfg</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>is_inside_work_tree</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_git_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_git_common_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>get_object_directory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>get_index_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>get_graft_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>set_git_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>make_realpath</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>get_common_dir_noenv</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gitdir</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>get_common_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gitdir</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_git_namespace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strip_namespace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>namespaced_ref</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_super_prefix</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_git_work_tree</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_git_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_nonbare_repository_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_GITFILE_ERR_STAT_FAILED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_GITFILE_ERR_NOT_A_FILE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_GITFILE_ERR_OPEN_FAILED</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_GITFILE_ERR_READ_FAILED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_GITFILE_ERR_INVALID_FORMAT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_GITFILE_ERR_NO_PATH</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_GITFILE_ERR_NOT_A_REPO</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_GITFILE_ERR_TOO_LARGE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>read_gitfile_error_die</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error_code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>read_gitfile_gently</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>return_error_code</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read_gitfile</name><parameter_list>(<parameter><type><name>path</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>read_gitfile_gently((path), NULL)</cpp:value></cpp:define>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>resolve_gitdir_gently</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suspect</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>return_error_code</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>resolve_gitdir</name><parameter_list>(<parameter><type><name>path</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>resolve_gitdir_gently((path), NULL)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>set_git_work_tree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALTERNATE_DB_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_ALTERNATE_OBJECT_DIRECTORIES"</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>setup_work_tree</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>discover_git_directory</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>commondir</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>gitdir</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setup_git_directory_gently</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setup_git_directory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>prefix_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>prefix_path_gently</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>remaining</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>prefix_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>check_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>verify_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>diagnose_misspelt_rev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>verify_non_filename</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>path_inside_repo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_DB_QUIET</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_DB_EXIST_OK</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>init_db</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>real_git_dir</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>template_dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_algo</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>initialize_repository_version</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hash_algo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sanitize_stdfds</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>daemonize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>alloc_nr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)+16)*3/2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_GROW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>nr</name></type></parameter>, <parameter><type><name>alloc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((nr) &gt; alloc) { if (alloc_nr(alloc) &lt; (nr)) alloc = (nr); else alloc = alloc_nr(alloc); REALLOC_ARRAY(x, alloc); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOC_GROW_BY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>nr</name></type></parameter>, <parameter><type><name>increase</name></type></parameter>, <parameter><type><name>alloc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (increase) { size_t new_nr = nr + (increase); if (new_nr &lt; nr) BUG("negative growth in ALLOC_GROW_BY"); ALLOC_GROW(x, new_nr, alloc); memset((x) + nr, 0, sizeof(*(x)) * (increase)); nr = new_nr; } } while (0)</cpp:value></cpp:define>

<struct_decl>struct <name>lock_file</name>;</struct_decl>

<function_decl><type><name>void</name></type> <name>preload_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>pathspec</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>refresh_flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>do_read_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>must_exist</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>int</name></type> <name>read_index_from</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gitdir</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_index_unborn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMIT_LOCK</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_IF_UNCHANGED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>write_locked_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>discard_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>move_index_extensions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>unmerged_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>repo_index_has_changes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>verify_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>strcmp_offset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>first_change</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>index_dir_exists</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>namelen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>adjust_dirname_case</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>index_file_exists</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>namelen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>igncase</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>index_name_pos</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>namelen</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>index_pos_to_insert_pos</name><parameter_list>(<parameter><decl><type><name>uintmax_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"overflow: -1 - %"</literal><name>PRIuMAX</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>pos</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CACHE_OK_TO_ADD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CACHE_OK_TO_REPLACE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CACHE_SKIP_DFCHECK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CACHE_JUST_APPEND</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CACHE_NEW_ONLY</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CACHE_KEEP_CACHE_TREE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CACHE_RENORMALIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define> 

<function_decl><type><name>int</name></type> <name>add_index_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rename_index_entry_at</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>remove_index_entry_at</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>remove_marked_cache_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>invalidate</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>remove_file_from_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CACHE_VERBOSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CACHE_PRETEND</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CACHE_IGNORE_ERRORS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CACHE_IGNORE_REMOVAL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_CACHE_INTENT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>add_to_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>add_file_to_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>chmod_index_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>flip</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ce_same_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>set_object_name_for_intent_to_add_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>index_name_is_other</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>read_blob_data_from_index</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_MATCH_IGNORE_VALID</name></cpp:macro> <cpp:value>01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_MATCH_RACY_IS_DIRTY</name></cpp:macro> <cpp:value>02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_MATCH_IGNORE_SKIP_WORKTREE</name></cpp:macro> <cpp:value>04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_MATCH_IGNORE_MISSING</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_MATCH_REFRESH</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CE_MATCH_IGNORE_FSMONITOR</name></cpp:macro> <cpp:value>0X20</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>is_racy_timestamp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ie_match_stat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ie_modified</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_WRITE_OBJECT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_FORMAT_CHECK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_RENORMALIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>index_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>index_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>fill_stat_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>match_stat_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>stat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>match_stat_data_racy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>stat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>fill_stat_cache_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFRESH_REALLY</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFRESH_UNMERGED</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFRESH_QUIET</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFRESH_IGNORE_MISSING</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFRESH_IGNORE_SUBMODULES</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFRESH_IN_PORCELAIN</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFRESH_PROGRESS</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define> 

<function_decl><type><name>int</name></type> <name>refresh_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>pathspec</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header_msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>repo_refresh_and_write_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>refresh_flags</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>write_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gentle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header_msg</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>refresh_cache_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>int</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>set_alternate_index_output</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>verify_index_checksum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>verify_ce_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>trust_executable_bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>trust_ctime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>check_stat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>quote_path_fully</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>has_symlinks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>minimum_abbrev</name></decl>, <decl><type ref="prev"/><name>default_abbrev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ignore_case</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>assume_unchanged</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>prefer_symlink_refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>warn_ambiguous_refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>warn_on_object_refname_ambiguity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apply_default_whitespace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>apply_default_ignorewhitespace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_attributes_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_hooks_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>zlib_compression_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>core_compression_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>pack_compression_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>packed_git_window_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>packed_git_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>size_t</name></type> <name>delta_base_cache_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>big_file_threshold</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name></type> <name>pack_size_limit_cfg</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>set_shared_repository</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>get_shared_repository</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>reset_shared_repository</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>read_replace_refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>git_replace_ref_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>fsync_object_files</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>core_preload_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>precomposed_unicode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>protect_hfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>protect_ntfs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>core_fsmonitor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>core_apply_sparse_checkout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>core_sparse_checkout_cone</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ref_paranoia</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>use_optional_locks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name></type> <name>comment_line_char</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>auto_comment_line_char</name></decl>;</decl_stmt>

<enum>enum <name>log_refs_config</name> <block>{

<decl><name>LOG_REFS_UNSET</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>LOG_REFS_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>LOG_REFS_NORMAL</name></decl>,

<decl><name>LOG_REFS_ALWAYS</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>enum</name> <name>log_refs_config</name></name></type> <name>log_all_ref_updates</name></decl>;</decl_stmt>

<enum>enum <name>rebase_setup_type</name> <block>{

<decl><name>AUTOREBASE_NEVER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AUTOREBASE_LOCAL</name></decl>,

<decl><name>AUTOREBASE_REMOTE</name></decl>,

<decl><name>AUTOREBASE_ALWAYS</name></decl>

}</block>;</enum>

<enum>enum <name>push_default_type</name> <block>{

<decl><name>PUSH_DEFAULT_NOTHING</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PUSH_DEFAULT_MATCHING</name></decl>,

<decl><name>PUSH_DEFAULT_SIMPLE</name></decl>,

<decl><name>PUSH_DEFAULT_UPSTREAM</name></decl>,

<decl><name>PUSH_DEFAULT_CURRENT</name></decl>,

<decl><name>PUSH_DEFAULT_UNSPECIFIED</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>enum</name> <name>rebase_setup_type</name></name></type> <name>autorebase</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>enum</name> <name>push_default_type</name></name></type> <name>push_default</name></decl>;</decl_stmt>

<enum>enum <name>object_creation_mode</name> <block>{

<decl><name>OBJECT_CREATION_USES_HARDLINKS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>OBJECT_CREATION_USES_RENAMES</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>enum</name> <name>object_creation_mode</name></name></type> <name>object_creation_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>notes_ref_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>grafts_replace_parents</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_REPO_VERSION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_REPO_VERSION_READ</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>repository_format_precious_objects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>repository_format_worktree_config</name></decl>;</decl_stmt>

<struct>struct <name>repository_format</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>precious_objects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>partial_clone</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>worktree_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_bare</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hash_algo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>work_tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>unknown_extensions</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPOSITORY_FORMAT_INIT</name></cpp:macro> <cpp:value>{ .version = -1, .is_bare = -1, .hash_algo = GIT_HASH_SHA1, .unknown_extensions = STRING_LIST_INIT_DUP, }</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>read_repository_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository_format</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>clear_repository_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository_format</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>verify_repository_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>repository_format</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>check_repository_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository_format</name></name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTIME_CHANGED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTIME_CHANGED</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OWNER_CHANGED</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODE_CHANGED</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INODE_CHANGED</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_CHANGED</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_CHANGED</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>repo_find_unique_abbrev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>find_unique_abbrev</name><parameter_list>(<parameter><type><name>oid</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_find_unique_abbrev(the_repository, oid, len)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>repo_find_unique_abbrev_r</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>find_unique_abbrev_r</name><parameter_list>(<parameter><type><name>hex</name></type></parameter>, <parameter><type><name>oid</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_find_unique_abbrev_r(the_repository, hex, oid, len)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name></type> <name>null_oid</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hashcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name> <operator>==</operator> <name>GIT_MAX_RAWSZ</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>sha2</name></expr></argument>, <argument><expr><name>GIT_MAX_RAWSZ</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>sha2</name></expr></argument>, <argument><expr><name>GIT_SHA1_RAWSZ</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>oidcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hashcmp</name><argument_list>(<argument><expr><name><name>oid1</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>oid2</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hasheq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name> <operator>==</operator> <name>GIT_MAX_RAWSZ</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>sha2</name></expr></argument>, <argument><expr><name>GIT_MAX_RAWSZ</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>sha2</name></expr></argument>, <argument><expr><name>GIT_SHA1_RAWSZ</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>oideq</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hasheq</name><argument_list>(<argument><expr><name><name>oid1</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>oid2</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_null_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>oideq</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null_oid</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hashcpy</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha_src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sha_dst</name></expr></argument>, <argument><expr><name>sha_src</name></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oidcpy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>GIT_MAX_RAWSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oiddup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>xmalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>object_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>dst</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hashclr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oidclr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>oid</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GIT_MAX_RAWSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>oidread</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>oid</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_empty_blob_sha1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hasheq</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>empty_blob</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_empty_blob_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>oideq</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>empty_blob</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_empty_tree_sha1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hasheq</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>empty_tree</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_empty_tree_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>oideq</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>empty_tree</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>empty_tree_oid_hex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>empty_blob_oid_hex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>git_mkstemps_mode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>suffix_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>git_mkstemp_mode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>sharedrepo</name> <block>{

<decl><name>PERM_UMASK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>OLD_PERM_GROUP</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>OLD_PERM_EVERYBODY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>PERM_GROUP</name> <init>= <expr><literal type="number">0660</literal></expr></init></decl>,

<decl><name>PERM_EVERYBODY</name> <init>= <expr><literal type="number">0664</literal></expr></init></decl>

}</block>;</enum>

<function_decl><type><name>int</name></type> <name>git_config_perm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>adjust_shared_perm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>scld_error</name> <block>{

<decl><name>SCLD_OK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SCLD_FAILED</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>SCLD_PERMS</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>SCLD_EXISTS</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,

<decl><name>SCLD_VANISHED</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl>

}</block>;</enum>

<function_decl><type><name><name>enum</name> <name>scld_error</name></name></type> <name>safe_create_leading_directories</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>scld_error</name></name></type> <name>safe_create_leading_directories_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>int</name></type> <name>create_file_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>int</name></type> <name>raceproof_create_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>create_file_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>mkdir_in_gitdir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>expand_user_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>real_home</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>enter_repo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>strict</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_absolute_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>is_dir_sep</name><argument_list>(<argument><expr><name><name>path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>has_dos_drive_prefix</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>is_directory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>strbuf_realpath</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>resolved</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>die_on_error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>real_pathdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>die_on_error</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>absolute_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>absolute_pathdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remove_leading_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relative_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>normalize_path_copy_len</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>prefix_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>normalize_path_copy</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>longest_ancestor_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>prefixes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>strip_path_suffix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>daemon_avoid_alias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_ntfs_dotgit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_ntfs_dotgitmodules</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_ntfs_dotgitignore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_ntfs_dotgitattributes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>looks_like_command_line_option</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>xdg_config_home</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>xdg_cache_home</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>git_open_cloexec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>git_open</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>git_open_cloexec(name, O_RDONLY)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>unpack_loose_header</name><parameter_list>(<parameter><decl><type><name>git_zstream</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>map</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>mapsize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>bufsiz</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_loose_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>sizep</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>check_object_signature</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>finalize_object_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmpfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>check_and_freshen_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>freshen</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>hexval_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>unsigned</name> <name>int</name></type> <name>hexval</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>hexval_table</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hex2chr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name> <init>= <expr><call><name>hexval</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xf</literal><operator>)</operator></expr> ?</condition><then> <expr><name>val</name></expr> </then><else>: <expr><operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <call><name>hexval</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIMUM_ABBREV</name></cpp:macro> <cpp:value>minimum_abbrev</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ABBREV</name></cpp:macro> <cpp:value>default_abbrev</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALLBACK_DEFAULT_ABBREV</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<struct>struct <name>object_context</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>symlink_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OID_QUIETLY</name></cpp:macro> <cpp:value>01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OID_COMMIT</name></cpp:macro> <cpp:value>02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OID_COMMITTISH</name></cpp:macro> <cpp:value>04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OID_TREE</name></cpp:macro> <cpp:value>010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OID_TREEISH</name></cpp:macro> <cpp:value>020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OID_BLOB</name></cpp:macro> <cpp:value>040</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OID_FOLLOW_SYMLINKS</name></cpp:macro> <cpp:value>0100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OID_RECORD_PATH</name></cpp:macro> <cpp:value>0200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OID_ONLY_TO_DIE</name></cpp:macro> <cpp:value>04000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OID_DISAMBIGUATORS</name></cpp:macro> <cpp:value>(GET_OID_COMMIT | GET_OID_COMMITTISH | GET_OID_TREE | GET_OID_TREEISH | GET_OID_BLOB)</cpp:value></cpp:define>

<enum>enum <name>get_oid_result</name> <block>{

<decl><name>FOUND</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MISSING_OBJECT</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, 

<decl><name>SHORT_NAME_AMBIGUOUS</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>DANGLING_SYMLINK</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl>, 

<decl><name>SYMLINK_LOOP</name> <init>= <expr><operator>-</operator><literal type="number">5</literal></expr></init></decl>,

<decl><name>NOT_DIR</name> <init>= <expr><operator>-</operator><literal type="number">6</literal></expr></init></decl>, 

}</block>;</enum>

<function_decl><type><name>int</name></type> <name>repo_get_oid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>get_oidf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>repo_get_oid_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>repo_get_oid_committish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>repo_get_oid_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>repo_get_oid_treeish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>repo_get_oid_blob</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>repo_get_oid_mb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>maybe_die_on_misspelt_object_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>get_oid_result</name></name></type> <name>get_oid_with_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_context</name></name> <modifier>*</modifier></type><name>oc</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_oid</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>oid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_get_oid(the_repository, str, oid)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_oid_commit</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>oid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_get_oid_commit(the_repository, str, oid)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_oid_committish</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>oid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_get_oid_committish(the_repository, str, oid)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_oid_tree</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>oid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_get_oid_tree(the_repository, str, oid)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_oid_treeish</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>oid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_get_oid_treeish(the_repository, str, oid)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_oid_blob</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>oid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_get_oid_blob(the_repository, str, oid)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_oid_mb</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>oid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_get_oid_mb(the_repository, str, oid)</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>int</name></type> <name>each_abbrev_fn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>int</name></type> <name>repo_for_each_abbrev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>each_abbrev_fn</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for_each_abbrev</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>fn</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_for_each_abbrev(the_repository, prefix, fn, data)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>set_disambiguate_hint_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>get_sha1_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>get_oid_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>sha1</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>get_oid_hex_algop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_hash_algo</name></name> <modifier>*</modifier></type><name>algop</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>hex_to_bytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>binary</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>hash_to_hex_algop_r</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_hash_algo</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>oid_to_hex_r</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>hash_to_hex_algop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_hash_algo</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>hash_to_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>oid_to_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl> 

<function_decl><type><name>int</name></type> <name>parse_oid_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_oid_hex_algop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>git_hash_algo</name></name> <modifier>*</modifier></type><name>algo</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>get_oid_hex_any</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_oid_hex_any</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hex</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPRET_BRANCH_LOCAL</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPRET_BRANCH_REMOTE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERPRET_BRANCH_HEAD</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>repo_interpret_branch_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>allowed</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>interpret_branch_name</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>len</name></type></parameter>, <parameter><type><name>buf</name></type></parameter>, <parameter><type><name>allowed</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_interpret_branch_name(the_repository, str, len, buf, allowed)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>validate_headref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>base_name_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>df_name_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>name_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>cache_name_stage_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stage1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stage2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>read_object_with_reference</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>required_type</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid_ret</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>repo_peel_to_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>namelen</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>object_type</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>peel_to_type</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>namelen</name></type></parameter>, <parameter><type><name>obj</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>repo_peel_to_type(the_repository, name, namelen, obj, type)</cpp:value></cpp:define>

<enum>enum <name>date_mode_type</name> <block>{

<decl><name>DATE_NORMAL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>DATE_HUMAN</name></decl>,

<decl><name>DATE_RELATIVE</name></decl>,

<decl><name>DATE_SHORT</name></decl>,

<decl><name>DATE_ISO8601</name></decl>,

<decl><name>DATE_ISO8601_STRICT</name></decl>,

<decl><name>DATE_RFC2822</name></decl>,

<decl><name>DATE_STRFTIME</name></decl>,

<decl><name>DATE_RAW</name></decl>,

<decl><name>DATE_UNIX</name></decl>

}</block>;</enum>

<struct>struct <name>date_mode</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>date_mode_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strftime_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>local</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATE_MODE</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>date_mode_from_type(DATE_##t)</cpp:value></cpp:define>

<function_decl><type><name><name>struct</name> <name>date_mode</name></name> <modifier>*</modifier></type><name>date_mode_from_type</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>date_mode_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>show_date</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>timezone</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>date_mode</name></name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>show_date_relative</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>timebuf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>show_date_human</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>now</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>timebuf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_date</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_date_basic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_expiry_date</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name> <modifier>*</modifier></type><name>timestamp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>datestamp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>approxidate</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>approxidate_careful((s), NULL)</cpp:value></cpp:define>

<function_decl><type><name>timestamp_t</name></type> <name>approxidate_careful</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>timestamp_t</name></type> <name>approxidate_relative</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>parse_date_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>date_mode</name></name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>date_overflows</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>date</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDENT_STRICT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDENT_NO_DATE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDENT_NO_NAME</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<enum>enum <name>want_ident</name> <block>{

<decl><name>WANT_BLANK_IDENT</name></decl>,

<decl><name>WANT_AUTHOR_IDENT</name></decl>,

<decl><name>WANT_COMMITTER_IDENT</name></decl>

}</block>;</enum>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_author_info</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_committer_info</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt_ident</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>email</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>want_ident</name></name></type> <name>whose_ident</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date_str</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>want_ident</name></name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ident_default_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ident_default_email</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_editor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_sequence_editor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_pager</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stdout_is_tty</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_terminal_dumb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>git_ident_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>prepare_fallback_ident</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>email</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>reset_ident_date</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>ident_split</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_begin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mail_begin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mail_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date_begin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tz_begin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tz_end</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>int</name></type> <name>split_ident_line</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ident_split</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>show_ident_date</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ident_split</name></name> <modifier>*</modifier></type><name>id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>date_mode</name></name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ident_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ident_split</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ident_split</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>checkout</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>base_dir_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>delayed_checkout</name></name> <modifier>*</modifier></type><name>delayed_checkout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>checkout_metadata</name></name></type> <name>meta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>force</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>quiet</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>not_new</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>clone</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>refresh_cache</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKOUT_INIT</name></cpp:macro> <cpp:value>{ NULL, "" }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPORARY_FILENAME_LENGTH</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>checkout_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>topath</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nr_checkouts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>enable_delayed_checkout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checkout</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>finish_delayed_checkout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checkout</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nr_checkouts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>unlink_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>cache_def</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>track_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prefix_len_stat_func</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DEF_INIT</name></cpp:macro> <cpp:value>{ STRBUF_INIT, 0, 0, 0 }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>cache_def_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_def</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>has_symlink_leading_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>threaded_has_symlink_leading_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_def</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>check_leading_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>has_dirs_only_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>schedule_dir_for_removal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>remove_scheduled_dirs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>pack_window</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>pack_window</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>last_used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>inuse_cnt</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>pack_entry</name> <block>{

<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>int</name></type> <name>odb_mkstemp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>temp_filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>odb_pack_keep</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>fetch_if_missing</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>update_server_info</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_log_output_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_commit_output_encoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>ignore_untracked_cache_config</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>committer_ident_sufficiently_given</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>author_ident_sufficiently_given</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_commit_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_log_output_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_mailmap_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_mailmap_blob</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>maybe_flush_or_die</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">2</literal>, <literal type="number">3</literal>))</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>fprintf_or_die</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_READ_ERROR</name></cpp:macro> <cpp:value>(-2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_WRITE_ERROR</name></cpp:macro> <cpp:value>(-3)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>copy_fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ifd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>copy_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>copy_file_with_time</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>write_or_die</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>fsync_or_die</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> <name>read_in_full</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> <name>write_in_full</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>ssize_t</name></type> <name>pread_in_full</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>ssize_t</name></type> <name>write_str_in_full</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>write_file_buf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">2</literal>, <literal type="number">3</literal>))</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>write_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setup_pager</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pager_in_use</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>pager_use_color</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>term_columns</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>term_clear_line</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>decimal_width</name><parameter_list>(<parameter><decl><type><name>uintmax_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>check_pager_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>prepare_pager_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>editor_program</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>askpass_program</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>excludes_file</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>decode_85</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linelen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>encode_85</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>packet_trace_identity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prog</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>add_files_to_cache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>pathspec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>diff_auto_refresh_index</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>shift_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>shift_tree_by</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_BLANK_AT_EOL</name></cpp:macro> <cpp:value>0100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_SPACE_BEFORE_TAB</name></cpp:macro> <cpp:value>0200</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_INDENT_WITH_NON_TAB</name></cpp:macro> <cpp:value>0400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_CR_AT_EOL</name></cpp:macro> <cpp:value>01000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_BLANK_AT_EOF</name></cpp:macro> <cpp:value>02000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_TAB_IN_INDENT</name></cpp:macro> <cpp:value>04000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_TRAILING_SPACE</name></cpp:macro> <cpp:value>(WS_BLANK_AT_EOL|WS_BLANK_AT_EOF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_DEFAULT_RULE</name></cpp:macro> <cpp:value>(WS_TRAILING_SPACE|WS_SPACE_BEFORE_TAB|8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_TAB_WIDTH_MASK</name></cpp:macro> <cpp:value>077</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_RULE_MASK</name></cpp:macro> <cpp:value>07777</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>unsigned</name></type> <name>whitespace_rule_cfg</name></decl>;</decl_stmt>

<function_decl><type><name>unsigned</name></type> <name>whitespace_rule</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>parse_whitespace_rule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>ws_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ws_check_emit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>whitespace_error_string</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ws</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ws_fix_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ws_blank_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ws_tab_width</name><parameter_list>(<parameter><type><name>rule</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((rule) &amp; WS_TAB_WIDTH_MASK)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>overlay_tree_on_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tree_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>startup_info</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>have_repository</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>startup_info</name></name> <modifier>*</modifier></type><name>startup_info</name></decl>;</decl_stmt>

<struct_decl>struct <name>commit_list</name>;</struct_decl>

<function_decl><type><name>int</name></type> <name>try_merge_command</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strategy</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>xopts_nr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>xopts</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>common</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>head_arg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>remotes</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>checkout_fast_forward</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>overwrite_ignore</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sane_execvp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>stat_validity</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>stat_data</name></name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>void</name></type> <name>stat_validity_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat_validity</name></name> <modifier>*</modifier></type><name>sv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>stat_validity_check</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat_validity</name></name> <modifier>*</modifier></type><name>sv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>stat_validity_update</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>stat_validity</name></name> <modifier>*</modifier></type><name>sv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>versioncmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sleep_millisec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>millisec</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>safe_create_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>share</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>print_sha1_ellipsis</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_empty_or_missing_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
