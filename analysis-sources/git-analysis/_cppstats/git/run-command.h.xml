<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\run-command.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread-utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>

<struct>struct <name>child_process</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>env_array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trace2_child_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>trace2_child_us_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>trace2_child_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>trace2_hook_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>no_stdin</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>no_stdout</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>no_stderr</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>git_cmd</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>silent_exec_failure</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>stdout_to_stderr</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>use_shell</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>clean_on_exit</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>wait_after_clean</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>clean_on_exit_handler</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>process</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>clean_on_exit_handler_cbdata</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHILD_PROCESS_INIT</name></cpp:macro> <cpp:value>{ NULL, ARGV_ARRAY_INIT, ARGV_ARRAY_INIT }</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>child_process_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>child_process_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>is_executable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>start_command</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>finish_command</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>finish_command_in_signal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>run_command</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_hook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>LAST_ARG_MUST_BE_NULL</name>

<name>int</name></type> <name>run_hook_le</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>run_hook_ve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_COMMAND_NO_STDIN</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_GIT_CMD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_COMMAND_STDOUT_TO_STDERR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_SILENT_EXEC_FAILURE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_USING_SHELL</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RUN_CLEAN_ON_EXIT</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>run_command_v_opt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>run_command_v_opt_tr2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tr2_class</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>run_command_v_opt_cd_env</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>env</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>run_command_v_opt_cd_env_tr2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>env</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tr2_class</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pipe_command</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>in_len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>out_hint</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>err_hint</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>capture_command</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>hint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>pipe_command</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>async</name> <block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>proc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>out</name></decl>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_PTHREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>proc_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>proc_out</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>isolate_sigpipe</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>int</name></type> <name>start_async</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>async</name></name> <modifier>*</modifier></type><name>async</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>finish_async</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>async</name></name> <modifier>*</modifier></type><name>async</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>in_async</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>async_with_fork</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>check_pipe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_next_task_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>cp</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp_cb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_task_cb</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>start_failure_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp_cb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp_task_cb</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>task_finished_fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp_cb</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp_task_cb</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>int</name></type> <name>run_processes_parallel</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>get_next_task_fn</name></type></decl></parameter>,

<parameter><decl><type><name>start_failure_fn</name></type></decl></parameter>,

<parameter><decl><type><name>task_finished_fn</name></type></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp_cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>run_processes_parallel_tr2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>get_next_task_fn</name></type></decl></parameter>, <parameter><decl><type><name>start_failure_fn</name></type></decl></parameter>,

<parameter><decl><type><name>task_finished_fn</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pp_cb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tr2_category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tr2_label</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
