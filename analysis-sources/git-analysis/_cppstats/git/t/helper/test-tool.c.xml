<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\t\helper\test-tool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test-tool.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>test_tool_usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"test-tool [-C &lt;directory&gt;] &lt;command [&lt;arguments&gt;...]]"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>test_cmd</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>test_cmd</name></name></type> <name><name>cmds</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"advise"</literal></expr>, <expr><name>cmd__advise_if_enabled</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"chmtime"</literal></expr>, <expr><name>cmd__chmtime</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"config"</literal></expr>, <expr><name>cmd__config</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ctype"</literal></expr>, <expr><name>cmd__ctype</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"date"</literal></expr>, <expr><name>cmd__date</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"delta"</literal></expr>, <expr><name>cmd__delta</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dir-iterator"</literal></expr>, <expr><name>cmd__dir_iterator</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"drop-caches"</literal></expr>, <expr><name>cmd__drop_caches</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dump-cache-tree"</literal></expr>, <expr><name>cmd__dump_cache_tree</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dump-fsmonitor"</literal></expr>, <expr><name>cmd__dump_fsmonitor</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dump-split-index"</literal></expr>, <expr><name>cmd__dump_split_index</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dump-untracked-cache"</literal></expr>, <expr><name>cmd__dump_untracked_cache</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"example-decorate"</literal></expr>, <expr><name>cmd__example_decorate</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"genrandom"</literal></expr>, <expr><name>cmd__genrandom</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"genzeros"</literal></expr>, <expr><name>cmd__genzeros</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hashmap"</literal></expr>, <expr><name>cmd__hashmap</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hash-speed"</literal></expr>, <expr><name>cmd__hash_speed</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"index-version"</literal></expr>, <expr><name>cmd__index_version</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"json-writer"</literal></expr>, <expr><name>cmd__json_writer</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lazy-init-name-hash"</literal></expr>, <expr><name>cmd__lazy_init_name_hash</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"match-trees"</literal></expr>, <expr><name>cmd__match_trees</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mergesort"</literal></expr>, <expr><name>cmd__mergesort</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mktemp"</literal></expr>, <expr><name>cmd__mktemp</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"oidmap"</literal></expr>, <expr><name>cmd__oidmap</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"online-cpus"</literal></expr>, <expr><name>cmd__online_cpus</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"parse-options"</literal></expr>, <expr><name>cmd__parse_options</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"parse-pathspec-file"</literal></expr>, <expr><name>cmd__parse_pathspec_file</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"path-utils"</literal></expr>, <expr><name>cmd__path_utils</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pkt-line"</literal></expr>, <expr><name>cmd__pkt_line</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"prio-queue"</literal></expr>, <expr><name>cmd__prio_queue</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"progress"</literal></expr>, <expr><name>cmd__progress</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"reach"</literal></expr>, <expr><name>cmd__reach</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"read-cache"</literal></expr>, <expr><name>cmd__read_cache</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"read-graph"</literal></expr>, <expr><name>cmd__read_graph</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"read-midx"</literal></expr>, <expr><name>cmd__read_midx</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ref-store"</literal></expr>, <expr><name>cmd__ref_store</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"regex"</literal></expr>, <expr><name>cmd__regex</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"repository"</literal></expr>, <expr><name>cmd__repository</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"revision-walking"</literal></expr>, <expr><name>cmd__revision_walking</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"run-command"</literal></expr>, <expr><name>cmd__run_command</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"scrap-cache-tree"</literal></expr>, <expr><name>cmd__scrap_cache_tree</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"serve-v2"</literal></expr>, <expr><name>cmd__serve_v2</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sha1"</literal></expr>, <expr><name>cmd__sha1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sha1-array"</literal></expr>, <expr><name>cmd__sha1_array</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sha256"</literal></expr>, <expr><name>cmd__sha256</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sigchain"</literal></expr>, <expr><name>cmd__sigchain</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"strcmp-offset"</literal></expr>, <expr><name>cmd__strcmp_offset</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"string-list"</literal></expr>, <expr><name>cmd__string_list</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"submodule-config"</literal></expr>, <expr><name>cmd__submodule_config</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"submodule-nested-repo-config"</literal></expr>, <expr><name>cmd__submodule_nested_repo_config</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"subprocess"</literal></expr>, <expr><name>cmd__subprocess</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"trace2"</literal></expr>, <expr><name>cmd__trace2</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"urlmatch-normalization"</literal></expr>, <expr><name>cmd__urlmatch_normalization</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"xml-encode"</literal></expr>, <expr><name>cmd__xml_encode</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wildmatch"</literal></expr>, <expr><name>cmd__wildmatch</name></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GIT_WINDOWS_NATIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="string">"windows-named-pipe"</literal></expr>, <expr><name>cmd__windows_named_pipe</name></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><block>{ <expr><literal type="string">"write-cache"</literal></expr>, <expr><name>cmd__write_cache</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>NORETURN</name> <name>void</name></type> <name>die_usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: test-tool &lt;toolname&gt; [args]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>working_directory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>working_directory</name></expr></argument>, <argument><expr><literal type="string">"directory"</literal></expr></argument>,

<argument><expr><literal type="string">"change the working directory"</literal></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>BUG_exit_code</name> <operator>=</operator> <literal type="number">99</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>test_tool_usage</name></expr></argument>,

<argument><expr><name>PARSE_OPT_STOP_AT_NON_OPTION</name> <operator>|</operator>

<name>PARSE_OPT_KEEP_ARGV0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>working_directory</name> <operator>&amp;&amp;</operator> <call><name>chdir</name><argument_list>(<argument><expr><name>working_directory</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Could not cd to '%s'"</literal></expr></argument>, <argument><expr><name>working_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_name</name><argument_list>(<argument><expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_cmd_list_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>cmds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>fn</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"there is no tool named '%s'"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>die_usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
