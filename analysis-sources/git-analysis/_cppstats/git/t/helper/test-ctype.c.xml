<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\t\helper\test-ctype.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test-tool.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>report_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>class</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s classifies char %d (0x%02x) wrongly\n"</literal></expr></argument>, <argument><expr><name>class</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_in</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_CLASS</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ int i; for (i = 0; i &lt; 256; i++) { if (is_in(s, i) != t(i)) report_error(#t, i); } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGIT</name></cpp:macro> <cpp:value>"0123456789"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWER</name></cpp:macro> <cpp:value>"abcdefghijklmnopqrstuvwxyz"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPPER</name></cpp:macro> <cpp:value>"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>cmd__ctype</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>TEST_CLASS</name><argument_list>(<argument><expr><name>isdigit</name></expr></argument>, <argument><expr><name>DIGIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_CLASS</name><argument_list>(<argument><expr><name>isspace</name></expr></argument>, <argument><expr><literal type="string">" \n\r\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>TEST_CLASS</name><argument_list>(<argument>isalpha</argument>, <argument>LOWER UPPER</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>TEST_CLASS</name><argument_list>(<argument>isalnum</argument>, <argument>LOWER UPPER DIGIT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>TEST_CLASS</name><argument_list>(<argument><expr><name>is_glob_special</name></expr></argument>, <argument><expr><literal type="string">"*?[\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_CLASS</name><argument_list>(<argument><expr><name>is_regex_special</name></expr></argument>, <argument><expr><literal type="string">"$()*+.?[\\^{|"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TEST_CLASS</name><argument_list>(<argument><expr><name>is_pathspec_magic</name></expr></argument>, <argument><expr><literal type="string">"!\"#%&amp;',-/:;&lt;=&gt;@_`~"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rc</name></expr>;</return>

</block_content>}</block></function>

</unit>
