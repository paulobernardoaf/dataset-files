<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\t\helper\test-dump-cache-tree.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test-tool.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache-tree.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_tree</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>entry_count</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-40s %s%s (%d subtrees)\n"</literal></expr></argument>,

<argument><expr><literal type="string">"invalid"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>subtree_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s%s (%d entries, %d subtrees)\n"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>,

<argument><expr><name><name>it</name><operator>-&gt;</operator><name>entry_count</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>subtree_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_cache_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_tree</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>cache_tree</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pfx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>it</name> <operator>||</operator> <operator>!</operator><name>ref</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>entry_count</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_one</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dump_one</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><literal type="string">"#(ref) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>dump_one</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>ref</name><operator>-&gt;</operator><name>entry_count</name></name> <operator>!=</operator> <name><name>it</name><operator>-&gt;</operator><name>entry_count</name></name> <operator>||</operator>

<name><name>ref</name><operator>-&gt;</operator><name>subtree_nr</name></name> <operator>!=</operator> <name><name>it</name><operator>-&gt;</operator><name>subtree_nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dump_one</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><literal type="string">"#(ref) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>subtree_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_tree_sub</name></name> <modifier>*</modifier></type><name>down</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>down</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_tree_sub</name></name> <modifier>*</modifier></type><name>rdwn</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rdwn</name> <operator>=</operator> <call><name>cache_tree_sub</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>down</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%.*s/"</literal></expr></argument>, <argument><expr><name>pfx</name></expr></argument>, <argument><expr><name><name>down</name><operator>-&gt;</operator><name>namelen</name></name></expr></argument>, <argument><expr><name><name>down</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dump_cache_tree</name><argument_list>(<argument><expr><name><name>down</name><operator>-&gt;</operator><name>cache_tree</name></name></expr></argument>, <argument><expr><name><name>rdwn</name><operator>-&gt;</operator><name>cache_tree</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>errs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd__dump_cache_tree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ac</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>av</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name></type> <name>istate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_tree</name></name> <modifier>*</modifier></type><name>another</name> <init>= <expr><call><name>cache_tree</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setup_git_directory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_cache</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to read index file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>istate</name> <operator>=</operator> <name>the_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>istate</name><operator>.</operator><name>cache_tree</name></name> <operator>=</operator> <name>another</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cache_tree_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>istate</name></expr></argument>, <argument><expr><name>WRITE_TREE_DRY_RUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>dump_cache_tree</name><argument_list>(<argument><expr><name>active_cache_tree</name></expr></argument>, <argument><expr><name>another</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
