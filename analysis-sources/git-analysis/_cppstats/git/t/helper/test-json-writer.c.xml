<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\t\helper\test-json-writer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test-tool.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"json-writer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_obj1</name> <init>= <expr><literal type="string">"{\"a\":\"abc\",\"b\":42,\"c\":true}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_obj2</name> <init>= <expr><literal type="string">"{\"a\":-1,\"b\":2147483647,\"c\":0}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_obj3</name> <init>= <expr><literal type="string">"{\"a\":0,\"b\":4294967295,\"c\":9223372036854775807}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_obj4</name> <init>= <expr><literal type="string">"{\"t\":true,\"f\":false,\"n\":null}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_obj5</name> <init>= <expr><literal type="string">"{\"abc\\tdef\":\"abc\\\\def\"}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_obj6</name> <init>= <expr><literal type="string">"{\"a\":3.14}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pretty_obj1</name> <init>= <expr><operator>(</operator><literal type="string">"{\n"</literal>

<literal type="string">" \"a\": \"abc\",\n"</literal>

<literal type="string">" \"b\": 42,\n"</literal>

<literal type="string">" \"c\": true\n"</literal>

<literal type="string">"}"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pretty_obj2</name> <init>= <expr><operator>(</operator><literal type="string">"{\n"</literal>

<literal type="string">" \"a\": -1,\n"</literal>

<literal type="string">" \"b\": 2147483647,\n"</literal>

<literal type="string">" \"c\": 0\n"</literal>

<literal type="string">"}"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pretty_obj3</name> <init>= <expr><operator>(</operator><literal type="string">"{\n"</literal>

<literal type="string">" \"a\": 0,\n"</literal>

<literal type="string">" \"b\": 4294967295,\n"</literal>

<literal type="string">" \"c\": 9223372036854775807\n"</literal>

<literal type="string">"}"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pretty_obj4</name> <init>= <expr><operator>(</operator><literal type="string">"{\n"</literal>

<literal type="string">" \"t\": true,\n"</literal>

<literal type="string">" \"f\": false,\n"</literal>

<literal type="string">" \"n\": null\n"</literal>

<literal type="string">"}"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>obj1</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>obj2</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>obj3</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>obj4</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>obj5</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>obj6</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_obj1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj1</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_true</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj1</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_obj2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">0x7fffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_obj3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj3</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj3</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj3</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj3</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="number">0x7fffffffffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_obj4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj4</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_true</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj4</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_false</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj4</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_null</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj4</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_obj5</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj5</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj5</name></expr></argument>, <argument><expr><literal type="string">"abc"</literal> <literal type="string">"\x09"</literal> <literal type="string">"def"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal> <literal type="string">"\\"</literal> <literal type="string">"def"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_obj6</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj6</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj6</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3.14159</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_arr1</name> <init>= <expr><literal type="string">"[\"abc\",42,true]"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_arr2</name> <init>= <expr><literal type="string">"[-1,2147483647,0]"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_arr3</name> <init>= <expr><literal type="string">"[0,4294967295,9223372036854775807]"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_arr4</name> <init>= <expr><literal type="string">"[true,false,null]"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pretty_arr1</name> <init>= <expr><operator>(</operator><literal type="string">"[\n"</literal>

<literal type="string">" \"abc\",\n"</literal>

<literal type="string">" 42,\n"</literal>

<literal type="string">" true\n"</literal>

<literal type="string">"]"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pretty_arr2</name> <init>= <expr><operator>(</operator><literal type="string">"[\n"</literal>

<literal type="string">" -1,\n"</literal>

<literal type="string">" 2147483647,\n"</literal>

<literal type="string">" 0\n"</literal>

<literal type="string">"]"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pretty_arr3</name> <init>= <expr><operator>(</operator><literal type="string">"[\n"</literal>

<literal type="string">" 0,\n"</literal>

<literal type="string">" 4294967295,\n"</literal>

<literal type="string">" 9223372036854775807\n"</literal>

<literal type="string">"]"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pretty_arr4</name> <init>= <expr><operator>(</operator><literal type="string">"[\n"</literal>

<literal type="string">" true,\n"</literal>

<literal type="string">" false,\n"</literal>

<literal type="string">" null\n"</literal>

<literal type="string">"]"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>arr1</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>arr2</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>arr3</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>arr4</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_arr1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr1</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr1</name></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr1</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_true</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_arr2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr2</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr2</name></expr></argument>, <argument><expr><literal type="number">0x7fffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_arr3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr3</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr3</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr3</name></expr></argument>, <argument><expr><literal type="number">0x7fffffffffffffffULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_arr4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr4</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_true</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_false</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_null</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_nest1</name> <init>=

<expr><literal type="string">"{\"obj1\":{\"a\":\"abc\",\"b\":42,\"c\":true},\"arr1\":[\"abc\",42,true]}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>nest1</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_nest1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nest1</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_sub_jw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nest1</name></expr></argument>, <argument><expr><literal type="string">"obj1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_sub_jw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nest1</name></expr></argument>, <argument><expr><literal type="string">"arr1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nest1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_inline1</name> <init>=

<expr><literal type="string">"{\"obj1\":{\"a\":\"abc\",\"b\":42,\"c\":true},\"arr1\":[\"abc\",42,true]}"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pretty_inline1</name> <init>=

<expr><operator>(</operator><literal type="string">"{\n"</literal>

<literal type="string">" \"obj1\": {\n"</literal>

<literal type="string">" \"a\": \"abc\",\n"</literal>

<literal type="string">" \"b\": 42,\n"</literal>

<literal type="string">" \"c\": true\n"</literal>

<literal type="string">" },\n"</literal>

<literal type="string">" \"arr1\": [\n"</literal>

<literal type="string">" \"abc\",\n"</literal>

<literal type="string">" 42,\n"</literal>

<literal type="string">" true\n"</literal>

<literal type="string">" ]\n"</literal>

<literal type="string">"}"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>inline1</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_inline1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_inline_begin_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>, <argument><expr><literal type="string">"obj1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_true</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_inline_begin_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>, <argument><expr><literal type="string">"arr1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_true</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_inline2</name> <init>=

<expr><literal type="string">"[[1,2],[3,4],{\"a\":\"abc\"}]"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pretty_inline2</name> <init>=

<expr><operator>(</operator><literal type="string">"[\n"</literal>

<literal type="string">" [\n"</literal>

<literal type="string">" 1,\n"</literal>

<literal type="string">" 2\n"</literal>

<literal type="string">" ],\n"</literal>

<literal type="string">" [\n"</literal>

<literal type="string">" 3,\n"</literal>

<literal type="string">" 4\n"</literal>

<literal type="string">" ],\n"</literal>

<literal type="string">" {\n"</literal>

<literal type="string">" \"a\": \"abc\"\n"</literal>

<literal type="string">" }\n"</literal>

<literal type="string">"]"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>inline2</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_inline2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_inline_begin_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_inline_begin_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_inline_begin_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expect_mixed1</name> <init>=

<expr><operator>(</operator><literal type="string">"{\"obj1\":{\"a\":\"abc\",\"b\":42,\"c\":true},"</literal>

<literal type="string">"\"arr1\":[\"abc\",42,true]}"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pretty_mixed1</name> <init>=

<expr><operator>(</operator><literal type="string">"{\n"</literal>

<literal type="string">" \"obj1\": {\"a\":\"abc\",\"b\":42,\"c\":true},\n"</literal>

<literal type="string">" \"arr1\": [\n"</literal>

<literal type="string">" \"abc\",\n"</literal>

<literal type="string">" 42,\n"</literal>

<literal type="string">" true\n"</literal>

<literal type="string">" ]\n"</literal>

<literal type="string">"}"</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>json_writer</name></name></type> <name>mixed1</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_mixed1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pretty</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_obj1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>make_arr1</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mixed1</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<expr_stmt><expr><call><name>jw_object_sub_jw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mixed1</name></expr></argument>, <argument><expr><literal type="string">"obj1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_sub_jw</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mixed1</name></expr></argument>, <argument><expr><literal type="string">"arr1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>arr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mixed1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>jw</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>jw</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error[%s]: observed '%s' expected '%s'\n"</literal></expr></argument>,

<argument><expr><name>test</name></expr></argument>, <argument><expr><name><name>jw</name><operator>-&gt;</operator><name>json</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>t</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { make_##v(0); cmp(#v, &amp;v, expect_##v); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { make_##v(1); cmp(#v, &amp;v, pretty_##v); } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unit_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>obj3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>obj4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>obj5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>obj6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>arr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>arr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>arr3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>arr4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>nest1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>inline1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>inline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obj4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name><argument_list>(<argument><expr><name>obj1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name><argument_list>(<argument><expr><name>obj2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name><argument_list>(<argument><expr><name>obj3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name><argument_list>(<argument><expr><name>obj4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name><argument_list>(<argument><expr><name>arr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name><argument_list>(<argument><expr><name>arr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name><argument_list>(<argument><expr><name>arr3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name><argument_list>(<argument><expr><name>arr4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name><argument_list>(<argument><expr><name>inline1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name><argument_list>(<argument><expr><name>inline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>t</name><argument_list>(<argument><expr><name>mixed1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mixed1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>p</name><argument_list>(<argument><expr><name>mixed1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_s</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_nr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>s_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>s_in</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>s_in</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"line[%d]: expected: &lt;s&gt;"</literal></expr></argument>, <argument><expr><name>line_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_i</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_nr</name></decl></parameter>, <parameter><decl><type><name>intmax_t</name> <modifier>*</modifier></type><name>s_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_s</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s_in</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endptr</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"line[%d]: invalid integer value"</literal></expr></argument>, <argument><expr><name>line_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_d</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line_nr</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>s_in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_s</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>s_in</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endptr</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"line[%d]: invalid float value"</literal></expr></argument>, <argument><expr><name>line_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pretty</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LINE_LENGTH</name></cpp:macro> <cpp:value>(64 * 1024)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_trimmed_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>buf</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>scripted</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>json_writer</name></name></type> <name>jw</name> <init>= <expr><name>JSON_WRITER_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_LINE_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>line_nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>get_trimmed_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_LINE_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"object"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>jw_object_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"array"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>jw_array_begin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>pretty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"expected first line to be 'object' or 'array'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name>get_trimmed_line</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAX_LINE_LENGTH</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>verb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intmax_t</name></type> <name>i_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d_value</name></decl>;</decl_stmt>

<expr_stmt><expr><name>line_nr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>verb</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>jw_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"object-string"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_s</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_s</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>s_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"object-int"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_s</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_i</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>i_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"object-double"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_s</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_i</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_d</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>i_value</name></expr></argument>, <argument><expr><name>d_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"object-true"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_s</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_true</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"object-false"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_s</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_false</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"object-null"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_s</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_null</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"object-object"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_s</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_inline_begin_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"object-array"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_s</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_object_inline_begin_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"array-string"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_s</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>s_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"array-int"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_i</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_intmax</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>i_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"array-double"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_i</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_d</name><argument_list>(<argument><expr><name>line_nr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jw_array_double</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>, <argument><expr><name>i_value</name></expr></argument>, <argument><expr><name>d_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"array-true"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>jw_array_true</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"array-false"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>jw_array_false</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"array-null"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>jw_array_null</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"array-object"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>jw_array_inline_begin_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><literal type="string">"array-array"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>jw_array_inline_begin_array</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unrecognized token: '%s'"</literal></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jw_is_terminated</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jw</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"json not terminated: '%s'"</literal></expr></argument>, <argument><expr><name><name>jw</name><operator>.</operator><name>json</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>jw</name><operator>.</operator><name>json</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jw</name><operator>.</operator><name>json</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd__json_writer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-u"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--unit"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>unit_tests</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--pretty"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pretty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>scripted</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
