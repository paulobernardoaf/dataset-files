<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\t\helper\test-lazy-init-name-hash.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test-tool.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>single</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>multi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dump</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>perf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>analyze</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>analyze_step</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_run</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_iter</name></name></type> <name>iter_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_iter</name></name></type> <name>iter_cache</name></decl>;</decl_stmt>

<struct>struct <name>dir_entry</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>hashmap_entry</name></name></type> <name>ent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dir_entry</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>namelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>dir_entry</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>read_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>single</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>test_lazy_init_name_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nr_threads_used</name> <init>= <expr><call><name>test_lazy_init_name_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nr_threads_used</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"non-threaded code path used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<macro><name>hashmap_for_each_entry</name><argument_list>(<argument>&amp;the_index.dir_hash</argument>, <argument>&amp;iter_dir</argument>, <argument>dir</argument>,

<argument>ent</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dir %08x %7d %s\n"</literal></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>ent</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>hashmap_for_each_entry</name><argument_list>(<argument>&amp;the_index.name_hash</argument>, <argument>&amp;iter_cache</argument>, <argument>ce</argument>,

<argument>ent</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name %08x %s\n"</literal></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ent</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>time_runs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>try_threaded</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>avg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr_threads_used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>t0</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nr_threads_used</name> <operator>=</operator> <call><name>test_lazy_init_name_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><name>try_threaded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name>t2</name> <operator>-</operator> <name>t1</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>try_threaded</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>nr_threads_used</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"non-threaded code path used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nr_threads_used</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%f %f %d multi %d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>t1</name> <operator>-</operator> <name>t0</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">1000000000</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>t2</name> <operator>-</operator> <name>t1</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">1000000000</literal></expr></argument>,

<argument><expr><name><name>the_index</name><operator>.</operator><name>cache_nr</name></name></expr></argument>,

<argument><expr><name>nr_threads_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%f %f %d single\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>t1</name> <operator>-</operator> <name>t0</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">1000000000</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>t2</name> <operator>-</operator> <name>t1</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">1000000000</literal></expr></argument>,

<argument><expr><name><name>the_index</name><operator>.</operator><name>cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>avg</name> <operator>=</operator> <name>sum</name> <operator>/</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"avg %f %s\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>avg</name><operator>/</operator><literal type="number">1000000000</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>try_threaded</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"multi"</literal></expr> </then><else>: <expr><literal type="string">"single"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>avg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>analyze_run</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t1s</name></decl>, <decl><type ref="prev"/><name>t1m</name></decl>, <decl><type ref="prev"/><name>t2s</name></decl>, <decl><type ref="prev"/><name>t2m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cache_nr_limit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr_threads_used</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>read_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cache_nr_limit</name> <operator>=</operator> <name><name>the_index</name><operator>.</operator><name>cache_nr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name>analyze</name></expr>;</expr_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sum_single</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sum_multi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>avg_single</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>avg_multi</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;</operator> <name>cache_nr_limit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name>cache_nr_limit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>read_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_index</name><operator>.</operator><name>cache_nr</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>t1s</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_lazy_init_name_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2s</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_single</name> <operator>+=</operator> <operator>(</operator><name>t2s</name> <operator>-</operator> <name>t1s</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_index</name><operator>.</operator><name>cache_nr</name></name> <operator>=</operator> <name>cache_nr_limit</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_index</name><operator>.</operator><name>cache_nr</name></name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>t1m</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nr_threads_used</name> <operator>=</operator> <call><name>test_lazy_init_name_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2m</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum_multi</name> <operator>+=</operator> <operator>(</operator><name>t2m</name> <operator>-</operator> <name>t1m</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>the_index</name><operator>.</operator><name>cache_nr</name></name> <operator>=</operator> <name>cache_nr_limit</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nr_threads_used</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" [size %8d] [single %f] non-threaded code path used\n"</literal></expr></argument>,

<argument><expr><name>nr</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>t2s</name> <operator>-</operator> <name>t1s</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" [size %8d] [single %f] %c [multi %f %d]\n"</literal></expr></argument>,

<argument><expr><name>nr</name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>t2s</name> <operator>-</operator> <name>t1s</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">1000000000</literal></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>t2s</name> <operator>-</operator> <name>t1s</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>t2m</name> <operator>-</operator> <name>t1m</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'&lt;'</literal></expr> </then><else>: <expr><literal type="char">'&gt;'</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>t2m</name> <operator>-</operator> <name>t1m</name><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">1000000000</literal></expr></argument>,

<argument><expr><name>nr_threads_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>avg_single</name> <operator>=</operator> <name>sum_single</name> <operator>/</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>avg_multi</name> <operator>=</operator> <name>sum_multi</name> <operator>/</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nr_threads_used</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"avg [size %8d] [single %f]\n"</literal></expr></argument>,

<argument><expr><name>nr</name></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>avg_single</name><operator>/</operator><literal type="number">1000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"avg [size %8d] [single %f] %c [multi %f %d]\n"</literal></expr></argument>,

<argument><expr><name>nr</name></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>avg_single</name><operator>/</operator><literal type="number">1000000000</literal></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name>avg_single</name> <operator>&lt;</operator> <name>avg_multi</name></expr> ?</condition><then> <expr><literal type="char">'&lt;'</literal></expr> </then><else>: <expr><literal type="char">'&gt;'</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>avg_multi</name><operator>/</operator><literal type="number">1000000000</literal></expr></argument>,

<argument><expr><name>nr_threads_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&gt;=</operator> <name>cache_nr_limit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nr</name> <operator>+=</operator> <name>analyze_step</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd__lazy_init_name_hash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"test-tool lazy-init-name-hash -d (-s | -m)"</literal></expr>,

<expr><literal type="string">"test-tool lazy-init-name-hash -p [-c c]"</literal></expr>,

<expr><literal type="string">"test-tool lazy-init-name-hash -a a [--step s] [-c c]"</literal></expr>,

<expr><literal type="string">"test-tool lazy-init-name-hash (-s | -m) [-c c]"</literal></expr>,

<expr><literal type="string">"test-tool lazy-init-name-hash -s -m [-c c]"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="string">"single"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>single</name></expr></argument>, <argument><expr><literal type="string">"run single-threaded code"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="string">"multi"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>multi</name></expr></argument>, <argument><expr><literal type="string">"run multi-threaded code"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_INTEGER</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><literal type="string">"number of passes"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="string">"dump"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dump</name></expr></argument>, <argument><expr><literal type="string">"dump hash tables"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="string">"perf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>perf</name></expr></argument>, <argument><expr><literal type="string">"compare single vs multi"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_INTEGER</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="string">"analyze"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>analyze</name></expr></argument>, <argument><expr><literal type="string">"analyze different multi sizes"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_INTEGER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"step"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>analyze_step</name></expr></argument>, <argument><expr><literal type="string">"analyze step factor"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_END</name><argument_list>()</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>avg_single</name></decl>, <decl><type ref="prev"/><name>avg_multi</name></decl>;</decl_stmt>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name>setup_git_directory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>usage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ignore_case</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>perf</name> <operator>||</operator> <name>analyze</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot combine dump, perf, or analyze"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"count not valid with dump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>single</name> <operator>&amp;&amp;</operator> <name>multi</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot use both single and multi with dump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>single</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>multi</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"dump requires either single or multi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dump_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>perf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>analyze</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot combine dump, perf, or analyze"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>single</name> <operator>||</operator> <name>multi</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot use single or multi with perf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>avg_single</name> <operator>=</operator> <call><name>time_runs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>avg_multi</name> <operator>=</operator> <call><name>time_runs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>avg_multi</name> <operator>&gt;</operator> <name>avg_single</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"multi is slower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>analyze</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>analyze</name> <operator>&lt;</operator> <literal type="number">500</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"analyze must be at least 500"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>analyze_step</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>analyze_step</name> <operator>=</operator> <name>analyze</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>single</name> <operator>||</operator> <name>multi</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot use single or multi with analyze"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>analyze_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>single</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>multi</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"require either -s or -m or both"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>single</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>time_runs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>multi</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>time_runs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
