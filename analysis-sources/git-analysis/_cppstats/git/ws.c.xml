<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\ws.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attr.h"</cpp:file></cpp:include>

<struct><specifier>static</specifier> struct <name>whitespace_rule</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rule_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rule_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>loosens_error</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>exclude_default</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block> <decl><name><name>whitespace_rule_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"trailing-space"</literal></expr>, <expr><name>WS_TRAILING_SPACE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"space-before-tab"</literal></expr>, <expr><name>WS_SPACE_BEFORE_TAB</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"indent-with-non-tab"</literal></expr>, <expr><name>WS_INDENT_WITH_NON_TAB</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cr-at-eol"</literal></expr>, <expr><name>WS_CR_AT_EOL</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"blank-at-eol"</literal></expr>, <expr><name>WS_BLANK_AT_EOL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"blank-at-eof"</literal></expr>, <expr><name>WS_BLANK_AT_EOF</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"tab-in-indent"</literal></expr>, <expr><name>WS_TAB_IN_INDENT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><name>unsigned</name></type> <name>parse_whitespace_rule</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>rule</name> <init>= <expr><name>WS_DEFAULT_RULE</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>string</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ep</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>negated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>string</name> <operator>+</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">", \t\n\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ep</name> <operator>=</operator> <call><name>strchrnul</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ep</name> <operator>-</operator> <name>string</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>string</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>negated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>string</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>whitespace_rule_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>whitespace_rule_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rule_name</name></expr></argument>,

<argument><expr><name>string</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>negated</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rule</name> <operator>&amp;=</operator> <operator>~</operator><name><name>whitespace_rule_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rule_bits</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>rule</name> <operator>|=</operator> <name><name>whitespace_rule_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rule_bits</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"tabwidth="</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>tabwidth</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>string</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>tabwidth</name> <operator>&amp;&amp;</operator> <name>tabwidth</name> <operator>&lt;</operator> <literal type="number">0100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rule</name> <operator>&amp;=</operator> <operator>~</operator><name>WS_TAB_WIDTH_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rule</name> <operator>|=</operator> <name>tabwidth</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"tabwidth %.*s out of range"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">9</literal><operator>)</operator></expr></argument>, <argument><expr><name>string</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>string</name> <operator>=</operator> <name>ep</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>rule</name> <operator>&amp;</operator> <name>WS_TAB_IN_INDENT</name> <operator>&amp;&amp;</operator> <name>rule</name> <operator>&amp;</operator> <name>WS_INDENT_WITH_NON_TAB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot enforce both tab-in-indent and indent-with-non-tab"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rule</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>whitespace_rule</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>attr_whitespace_rule</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>attr_whitespace_rule</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>attr_whitespace_rule</name> <operator>=</operator> <call><name>attr_check_initl</name><argument_list>(<argument><expr><literal type="string">"whitespace"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>git_check_attr</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>attr_whitespace_rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>attr_whitespace_rule</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATTR_TRUE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>all_rule</name> <init>= <expr><call><name>ws_tab_width</name><argument_list>(<argument><expr><name>whitespace_rule_cfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>whitespace_rule_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>whitespace_rule_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loosens_error</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>whitespace_rule_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>exclude_default</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>all_rule</name> <operator>|=</operator> <name><name>whitespace_rule_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rule_bits</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>all_rule</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ATTR_FALSE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ws_tab_width</name><argument_list>(<argument><expr><name>whitespace_rule_cfg</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>ATTR_UNSET</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>whitespace_rule_cfg</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><call><name>parse_whitespace_rule</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>whitespace_error_string</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>ws</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ws</name> <operator>&amp;</operator> <name>WS_TRAILING_SPACE</name><operator>)</operator> <operator>==</operator> <name>WS_TRAILING_SPACE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"trailing whitespace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ws</name> <operator>&amp;</operator> <name>WS_BLANK_AT_EOL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"trailing whitespace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ws</name> <operator>&amp;</operator> <name>WS_BLANK_AT_EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>err</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"new blank line at EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ws</name> <operator>&amp;</operator> <name>WS_SPACE_BEFORE_TAB</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>err</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"space before tab in indent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ws</name> <operator>&amp;</operator> <name>WS_INDENT_WITH_NON_TAB</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>err</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"indent with spaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ws</name> <operator>&amp;</operator> <name>WS_TAB_IN_INDENT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>err</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"tab in indent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>ws_check_emit_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>,

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trailing_whitespace</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trailing_newline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trailing_carriage_return</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>trailing_newline</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ws_rule</name> <operator>&amp;</operator> <name>WS_CR_AT_EOL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>line</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>trailing_carriage_return</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ws_rule</name> <operator>&amp;</operator> <name>WS_BLANK_AT_EOL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>trailing_whitespace</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>WS_BLANK_AT_EOL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trailing_whitespace</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>trailing_whitespace</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>trailing_whitespace</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ws_rule</name> <operator>&amp;</operator> <name>WS_SPACE_BEFORE_TAB</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>written</name> <operator>&lt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>WS_SPACE_BEFORE_TAB</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>written</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ws_rule</name> <operator>&amp;</operator> <name>WS_TAB_IN_INDENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>WS_TAB_IN_INDENT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>written</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>written</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>written</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ws_rule</name> <operator>&amp;</operator> <name>WS_INDENT_WITH_NON_TAB</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>i</name> <operator>-</operator> <name>written</name> <operator>&gt;=</operator> <call><name>ws_tab_width</name><argument_list>(<argument><expr><name>ws_rule</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>|=</operator> <name>WS_INDENT_WITH_NON_TAB</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>written</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>written</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>written</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>trailing_whitespace</name> <operator>-</operator> <name>written</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>set</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>written</name></expr></argument>,

<argument><expr><name>trailing_whitespace</name> <operator>-</operator> <name>written</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trailing_whitespace</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>ws</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>line</name> <operator>+</operator> <name>trailing_whitespace</name></expr></argument>,

<argument><expr><name>len</name> <operator>-</operator> <name>trailing_whitespace</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trailing_carriage_return</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>trailing_newline</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ws_check_emit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>,

<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>set</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ws</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>ws_check_emit_1</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>set</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><name>ws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>ws_check</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ws_check_emit_1</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ws_rule</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ws_blank_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>line</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ws_fix_copy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ws_rule</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>add_nl_to_tail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>add_cr_to_tail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fixed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_tab_in_indent</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_space_in_indent</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_fix_leading_space</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ws_rule</name> <operator>&amp;</operator> <name>WS_BLANK_AT_EOL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add_nl_to_tail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>src</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>add_cr_to_tail</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>ws_rule</name> <operator>&amp;</operator> <name>WS_CR_AT_EOL</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>fixed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_tab_in_indent</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ws_rule</name> <operator>&amp;</operator> <name>WS_SPACE_BEFORE_TAB</name><operator>)</operator> <operator>&amp;&amp;</operator>

<literal type="number">0</literal> <operator>&lt;=</operator> <name>last_space_in_indent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_fix_leading_space</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last_space_in_indent</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ws_rule</name> <operator>&amp;</operator> <name>WS_INDENT_WITH_NON_TAB</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>ws_tab_width</name><argument_list>(<argument><expr><name>ws_rule</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>i</name> <operator>-</operator> <name>last_tab_in_indent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>need_fix_leading_space</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>need_fix_leading_space</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>consecutive_spaces</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name>last_tab_in_indent</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ws_rule</name> <operator>&amp;</operator> <name>WS_INDENT_WITH_NON_TAB</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last_tab_in_indent</name> <operator>&lt;</operator> <name>last_space_in_indent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>last_space_in_indent</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>last_tab_in_indent</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>consecutive_spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>consecutive_spaces</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>consecutive_spaces</name> <operator>==</operator> <call><name>ws_tab_width</name><argument_list>(<argument><expr><name>ws_rule</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>consecutive_spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>consecutive_spaces</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fixed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>ws_rule</name> <operator>&amp;</operator> <name>WS_TAB_IN_INDENT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>last_tab_in_indent</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name>last_tab_in_indent</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>(</operator><name><name>dst</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>%</operator> <call><name>ws_tab_width</name><argument_list>(<argument><expr><name>ws_rule</name></expr></argument>)</argument_list></call></expr>)</condition>;</do></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fixed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>add_cr_to_tail</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>add_nl_to_tail</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fixed</name> <operator>&amp;&amp;</operator> <name>error_count</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>error_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
