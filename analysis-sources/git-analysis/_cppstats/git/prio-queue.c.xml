<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\prio-queue.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prio-queue.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prio_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name><name>queue</name><operator>-&gt;</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>cb_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ctr</name> <operator>-</operator> <name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ctr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>cmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prio_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>prio_queue_reverse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prio_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>compare</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"prio_queue_reverse() on non-LIFO queue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>j</name> <operator>=</operator> <operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>clear_prio_queue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prio_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>insertion_ctr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>prio_queue_put</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prio_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thing</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ix</name></decl>, <decl><type ref="prev"/><name>parent</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>queue</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>ctr</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>insertion_ctr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>thing</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>queue</name><operator>-&gt;</operator><name>compare</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>ix</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ix</name></expr>;</condition> <incr><expr><name>ix</name> <operator>=</operator> <name>parent</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <operator>(</operator><name>ix</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>prio_queue_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prio_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ix</name></decl>, <decl><type ref="prev"/><name>child</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>queue</name><operator>-&gt;</operator><name>compare</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><operator>--</operator><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ix</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>queue</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>ix</name> <operator>=</operator> <name>child</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>child</name> <operator>=</operator> <name>ix</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>child</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>queue</name><operator>-&gt;</operator><name>nr</name></name> <operator>&amp;&amp;</operator>

<call><name>compare</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>child</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>child</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>compare</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>queue</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>prio_queue_peek</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>prio_queue</name></name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>queue</name><operator>-&gt;</operator><name>compare</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><name><name>queue</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>queue</name><operator>-&gt;</operator><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>;</return>

</block_content>}</block></function>

</unit>
