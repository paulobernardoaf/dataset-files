<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\refspec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refspec.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>refspec_item</name></name></type> <name>s_tag_refspec</name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>,

<expr><literal type="string">"refs/tags/*"</literal></expr>,

<expr><literal type="string">"refs/tags/*"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>refspec_item</name></name> <modifier>*</modifier></type><name>tag_refspec</name> <init>= <expr><operator>&amp;</operator><name>s_tag_refspec</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_refspec</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refspec_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refspec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fetch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>llen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_glob</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lhs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>is_glob</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lhs</name> <operator>=</operator> <name>refspec</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>lhs</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>force</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lhs</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fetch</name> <operator>&amp;&amp;</operator> <name>rhs</name> <operator>==</operator> <name>lhs</name> <operator>&amp;&amp;</operator> <name><name>rhs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>matching</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rhs</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>rlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>++</operator><name>rhs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>is_glob</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;=</operator> <name>rlen</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <call><name>xstrndup</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>dst</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>llen</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>rhs</name></expr> ?</condition><then> <expr><operator>(</operator><name>rhs</name> <operator>-</operator> <name>lhs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;=</operator> <name>llen</name> <operator>&amp;&amp;</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><name>llen</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rhs</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_glob</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>rhs</name> <operator>&amp;&amp;</operator> <name>fetch</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>is_glob</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rhs</name> <operator>&amp;&amp;</operator> <name>is_glob</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <name>is_glob</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>xstrndup</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>REFNAME_ALLOW_ONELEVEL</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>is_glob</name></expr> ?</condition><then> <expr><name>REFNAME_REFSPEC_PATTERN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fetch</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>unused</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>item</name><operator>-&gt;</operator><name>src</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>llen</name> <operator>==</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>get_oid_hex</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unused</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>exact_sha1</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>check_refname_format</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>dst</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>item</name><operator>-&gt;</operator><name>dst</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>check_refname_format</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>item</name><operator>-&gt;</operator><name>src</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>is_glob</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_refname_format</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>dst</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_refname_format</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><name><name>item</name><operator>-&gt;</operator><name>dst</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_refname_format</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>refspec_item_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refspec_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refspec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fetch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>parse_refspec</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>refspec</name></expr></argument>, <argument><expr><name>fetch</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>refspec_item_init_or_die</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refspec_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refspec</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>fetch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>refspec_item_init</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>refspec</name></expr></argument>, <argument><expr><name>fetch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid refspec '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>refspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>refspec_item_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refspec_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>src</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>force</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>matching</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>exact_sha1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>refspec_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fetch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>rs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>fetch</name></name> <operator>=</operator> <name>fetch</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>refspec_append</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refspec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>refspec_item</name></name></type> <name>item</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>refspec_item_init_or_die</name><argument_list>(<argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><name>refspec</name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>fetch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>rs</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>raw_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>raw_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>raw</name><index>[<expr><name><name>rs</name><operator>-&gt;</operator><name>raw_nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>refspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>refspec_appendn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>refspecs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>refspec_append</name><argument_list>(<argument><expr><name>rs</name></expr></argument>, <argument><expr><name><name>refspecs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>refspec_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>refspec_item_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>raw_nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>rs</name><operator>-&gt;</operator><name>raw</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>raw_alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>raw_nr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>fetch</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>valid_fetch_refspec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fetch_refspec_str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>refspec_item</name></name></type> <name>refspec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>refspec_item_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refspec</name></expr></argument>, <argument><expr><name>fetch_refspec_str</name></expr></argument>, <argument><expr><name>REFSPEC_FETCH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>refspec_item_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>refspec_ref_prefixes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>argv_array</name></name> <modifier>*</modifier></type><name>ref_prefixes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rs</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>refspec_item</name></name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>exact_sha1</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rs</name><operator>-&gt;</operator><name>fetch</name></name> <operator>==</operator> <name>REFSPEC_FETCH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>src</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>dst</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>dst</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>src</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>item</name><operator>-&gt;</operator><name>exact_sha1</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>src</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>pattern</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>glob</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><name>ref_prefixes</name></expr></argument>, <argument><expr><literal type="string">"%.*s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>glob</name> <operator>-</operator> <name>prefix</name><operator>)</operator></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>expand_ref_prefix</name><argument_list>(<argument><expr><name>ref_prefixes</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
