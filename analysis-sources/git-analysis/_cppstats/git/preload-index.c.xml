<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\preload-index.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pathspec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fsmonitor.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread-utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PARALLEL</name></cpp:macro> <cpp:value>(20)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THREAD_COST</name></cpp:macro> <cpp:value>(500)</cpp:value></cpp:define>

<struct>struct <name>progress_data</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>thread_data</name> <block>{

<decl_stmt><decl><type><name>pthread_t</name></type> <name>pthread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pathspec</name></name></type> <name>pathspec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>progress_data</name></name> <modifier>*</modifier></type><name>progress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>nr</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>preload_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>last_nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cep</name> <init>= <expr><name><name>index</name><operator>-&gt;</operator><name>cache</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_def</name></name></type> <name>cache</name> <init>= <expr><name>CACHE_DEF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nr</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_nr</name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><operator>*</operator><name>cep</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISGITLINK</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_uptodate</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_FSMONITOR_VALID</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>progress</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>nr</name> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>progress_data</name></name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>progress</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pd</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pd</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <name>last_nr</name> <operator>-</operator> <name>nr</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pd</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_nr</name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ce_path_match</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>threaded_has_symlink_leading_path</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>lstat</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ie_match_stat</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>CE_MATCH_RACY_IS_DIRTY</name><operator>|</operator><name>CE_MATCH_IGNORE_FSMONITOR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ce_mark_uptodate</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mark_fsmonitor_valid</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>nr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>progress</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>progress_data</name></name> <modifier>*</modifier></type><name>pd</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>progress</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pd</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>pd</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name><name>pd</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name>last_nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pd</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cache_def_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>preload_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>index</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>pathspec</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>refresh_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>threads</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>work</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>thread_data</name></name></type> <name><name>data</name><index>[<expr><name>MAX_PARALLEL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>progress_data</name></name></type> <name>pd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HAVE_THREADS</name> <operator>||</operator> <operator>!</operator><name>core_preload_index</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>threads</name> <operator>=</operator> <name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name> <operator>/</operator> <name>THREAD_COST</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>threads</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>git_env_bool</name><argument_list>(<argument><expr><literal type="string">"GIT_TEST_PRELOAD_INDEX"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>threads</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>threads</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>trace_performance_enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>threads</name> <operator>&gt;</operator> <name>MAX_PARALLEL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>threads</name> <operator>=</operator> <name>MAX_PARALLEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>work</name> <operator>=</operator> <call><name>DIV_ROUND_UP</name><argument_list>(<argument><expr><name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>, <argument><expr><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>refresh_flags</name> <operator>&amp;</operator> <name>REFRESH_PROGRESS</name> <operator>&amp;&amp;</operator> <call><name>isatty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pd</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Refreshing index"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>index</name><operator>-&gt;</operator><name>cache_nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pd</name><operator>.</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>threads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>data</name><operator>+</operator><name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pathspec</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>copy_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>, <argument><expr><name>pathspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name>work</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pd</name><operator>.</operator><name>progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <operator>&amp;</operator><name>pd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>work</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pthread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>preload_thread</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to create threaded lstat: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>threads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>thread_data</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>data</name><operator>+</operator><name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pthread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to join threaded lstat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pd</name><operator>.</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace_performance_leave</name><argument_list>(<argument><expr><literal type="string">"preload index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>repo_read_index_preload</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>pathspec</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>refresh_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><call><name>repo_read_index</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>preload_index</name><argument_list>(<argument><expr><name><name>repo</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>pathspec</name></expr></argument>, <argument><expr><name>refresh_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

</unit>
