<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\mem-pool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem-pool.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_GROWTH_SIZE</name></cpp:macro> <cpp:value>1024*1024 - sizeof(struct mp_block);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>mp_block</name></name> <modifier>*</modifier></type><name>mem_pool_alloc_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem_pool</name></name> <modifier>*</modifier></type><name>mem_pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>block_alloc</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mp_block</name></name> <modifier>*</modifier></type><name>insert_after</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mp_block</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mem_pool</name><operator>-&gt;</operator><name>pool_alloc</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>mp_block</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>block_alloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>xmalloc</name><argument_list>(<argument><expr><call><name>st_add</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mp_block</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>block_alloc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_free</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next_free</name></name> <operator>+</operator> <name>block_alloc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>insert_after</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_block</name></name> <operator>=</operator> <name><name>insert_after</name><operator>-&gt;</operator><name>next_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>insert_after</name><operator>-&gt;</operator><name>next_block</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_block</name></name> <operator>=</operator> <name><name>mem_pool</name><operator>-&gt;</operator><name>mp_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mem_pool</name><operator>-&gt;</operator><name>mp_block</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mem_pool_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem_pool</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>mem_pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>initial_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mem_pool</name></name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>mem_pool</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>block_alloc</name></name> <operator>=</operator> <name>BLOCK_GROWTH_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>initial_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mem_pool_alloc_block</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>initial_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>mem_pool</name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mem_pool_discard</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem_pool</name></name> <modifier>*</modifier></type><name>mem_pool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>invalidate_memory</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mp_block</name></name> <modifier>*</modifier></type><name>block</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>block_to_free</name></decl>;</decl_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>mem_pool</name><operator>-&gt;</operator><name>mp_block</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>block</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>block_to_free</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>next_block</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>invalidate_memory</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>block_to_free</name><operator>-&gt;</operator><name>space</name></name></expr></argument>, <argument><expr><literal type="number">0xDD</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>block_to_free</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>block_to_free</name><operator>-&gt;</operator><name>space</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>block_to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mem_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>mem_pool_alloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem_pool</name></name> <modifier>*</modifier></type><name>mem_pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mp_block</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uintmax_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uintmax_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uintmax_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mem_pool</name><operator>-&gt;</operator><name>mp_block</name></name> <operator>&amp;&amp;</operator>

<name><name>mem_pool</name><operator>-&gt;</operator><name>mp_block</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>mem_pool</name><operator>-&gt;</operator><name>mp_block</name><operator>-&gt;</operator><name>next_free</name></name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mem_pool</name><operator>-&gt;</operator><name>mp_block</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <operator>(</operator><name><name>mem_pool</name><operator>-&gt;</operator><name>block_alloc</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>mem_pool_alloc_block</name><argument_list>(<argument><expr><name>mem_pool</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>mem_pool</name><operator>-&gt;</operator><name>mp_block</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mem_pool_alloc_block</name><argument_list>(<argument><expr><name>mem_pool</name></expr></argument>, <argument><expr><name><name>mem_pool</name><operator>-&gt;</operator><name>block_alloc</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next_free</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_free</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>mem_pool_calloc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem_pool</name></name> <modifier>*</modifier></type><name>mem_pool</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>st_mult</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>mem_pool_alloc</name><argument_list>(<argument><expr><name>mem_pool</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>mem_pool_contains</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem_pool</name></name> <modifier>*</modifier></type><name>mem_pool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mp_block</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>mem_pool</name><operator>-&gt;</operator><name>mp_block</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next_block</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mem</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>space</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>mem</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mem_pool_combine</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>mem_pool</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mem_pool</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mp_block</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>mp_block</name></name> <operator>&amp;&amp;</operator> <name><name>src</name><operator>-&gt;</operator><name>mp_block</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>mp_block</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>next_block</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next_block</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_block</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>mp_block</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>mp_block</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>mp_block</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>mp_block</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>pool_alloc</name></name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>pool_alloc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>pool_alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><operator>-&gt;</operator><name>mp_block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
