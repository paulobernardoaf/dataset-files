<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\list-objects-filter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tag.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree-walk.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects-filter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"list-objects-filter-options.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oidmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"oidset.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_SHOWN_BUT_REVISIT</name></cpp:macro> <cpp:value>(1&lt;&lt;21)</cpp:value></cpp:define>

<struct>struct <name>subfilter</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name></type> <name>seen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name></type> <name>omits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>skip_tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>is_skipping_tree</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>filter</name> <block>{

<function_decl><type><name><name>enum</name> <name>list_objects_filter_result</name></name></type> (<modifier>*</modifier><name>filter_object_fn</name>)<parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>list_objects_filter_situation</name></name></type> <name>filter_situation</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>omits</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>finalize_omits_fn</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>omits</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free_fn</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>omits</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>list_objects_filter_result</name></name></type> <name>filter_blobs_none</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>list_objects_filter_situation</name></name></type> <name>filter_situation</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>omits</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>filter_situation</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown filter_situation: %d"</literal></expr></argument>, <argument><expr><name>filter_situation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>LOFS_BEGIN_TREE</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LOFR_MARK_SEEN</name> <operator>|</operator> <name>LOFR_DO_SHOW</name></expr>;</return>

<case>case <expr><name>LOFS_END_TREE</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LOFR_ZERO</name></expr>;</return>

<case>case <expr><name>LOFS_BLOB</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SEEN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>omits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name>omits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>LOFR_MARK_SEEN</name></expr>;</return> 

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_blobs_none__init</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter_options</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_object_fn</name></name> <operator>=</operator> <name>filter_blobs_none</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>free_fn</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>filter_trees_depth_data</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>oidmap</name></name></type> <name>seen_at_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>exclude_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>current_depth</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>seen_map_entry</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>oidmap_entry</name></name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>depth</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_trees_update_omits</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>omits</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>include_it</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>omits</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>include_it</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>oidset_remove</name><argument_list>(<argument><expr><name>omits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name>omits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>list_objects_filter_result</name></name></type> <name>filter_trees_depth</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>list_objects_filter_situation</name></name></type> <name>filter_situation</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>omits</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>filter_trees_depth_data</name></name> <modifier>*</modifier></type><name>filter_data</name> <init>= <expr><name>filter_data_</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>seen_map_entry</name></name> <modifier>*</modifier></type><name>seen_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>include_it</name> <init>= <expr><name><name>filter_data</name><operator>-&gt;</operator><name>current_depth</name></name> <operator>&lt;</operator>

<name><name>filter_data</name><operator>-&gt;</operator><name>exclude_depth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filter_res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>already_seen</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>filter_situation</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown filter_situation: %d"</literal></expr></argument>, <argument><expr><name>filter_situation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>LOFS_END_TREE</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter_data</name><operator>-&gt;</operator><name>current_depth</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>LOFR_ZERO</name></expr>;</return>

<case>case <expr><name>LOFS_BLOB</name></expr>:</case>

<expr_stmt><expr><call><name>filter_trees_update_omits</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>omits</name></expr></argument>, <argument><expr><name>include_it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>include_it</name></expr> ?</condition><then> <expr><name>LOFR_MARK_SEEN</name> <operator>|</operator> <name>LOFR_DO_SHOW</name></expr> </then><else>: <expr><name>LOFR_ZERO</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>LOFS_BEGIN_TREE</name></expr>:</case>

<expr_stmt><expr><name>seen_info</name> <operator>=</operator> <call><name>oidmap_get</name><argument_list>(

<argument><expr><operator>&amp;</operator><name><name>filter_data</name><operator>-&gt;</operator><name>seen_at_depth</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>seen_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>seen_info</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>seen_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>seen_info</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>seen_info</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>filter_data</name><operator>-&gt;</operator><name>current_depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidmap_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filter_data</name><operator>-&gt;</operator><name>seen_at_depth</name></name></expr></argument>, <argument><expr><name>seen_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>already_seen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>already_seen</name> <operator>=</operator>

<name><name>filter_data</name><operator>-&gt;</operator><name>current_depth</name></name> <operator>&gt;=</operator> <name><name>seen_info</name><operator>-&gt;</operator><name>depth</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>already_seen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filter_res</name> <operator>=</operator> <name>LOFR_SKIP_TREE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>been_omitted</name> <init>= <expr><call><name>filter_trees_update_omits</name><argument_list>(

<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>omits</name></expr></argument>, <argument><expr><name>include_it</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>seen_info</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>filter_data</name><operator>-&gt;</operator><name>current_depth</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>include_it</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filter_res</name> <operator>=</operator> <name>LOFR_DO_SHOW</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>omits</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>been_omitted</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filter_res</name> <operator>=</operator> <name>LOFR_ZERO</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>filter_res</name> <operator>=</operator> <name>LOFR_SKIP_TREE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>filter_data</name><operator>-&gt;</operator><name>current_depth</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>filter_res</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_trees_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>filter_trees_depth_data</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>filter_data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>d</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oidmap_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>seen_at_depth</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_trees_depth__init</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter_options</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>filter_trees_depth_data</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oidmap_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>seen_at_depth</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>exclude_depth</name></name> <operator>=</operator> <name><name>filter_options</name><operator>-&gt;</operator><name>tree_exclude_depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>current_depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_data</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_object_fn</name></name> <operator>=</operator> <name>filter_trees_depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>free_fn</name></name> <operator>=</operator> <name>filter_trees_free</name></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>filter_blobs_limit_data</name> <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>max_bytes</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>list_objects_filter_result</name></name></type> <name>filter_blobs_limit</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>list_objects_filter_situation</name></name></type> <name>filter_situation</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>omits</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>filter_blobs_limit_data</name></name> <modifier>*</modifier></type><name>filter_data</name> <init>= <expr><name>filter_data_</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>object_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>t</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>filter_situation</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown filter_situation: %d"</literal></expr></argument>, <argument><expr><name>filter_situation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>LOFS_BEGIN_TREE</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LOFR_MARK_SEEN</name> <operator>|</operator> <name>LOFR_DO_SHOW</name></expr>;</return>

<case>case <expr><name>LOFS_END_TREE</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LOFR_ZERO</name></expr>;</return>

<case>case <expr><name>LOFS_BLOB</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SEEN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>oid_object_info</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <name>OBJ_BLOB</name></expr>)</condition> <block>{<block_content> 

<goto>goto <name>include_it</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>object_length</name> <operator>&lt;</operator> <name><name>filter_data</name><operator>-&gt;</operator><name>max_bytes</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>include_it</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>omits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name>omits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>LOFR_MARK_SEEN</name></expr>;</return> 

</block_content>}</block></switch>

<label><name>include_it</name>:</label>

<if_stmt><if>if <condition>(<expr><name>omits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidset_remove</name><argument_list>(<argument><expr><name>omits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>LOFR_MARK_SEEN</name> <operator>|</operator> <name>LOFR_DO_SHOW</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_blobs_limit__init</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter_options</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>filter_blobs_limit_data</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>max_bytes</name></name> <operator>=</operator> <name><name>filter_options</name><operator>-&gt;</operator><name>blob_limit_value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_data</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_object_fn</name></name> <operator>=</operator> <name>filter_blobs_limit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>free_fn</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>frame</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>pattern_match_result</name></name></type> <name>default_match</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>child_prov_omit</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>filter_sparse_data</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>pattern_list</name></name></type> <name>pl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>frame</name></name> <modifier>*</modifier></type><name>array_frame</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>list_objects_filter_result</name></name></type> <name>filter_sparse</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>list_objects_filter_situation</name></name></type> <name>filter_situation</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>omits</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>filter_sparse_data</name></name> <modifier>*</modifier></type><name>filter_data</name> <init>= <expr><name>filter_data_</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dtype</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>frame</name></name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>pattern_match_result</name></name></type> <name>match</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>filter_situation</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown filter_situation: %d"</literal></expr></argument>, <argument><expr><name>filter_situation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>LOFS_BEGIN_TREE</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dtype</name> <operator>=</operator> <name>DT_DIR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>path_matches_pattern_list</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter_data</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>UNDECIDED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name><name>filter_data</name><operator>-&gt;</operator><name>array_frame</name><index>[<expr><name><name>filter_data</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>default_match</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>filter_data</name><operator>-&gt;</operator><name>array_frame</name></name></expr></argument>, <argument><expr><name><name>filter_data</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>filter_data</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter_data</name><operator>-&gt;</operator><name>array_frame</name><index>[<expr><name><name>filter_data</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>default_match</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter_data</name><operator>-&gt;</operator><name>array_frame</name><index>[<expr><name><name>filter_data</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>child_prov_omit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter_data</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FILTER_SHOWN_BUT_REVISIT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LOFR_ZERO</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FILTER_SHOWN_BUT_REVISIT</name></expr>;</expr_stmt>

<return>return <expr><name>LOFR_DO_SHOW</name></expr>;</return>

<case>case <expr><name>LOFS_END_TREE</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>filter_data</name><operator>-&gt;</operator><name>nr</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>filter_data</name><operator>-&gt;</operator><name>array_frame</name><index>[<expr><operator>--</operator><name><name>filter_data</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter_data</name><operator>-&gt;</operator><name>array_frame</name><index>[<expr><name><name>filter_data</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>child_prov_omit</name> <operator>|=</operator>

<name><name>frame</name><operator>-&gt;</operator><name>child_prov_omit</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>child_prov_omit</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LOFR_MARK_SEEN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>LOFR_ZERO</name></expr>;</return>

<case>case <expr><name>LOFS_BLOB</name></expr>:</case>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_BLOB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SEEN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>filter_data</name><operator>-&gt;</operator><name>array_frame</name><index>[<expr><name><name>filter_data</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dtype</name> <operator>=</operator> <name>DT_REG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>path_matches_pattern_list</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter_data</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>,

<argument><expr><name><name>r</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>UNDECIDED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>default_match</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>MATCHED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>omits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidset_remove</name><argument_list>(<argument><expr><name>omits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>LOFR_MARK_SEEN</name> <operator>|</operator> <name>LOFR_DO_SHOW</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>omits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name>omits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>child_prov_omit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>LOFR_ZERO</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_sparse_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>filter_sparse_data</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>filter_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>array_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_sparse_oid__init</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter_options</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>filter_sparse_data</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_context</name></name></type> <name>oc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>sparse_oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid_with_context</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>,

<argument><expr><name><name>filter_options</name><operator>-&gt;</operator><name>sparse_oid_name</name></name></expr></argument>,

<argument><expr><name>GET_OID_BLOB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparse_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to access sparse blob in '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>filter_options</name><operator>-&gt;</operator><name>sparse_oid_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>add_patterns_from_blob_to_list</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sparse_oid</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>pl</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to parse sparse filter data in %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sparse_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>array_frame</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>array_frame</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>default_match</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>array_frame</name><index>[<expr><name><name>d</name><operator>-&gt;</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>child_prov_omit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_data</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_object_fn</name></name> <operator>=</operator> <name>filter_sparse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>free_fn</name></name> <operator>=</operator> <name>filter_sparse_free</name></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>combine_filter_data</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>subfilter</name></name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>nr</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>list_objects_filter_result</name></name></type> <name>process_subfilter</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>list_objects_filter_situation</name></name></type> <name>filter_situation</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>subfilter</name></name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>list_objects_filter_result</name></name></type> <name>result</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>is_skipping_tree</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>filter_situation</name> <operator>==</operator> <name>LOFS_END_TREE</name> <operator>&amp;&amp;</operator>

<call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>skip_tree</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>is_skipping_tree</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>LOFR_ZERO</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oidset_contains</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>seen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LOFR_ZERO</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>list_objects_filter__filter_object</name><argument_list>(

<argument><expr><name>r</name></expr></argument>, <argument><expr><name>filter_situation</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;</operator> <name>LOFR_MARK_SEEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>seen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;</operator> <name>LOFR_SKIP_TREE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>is_skipping_tree</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>skip_tree</name></name> <operator>=</operator> <name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>list_objects_filter_result</name></name></type> <name>filter_combine</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>list_objects_filter_situation</name></name></type> <name>filter_situation</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>omits</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>combine_filter_data</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>filter_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>list_objects_filter_result</name></name></type> <name>combined_result</name> <init>=

<expr><name>LOFR_DO_SHOW</name> <operator>|</operator> <name>LOFR_MARK_SEEN</name> <operator>|</operator> <name>LOFR_SKIP_TREE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sub</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sub</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sub</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>sub</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>list_objects_filter_result</name></name></type> <name>sub_result</name> <init>= <expr><call><name>process_subfilter</name><argument_list>(

<argument><expr><name>r</name></expr></argument>, <argument><expr><name>filter_situation</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>sub</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sub_result</name> <operator>&amp;</operator> <name>LOFR_DO_SHOW</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>combined_result</name> <operator>&amp;=</operator> <operator>~</operator><name>LOFR_DO_SHOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sub_result</name> <operator>&amp;</operator> <name>LOFR_MARK_SEEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>combined_result</name> <operator>&amp;=</operator> <operator>~</operator><name>LOFR_MARK_SEEN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>d</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>sub</name></expr>]</index></name><operator>.</operator><name>is_skipping_tree</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>combined_result</name> <operator>&amp;=</operator> <operator>~</operator><name>LOFR_SKIP_TREE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>combined_result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_combine__free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>combine_filter_data</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>filter_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sub</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sub</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sub</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>sub</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>list_objects_filter__free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>sub</name></expr>]</index></name><operator>.</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidset_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>sub</name></expr>]</index></name><operator>.</operator><name>seen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>sub</name></expr>]</index></name><operator>.</operator><name><name>omits</name><operator>.</operator><name>set</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"expected oidset to be cleared already"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>sub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_all</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oidset_iter</name></name></type> <name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>src_oid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oidset_iter_init</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>src_oid</name> <operator>=</operator> <call><name>oidset_iter_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_combine__finalize_omits</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>omits</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filter_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>combine_filter_data</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name>filter_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sub</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sub</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sub</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>sub</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>add_all</name><argument_list>(<argument><expr><name>omits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>sub</name></expr>]</index></name><operator>.</operator><name>omits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidset_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>sub</name></expr>]</index></name><operator>.</operator><name>omits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_combine__init</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter_options</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>filter</name></name><modifier>*</modifier></type> <name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>combine_filter_data</name></name> <modifier>*</modifier></type><name>d</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>sub</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name><name>filter_options</name><operator>-&gt;</operator><name>sub_nr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>sub</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name><name>d</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>sub</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sub</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sub</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>sub</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>sub</name></expr>]</index></name><operator>.</operator><name>filter</name> <operator>=</operator> <call><name>list_objects_filter__init</name><argument_list>(

<argument><expr><ternary><condition><expr><name><name>filter</name><operator>-&gt;</operator><name>omits</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>sub</name></expr>]</index></name><operator>.</operator><name>omits</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>filter_options</name><operator>-&gt;</operator><name>sub</name><index>[<expr><name>sub</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_data</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_object_fn</name></name> <operator>=</operator> <name>filter_combine</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>free_fn</name></name> <operator>=</operator> <name>filter_combine__free</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>finalize_omits_fn</name></name> <operator>=</operator> <name>filter_combine__finalize_omits</name></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>filter_init_fn</name>)<parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter_options</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>filter_init_fn</name></type> <name><name>s_filters</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>NULL</name></expr>,

<expr><name>filter_blobs_none__init</name></expr>,

<expr><name>filter_blobs_limit__init</name></expr>,

<expr><name>filter_trees_depth__init</name></expr>,

<expr><name>filter_sparse_oid__init</name></expr>,

<expr><name>filter_combine__init</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>list_objects_filter__init</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>omitted</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>list_objects_filter_options</name></name> <modifier>*</modifier></type><name>filter_options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_init_fn</name></type> <name>init_fn</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>s_filters</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s_filters</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>==</operator> <name>LOFC__COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter_options</name><operator>-&gt;</operator><name>choice</name></name> <operator>&gt;=</operator> <name>LOFC__COUNT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"invalid list-objects filter choice: %d"</literal></expr></argument>,

<argument><expr><name><name>filter_options</name><operator>-&gt;</operator><name>choice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>init_fn</name> <operator>=</operator> <name><name>s_filters</name><index>[<expr><name><name>filter_options</name><operator>-&gt;</operator><name>choice</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init_fn</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>omits</name></name> <operator>=</operator> <name>omitted</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_fn</name><argument_list>(<argument><expr><name>filter_options</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>filter</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>list_objects_filter_result</name></name></type> <name>list_objects_filter__filter_object</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>list_objects_filter_situation</name></name></type> <name>filter_situation</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>filter</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>obj</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>NOT_USER_GIVEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>filter</name><operator>-&gt;</operator><name>filter_object_fn</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>filter_situation</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>,

<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,

<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>omits</name></name></expr></argument>,

<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_data</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>filter_situation</name> <operator>==</operator> <name>LOFS_END_TREE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>LOFR_MARK_SEEN</name> <operator>|</operator> <name>LOFR_DO_SHOW</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>list_objects_filter__free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filter</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>finalize_omits_fn</name></name> <operator>&amp;&amp;</operator> <name><name>filter</name><operator>-&gt;</operator><name>omits</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>filter</name><operator>-&gt;</operator><name>finalize_omits_fn</name></name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>omits</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>filter</name><operator>-&gt;</operator><name>free_fn</name></name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>filter_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
