<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\ewah\ewok_rlw.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ewok.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLW_RUNNING_BITS</name></cpp:macro> <cpp:value>(sizeof(eword_t) * 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLW_LITERAL_BITS</name></cpp:macro> <cpp:value>(sizeof(eword_t) * 8 - 1 - RLW_RUNNING_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLW_LARGEST_RUNNING_COUNT</name></cpp:macro> <cpp:value>(((eword_t)1 &lt;&lt; RLW_RUNNING_BITS) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLW_LARGEST_LITERAL_COUNT</name></cpp:macro> <cpp:value>(((eword_t)1 &lt;&lt; RLW_LITERAL_BITS) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLW_LARGEST_RUNNING_COUNT_SHIFT</name></cpp:macro> <cpp:value>(RLW_LARGEST_RUNNING_COUNT &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLW_RUNNING_LEN_PLUS_BIT</name></cpp:macro> <cpp:value>(((eword_t)1 &lt;&lt; (RLW_RUNNING_BITS + 1)) - 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>rlw_get_run_bit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>eword_t</name> <modifier>*</modifier></type><name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>*</operator><name>word</name> <operator>&amp;</operator> <operator>(</operator><name>eword_t</name><operator>)</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rlw_set_run_bit</name><parameter_list>(<parameter><decl><type><name>eword_t</name> <modifier>*</modifier></type><name>word</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>word</name> <operator>|=</operator> <operator>(</operator><name>eword_t</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>word</name> <operator>&amp;=</operator> <operator>(</operator><name>eword_t</name><operator>)</operator><operator>(</operator><operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rlw_xor_run_bit</name><parameter_list>(<parameter><decl><type><name>eword_t</name> <modifier>*</modifier></type><name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>word</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>word</name> <operator>&amp;=</operator> <operator>(</operator><name>eword_t</name><operator>)</operator><operator>(</operator><operator>~</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>word</name> <operator>|=</operator> <operator>(</operator><name>eword_t</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rlw_set_running_len</name><parameter_list>(<parameter><decl><type><name>eword_t</name> <modifier>*</modifier></type><name>word</name></decl></parameter>, <parameter><decl><type><name>eword_t</name></type> <name>l</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>word</name> <operator>|=</operator> <name>RLW_LARGEST_RUNNING_COUNT_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>word</name> <operator>&amp;=</operator> <operator>(</operator><name>l</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>~</operator><name>RLW_LARGEST_RUNNING_COUNT_SHIFT</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>eword_t</name></type> <name>rlw_get_running_len</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>eword_t</name> <modifier>*</modifier></type><name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>*</operator><name>word</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>RLW_LARGEST_RUNNING_COUNT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>eword_t</name></type> <name>rlw_get_literal_words</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>eword_t</name> <modifier>*</modifier></type><name>word</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>*</operator><name>word</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>RLW_RUNNING_BITS</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rlw_set_literal_words</name><parameter_list>(<parameter><decl><type><name>eword_t</name> <modifier>*</modifier></type><name>word</name></decl></parameter>, <parameter><decl><type><name>eword_t</name></type> <name>l</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>word</name> <operator>|=</operator> <operator>~</operator><name>RLW_RUNNING_LEN_PLUS_BIT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>word</name> <operator>&amp;=</operator> <operator>(</operator><name>l</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>RLW_RUNNING_BITS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <name>RLW_RUNNING_LEN_PLUS_BIT</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>eword_t</name></type> <name>rlw_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>eword_t</name> <modifier>*</modifier></type><name>self</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rlw_get_running_len</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>rlw_iterator</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>eword_t</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>pointer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>literal_word_start</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>eword_t</name> <modifier>*</modifier></type><name>word</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>literal_words</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>running_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>literal_word_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>running_bit</name></decl>;</decl_stmt>

}</block> <decl><name>rlw</name></decl>;</struct>

}</block>;</struct>

<function_decl><type><name>void</name></type> <name>rlwit_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlw_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>bitmap</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rlwit_discard_first_words</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlw_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>rlwit_discharge</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>rlw_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>negate</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>rlwit_word_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlw_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_len</name></name> <operator>+</operator> <name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>literal_words</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>rlwit_literal_words</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlw_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name> <operator>-</operator> <name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>literal_words</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
