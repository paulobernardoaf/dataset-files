<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\ewah\ewah_rlw.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ewok.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ewok_rlw.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>next_word</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlw_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name> <operator>&gt;=</operator> <name><name>it</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>word</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>it</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name> <operator>+=</operator> <call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>word</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>literal_words</name></name> <operator>=</operator> <call><name>rlw_get_literal_words</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_len</name></name> <operator>=</operator> <call><name>rlw_get_running_len</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_bit</name></name> <operator>=</operator> <call><name>rlw_get_run_bit</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>literal_word_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>rlwit_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlw_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>from_ewah</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>from_ewah</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>from_ewah</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>pointer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>next_word</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>literal_word_start</name></name> <operator>=</operator> <call><name>rlwit_literal_words</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>+</operator>

<name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>literal_word_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>rlwit_discard_first_words</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rlw_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>discard</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_len</name></name> <operator>&gt;</operator> <name>x</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_len</name></name> <operator>-=</operator> <name>x</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>discard</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>literal_words</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>literal_words</name></name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>literal_word_start</name></name> <operator>+=</operator> <name>discard</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>literal_words</name></name> <operator>-=</operator> <name>discard</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>discard</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>rlwit_word_size</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>next_word</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>literal_word_start</name></name> <operator>=</operator>

<call><name>rlwit_literal_words</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>literal_word_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>rlwit_discharge</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>rlw_iterator</name></name> <modifier>*</modifier></type><name>it</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ewah_bitmap</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>negate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>index</name> <argument_list type="generic">&lt; <argument><expr><name>max</name> <operator>&amp;&amp;</operator> <name>rlwit_word_size</name><operator>(</operator><name>it</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>pd</name></decl>, <decl><type ref="prev"/><name>pl</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_len</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>+</operator> <name>pl</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pl</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ewah_add_empty_words</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>running_bit</name></name> <operator>^</operator> <name>negate</name></expr></argument>, <argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>pl</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pd</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>rlw</name><operator>.</operator><name>literal_words</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pd</name> <operator>+</operator> <name>index</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pd</name> <operator>=</operator> <name>max</name> <operator>-</operator> <name>index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ewah_add_dirty_words</name><argument_list>(<argument><expr><name>out</name></expr></argument>,

<argument><expr><name><name>it</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>it</name><operator>-&gt;</operator><name>literal_word_start</name></name></expr></argument>, <argument><expr><name>pd</name></expr></argument>, <argument><expr><name>negate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rlwit_discard_first_words</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><name>pd</name> <operator>+</operator> <name>pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>pd</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>index</name></expr>;</return>

</block_content>}</block></function>

</unit>
