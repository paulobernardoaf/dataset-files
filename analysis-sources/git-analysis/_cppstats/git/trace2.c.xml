<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\trace2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"json-writer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sigchain.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread-utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace2/tr2_cfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace2/tr2_cmd_name.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace2/tr2_dst.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace2/tr2_sid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace2/tr2_sysenv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace2/tr2_tgt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"trace2/tr2_tls.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>trace2_enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tr2_next_child_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tr2_next_exec_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tr2_next_repo_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name><name>tr2_tgt_builtins</name><index>[]</index></name> <init>=

<expr><block>{

<expr><operator>&amp;</operator><name>tr2_tgt_normal</name></expr>,

<expr><operator>&amp;</operator><name>tr2_tgt_perf</name></expr>,

<expr><operator>&amp;</operator><name>tr2_tgt_event</name></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for_each_builtin</name><parameter_list>(<parameter><type><name>j</name></type></parameter>, <parameter><type><name>tgt_j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (j = 0, tgt_j = tr2_tgt_builtins[j]; tgt_j; j++, tgt_j = tr2_tgt_builtins[j])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for_each_wanted_builtin</name><parameter_list>(<parameter><type><name>j</name></type></parameter>, <parameter><type><name>tgt_j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for_each_builtin(j, tgt_j) if (tr2_dst_trace_want(tgt_j-&gt;pdst))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tr2_tgt_want_builtins</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>for_each_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_init</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>sum</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tr2_tgt_disable_builtins</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<macro><name>for_each_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_term</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tr2main_exit_code</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tr2main_atexit_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tr2tls_pop_unwind_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_atexit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_atexit</name></name><argument_list>(<argument><expr><name>us_elapsed_absolute</name></expr></argument>,

<argument><expr><name>tr2main_exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tr2_tgt_disable_builtins</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tr2tls_release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tr2_sid_release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tr2_cmd_name_release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tr2_cfg_free_patterns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tr2_sysenv_release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>trace2_enabled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tr2main_signal_handler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_signal</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_signal</name></name><argument_list>(<argument><expr><name>us_elapsed_absolute</name></expr></argument>, <argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sigchain_pop</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_initialize_clock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>tr2tls_start_process_clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_initialize_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tr2_sysenv_load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tr2_tgt_want_builtins</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>trace2_enabled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tr2_sid_get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>tr2main_atexit_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigchain_push</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>tr2main_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tr2tls_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_version_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_version_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>trace2_is_enabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>trace2_enabled</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_cmd_start_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_start_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_start_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>us_elapsed_absolute</name></expr></argument>,

<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>trace2_cmd_exit_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>trace2_collect_process_info</name><argument_list>(<argument><expr><name>TRACE2_PROCESS_INFO_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tr2main_exit_code</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_exit_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_exit_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>us_elapsed_absolute</name></expr></argument>,

<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>code</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_cmd_error_va_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_error_va_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_error_va_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_cmd_path_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_command_path_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_command_path_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_cmd_name_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hierarchy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tr2_cmd_name_append_hierarchy</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hierarchy</name> <operator>=</operator> <call><name>tr2_cmd_name_get_hierarchy</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_command_name_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_command_name_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>hierarchy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_cmd_mode_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_command_mode_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_command_mode_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_cmd_alias_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alias</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_alias_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_alias_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_cmd_list_config_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tr2_cfg_list_config_fl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_cmd_set_config_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tr2_cfg_set_fl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_child_start_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>trace2_child_id</name></name> <operator>=</operator> <call><name>tr2tls_locked_increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr2_next_child_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>trace2_child_us_start</name></name> <operator>=</operator> <name>us_now</name></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_child_start_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_child_start_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,

<argument><expr><name>us_elapsed_absolute</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_child_exit_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>child_exit_code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_child</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>trace2_child_us_start</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>us_elapsed_child</name> <operator>=</operator> <name>us_now</name> <operator>-</operator> <name><name>cmd</name><operator>-&gt;</operator><name>trace2_child_us_start</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>us_elapsed_child</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_child_exit_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_child_exit_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,

<argument><expr><name>us_elapsed_absolute</name></expr></argument>,

<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>trace2_child_id</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>,

<argument><expr><name>child_exit_code</name></expr></argument>,

<argument><expr><name>us_elapsed_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>trace2_exec_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exec_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exec_id</name> <operator>=</operator> <call><name>tr2tls_locked_increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr2_next_exec_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_exec_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_exec_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>us_elapsed_absolute</name></expr></argument>,

<argument><expr><name>exec_id</name></expr></argument>, <argument><expr><name>exe</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>exec_id</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_exec_result_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exec_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_exec_result_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_exec_result_fl</name></name><argument_list>(

<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>us_elapsed_absolute</name></expr></argument>, <argument><expr><name>exec_id</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_thread_start_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>thread_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tr2tls_is_main_thread</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>trace2_region_enter_printf_fl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="string">"thread-proc on main: %s"</literal></expr></argument>,

<argument><expr><name>thread_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tr2tls_create_self</name><argument_list>(<argument><expr><name>thread_name</name></expr></argument>, <argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_thread_start_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_thread_start_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,

<argument><expr><name>us_elapsed_absolute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_thread_exit_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_thread</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>tr2tls_is_main_thread</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>trace2_region_leave_printf_fl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="string">"thread-proc on main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tr2tls_pop_unwind_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_thread</name> <operator>=</operator> <call><name>tr2tls_region_elasped_self</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_thread_exit_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_thread_exit_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,

<argument><expr><name>us_elapsed_absolute</name></expr></argument>,

<argument><expr><name>us_elapsed_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tr2tls_unset_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_def_param_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_param_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_param_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_def_repo_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>repo</name><operator>-&gt;</operator><name>trace2_repo_id</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>repo</name><operator>-&gt;</operator><name>trace2_repo_id</name></name> <operator>=</operator> <call><name>tr2tls_locked_increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tr2_next_repo_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_repo_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_repo_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_region_enter_printf_va_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_region_enter_printf_va_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_region_enter_printf_va_fl</name></name><argument_list>(

<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>us_elapsed_absolute</name></expr></argument>, <argument><expr><name>category</name></expr></argument>,

<argument><expr><name>label</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tr2tls_push_self</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_region_enter_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_region_enter_printf_va_fl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_region_enter_printf_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_region_enter_printf_va_fl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,

<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VARIADIC_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>trace2_region_enter_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_region_enter_printf_va_fl</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,

<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>trace2_region_leave_printf_va_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_region</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_region</name> <operator>=</operator> <call><name>tr2tls_region_elasped_self</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tr2tls_pop_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_region_leave_printf_va_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_region_leave_printf_va_fl</name></name><argument_list>(

<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>us_elapsed_absolute</name></expr></argument>,

<argument><expr><name>us_elapsed_region</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,

<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_region_leave_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_region_leave_printf_va_fl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_region_leave_printf_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_region_leave_printf_va_fl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,

<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VARIADIC_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>trace2_region_leave_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_region_leave_printf_va_fl</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,

<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>trace2_data_string_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_region</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_region</name> <operator>=</operator> <call><name>tr2tls_region_elasped_self</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_data_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_data_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>us_elapsed_absolute</name></expr></argument>,

<argument><expr><name>us_elapsed_region</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>,

<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_data_intmax_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><name>intmax_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf_string</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_string</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIdMAX</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_data_string_fl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>repo</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>buf_string</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_data_json_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>category</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>json_writer</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_region</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_region</name> <operator>=</operator> <call><name>tr2tls_region_elasped_self</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_data_json_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_data_json_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>us_elapsed_absolute</name></expr></argument>,

<argument><expr><name>us_elapsed_region</name></expr></argument>, <argument><expr><name>category</name></expr></argument>,

<argument><expr><name>repo</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_printf_va_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tr2_tgt</name></name> <modifier>*</modifier></type><name>tgt_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>us_elapsed_absolute</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trace2_enabled</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>us_now</name> <operator>=</operator> <call><name>getnanotime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>us_elapsed_absolute</name> <operator>=</operator> <call><name>tr2tls_absolute_elapsed</name><argument_list>(<argument><expr><name>us_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_wanted_builtin</name> <argument_list>(<argument>j</argument>, <argument>tgt_j</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_printf_va_fl</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>tgt_j</name><operator>-&gt;</operator><name>pfn_printf_va_fl</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>us_elapsed_absolute</name></expr></argument>,

<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>trace2_printf_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_printf_va_fl</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VARIADIC_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>trace2_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_printf_va_fl</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
