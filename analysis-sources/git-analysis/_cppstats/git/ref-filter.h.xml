<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\ref-filter.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUOTE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUOTE_SHELL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUOTE_PERL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUOTE_PYTHON</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUOTE_TCL</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_REFS_INCLUDE_BROKEN</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_REFS_TAGS</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_REFS_BRANCHES</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_REFS_REMOTES</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_REFS_OTHERS</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_REFS_ALL</name></cpp:macro> <cpp:value>(FILTER_REFS_TAGS | FILTER_REFS_BRANCHES | FILTER_REFS_REMOTES | FILTER_REFS_OTHERS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_REFS_DETACHED_HEAD</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_REFS_KIND_MASK</name></cpp:macro> <cpp:value>(FILTER_REFS_ALL | FILTER_REFS_DETACHED_HEAD)</cpp:value></cpp:define>

<struct_decl>struct <name>atom_value</name>;</struct_decl>

<struct>struct <name>ref_sorting</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ref_sorting</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>atom</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>reverse</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>ignore_case</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>version</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>ref_array_item</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>objectname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>kind</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>symref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>atom_value</name></name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>refname</name><index>[<expr><name>FLEX_ARRAY</name></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>ref_array</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_array_item</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>ref_filter</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name_patterns</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>points_at</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>with_commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>no_commit</name></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>REF_FILTER_MERGED_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>REF_FILTER_MERGED_INCLUDE</name></decl>,

<decl><name>REF_FILTER_MERGED_OMIT</name></decl>

}</block> <decl><name>merge</name></decl>;</enum>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>merge_commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>with_commit_tag_algo</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>match_as_path</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>ignore_case</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>detached</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>kind</name></decl>,

<decl><type ref="prev"/><name>lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>abbrev</name></decl>,

<decl><type ref="prev"/><name>verbose</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>ref_format</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quote_style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_color_reset_at_eol</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REF_FORMAT_INIT</name></cpp:macro> <cpp:value>{ NULL, 0, -1 }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_OPT_MERGED_NO_MERGED</name><parameter_list>(<parameter><type><name>option</name></type></parameter>, <parameter><type><name>filter</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ OPTION_CALLBACK, 0, option, (filter), N_("commit"), (h), PARSE_OPT_LASTARG_DEFAULT | PARSE_OPT_NONEG, parse_opt_merge_filter, (intptr_t) "HEAD" }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_MERGED</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_OPT_MERGED_NO_MERGED("merged", f, h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_NO_MERGED</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_OPT_MERGED_NO_MERGED("no-merged", f, h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_REF_SORT</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>OPT_CALLBACK_F(0, "sort", (var), N_("key"), N_("field name to sort on"), PARSE_OPT_NONEG, parse_opt_ref_sorting)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>filter_refs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ref_array_clear</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>verify_ref_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_format</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ref_array_sort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_sorting</name></name> <modifier>*</modifier></type><name>sort</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>format_ref_array_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_array_item</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref_format</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>final_buf</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>error_buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>show_ref_array_item</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_array_item</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref_format</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>parse_ref_sorting</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_sorting</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>sorting_tail</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_opt_ref_sorting</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>ref_sorting</name></name> <modifier>*</modifier></type><name>ref_default_sorting</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>parse_opt_merge_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>get_head_description</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>setup_ref_filter_porcelain_msg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>pretty_print_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref_format</name></name> <modifier>*</modifier></type><name>format</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>struct</name> <name>ref_array_item</name></name> <modifier>*</modifier></type><name>ref_array_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_array</name></name> <modifier>*</modifier></type><name>array</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
