<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\builtin\checkout-index.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_THE_INDEX_COMPATIBILITY_MACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lockfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache-tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECKOUT_ALL</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nul_term_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>checkout_stage</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>to_tempfile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>topath</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>TEMPORARY_FILENAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>checkout</name></name></type> <name>state</name> <init>= <expr><name>CHECKOUT_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_tempfile_record</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>CHECKOUT_ALL</name> <operator>==</operator> <name>checkout_stage</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>topath</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>topath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>topath</name><index>[<expr><name>checkout_stage</name></expr>]</index></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_name_quoted_relative</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>nul_term_line</name></expr> ?</condition><then> <expr><literal type="char">'\0'</literal></expr> </then><else>: <expr><literal type="char">'\n'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>topath</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkout_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>cache_name_pos</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_same_name</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>did_checkout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>-</operator><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>active_nr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>namelen</name> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>has_same_name</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>checkout_stage</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>CHECKOUT_ALL</name> <operator>!=</operator> <name>checkout_stage</name> <operator>||</operator> <operator>!</operator><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>did_checkout</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>checkout_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>to_tempfile</name></expr> ?</condition><then> <expr><name><name>topath</name><index>[<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>did_checkout</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>to_tempfile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_tempfile_record</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>errs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>quiet</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"git checkout-index: %s "</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_same_name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"is not in the cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>checkout_stage</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"does not exist at stage %d"</literal></expr></argument>,

<argument><expr><name>checkout_stage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"is unmerged"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkout_all</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix_length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>last_ce</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>active_nr</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>active_cache</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>checkout_stage</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name>CHECKOUT_ALL</name> <operator>!=</operator> <name>checkout_stage</name> <operator>||</operator> <operator>!</operator><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>prefix</name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>prefix_length</name> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>prefix_length</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_ce</name> <operator>&amp;&amp;</operator> <name>to_tempfile</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>last_ce</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>last_ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ce_namelen</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_tempfile_record</name><argument_list>(<argument><expr><name><name>last_ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>checkout_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>to_tempfile</name></expr> ?</condition><then> <expr><name><name>topath</name><index>[<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_ce</name> <operator>=</operator> <name>ce</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last_ce</name> <operator>&amp;&amp;</operator> <name>to_tempfile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_tempfile_record</name><argument_list>(<argument><expr><name><name>last_ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>builtin_checkout_index_usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git checkout-index [&lt;options&gt;] [--] [&lt;file&gt;...]"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>option_parse_stage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>to_tempfile</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>checkout_stage</name> <operator>=</operator> <name>CHECKOUT_ALL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><literal type="char">'1'</literal> <operator>&lt;=</operator> <name>ch</name> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'3'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>checkout_stage</name> <operator>=</operator> <name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"stage should be between 1 and 3 or all"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_checkout_index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock_file</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>all</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read_from_stdin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prefix_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>force</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>quiet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>not_new</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index_opt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>builtin_checkout_index_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"check out all files in the index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT__FORCE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>force</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"force overwrite of existing files"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT__QUIET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>quiet</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"no warning for existing files and files not in index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="string">"no-create"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>not_new</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"don't checkout new files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>index_opt</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"update stat information in the index file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'z'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nul_term_line</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"paths are separated with NUL character"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"stdin"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>read_from_stdin</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"read list of paths from the standard input"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"temp"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_tempfile</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"write the content to temporary files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"prefix"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>base_dir</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"when creating files, prepend &lt;string&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"stage"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"(1|2|3|all)"</literal></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"copy out the files from named stage"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NONEG</name></expr>, <expr><name>option_parse_stage</name></expr> }</block></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>builtin_checkout_index_usage</name></expr></argument>,

<argument><expr><name>builtin_checkout_index_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>git_default_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prefix_length</name> <operator>=</operator> <ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_cache</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>builtin_checkout_index_options</name></expr></argument>,

<argument><expr><name>builtin_checkout_index_usage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>istate</name></name> <operator>=</operator> <operator>&amp;</operator><name>the_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>force</name></name> <operator>=</operator> <name>force</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>quiet</name></name> <operator>=</operator> <name>quiet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>not_new</name></name> <operator>=</operator> <name>not_new</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>base_dir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>base_dir</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>base_dir_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>base_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index_opt</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>state</name><operator>.</operator><name>base_dir_len</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>to_tempfile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>refresh_cache</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>istate</name></name> <operator>=</operator> <operator>&amp;</operator><name>the_index</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hold_locked_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>, <argument><expr><name>LOCK_DIE_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>all</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"git checkout-index: don't mix '--all' and explicit filenames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>read_from_stdin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"git checkout-index: don't mix '--stdin' and explicit filenames"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>prefix_path</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>prefix_length</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>checkout_file</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>read_from_stdin</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>unquoted</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>strbuf_getline_fn</name></type> <name>getline_fn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>all</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"git checkout-index: don't mix '--all' and '--stdin'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>getline_fn</name> <operator>=</operator> <ternary><condition><expr><name>nul_term_line</name></expr> ?</condition><then> <expr><name>strbuf_getline_nul</name></expr> </then><else>: <expr><name>strbuf_getline_lf</name></expr></else></ternary></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>getline_fn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nul_term_line</name> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>.</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unquoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unquote_c_style</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unquoted</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"line is badly quoted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_swap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unquoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>prefix_path</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>prefix_length</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>checkout_file</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unquoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>all</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>checkout_all</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>prefix_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_lock_file_locked</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>write_locked_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>, <argument><expr><name>COMMIT_LOCK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Unable to write new index file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
