<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\builtin\cat-file.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_THE_INDEX_COMPATIBILITY_MACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"userdiff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streaming.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree-walk.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"promisor-remote.h"</cpp:file></cpp:include>

<struct>struct <name>batch_options</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>enabled</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>follow_symlinks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>print_contents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buffer_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>all_objects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unordered</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmdmode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>force_path</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot read object %s '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>OBJ_BLOB</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>S_ISREG</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>strbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>checkout_metadata</name></name></type> <name>meta</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_checkout_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>convert_to_working_tree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>strbuf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stream_blob</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>stream_blob_to_fd</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unable to stream %s to stdout"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cat_one_file</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obj_name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>unknown_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_context</name></name></type> <name>obj_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_info</name></name></type> <name>oi</name> <init>= <expr><name>OBJECT_INFO_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><name>OBJECT_INFO_LOOKUP_REPLACE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>force_path</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unknown_type</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>OBJECT_INFO_ALLOW_UNKNOWN_TYPE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid_with_context</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>,

<argument><expr><name>GET_OID_RECORD_PATH</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_context</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Not a valid object name %s"</literal></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name><name>obj_context</name><operator>.</operator><name>path</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obj_context</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name>S_IFINVALID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>obj_context</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <literal type="number">0100644</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name><name>oi</name><operator>.</operator><name>type_name</name></name> <operator>=</operator> <operator>&amp;</operator><name>sb</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oid_object_info_extended</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oi</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"git cat-file: could not get object info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>.</operator><name>len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><name><name>oi</name><operator>.</operator><name>sizep</name></name> <operator>=</operator> <operator>&amp;</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oid_object_info_extended</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oi</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"git cat-file: could not get object info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRIuMAX</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<return>return <expr><operator>!</operator><call><name>has_object_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><literal type="char">'w'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"git cat-file --filters %s: &lt;object&gt; must be "</literal>

<literal type="string">"&lt;sha1:path&gt;"</literal></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>filter_object</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>obj_context</name><operator>.</operator><name>mode</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>path</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"git cat-file --textconv %s: &lt;object&gt; must be &lt;sha1:path&gt;"</literal></expr></argument>,

<argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>textconv_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>obj_context</name><operator>.</operator><name>mode</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>oid_object_info</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Not a valid object name %s"</literal></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBJ_TREE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ls_args</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ls_args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"ls-tree"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ls_args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>obj_name</name></expr>;</expr_stmt>

<return>return <expr><call><name>cmd_ls_tree</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ls_args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>OBJ_BLOB</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stream_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Cannot read object %s"</literal></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>type_from_string</name><argument_list>(<argument><expr><name>exp_type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OBJ_BLOB</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>blob_oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oid_object_info</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OBJ_TAG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>read_object_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"object "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>get_oid_hex</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blob_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"%s not a valid tag"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blob_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oid_object_info</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blob_oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OBJ_BLOB</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>stream_blob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blob_oid</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>read_object_with_reference</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>exp_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"git cat-file: unknown option: %s"</literal></expr></argument>, <argument><expr><name>exp_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buf</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"git cat-file %s: bad file"</literal></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>obj_context</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>expand_data</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>disk_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>delta_base_oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mark_query</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>split_on_whitespace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_info</name></name></type> <name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>skip_object_info</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_atom</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>alen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>alen</name> <operator>==</operator> <name>slen</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>atom</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expand_atom</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>expand_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>vdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_atom</name><argument_list>(<argument><expr><literal type="string">"objectname"</literal></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>mark_query</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_atom</name><argument_list>(<argument><expr><literal type="string">"objecttype"</literal></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>mark_query</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>typep</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><call><name>type_name</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_atom</name><argument_list>(<argument><expr><literal type="string">"objectsize"</literal></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>mark_query</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>sizep</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIuMAX</name></expr></argument> , <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_atom</name><argument_list>(<argument><expr><literal type="string">"objectsize:disk"</literal></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>mark_query</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>disk_sizep</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>disk_size</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIuMAX</name></expr></argument>, <argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>data</name><operator>-&gt;</operator><name>disk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_atom</name><argument_list>(<argument><expr><literal type="string">"rest"</literal></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>mark_query</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>split_on_whitespace</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>rest</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_atom</name><argument_list>(<argument><expr><literal type="string">"deltabase"</literal></expr></argument>, <argument><expr><name>atom</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>mark_query</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>delta_base_oid</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>delta_base_oid</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>delta_base_oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"unknown format element: %.*s"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>expand_format</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>start</name> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"format element '%s' does not end in ')'"</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>expand_atom</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>batch_write</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>batch_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>buffer_output</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"unable to write to stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_or_die</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_object_or_die</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>batch_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>expand_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name> <init>= <expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>oid</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>typep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_BLOB</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>buffer_output</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>cmdmode</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>contents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>rest</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"missing path for '%s'"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>cmdmode</name></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>filter_object</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>, <argument><expr><literal type="number">0100644</literal></expr></argument>, <argument><expr><name>oid</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>contents</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not convert '%s' %s"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>cmdmode</name></name> <operator>==</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>textconv_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>,

<argument><expr><name><name>data</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>, <argument><expr><literal type="number">0100644</literal></expr></argument>, <argument><expr><name>oid</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>contents</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>contents</name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><name>oid</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>contents</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not convert '%s' %s"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>rest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"invalid cmdmode: %c"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>cmdmode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>batch_write</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>stream_blob</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>contents</name></decl>;</decl_stmt>

<expr_stmt><expr><name>contents</name> <operator>=</operator> <call><name>read_object_file</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>contents</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"object %s disappeared"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"object %s changed type!?"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>sizep</name></name> <operator>&amp;&amp;</operator> <name>size</name> <operator>!=</operator> <name><name>data</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"object %s changed size!?"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>batch_write</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>batch_object_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obj_name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>scratch</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>batch_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>expand_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>skip_object_info</name></name> <operator>&amp;&amp;</operator>

<call><name>oid_object_info_extended</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>info</name></name></expr></argument>,

<argument><expr><name>OBJECT_INFO_LOOKUP_REPLACE</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s missing\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>obj_name</name></expr> ?</condition><then> <expr><name>obj_name</name></expr> </then><else>: <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_expand</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>expand_format</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>batch_write</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>scratch</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>scratch</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>print_contents</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>print_object_or_die</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>batch_write</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>batch_one_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>obj_name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>scratch</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>batch_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>expand_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_context</name></name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>follow_symlinks</name></name></expr> ?</condition><then> <expr><name>GET_OID_FOLLOW_SYMLINKS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>get_oid_result</name></name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>get_oid_with_context</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>FOUND</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MISSING_OBJECT</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s missing\n"</literal></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SHORT_NAME_AMBIGUOUS</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s ambiguous\n"</literal></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DANGLING_SYMLINK</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dangling %"</literal><name>PRIuMAX</name><literal type="string">"\n%s\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SYMLINK_LOOP</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"loop %"</literal><name>PRIuMAX</name><literal type="string">"\n%s\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>NOT_DIR</name></expr>:</case>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"notdir %"</literal><name>PRIuMAX</name><literal type="string">"\n%s\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unknown get_sha1_with_context result %d\n"</literal></expr></argument>,

<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"symlink %"</literal><name>PRIuMAX</name><literal type="string">"\n%s\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>uintmax_t</name><operator>)</operator><name><name>ctx</name><operator>.</operator><name>symlink_path</name><operator>.</operator><name>len</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>.</operator><name>symlink_path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>batch_object_write</name><argument_list>(<argument><expr><name>obj_name</name></expr></argument>, <argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>object_cb_data</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>batch_options</name></name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>expand_data</name></name> <modifier>*</modifier></type><name>expand</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name> <modifier>*</modifier></type><name>seen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>scratch</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>batch_object_cb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_cb_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>vdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>expand</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>batch_object_write</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>scratch</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>opt</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>expand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>collect_loose_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>collect_packed_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>oid_array_append</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>batch_unordered_object</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_cb_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>vdata</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oidset_insert</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>seen</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>batch_object_cb</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>batch_unordered_loose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>batch_unordered_object</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>batch_unordered_packed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>batch_unordered_object</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>batch_objects</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>batch_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>input</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>output</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>expand_data</name></name></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>save_warning</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <literal type="string">"%(objectname) %(objecttype) %(objectsize)"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>mark_query</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_expand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name>expand_format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>mark_query</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>cmdmode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>split_on_whitespace</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>all_objects</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_info</name></name></type> <name>empty</name> <init>= <expr><name>OBJECT_INFO_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>skip_object_info</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>print_contents</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>info</name><operator>.</operator><name>typep</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>all_objects</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_cb_data</name></name></type> <name>cb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_promisor_remote</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"This repository uses promisor remotes. Some objects may not be loaded."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>opt</name></name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>expand</name></name> <operator>=</operator> <operator>&amp;</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>scratch</name></name> <operator>=</operator> <operator>&amp;</operator><name>output</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>unordered</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oidset</name></name></type> <name>seen</name> <init>= <expr><name>OIDSET_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>seen</name></name> <operator>=</operator> <operator>&amp;</operator><name>seen</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>for_each_loose_object</name><argument_list>(<argument><expr><name>batch_unordered_loose</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>for_each_packed_object</name><argument_list>(<argument><expr><name>batch_unordered_packed</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>,

<argument><expr><name>FOR_EACH_OBJECT_PACK_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidset_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>oid_array</name></name></type> <name>sa</name> <init>= <expr><name>OID_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>for_each_loose_object</name><argument_list>(<argument><expr><name>collect_loose_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>for_each_packed_object</name><argument_list>(<argument><expr><name>collect_packed_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oid_array_for_each_unique</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>, <argument><expr><name>batch_object_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oid_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>save_warning</name> <operator>=</operator> <name>warn_on_object_refname_ambiguity</name></expr>;</expr_stmt>

<expr_stmt><expr><name>warn_on_object_refname_ambiguity</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>strbuf_getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>split_on_whitespace</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strpbrk</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><literal type="string">" \t"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>rest</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>batch_one_object</name><argument_list>(<argument><expr><name><name>input</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>warn_on_object_refname_ambiguity</name> <operator>=</operator> <name>save_warning</name></expr>;</expr_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>cat_file_usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git cat-file (-t [--allow-unknown-type] | -s [--allow-unknown-type] | -e | -p | &lt;type&gt; | --textconv | --filters) [--path=&lt;path&gt;] &lt;object&gt;"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git cat-file (--batch | --batch-check) [--follow-symlinks] [--textconv | --filters]"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_cat_file_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>userdiff_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>git_default_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>batch_option_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>batch_options</name></name> <modifier>*</modifier></type><name>bo</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bo</name><operator>-&gt;</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"only one batch option may be specified"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bo</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bo</name><operator>-&gt;</operator><name>print_contents</name></name> <operator>=</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><literal type="string">"batch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bo</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_cat_file</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exp_type</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>obj_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>batch_options</name></name></type> <name>batch</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>unknown_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_GROUP</name><argument_list>(<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;type&gt; can be one of: blob, tree, commit, tag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show object type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show object size"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"exit with zero when there's no error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"pretty-print object's content"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"textconv"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"for blob objects, run textconv on object's content"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"filters"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"for blob objects, run filters on object's content"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"path"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>force_path</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"blob"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use a specific path for --textconv/--filters"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"allow-unknown-type"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>unknown_type</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"allow -s and -t to work with broken/corrupt objects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"buffer"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>batch</name><operator>.</operator><name>buffer_output</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"buffer --batch output"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"batch"</literal></expr>, <expr><operator>&amp;</operator><name>batch</name></expr>, <expr><literal type="string">"format"</literal></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show info and content of objects fed from the standard input"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_OPTARG</name> <operator>|</operator> <name>PARSE_OPT_NONEG</name></expr>,

<expr><name>batch_option_callback</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"batch-check"</literal></expr>, <expr><operator>&amp;</operator><name>batch</name></expr>, <expr><literal type="string">"format"</literal></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show info about objects fed from the standard input"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_OPTARG</name> <operator>|</operator> <name>PARSE_OPT_NONEG</name></expr>,

<expr><name>batch_option_callback</name></expr> }</block></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"follow-symlinks"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>batch</name><operator>.</operator><name>follow_symlinks</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"follow in-tree symlinks (used with --batch or --batch-check)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"batch-all-objects"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>batch</name><operator>.</operator><name>all_objects</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show all objects with --batch or --batch-check"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"unordered"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>batch</name><operator>.</operator><name>unordered</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"do not order --batch-all-objects output"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>git_cat_file_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>batch</name><operator>.</operator><name>buffer_output</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>cat_file_usage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>batch</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>opt</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name>opt</name> <operator>==</operator> <literal type="char">'w'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>batch</name><operator>.</operator><name>cmdmode</name></name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>obj_name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>cat_file_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>batch</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>exp_type</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>obj_name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>cat_file_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>batch</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>batch</name><operator>.</operator><name>cmdmode</name></name> <operator>!=</operator> <name>opt</name> <operator>||</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>cat_file_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>batch</name><operator>.</operator><name>cmdmode</name></name> <operator>&amp;&amp;</operator> <name><name>batch</name><operator>.</operator><name>all_objects</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"--batch-all-objects cannot be combined with "</literal>

<literal type="string">"--textconv nor with --filters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>batch</name><operator>.</operator><name>follow_symlinks</name></name> <operator>||</operator> <name><name>batch</name><operator>.</operator><name>all_objects</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>batch</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>cat_file_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>force_path</name> <operator>&amp;&amp;</operator> <name>opt</name> <operator>!=</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <name>opt</name> <operator>!=</operator> <literal type="char">'w'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"--path=&lt;path&gt; needs --textconv or --filters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>cat_file_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>force_path</name> <operator>&amp;&amp;</operator> <name><name>batch</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"--path=&lt;path&gt; incompatible with --batch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>cat_file_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>batch</name><operator>.</operator><name>buffer_output</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>batch</name><operator>.</operator><name>buffer_output</name></name> <operator>=</operator> <name><name>batch</name><operator>.</operator><name>all_objects</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>batch</name><operator>.</operator><name>enabled</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>batch_objects</name><argument_list>(<argument><expr><operator>&amp;</operator><name>batch</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unknown_type</name> <operator>&amp;&amp;</operator> <name>opt</name> <operator>!=</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name>opt</name> <operator>!=</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"git cat-file --allow-unknown-type: use with -s or -t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>cat_one_file</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>exp_type</name></expr></argument>, <argument><expr><name>obj_name</name></expr></argument>, <argument><expr><name>unknown_type</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
