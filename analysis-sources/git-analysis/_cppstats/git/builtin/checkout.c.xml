<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\builtin\checkout.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_THE_INDEX_COMPATIBILITY_MACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"advice.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blob.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"branch.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache-tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ll-merge.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lockfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"merge-recursive.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resolve-undo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"submodule.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"submodule-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree-walk.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unpack-trees.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wt-status.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>checkout_usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git checkout [&lt;options&gt;] &lt;branch&gt;"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git checkout [&lt;options&gt;] [&lt;branch&gt;] -- &lt;file&gt;..."</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>switch_branch_usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git switch [&lt;options&gt;] [&lt;branch&gt;]"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>restore_usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git restore [&lt;options&gt;] [--source=&lt;branch&gt;] &lt;file&gt;..."</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>checkout_opts</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>patch_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quiet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>merge</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>force</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>force_detach</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>implicit_detach</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>writeout_stage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overwrite_ignore</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ignore_skipworktree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ignore_other_worktrees</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_progress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count_checkout_paths</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overlay_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dwim_new_local_branch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>discard_changes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>accept_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>accept_pathspec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>switch_branch_doing_nothing_is_ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>only_merge_on_switching_branches</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>can_switch_when_in_progress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orphan_from_empty_tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>empty_pathspec_ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>checkout_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>checkout_worktree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ignore_unmerged_opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ignore_unmerged</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pathspec_file_nul</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathspec_from_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_branch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_branch_force</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_orphan_branch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>new_branch_log</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>branch_track</name></name></type> <name>track</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name></type> <name>diff_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>conflict_style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>branch_exists</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pathspec</name></name></type> <name>pathspec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>from_treeish</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>source_tree</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>branch_info</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>refname</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>checkout</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>post_checkout_hook</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>old_commit</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>new_commit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>changed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>run_hook_le</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"post-checkout"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><ternary><condition><expr><name>old_commit</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>old_commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_oid</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><ternary><condition><expr><name>new_commit</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>new_commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_oid</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>changed</name></expr> ?</condition><then> <expr><literal type="string">"1"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_some</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>base</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathname</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>READ_TREE_RECURSIVE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>base</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <call><name>make_empty_cache_entry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>base</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <name><name>base</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name><name>base</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>=</operator> <call><name>create_ce_flags</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>CE_UPDATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_namelen</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name> <operator>=</operator> <call><name>create_ce_mode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>cache_name_pos</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_namelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name> <operator>==</operator> <name><name>old</name><operator>-&gt;</operator><name>ce_mode</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>ce_intent_to_add</name><argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>old</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>old</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_UPDATE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>ADD_CACHE_OK_TO_ADD</name> <operator>|</operator> <name>ADD_CACHE_OK_TO_REPLACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_tree_some</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pathspec</name></name> <modifier>*</modifier></type><name>pathspec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>read_tree_recursive</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>tree</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>pathspec</name></expr></argument>, <argument><expr><name>update_some</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>skip_same_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>++</operator><name>pos</name> <operator>&lt;</operator> <name>active_nr</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></while> 

<return>return <expr><name>pos</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_stage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>overlay_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>active_nr</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>stage</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>overlay_mode</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stage</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path '%s' does not have our version"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path '%s' does not have their version"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_stages</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>stages</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>active_nr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>seen</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>stages</name> <operator>&amp;</operator> <name>seen</name><operator>)</operator> <operator>!=</operator> <name>stages</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path '%s' does not have all necessary versions"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkout_stage</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nr_checkouts</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>overlay_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>active_nr</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ce_stage</name><argument_list>(<argument><expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>stage</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>checkout_entry</name><argument_list>(<argument><expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>state</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nr_checkouts</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>overlay_mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unlink_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stage</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path '%s' does not have our version"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path '%s' does not have their version"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkout_merged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nr_checkouts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mmfile_t</name></type> <name>ancestor</name></decl>, <decl><type ref="prev"/><name>ours</name></decl>, <decl><type ref="prev"/><name>theirs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mmbuffer_t</name></type> <name>result_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name><name>threeway</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>threeway</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>threeway</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>active_nr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>stage</name></decl>;</decl_stmt>

<expr_stmt><expr><name>stage</name> <operator>=</operator> <call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stage</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>threeway</name><index>[<expr><name>stage</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ce</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stage</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>create_ce_mode</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>threeway</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>threeway</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path '%s' does not have necessary versions"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>read_mmblob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ancestor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>threeway</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_mmblob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ours</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>threeway</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_mmblob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>theirs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>threeway</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ll_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result_buf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ancestor</name></expr></argument>, <argument><expr><literal type="string">"base"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>ours</name></expr></argument>, <argument><expr><literal type="string">"ours"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>theirs</name></expr></argument>, <argument><expr><literal type="string">"theirs"</literal></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>istate</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ancestor</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ours</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>theirs</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>result_buf</name><operator>.</operator><name>ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result_buf</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path '%s': cannot merge"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_object_file</name><argument_list>(<argument><expr><name><name>result_buf</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>result_buf</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>blob_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unable to add merge result for '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>result_buf</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ce</name> <operator>=</operator> <call><name>make_transient_cache_entry</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ce</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"make_cache_entry failed for path '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>checkout_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nr_checkouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>discard_cache_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_ce_for_checkout_overlay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ps_matched</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CE_MATCHED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>ignore_skipworktree</name></name> <operator>&amp;&amp;</operator> <call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>source_tree</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_UPDATE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_path_match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>, <argument><expr><name>ps_matched</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_MATCHED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_ce_for_checkout_no_overlay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ps_matched</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CE_MATCHED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>ignore_skipworktree</name></name> <operator>&amp;&amp;</operator> <call><name>ce_skip_worktree</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ce_path_match</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>, <argument><expr><name>ps_matched</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_MATCHED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>source_tree</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_UPDATE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>|=</operator> <name>CE_REMOVE</name> <operator>|</operator> <name>CE_WT_REMOVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkout_worktree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>checkout</name></name></type> <name>state</name> <init>= <expr><name>CHECKOUT_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr_checkouts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nr_unmerged</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>force</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>refresh_cache</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>.</operator><name>istate</name></name> <operator>=</operator> <operator>&amp;</operator><name>the_index</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_checkout_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>info</name><operator>-&gt;</operator><name>commit</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>oid</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>enable_delayed_checkout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>active_nr</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_MATCHED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <call><name>checkout_entry</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nr_checkouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>writeout_stage</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <call><name>checkout_stage</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>writeout_stage</name></name></expr></argument>,

<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>nr_checkouts</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>overlay_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <call><name>checkout_merged</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>nr_unmerged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>skip_same_name</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>remove_marked_cache_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_scheduled_dirs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <call><name>finish_delayed_checkout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nr_checkouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>count_checkout_paths</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nr_unmerged</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"Recreated %d merge conflict"</literal></expr></argument>,

<argument><expr><literal type="string">"Recreated %d merge conflicts"</literal></expr></argument>,

<argument><expr><name>nr_unmerged</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>nr_unmerged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>source_tree</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"Updated %d path from %s"</literal></expr></argument>,

<argument><expr><literal type="string">"Updated %d paths from %s"</literal></expr></argument>,

<argument><expr><name>nr_checkouts</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>nr_checkouts</name></expr></argument>,

<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>source_tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>,

<argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>nr_unmerged</name> <operator>||</operator> <name>nr_checkouts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf_ln</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"Updated %d path from the index"</literal></expr></argument>,

<argument><expr><literal type="string">"Updated %d paths from the index"</literal></expr></argument>,

<argument><expr><name>nr_checkouts</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>nr_checkouts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>errs</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkout_paths</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>new_branch_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>ps_matched</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>rev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>errs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock_file</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>checkout_index</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>trace2_cmd_mode</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>patch_mode</name></name></expr> ?</condition><then> <expr><literal type="string">"patch"</literal></expr> </then><else>: <expr><literal type="string">"path"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>track</name></name> <operator>!=</operator> <name>BRANCH_TRACK_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with updating paths"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"--track"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch_log</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with updating paths"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>ignore_unmerged</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>patch_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with updating paths"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>ignore_unmerged_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with updating paths"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"--detach"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>merge</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>patch_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"--merge"</literal></expr></argument>, <argument><expr><literal type="string">"--patch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>ignore_unmerged</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>ignore_unmerged_opt</name></name></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot update paths and switch to branch '%s' at the same time."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"neither '%s' or '%s' is specified"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"--staged"</literal></expr></argument>, <argument><expr><literal type="string">"--worktree"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>from_treeish</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' must be used when '%s' is not specified"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"--worktree"</literal></expr></argument>, <argument><expr><literal type="string">"--source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name> <operator>&amp;&amp;</operator>

<name><name>opts</name><operator>-&gt;</operator><name>writeout_stage</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' or '%s' cannot be used with %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"--ours"</literal></expr></argument>, <argument><expr><literal type="string">"--theirs"</literal></expr></argument>, <argument><expr><literal type="string">"--staged"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name> <operator>&amp;&amp;</operator>

<name><name>opts</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' or '%s' cannot be used with %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"--merge"</literal></expr></argument>, <argument><expr><literal type="string">"--conflict"</literal></expr></argument>, <argument><expr><literal type="string">"--staged"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>patch_mode</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>patch_mode</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>patch_mode</name> <operator>=</operator> <literal type="string">"--patch=checkout"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>patch_mode</name> <operator>=</operator> <literal type="string">"--patch=reset"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>patch_mode</name> <operator>=</operator> <literal type="string">"--patch=worktree"</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"either flag must have been set, worktree=%d, index=%d"</literal></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>run_add_interactive</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>patch_mode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>repo_hold_locked_index</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>, <argument><expr><name>LOCK_DIE_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_cache_preload</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"index file corrupt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>source_tree</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>read_tree_some</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>source_tree</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ps_matched</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name><operator>.</operator><name>nr</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>active_nr</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>overlay_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mark_ce_for_checkout_overlay</name><argument_list>(<argument><expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ps_matched</name></expr></argument>,

<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mark_ce_for_checkout_no_overlay</name><argument_list>(<argument><expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ps_matched</name></expr></argument>,

<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>report_path_error</name><argument_list>(<argument><expr><name>ps_matched</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unmerge_marked_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <name>active_nr</name></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>cache_entry</name></name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><name><name>active_cache</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>ce_flags</name></name> <operator>&amp;</operator> <name>CE_MATCHED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ce_stage</name><argument_list>(<argument><expr><name>ce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>ignore_unmerged</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path '%s' is unmerged"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>writeout_stage</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <call><name>check_stage</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>writeout_stage</name></name></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>overlay_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <call><name>check_stages</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><name>ce</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>errs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"path '%s' is unmerged"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>skip_same_name</name><argument_list>(<argument><expr><name>ce</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>errs</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <call><name>checkout_worktree</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>new_branch_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_marked_cache_entries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>source_tree</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>checkout_index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>checkout_index</name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>checkout_index</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>write_locked_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>, <argument><expr><name>COMMIT_LOCK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to write new index file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>read_ref_full</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>lookup_commit_reference_gently</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errs</name> <operator>|=</operator> <call><name>post_checkout_hook</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>errs</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_local_changes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>diff_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name></type> <name>rev</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>repo_init_revisions</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rev</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rev</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>output_format</name></name> <operator>|=</operator> <name>DIFF_FORMAT_NAME_STATUS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_setup_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rev</name><operator>.</operator><name>diffopt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_diff_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>describe_detached_head</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_commit</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pp_commit_easy</name><argument_list>(<argument><expr><name>CMIT_FMT_ONELINE</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>print_sha1_ellipsis</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s %s... %s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>,

<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>,

<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reset_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>worktree</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>writeout_error</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name></type> <name>opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name>tree_desc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>head_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>update</name></name> <operator>=</operator> <name>worktree</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>skip_unmerged</name></name> <operator>=</operator> <operator>!</operator><name>worktree</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>fn</name></name> <operator>=</operator> <name>oneway_merge</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>verbose_update</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>show_progress</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>src_index</name></name> <operator>=</operator> <operator>&amp;</operator><name>the_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>dst_index</name></name> <operator>=</operator> <operator>&amp;</operator><name>the_index</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_checkout_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>info</name><operator>-&gt;</operator><name>commit</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr> </then><else>:

<expr><ternary><condition><expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>tree</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr> </then><else>:

<expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>oid</name></name></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_tree</name><argument_list>(<argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_tree_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tree_desc</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>unpack_trees</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tree_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>writeout_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">128</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_branch_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>branch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>dwim_ref</name><argument_list>(<argument><expr><name><name>branch</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>branch</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>branch</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>branch</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>repo_get_oid_committish</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name><name>branch</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>branch</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_branchname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>branch</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>INTERPRET_BRANCH_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>branch</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>branch</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_splice</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>branch</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>merge_working_tree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>old_branch_info</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>new_branch_info</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>writeout_error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock_file</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>new_tree</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hold_locked_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>, <argument><expr><name>LOCK_DIE_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_cache_preload</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"index file corrupt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>resolve_undo_clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_orphan_branch</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>orphan_from_empty_tree</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"'switch --orphan' should never accept a commit as starting point"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>new_tree</name> <operator>=</operator> <call><name>parse_tree_indirect</name><argument_list>(<argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>empty_tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>new_tree</name> <operator>=</operator> <call><name>get_commit_tree</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>discard_changes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>reset_tree</name><argument_list>(<argument><expr><name>new_tree</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>writeout_error</name></expr></argument>, <argument><expr><name>new_branch_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name><name>trees</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name></type> <name>topts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>topts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>topts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>head_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>src_index</name></name> <operator>=</operator> <operator>&amp;</operator><name>the_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>dst_index</name></name> <operator>=</operator> <operator>&amp;</operator><name>the_index</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_unpack_trees_porcelain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>topts</name></expr></argument>, <argument><expr><literal type="string">"checkout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh_cache</name><argument_list>(<argument><expr><name>REFRESH_QUIET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unmerged_cache</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"you need to resolve your current index first"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>initial_checkout</name></name> <operator>=</operator> <call><name>is_cache_unborn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>quiet</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>merge</name></name> <operator>&amp;&amp;</operator> <name><name>old_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>verbose_update</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>show_progress</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>fn</name></name> <operator>=</operator> <name>twoway_merge</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_checkout_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>topts</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr> </then><else>:

<expr><operator>&amp;</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>oid</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>overwrite_ignore</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>dir</name></name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>topts</name><operator>.</operator><name>dir</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>topts</name><operator>.</operator><name>dir</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>DIR_SHOW_IGNORED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_standard_excludes</name><argument_list>(<argument><expr><name><name>topts</name><operator>.</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name>parse_tree_indirect</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>old_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>old_branch_info</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr> </then><else>:

<expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>empty_tree</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_tree_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trees</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_tree</name><argument_list>(<argument><expr><name>new_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tree</name> <operator>=</operator> <name>new_tree</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_tree_desc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>trees</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>unpack_trees</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>trees</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>topts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_unpack_trees_porcelain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>topts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>work</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>old_tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>merge_options</name></name></type> <name>o</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>old_commit_shortname</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>old_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>old_tree</name> <operator>=</operator> <call><name>get_commit_tree</name><argument_list>(<argument><expr><name><name>old_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>repo_index_has_changes</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>old_tree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot continue with staged changes in "</literal>

<literal type="string">"the following files:\n%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_files_to_cache</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_merge_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>verbosity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>work</name> <operator>=</operator> <call><name>write_in_core_index_as_tree</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>reset_tree</name><argument_list>(<argument><expr><name>new_tree</name></expr></argument>,

<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>writeout_error</name></expr></argument>, <argument><expr><name>new_branch_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>ancestor</name></name> <operator>=</operator> <name><name>old_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>old_branch_info</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_add_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_commit_shortname</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>old_branch_info</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>,

<argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>ancestor</name></name> <operator>=</operator> <name><name>old_commit_shortname</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>branch1</name></name> <operator>=</operator> <name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>branch2</name></name> <operator>=</operator> <literal type="string">"local"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>merge_trees</name><argument_list>(<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>,

<argument><expr><name>new_tree</name></expr></argument>,

<argument><expr><name>work</name></expr></argument>,

<argument><expr><name>old_tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>reset_tree</name><argument_list>(<argument><expr><name>new_tree</name></expr></argument>,

<argument><expr><name>opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>writeout_error</name></expr></argument>, <argument><expr><name>new_branch_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>o</name><operator>.</operator><name>obuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_commit_shortname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>active_cache_tree</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>active_cache_tree</name> <operator>=</operator> <call><name>cache_tree</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cache_tree_fully_valid</name><argument_list>(<argument><expr><name>active_cache_tree</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cache_tree_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><name>WRITE_TREE_SILENT</name> <operator>|</operator> <name>WRITE_TREE_REPAIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_locked_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>the_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>, <argument><expr><name>COMMIT_LOCK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to write new index file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>discard_changes</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name> <operator>&amp;&amp;</operator> <name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_local_changes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>diff_options</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>report_tracking</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>new_branch_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name> <init>= <expr><call><name>branch_get</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>format_tracking_info</name><argument_list>(<argument><expr><name>branch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>AHEAD_BEHIND_FULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_refs_for_switch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>old_branch_info</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>new_branch_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>msg</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_desc</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reflog_msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_orphan_branch</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>refname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>refname</name> <operator>=</operator> <call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"refs/heads/%s"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>new_orphan_branch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch_log</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>should_autocreate_reflog</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>err</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>safe_create_reflog</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Can not do reflog for '%s': %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>new_orphan_branch</name></name></expr></argument>, <argument><expr><name><name>err</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>create_branch</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr></argument>, <argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch_force</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch_force</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch_log</name></name></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>track</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_branch_path</name><argument_list>(<argument><expr><name>new_branch_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>old_desc</name> <operator>=</operator> <name><name>old_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_desc</name> <operator>&amp;&amp;</operator> <name><name>old_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_desc</name> <operator>=</operator> <call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_branch_info</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>reflog_msg</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GIT_REFLOG_ACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reflog_msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"checkout: moving from %s to %s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>old_desc</name></expr> ?</condition><then> <expr><name>old_desc</name></expr> </then><else>: <expr><literal type="string">"(invalid)"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_insertstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reflog_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name> <operator>||</operator> <operator>!</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>update_ref</name><argument_list>(<argument><expr><name><name>msg</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>REF_NO_DEREF</name></expr></argument>, <argument><expr><name>UPDATE_REFS_DIE_ON_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>old_branch_info</name><operator>-&gt;</operator><name>path</name></name> <operator>&amp;&amp;</operator>

<name>advice_detached_head</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>detach_advice</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>describe_detached_head</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"HEAD is now at"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>create_symref</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to update HEAD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>old_branch_info</name><operator>-&gt;</operator><name>path</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>old_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch_force</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Reset branch '%s'\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Already on '%s'\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>branch_exists</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Switched to and reset branch '%s'\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Switched to a new branch '%s'\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Switched to branch '%s'\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>old_branch_info</name><operator>-&gt;</operator><name>path</name></name> <operator>&amp;&amp;</operator> <name><name>old_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ref_exists</name><argument_list>(<argument><expr><name><name>old_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>reflog_exists</name><argument_list>(<argument><expr><name><name>old_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>delete_reflog</name><argument_list>(<argument><expr><name><name>old_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>remove_branch_state</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>report_tracking</name><argument_list>(<argument><expr><name>new_branch_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_pending_uninteresting_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>add_pending_oid</name><argument_list>(<argument><expr><name>cb_data</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>UNINTERESTING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>describe_one_orphan</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_unique_abbrev</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_commit</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pp_commit_easy</name><argument_list>(<argument><expr><name>CMIT_FMT_ONELINE</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORPHAN_CUTOFF</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>suggest_reattach</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>get_revision</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lost</name> <operator>&lt;</operator> <name>ORPHAN_CUTOFF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>describe_one_orphan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lost</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>ORPHAN_CUTOFF</name> <operator>&lt;</operator> <name>lost</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>more</name> <init>= <expr><name>lost</name> <operator>-</operator> <name>ORPHAN_CUTOFF</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>more</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>describe_one_orphan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" ... and %d more.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>Q_</name><argument_list>(

<argument><expr><literal type="string">"Warning: you are leaving %d commit behind, "</literal>

<literal type="string">"not connected to\n"</literal>

<literal type="string">"any of your branches:\n\n"</literal>

<literal type="string">"%s\n"</literal></expr></argument>,

<argument><expr><literal type="string">"Warning: you are leaving %d commits behind, "</literal>

<literal type="string">"not connected to\n"</literal>

<literal type="string">"any of your branches:\n\n"</literal>

<literal type="string">"%s\n"</literal></expr></argument>,

<argument><expr><name>lost</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>lost</name></expr></argument>,

<argument><expr><name><name>sb</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>advice_detached_head</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>Q_</name><argument_list>(

<argument><expr><literal type="string">"If you want to keep it by creating a new branch, "</literal>

<literal type="string">"this may be a good time\nto do so with:\n\n"</literal>

<literal type="string">" git branch &lt;new-branch-name&gt; %s\n\n"</literal></expr></argument>,

<argument><expr><literal type="string">"If you want to keep them by creating a new branch, "</literal>

<literal type="string">"this may be a good time\nto do so with:\n\n"</literal>

<literal type="string">" git branch &lt;new-branch-name&gt; %s\n\n"</literal></expr></argument>,

<argument><expr><name>lost</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>orphaned_commit_warning</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>old_commit</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>new_commit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name></type> <name>revs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name> <init>= <expr><operator>&amp;</operator><name><name>old_commit</name><operator>-&gt;</operator><name>object</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>repo_init_revisions</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_revisions</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>object</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>UNINTERESTING</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>object</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>object</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>for_each_ref</name><argument_list>(<argument><expr><name>add_pending_uninteresting_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_commit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_pending_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>new_commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>,

<argument><expr><name>UNINTERESTING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>prepare_revision_walk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"internal error in revision walk"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>old_commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>suggest_reattach</name><argument_list>(<argument><expr><name>old_commit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>describe_detached_head</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Previous HEAD position was"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>old_commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>clear_commit_marks_all</name><argument_list>(<argument><expr><name>ALL_REV_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>switch_branches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>new_branch_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>branch_info</name></name></type> <name>old_branch_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>path_to_free</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>rev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>, <decl><type ref="prev"/><name>writeout_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>do_merge</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>trace2_cmd_mode</name><argument_list>(<argument><expr><literal type="string">"branch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_branch_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>old_branch_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>old_branch_info</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>path_to_free</name> <operator>=</operator> <call><name>resolve_refdup</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>old_branch_info</name><operator>.</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>old_branch_info</name><operator>.</operator><name>commit</name></name> <operator>=</operator> <call><name>lookup_commit_reference_gently</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>old_branch_info</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>old_branch_info</name><operator>.</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>old_branch_info</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>old_branch_info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_orphan_branch</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>orphan_from_empty_tree</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"'switch --orphan' should never accept a commit as starting point"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"(empty)"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>do_merge</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"HEAD"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name> <operator>=</operator> <name><name>old_branch_info</name><operator>.</operator><name>commit</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You are on a branch yet to be born"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>parse_commit_or_die</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>only_merge_on_switching_branches</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>do_merge</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>do_merge</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>merge_working_tree</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_branch_info</name></expr></argument>, <argument><expr><name>new_branch_info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writeout_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path_to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>old_branch_info</name><operator>.</operator><name>path</name></name> <operator>&amp;&amp;</operator> <name><name>old_branch_info</name><operator>.</operator><name>commit</name></name> <operator>&amp;&amp;</operator> <name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name> <operator>!=</operator> <name><name>old_branch_info</name><operator>.</operator><name>commit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>orphaned_commit_warning</name><argument_list>(<argument><expr><name><name>old_branch_info</name><operator>.</operator><name>commit</name></name></expr></argument>, <argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>update_refs_for_switch</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old_branch_info</name></expr></argument>, <argument><expr><name>new_branch_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>post_checkout_hook</name><argument_list>(<argument><expr><name><name>old_branch_info</name><operator>.</operator><name>commit</name></name></expr></argument>, <argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path_to_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name> <operator>||</operator> <name>writeout_error</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_checkout_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"diff.ignoresubmodules"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>cb</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>handle_ignore_submodules_arg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>diff_options</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>starts_with</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"submodule."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>git_default_submodule_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>git_xmerge_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_new_branch_info_and_source_tree</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>new_branch_info</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>source_tree</name> <init>= <expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>source_tree</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>branch_rev</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_branch_path</name><argument_list>(<argument><expr><name>new_branch_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_refname_format</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>read_ref</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>branch_rev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>branch_rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name> <operator>=</operator> <call><name>lookup_commit_reference_gently</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>source_tree</name> <operator>=</operator> <call><name>parse_tree_indirect</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>parse_commit_or_die</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>source_tree</name> <operator>=</operator> <call><name>get_commit_tree</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>parse_remote_branch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>could_be_checkout_paths</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_matches</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote</name> <init>= <expr><call><name>unique_tracking_name</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_matches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>remote</name> <operator>&amp;&amp;</operator> <name>could_be_checkout_paths</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' could be both a local file and a tracking branch.\n"</literal>

<literal type="string">"Please use -- (and optionally --no-guess) to disambiguate"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>remote</name> <operator>&amp;&amp;</operator> <name>num_matches</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>advice_checkout_ambiguous_remote_branch_name</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"If you meant to check out a remote tracking branch on, e.g. 'origin',\n"</literal>

<literal type="string">"you can do so by fully qualifying the name with the --track option:\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" git checkout --track origin/&lt;name&gt;\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"If you'd like to always have checkouts of an ambiguous &lt;name&gt; prefer\n"</literal>

<literal type="string">"one remote, e.g. the 'origin' remote, consider setting\n"</literal>

<literal type="string">"checkout.defaultRemote=origin in your config."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' matched multiple (%d) remote tracking branches"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>num_matches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>remote</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_branchname_arg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dwim_new_local_branch_ok</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>new_branch_info</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>rev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_branch</name> <init>= <expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>argcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dash_dash_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>has_dash_dash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>accept_pathspec</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"only one reference expected"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>has_dash_dash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dash_dash_pos</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>accept_pathspec</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dash_dash_pos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>dash_dash_pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>dash_dash_pos</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>has_dash_dash</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>dash_dash_pos</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"only one reference expected, %d given."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dash_dash_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>count_checkout_paths</name></name> <operator>=</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_dash_dash</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <literal type="string">"@{-1}"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid_mb</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>recover_with_dwim</name> <init>= <expr><name>dwim_new_local_branch_ok</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>could_be_checkout_paths</name> <init>= <expr><operator>!</operator><name>has_dash_dash</name> <operator>&amp;&amp;</operator>

<call><name>check_filename</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_dash_dash</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>no_wildcard</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>recover_with_dwim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>argc</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>has_dash_dash</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>has_dash_dash</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>opts</name><operator>-&gt;</operator><name>accept_pathspec</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>recover_with_dwim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>recover_with_dwim</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote</name> <init>= <expr><call><name>parse_remote_branch</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,

<argument><expr><name>could_be_checkout_paths</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>remote</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>new_branch</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>remote</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>recover_with_dwim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>recover_with_dwim</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>has_dash_dash</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid reference: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>argcount</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>argcount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_new_branch_info_and_source_tree</name><argument_list>(<argument><expr><name>new_branch_info</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>source_tree</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"reference is not a tree: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_dash_dash</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>argc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>verify_non_filename</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>accept_pathspec</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>argcount</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>argcount</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>switch_unborn_to_new_branch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>branch_ref</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>trace2_cmd_mode</name><argument_list>(<argument><expr><literal type="string">"unborn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You are on a branch yet to be born"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>branch_ref</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/%s"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>create_symref</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name><name>branch_ref</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"checkout -b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>branch_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Switched to a new branch '%s'\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>die_expecting_a_branch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>branch_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>to_free</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>dwim_ref</name><argument_list>(<argument><expr><name><name>branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>to_free</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name>to_free</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="string">"refs/tags/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"a branch is expected, got tag '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="string">"refs/remotes/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"a branch is expected, got remote branch '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"a branch is expected, got '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"a branch is expected, got commit '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"a branch is expected, got '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>die_if_some_operation_in_progress</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>wt_status_state</name></name></type> <name>state</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wt_status_get_state</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>merge_in_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot switch branch while merging\n"</literal>

<literal type="string">"Consider \"git merge --quit\" "</literal>

<literal type="string">"or \"git worktree add\"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>am_in_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot switch branch in the middle of an am session\n"</literal>

<literal type="string">"Consider \"git am --quit\" "</literal>

<literal type="string">"or \"git worktree add\"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>rebase_interactive_in_progress</name></name> <operator>||</operator> <name><name>state</name><operator>.</operator><name>rebase_in_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot switch branch while rebasing\n"</literal>

<literal type="string">"Consider \"git rebase --quit\" "</literal>

<literal type="string">"or \"git worktree add\"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>cherry_pick_in_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot switch branch while cherry-picking\n"</literal>

<literal type="string">"Consider \"git cherry-pick --quit\" "</literal>

<literal type="string">"or \"git worktree add\"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>revert_in_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot switch branch while reverting\n"</literal>

<literal type="string">"Consider \"git revert --quit\" "</literal>

<literal type="string">"or \"git worktree add\"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>bisect_in_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"you are switching branch while bisecting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkout_branch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>branch_info</name></name> <modifier>*</modifier></type><name>new_branch_info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"paths cannot be used with switching branches"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>patch_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with switching branches"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"--patch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>overlay_mode</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with switching branches"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"--[no]-overlay"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>writeout_stage</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with switching branches"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"--ours/--theirs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>force</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-f"</literal></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>discard_changes</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"--discard-changes"</literal></expr></argument>, <argument><expr><literal type="string">"--merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"--detach"</literal></expr></argument>, <argument><expr><literal type="string">"-b/-B/--orphan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_orphan_branch</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>track</name></name> <operator>!=</operator> <name>BRANCH_TRACK_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"--orphan"</literal></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>orphan_from_empty_tree</name></name> <operator>&amp;&amp;</operator> <name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot take &lt;start-point&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"--orphan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>track</name></name> <operator>!=</operator> <name>BRANCH_TRACK_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' cannot be used with '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"--detach"</literal></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>track</name></name> <operator>==</operator> <name>BRANCH_TRACK_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>track</name></name> <operator>=</operator> <name>git_branch_track</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot switch branch to a non-commit '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>switch_branch_doing_nothing_is_ok</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"missing branch or commit argument"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>implicit_detach</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>new_branch_force</name></name> <operator>&amp;&amp;</operator>

<name><name>new_branch_info</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_expecting_a_branch</name><argument_list>(<argument><expr><name>new_branch_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>can_switch_when_in_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_if_some_operation_in_progress</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>ignore_other_worktrees</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>head_ref</name> <init>= <expr><call><name>resolve_refdup</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>head_ref</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name><operator>)</operator> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>head_ref</name></expr></argument>, <argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_if_checked_out</name><argument_list>(<argument><expr><name><name>new_branch_info</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>head_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new_branch_info</name><operator>-&gt;</operator><name>commit</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>rev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_ref_full</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>switch_unborn_to_new_branch</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>switch_branches</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>new_branch_info</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>add_common_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>prevopts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT__QUIET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"suppress progress reporting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"recurse-submodules"</literal></expr>, <expr><name>NULL</name></expr>,

<expr><literal type="string">"checkout"</literal></expr>, <expr><literal type="string">"control recursive updating of submodules"</literal></expr>,

<expr><name>PARSE_OPT_OPTARG</name></expr>, <expr><name>option_parse_recurse_submodules_worktree_updater</name></expr> }</block></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"progress"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>show_progress</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"force progress reporting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="string">"merge"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>merge</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"perform a 3-way merge with the new branch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"conflict"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>conflict_style</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"style"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"conflict style (merge or diff3)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>newopts</name> <init>= <expr><call><name>parse_options_concat</name><argument_list>(<argument><expr><name>prevopts</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prevopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>newopts</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>add_common_switch_branch_options</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>prevopts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="string">"detach"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"detach HEAD at named commit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_SET_INT</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="string">"track"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>track</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"set upstream info for new branch"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>BRANCH_TRACK_EXPLICIT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT__FORCE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>force</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"force checkout (throw away local modifications)"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NOCOMPLETE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"orphan"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>new_orphan_branch</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"new-branch"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"new unparented branch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"overwrite-ignore"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>overwrite_ignore</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"update ignored files (default)"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NOCOMPLETE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ignore-other-worktrees"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>ignore_other_worktrees</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"do not check if another worktree is holding the given ref"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>newopts</name> <init>= <expr><call><name>parse_options_concat</name><argument_list>(<argument><expr><name>prevopts</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prevopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>newopts</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>add_checkout_path_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>prevopts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_SET_INT_F</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="string">"ours"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>writeout_stage</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"checkout our version for unmerged files"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_SET_INT_F</name><argument_list>(<argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="string">"theirs"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>writeout_stage</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"checkout their version for unmerged files"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="string">"patch"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>patch_mode</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"select hunks interactively"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ignore-skip-worktree-bits"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>ignore_skipworktree</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"do not limit pathspecs to sparse entries only"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_PATHSPEC_FROM_FILE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>pathspec_from_file</name></name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_PATHSPEC_FILE_NUL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>pathspec_file_nul</name></name></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>newopts</name> <init>= <expr><call><name>parse_options_concat</name><argument_list>(<argument><expr><name>prevopts</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prevopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>newopts</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>checkout_main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>checkout_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>usagestr</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>branch_info</name></name></type> <name>new_branch_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parseopt_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_branch_info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_branch_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>overwrite_ignore</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>show_progress</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>git_checkout_config</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>track</name></name> <operator>=</operator> <name>BRANCH_TRACK_UNSPECIFIED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>accept_pathspec</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>accept_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"make up your mind, you need to take _something_"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>accept_pathspec</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>accept_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parseopt_flags</name> <operator>=</operator> <name>PARSE_OPT_KEEP_DASHDASH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,

<argument><expr><name>usagestr</name></expr></argument>, <argument><expr><name>parseopt_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>show_progress</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>show_progress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>show_progress</name></name> <operator>=</operator> <call><name>isatty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>conflict_style</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>git_xmerge_config</name><argument_list>(<argument><expr><literal type="string">"merge.conflictstyle"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>conflict_style</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>force</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>discard_changes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>ignore_unmerged_opt</name></name> <operator>=</operator> <literal type="string">"--force"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>ignore_unmerged</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>new_branch_force</name></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>new_orphan_branch</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"-b, -B and --orphan are mutually exclusive"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>overlay_mode</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>patch_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"-p and --overlay are mutually exclusive"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>=</operator> <operator>-</operator><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name> <operator>=</operator> <operator>-</operator><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"these flags should be non-negative by now"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>from_treeish</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>checkout_index</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>checkout_worktree</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>from_treeish</name></name> <operator>=</operator> <literal type="string">"HEAD"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch_force</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>new_branch_force</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_orphan_branch</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>new_orphan_branch</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>track</name></name> <operator>!=</operator> <name>BRANCH_TRACK_UNSPECIFIED</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argc</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>argv0</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--track needs a branch name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>argv0</name></expr></argument>, <argument><expr><literal type="string">"refs/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>argv0</name></expr></argument>, <argument><expr><literal type="string">"remotes/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argv0</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>argv0</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argv0</name> <operator>||</operator> <operator>!</operator><name><name>argv0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"missing branch name; try -b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name> <operator>=</operator> <name>argv0</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>accept_ref</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>rev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dwim_ok</name> <init>=

<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>patch_mode</name></name> <operator>&amp;&amp;</operator>

<name><name>opts</name><operator>-&gt;</operator><name>dwim_new_local_branch</name></name> <operator>&amp;&amp;</operator>

<name><name>opts</name><operator>-&gt;</operator><name>track</name></name> <operator>==</operator> <name>BRANCH_TRACK_UNSPECIFIED</name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>parse_branchname_arg</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>dwim_ok</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>new_branch_info</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>argv</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>accept_ref</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>from_treeish</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>rev</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid_mb</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>from_treeish</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not resolve %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>from_treeish</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setup_new_branch_info_and_source_tree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_branch_info</name></expr></argument>,

<argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rev</name></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>from_treeish</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>source_tree</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"reference is not a tree: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>from_treeish</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_pathspec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>patch_mode</name></name></expr> ?</condition><then> <expr><name>PATHSPEC_PREFIX_ORIGIN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid path specification"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name> <operator>&amp;&amp;</operator> <name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s' is not a commit and a branch '%s' cannot be created from it"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git checkout: --detach does not take a path argument '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>pathspec_from_file</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--pathspec-from-file is incompatible with pathspec arguments"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>force_detach</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--pathspec-from-file is incompatible with --detach"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>patch_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--pathspec-from-file is incompatible with --patch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>parse_pathspec_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>pathspec_from_file</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>pathspec_file_nul</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>pathspec_file_nul</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--pathspec-file-nul requires --pathspec-from-file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>pathspec</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>&lt;</operator> <operator>!</operator><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>writeout_stage</name></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>force</name></name> <operator>+</operator> <operator>!</operator><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>merge</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git checkout: --ours/--theirs, --force and --merge are incompatible when\n"</literal>

<literal type="string">"checking out of the index."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>accept_pathspec</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>empty_pathspec_ok</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>patch_mode</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"you must specify path(s) to restore"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch_force</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>branch_exists</name></name> <operator>=</operator> <call><name>validate_branchname</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>branch_exists</name></name> <operator>=</operator>

<call><name>validate_new_branchname</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>new_branch</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UNLEAK</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>patch_mode</name></name> <operator>||</operator> <name><name>opts</name><operator>-&gt;</operator><name>pathspec</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>checkout_paths</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_branch_info</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>checkout_branch</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_branch_info</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_checkout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>checkout_opts</name></name></type> <name>opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>checkout_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>new_branch</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"branch"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"create and checkout a new branch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="char">'B'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>new_branch_force</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"branch"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"create/reset and checkout a branch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>new_branch_log</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"create reflog for new branch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"guess"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>dwim_new_local_branch</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"second guess 'git checkout &lt;no-such-branch&gt;' (default)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"overlay"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>overlay_mode</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use overlay mode (default)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>dwim_new_local_branch</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>switch_branch_doing_nothing_is_ok</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>only_merge_on_switching_branches</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>accept_ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>accept_pathspec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>implicit_detach</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>can_switch_when_in_progress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>orphan_from_empty_tree</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>empty_pathspec_ok</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>overlay_mode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>checkout_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>checkout_worktree</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>switch_branch_doing_nothing_is_ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>only_merge_on_switching_branches</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>parse_options_dup</name><argument_list>(<argument><expr><name>checkout_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>add_common_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>add_common_switch_branch_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>add_checkout_path_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>checkout_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>,

<argument><expr><name>options</name></expr></argument>, <argument><expr><name>checkout_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_switch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>checkout_opts</name></name></type> <name>opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>switch_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>new_branch</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"branch"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"create and switch to a new branch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="string">"force-create"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>new_branch_force</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"branch"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"create/reset and switch to a branch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"guess"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>dwim_new_local_branch</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"second guess 'git switch &lt;no-such-branch&gt;'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"discard-changes"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>discard_changes</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"throw away local modifications"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>dwim_new_local_branch</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>accept_ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>accept_pathspec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>switch_branch_doing_nothing_is_ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>only_merge_on_switching_branches</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>implicit_detach</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>can_switch_when_in_progress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>orphan_from_empty_tree</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>overlay_mode</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>parse_options_dup</name><argument_list>(<argument><expr><name>switch_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>add_common_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>add_common_switch_branch_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>checkout_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>,

<argument><expr><name>options</name></expr></argument>, <argument><expr><name>switch_branch_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_restore</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>checkout_opts</name></name></type> <name>opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>restore_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="string">"source"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>from_treeish</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;tree-ish&gt;"</literal></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"which tree-ish to checkout from"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><literal type="string">"staged"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>checkout_index</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"restore the index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="string">"worktree"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>checkout_worktree</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"restore the working tree (default)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ignore-unmerged"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>ignore_unmerged</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ignore unmerged entries"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"overlay"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>overlay_mode</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use overlay mode"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>accept_ref</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>accept_pathspec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>empty_pathspec_ok</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>overlay_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>checkout_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>checkout_worktree</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>ignore_unmerged_opt</name></name> <operator>=</operator> <literal type="string">"--ignore-unmerged"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>parse_options_dup</name><argument_list>(<argument><expr><name>restore_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>add_common_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>add_checkout_path_options</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>checkout_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>,

<argument><expr><name>options</name></expr></argument>, <argument><expr><name>restore_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
