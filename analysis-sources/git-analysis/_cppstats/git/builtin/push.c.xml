<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\builtin\push.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refspec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"remote.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"transport.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"submodule.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"submodule-config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"send-pack.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"color.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>push_usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git push [&lt;options&gt;] [&lt;repository&gt; [&lt;refspec&gt;...]]"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>push_use_color</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>push_colors</name><index>[]</index><index>[<expr><name>COLOR_MAXLEN</name></expr>]</index></name> <init>= <expr><block>{

<expr><name>GIT_COLOR_RESET</name></expr>,

<expr><name>GIT_COLOR_RED</name></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>color_push</name> <block>{

<decl><name>PUSH_COLOR_RESET</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PUSH_COLOR_ERROR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_push_color_slot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PUSH_COLOR_RESET</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PUSH_COLOR_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>push_get_color</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>color_push</name></name></type> <name>ix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>want_color_stderr</name><argument_list>(<argument><expr><name>push_use_color</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>push_colors</name><index>[<expr><name>ix</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="string">""</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>thin</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>deleterefs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>receivepack</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>verbosity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>progress</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>recurse_submodules</name> <init>= <expr><name>RECURSE_SUBMODULES_DEFAULT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>enum</name> <name>transport_family</name></name></type> <name>family</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>push_cas_option</name></name></type> <name>cas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>refspec</name></name></type> <name>rs</name> <init>= <expr><name>REFSPEC_INIT_PUSH</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>string_list</name></name></type> <name>push_options_config</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>map_refspec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>local_refs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>branch_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>matched</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>count_refspec_match</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>local_refs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>matched</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ref</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>remote</name><operator>-&gt;</operator><name>push</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>refspec_item</name></name></type> <name>query</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>refspec_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>query</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name><name>matched</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>query_refspecs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>remote</name><operator>-&gt;</operator><name>push</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>query</name><operator>.</operator><name>dst</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%s:%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>query</name><operator>.</operator><name>force</name></name></expr> ?</condition><then> <expr><literal type="string">"+"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>query</name><operator>.</operator><name>src</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>.</operator><name>dst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>push_default</name> <operator>==</operator> <name>PUSH_DEFAULT_UPSTREAM</name> <operator>&amp;&amp;</operator>

<call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>matched</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>branch_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name> <init>= <expr><call><name>branch_get</name><argument_list>(<argument><expr><name>branch_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>branch</name><operator>-&gt;</operator><name>merge_nr</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>branch</name><operator>-&gt;</operator><name>merge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>src</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>,

<argument><expr><name>ref</name></expr></argument>, <argument><expr><name><name>branch</name><operator>-&gt;</operator><name>merge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ref</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_refspecs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>refs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>repo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref</name></name> <modifier>*</modifier></type><name>local_refs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"tag"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>tagref</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nr</name> <operator>&lt;=</operator> <operator>++</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"tag shorthand without &lt;tag&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>deleterefs</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tagref</name></expr></argument>, <argument><expr><literal type="string">":refs/tags/%s"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tagref</name></expr></argument>, <argument><expr><literal type="string">"refs/tags/%s"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tagref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>deleterefs</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>delref</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--delete only accepts plain target ref names"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delref</name></expr></argument>, <argument><expr><literal type="string">":%s"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>delref</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>remote</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>remote</name> <operator>=</operator> <call><name>remote_get</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>local_refs</name> <operator>=</operator> <call><name>get_local_heads</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>map_refspec</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>, <argument><expr><name>local_refs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>refspec_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>push_url_of_remote</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>url_p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>remote</name><operator>-&gt;</operator><name>pushurl_nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>url_p</name> <operator>=</operator> <name><name>remote</name><operator>-&gt;</operator><name>pushurl</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>remote</name><operator>-&gt;</operator><name>pushurl_nr</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>url_p</name> <operator>=</operator> <name><name>remote</name><operator>-&gt;</operator><name>url</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>remote</name><operator>-&gt;</operator><name>url_nr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>NORETURN</name> <name>void</name></type> <name>die_push_simple</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>advice_maybe</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>short_upstream</name> <init>= <expr><name><name>branch</name><operator>-&gt;</operator><name>merge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>short_upstream</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>short_upstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>push_default</name> <operator>==</operator> <name>PUSH_DEFAULT_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>advice_maybe</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n"</literal>

<literal type="string">"To choose either option permanently, "</literal>

<literal type="string">"see push.default in 'git help config'."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The upstream branch of your current branch does not match\n"</literal>

<literal type="string">"the name of your current branch. To push to the upstream branch\n"</literal>

<literal type="string">"on the remote, use\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" git push %s HEAD:%s\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"To push to the branch of the same name on the remote, use\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" git push %s HEAD\n"</literal>

<literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>remote</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>short_upstream</name></expr></argument>,

<argument><expr><name><name>remote</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>advice_maybe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>message_detached_head_die</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"You are not currently on a branch.\n"</literal>

<literal type="string">"To push the history leading to the current (detached HEAD)\n"</literal>

<literal type="string">"state now, use\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" git push %s HEAD:&lt;name-of-remote-branch&gt;\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_push_upstream</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>triangular</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>simple</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>refspec</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>branch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>message_detached_head_die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>remote</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>branch</name><operator>-&gt;</operator><name>merge_nr</name></name> <operator>||</operator> <operator>!</operator><name><name>branch</name><operator>-&gt;</operator><name>merge</name></name> <operator>||</operator> <operator>!</operator><name><name>branch</name><operator>-&gt;</operator><name>remote_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The current branch %s has no upstream branch.\n"</literal>

<literal type="string">"To push the current branch and set the remote as upstream, use\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" git push --set-upstream %s %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>branch</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name><name>remote</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><name><name>branch</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>branch</name><operator>-&gt;</operator><name>merge_nr</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The current branch %s has multiple upstream branches, "</literal>

<literal type="string">"refusing to push."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>branch</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>triangular</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You are pushing to remote '%s', which is not the upstream of\n"</literal>

<literal type="string">"your current branch '%s', without telling me what to push\n"</literal>

<literal type="string">"to update which remote branch."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>remote</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>branch</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>simple</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>branch</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name><name>branch</name><operator>-&gt;</operator><name>merge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_push_simple</name><argument_list>(<argument><expr><name>branch</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refspec</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name><name>branch</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name><name>branch</name><operator>-&gt;</operator><name>merge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refspec_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>, <argument><expr><name><name>refspec</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_push_current</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>refspec</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>branch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>message_detached_head_die</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>remote</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>refspec</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name><name>branch</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name><name>branch</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refspec_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>, <argument><expr><name><name>refspec</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_workflow_triangular</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>fetch_remote</name> <init>= <expr><call><name>remote_get</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name>fetch_remote</name> <operator>&amp;&amp;</operator> <name>fetch_remote</name> <operator>!=</operator> <name>remote</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_default_push_refspecs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name> <init>= <expr><call><name>branch_get</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>triangular</name> <init>= <expr><call><name>is_workflow_triangular</name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>push_default</name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<case>case <expr><name>PUSH_DEFAULT_MATCHING</name></expr>:</case>

<expr_stmt><expr><call><name>refspec_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PUSH_DEFAULT_UNSPECIFIED</name></expr>:</case>

<case>case <expr><name>PUSH_DEFAULT_SIMPLE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>triangular</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setup_push_current</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setup_push_upstream</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><name>branch</name></expr></argument>, <argument><expr><name>triangular</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>PUSH_DEFAULT_UPSTREAM</name></expr>:</case>

<expr_stmt><expr><call><name>setup_push_upstream</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><name>branch</name></expr></argument>, <argument><expr><name>triangular</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PUSH_DEFAULT_CURRENT</name></expr>:</case>

<expr_stmt><expr><call><name>setup_push_current</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PUSH_DEFAULT_NOTHING</name></expr>:</case>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You didn't specify any refspecs to push, and "</literal>

<literal type="string">"push.default is \"nothing\"."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>message_advice_pull_before_push</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Updates were rejected because the tip of your current branch is behind\n"</literal>

<literal type="string">"its remote counterpart. Integrate the remote changes (e.g.\n"</literal>

<literal type="string">"'git pull ...') before pushing again.\n"</literal>

<literal type="string">"See the 'Note about fast-forwards' in 'git push --help' for details."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>message_advice_checkout_pull_push</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Updates were rejected because a pushed branch tip is behind its remote\n"</literal>

<literal type="string">"counterpart. Check out this branch and integrate the remote changes\n"</literal>

<literal type="string">"(e.g. 'git pull ...') before pushing again.\n"</literal>

<literal type="string">"See the 'Note about fast-forwards' in 'git push --help' for details."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>message_advice_ref_fetch_first</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Updates were rejected because the remote contains work that you do\n"</literal>

<literal type="string">"not have locally. This is usually caused by another repository pushing\n"</literal>

<literal type="string">"to the same ref. You may want to first integrate the remote changes\n"</literal>

<literal type="string">"(e.g., 'git pull ...') before pushing again.\n"</literal>

<literal type="string">"See the 'Note about fast-forwards' in 'git push --help' for details."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>message_advice_ref_already_exists</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Updates were rejected because the tag already exists in the remote."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>message_advice_ref_needs_force</name><index>[]</index></name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"You cannot update a remote ref that points at a non-commit object,\n"</literal>

<literal type="string">"or update a remote ref to make it point at a non-commit object,\n"</literal>

<literal type="string">"without using the '--force' option.\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>advise_pull_before_push</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>advice_push_non_ff_current</name> <operator>||</operator> <operator>!</operator><name>advice_push_update_rejected</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>message_advice_pull_before_push</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>advise_checkout_pull_push</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>advice_push_non_ff_matching</name> <operator>||</operator> <operator>!</operator><name>advice_push_update_rejected</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>message_advice_checkout_pull_push</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>advise_ref_already_exists</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>advice_push_already_exists</name> <operator>||</operator> <operator>!</operator><name>advice_push_update_rejected</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>message_advice_ref_already_exists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>advise_ref_fetch_first</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>advice_push_fetch_first</name> <operator>||</operator> <operator>!</operator><name>advice_push_update_rejected</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>message_advice_ref_fetch_first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>advise_ref_needs_force</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>advice_push_needs_force</name> <operator>||</operator> <operator>!</operator><name>advice_push_update_rejected</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>advise</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>message_advice_ref_needs_force</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>push_with_options</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>rs</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>reject_reasons</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>transport_set_verbosity</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>verbosity</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>family</name></name> <operator>=</operator> <name>family</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>receivepack</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>transport_set_option</name><argument_list>(<argument><expr><name>transport</name></expr></argument>,

<argument><expr><name>TRANS_OPT_RECEIVEPACK</name></expr></argument>, <argument><expr><name>receivepack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>transport_set_option</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>TRANS_OPT_THIN</name></expr></argument>, <argument><expr><ternary><condition><expr><name>thin</name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_empty_cas</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cas</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>transport</name><operator>-&gt;</operator><name>smart_options</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"underlying transport does not support --%s option"</literal></expr></argument>,

<argument><expr><name>CAS_OPT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>smart_options</name><operator>-&gt;</operator><name>cas</name></name> <operator>=</operator> <operator>&amp;</operator><name>cas</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Pushing to %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>transport</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>trace2_region_enter</name><argument_list>(<argument><expr><literal type="string">"push"</literal></expr></argument>, <argument><expr><literal type="string">"transport_push"</literal></expr></argument>, <argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>transport_push</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>transport</name></expr></argument>,

<argument><expr><name>rs</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reject_reasons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>trace2_region_leave</name><argument_list>(<argument><expr><literal type="string">"push"</literal></expr></argument>, <argument><expr><literal type="string">"transport_push"</literal></expr></argument>, <argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>push_get_color</name><argument_list>(<argument><expr><name>PUSH_COLOR_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to push some refs to '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>transport</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>push_get_color</name><argument_list>(<argument><expr><name>PUSH_COLOR_RESET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>|=</operator> <call><name>transport_disconnect</name><argument_list>(<argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reject_reasons</name> <operator>&amp;</operator> <name>REJECT_NON_FF_HEAD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>advise_pull_before_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reject_reasons</name> <operator>&amp;</operator> <name>REJECT_NON_FF_OTHER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>advise_checkout_pull_push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reject_reasons</name> <operator>&amp;</operator> <name>REJECT_ALREADY_EXISTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>advise_ref_already_exists</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reject_reasons</name> <operator>&amp;</operator> <name>REJECT_FETCH_FIRST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>advise_ref_fetch_first</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>reject_reasons</name> <operator>&amp;</operator> <name>REJECT_NEEDS_FORCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>advise_ref_needs_force</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_push</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>push_options</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>errs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>url_nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>refspec</name></name> <modifier>*</modifier></type><name>push_refspec</name> <init>= <expr><operator>&amp;</operator><name>rs</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>push_options</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>TRANSPORT_PUSH_OPTIONS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>push_refspec</name><operator>-&gt;</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_ALL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>remote</name><operator>-&gt;</operator><name>push</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>push_refspec</name> <operator>=</operator> <operator>&amp;</operator><name><name>remote</name><operator>-&gt;</operator><name>push</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_MIRROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setup_default_push_refspecs</name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>errs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>url_nr</name> <operator>=</operator> <call><name>push_url_of_remote</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>url_nr</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>url_nr</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name> <init>=

<expr><call><name>transport_get</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><name><name>url</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_OPTIONS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>push_options</name></name> <operator>=</operator> <name>push_options</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>push_with_options</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>push_refspec</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>transport</name></name> <modifier>*</modifier></type><name>transport</name> <init>=

<expr><call><name>transport_get</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_OPTIONS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>transport</name><operator>-&gt;</operator><name>push_options</name></name> <operator>=</operator> <name>push_options</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>push_with_options</name><argument_list>(<argument><expr><name>transport</name></expr></argument>, <argument><expr><name>push_refspec</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name>errs</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>option_parse_recurse_submodules</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>recurse_submodules</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>recurse_submodules</name> <operator>=</operator> <name>RECURSE_SUBMODULES_OFF</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>recurse_submodules</name> <operator>=</operator> <call><name>parse_push_recurse_submodules_arg</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"%s missing parameter"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>long_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_push_cert_flags</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SEND_PACK_PUSH_CERT_NEVER</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>TRANSPORT_PUSH_CERT_ALWAYS</name> <operator>|</operator> <name>TRANSPORT_PUSH_CERT_IF_ASKED</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SEND_PACK_PUSH_CERT_ALWAYS</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>TRANSPORT_PUSH_CERT_ALWAYS</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>TRANSPORT_PUSH_CERT_IF_ASKED</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SEND_PACK_PUSH_CERT_IF_ASKED</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>TRANSPORT_PUSH_CERT_IF_ASKED</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>TRANSPORT_PUSH_CERT_ALWAYS</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_push_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slot_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><name>cb</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>git_gpg_config</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"push.followtags"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>git_config_bool</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>|=</operator> <name>TRANSPORT_PUSH_FOLLOW_TAGS</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>TRANSPORT_PUSH_FOLLOW_TAGS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"push.gpgsign"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_get_value</name><argument_list>(<argument><expr><literal type="string">"push.gpgsign"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><call><name>git_parse_maybe_bool</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>set_push_cert_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>SEND_PACK_PUSH_CERT_NEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>set_push_cert_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>SEND_PACK_PUSH_CERT_ALWAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"if-asked"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_push_cert_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>SEND_PACK_PUSH_CERT_IF_ASKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Invalid value for '%s'"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"push.recursesubmodules"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_config_get_value</name><argument_list>(<argument><expr><literal type="string">"push.recursesubmodules"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>recurse_submodules</name> <operator>=</operator> <call><name>parse_push_recurse_submodules_arg</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"submodule.recurse"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><ternary><condition><expr><call><name>git_config_bool</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name>RECURSE_SUBMODULES_ON_DEMAND</name></expr> </then><else>: <expr><name>RECURSE_SUBMODULES_OFF</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>recurse_submodules</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"push.pushoption"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><operator>!</operator><operator>*</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>push_options_config</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>push_options_config</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"color.push"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>push_use_color</name> <operator>=</operator> <call><name>git_config_colorbool</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="string">"color.push."</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>slot_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slot</name> <init>= <expr><call><name>parse_push_color_slot</name><argument_list>(<argument><expr><name>slot_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>color_parse</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>push_colors</name><index>[<expr><name>slot</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>git_default_config</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>push_cert</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>repo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>push_options_cmdline</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>push_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>remote</name></name> <modifier>*</modifier></type><name>remote</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT__VERBOSITY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>verbosity</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="string">"repo"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>repo</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"repository"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"repository"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"push all refs"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRANSPORT_PUSH_ALL</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="string">"mirror"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"mirror all refs"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>TRANSPORT_PUSH_MIRROR</name><operator>|</operator><name>TRANSPORT_PUSH_FORCE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="string">"delete"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>deleterefs</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"delete refs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="string">"tags"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tags</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"push tags (can't be used with --all or --mirror)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument> , <argument><expr><literal type="string">"dry-run"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"dry run"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRANSPORT_PUSH_DRY_RUN</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"porcelain"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"machine-readable output"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRANSPORT_PUSH_PORCELAIN</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="string">"force"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"force updates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRANSPORT_PUSH_FORCE</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>,

<expr><literal type="number">0</literal></expr>, <expr><name>CAS_OPT_NAME</name></expr>, <expr><operator>&amp;</operator><name>cas</name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;refname&gt;:&lt;expect&gt;"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"require old value of ref to be at this value"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_OPTARG</name> <operator>|</operator> <name>PARSE_OPT_LITERAL_ARGHELP</name></expr>, <expr><name>parseopt_push_cas_option</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"recurse-submodules"</literal></expr>, <expr><operator>&amp;</operator><name>recurse_submodules</name></expr>, <expr><literal type="string">"(check|on-demand|no)"</literal></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"control recursive pushing of submodules"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_OPTARG</name></expr>, <expr><name>option_parse_recurse_submodules</name></expr> }</block></expr>,

<expr><call><name>OPT_BOOL_F</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="string">"thin"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>thin</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use thin pack"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PARSE_OPT_NOCOMPLETE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="string">"receive-pack"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>receivepack</name></expr></argument>, <argument><expr><literal type="string">"receive-pack"</literal></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"receive pack program"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="string">"exec"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>receivepack</name></expr></argument>, <argument><expr><literal type="string">"receive-pack"</literal></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"receive pack program"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><literal type="string">"set-upstream"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"set upstream for git pull/status"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>TRANSPORT_PUSH_SET_UPSTREAM</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"progress"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"force progress reporting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"prune"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"prune locally removed refs"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>TRANSPORT_PUSH_PRUNE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no-verify"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"bypass pre-push hook"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRANSPORT_PUSH_NO_HOOK</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"follow-tags"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"push missing but relevant tags"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>TRANSPORT_PUSH_FOLLOW_TAGS</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="string">"signed"</literal></expr>, <expr><operator>&amp;</operator><name>push_cert</name></expr>, <expr><literal type="string">"(yes|no|if-asked)"</literal></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"GPG sign the push"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_OPTARG</name></expr>, <expr><name>option_parse_push_signed</name></expr> }</block></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"atomic"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"request atomic transaction on remote side"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRANSPORT_PUSH_ATOMIC</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING_LIST</name><argument_list>(<argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="string">"push-option"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>push_options_cmdline</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"server-specific"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"option to transmit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_SET_INT</name><argument_list>(<argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><literal type="string">"ipv4"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>family</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use IPv4 addresses only"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>TRANSPORT_FAMILY_IPV4</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_SET_INT</name><argument_list>(<argument><expr><literal type="char">'6'</literal></expr></argument>, <argument><expr><literal type="string">"ipv6"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>family</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use IPv6 addresses only"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>TRANSPORT_FAMILY_IPV6</name></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>packet_trace_identity</name><argument_list>(<argument><expr><literal type="string">"push"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>git_push_config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>push_usage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>push_options</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>push_options_cmdline</name><operator>.</operator><name>nr</name></name></expr>

?</condition><then> <expr><operator>&amp;</operator><name>push_options_cmdline</name></expr>

</then><else>: <expr><operator>&amp;</operator><name>push_options_config</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_push_cert_flags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><name>push_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>deleterefs</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>tags</name> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>TRANSPORT_PUSH_ALL</name> <operator>|</operator> <name>TRANSPORT_PUSH_MIRROR</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--delete is incompatible with --all, --mirror and --tags"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>deleterefs</name> <operator>&amp;&amp;</operator> <name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--delete doesn't make sense without any refs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>recurse_submodules</name> <operator>==</operator> <name>RECURSE_SUBMODULES_CHECK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>TRANSPORT_RECURSE_SUBMODULES_CHECK</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>recurse_submodules</name> <operator>==</operator> <name>RECURSE_SUBMODULES_ON_DEMAND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>TRANSPORT_RECURSE_SUBMODULES_ON_DEMAND</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>recurse_submodules</name> <operator>==</operator> <name>RECURSE_SUBMODULES_ONLY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>TRANSPORT_RECURSE_SUBMODULES_ONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tags</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>refspec_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rs</name></expr></argument>, <argument><expr><literal type="string">"refs/tags/*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>repo</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_refspecs</name><argument_list>(<argument><expr><name>argv</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>remote</name> <operator>=</operator> <call><name>pushremote_get</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>remote</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>repo</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"bad repository '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No configured push destination.\n"</literal>

<literal type="string">"Either specify the URL from the command-line or configure a remote repository using\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" git remote add &lt;name&gt; &lt;url&gt;\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">"and then push using the remote name\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" git push &lt;name&gt;\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>remote</name><operator>-&gt;</operator><name>mirror</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <operator>(</operator><name>TRANSPORT_PUSH_MIRROR</name><operator>|</operator><name>TRANSPORT_PUSH_FORCE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_ALL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tags</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--all and --tags are incompatible"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--all can't be combined with refspecs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_MIRROR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tags</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--mirror and --tags are incompatible"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--mirror can't be combined with refspecs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_ALL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRANSPORT_PUSH_MIRROR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--all and --mirror are incompatible"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>push_options</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"push options must not have new line characters"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>do_push</name><argument_list>(<argument><expr><name>repo</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>push_options</name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>push_options_cmdline</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>push_options_config</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>push_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>rc</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

</unit>
