<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\builtin\rebase.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_THE_INDEX_COMPATIBILITY_MACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"exec-cmd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache-tree.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unpack-trees.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lockfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wt-status.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit-reach.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rerere.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"branch.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sequencer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rebase-interactive.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>builtin_rebase_usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git rebase [-i] [options] [--exec &lt;cmd&gt;] "</literal>

<literal type="string">"[--onto &lt;newbase&gt; | --keep-base] [&lt;upstream&gt; [&lt;branch&gt;]]"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git rebase [-i] [options] [--exec &lt;cmd&gt;] [--onto &lt;newbase&gt;] "</literal>

<literal type="string">"--root [&lt;branch&gt;]"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git rebase --continue | --abort | --skip | --edit-todo"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>GIT_PATH_FUNC</name><argument_list>(<argument>path_squash_onto</argument>, <argument><literal type="string">"rebase-merge/squash-onto"</literal></argument>)</argument_list></macro>

<specifier>static</specifier> <macro><name>GIT_PATH_FUNC</name><argument_list>(<argument>path_interactive</argument>, <argument><literal type="string">"rebase-merge/interactive"</literal></argument>)</argument_list></macro>

<specifier>static</specifier> <macro><name>GIT_PATH_FUNC</name><argument_list>(<argument>apply_dir</argument>, <argument><literal type="string">"rebase-apply"</literal></argument>)</argument_list></macro>

<specifier>static</specifier> <call><name>GIT_PATH_FUNC</name><argument_list>(<argument><expr><name>merge_dir</name></expr></argument>, <argument><expr><literal type="string">"rebase-merge"</literal></expr></argument>)</argument_list></call>

enum <name>rebase_type</name> <block>{

<expr><name>REBASE_UNSPECIFIED</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,

<expr><name>REBASE_APPLY</name></expr>,

<expr><name>REBASE_MERGE</name></expr>,

<expr><name>REBASE_PRESERVE_MERGES</name></expr>

}</block></expr>;</expr_stmt>

<enum>enum <name>empty_type</name> <block>{

<decl><name>EMPTY_UNSPECIFIED</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>EMPTY_DROP</name></decl>,

<decl><name>EMPTY_KEEP</name></decl>,

<decl><name>EMPTY_ASK</name></decl>

}</block>;</enum>

<struct>struct <name>rebase_options</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>rebase_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>empty_type</name></name></type> <name>empty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_backend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>state_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>upstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>upstream_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>upstream_arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>head_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>orig_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>onto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>onto_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>revisions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>switch_to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>root</name></decl>, <decl><type ref="prev"/><name>root_with_onto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>squash_onto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>restrict_revision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dont_finish_rebase</name></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>REBASE_NO_QUIET</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal></expr></init></decl>,

<decl><name>REBASE_VERBOSE</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>REBASE_DIFFSTAT</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>REBASE_FORCE</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal></expr></init></decl>,

<decl><name>REBASE_INTERACTIVE_EXPLICIT</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal></expr></init></decl>,

}</block> <decl><name>flags</name></decl>;</enum>

<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>git_am_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>signoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allow_rerere_autoupdate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>autosquash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gpg_sign_opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>autostash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allow_empty_message</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rebase_merges</name></decl>, <decl><type ref="prev"/><name>rebase_cousins</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strategy</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>strategy_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>git_format_patch_opt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reschedule_failed_exec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>use_legacy_rebase</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REBASE_OPTIONS_INIT</name></cpp:macro> <cpp:value>{ .type = REBASE_UNSPECIFIED, .empty = EMPTY_UNSPECIFIED, .default_backend = "merge", .flags = REBASE_NO_QUIET, .git_am_opts = ARGV_ARRAY_INIT, .git_format_patch_opt = STRBUF_INIT }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>replay_opts</name></name></type> <name>get_replay_opts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>replay_opts</name></name></type> <name>replay</name> <init>= <expr><name>REPLAY_OPTS_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>REPLAY_INTERACTIVE_REBASE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sequencer_init_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name>replay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>signoff</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>signoff</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>allow_ff</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_FORCE</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_autoupdate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>allow_rerere_auto</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_autoupdate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>allow_empty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>allow_empty_message</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>allow_empty_message</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>drop_redundant_commits</name></name> <operator>=</operator> <operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>empty</name></name> <operator>==</operator> <name>EMPTY_DROP</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>keep_redundant_commits</name></name> <operator>=</operator> <operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>empty</name></name> <operator>==</operator> <name>EMPTY_KEEP</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>quiet</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_NO_QUIET</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_VERBOSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>reschedule_failed_exec</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>reschedule_failed_exec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>gpg_sign</name></name> <operator>=</operator> <call><name>xstrdup_or_null</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>strategy</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>strategy</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>strategy_opts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parse_strategy_opts</name><argument_list>(<argument><expr><operator>&amp;</operator><name>replay</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>strategy_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>squash_onto</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>replay</name><operator>.</operator><name>squash_onto</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>squash_onto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>have_squash_onto</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>replay</name></expr>;</return>

</block_content>}</block></function>

<enum>enum <name>action</name> <block>{

<decl><name>ACTION_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ACTION_CONTINUE</name></decl>,

<decl><name>ACTION_SKIP</name></decl>,

<decl><name>ACTION_ABORT</name></decl>,

<decl><name>ACTION_QUIT</name></decl>,

<decl><name>ACTION_EDIT_TODO</name></decl>,

<decl><name>ACTION_SHOW_CURRENT_PATCH</name></decl>,

<decl><name>ACTION_SHORTEN_OIDS</name></decl>,

<decl><name>ACTION_EXPAND_OIDS</name></decl>,

<decl><name>ACTION_CHECK_TODO_LIST</name></decl>,

<decl><name>ACTION_REARRANGE_SQUASH</name></decl>,

<decl><name>ACTION_ADD_EXEC</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>action_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"undefined"</literal></expr>,

<expr><literal type="string">"continue"</literal></expr>,

<expr><literal type="string">"skip"</literal></expr>,

<expr><literal type="string">"abort"</literal></expr>,

<expr><literal type="string">"quit"</literal></expr>,

<expr><literal type="string">"edit_todo"</literal></expr>,

<expr><literal type="string">"show_current_patch"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_exec_commands</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>todo_file</name> <init>= <expr><call><name>rebase_path_todo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>todo_list</name></name></type> <name>todo_list</name> <init>= <expr><name>TODO_LIST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>todo_list</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>todo_list_parse_insn_buffer</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name><name>todo_list</name><operator>.</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>todo_list_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unusable todo list: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>todo_list_add_exec_commands</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>, <argument><expr><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>todo_list_write_to_file</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>,

<argument><expr><name>todo_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>todo_list_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rearrange_squash_in_todo_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>todo_file</name> <init>= <expr><call><name>rebase_path_todo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>todo_list</name></name></type> <name>todo_list</name> <init>= <expr><name>TODO_LIST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>todo_list</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>todo_list_parse_insn_buffer</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name><name>todo_list</name><operator>.</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>todo_list_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unusable todo list: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>todo_list_rearrange_squash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>todo_list_write_to_file</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>,

<argument><expr><name>todo_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>todo_list_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>transform_todo_file</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>todo_file</name> <init>= <expr><call><name>rebase_path_todo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>todo_list</name></name></type> <name>todo_list</name> <init>= <expr><name>TODO_LIST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>todo_list</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>todo_list_parse_insn_buffer</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name><name>todo_list</name><operator>.</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>todo_list_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unusable todo list: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>todo_list_write_to_file</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>todo_list_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>edit_todo_file</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>todo_file</name> <init>= <expr><call><name>rebase_path_todo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>todo_list</name></name></type> <name>todo_list</name> <init>= <expr><name>TODO_LIST_INIT</name></expr></init></decl>,

<decl><type ref="prev"/><name>new_todo</name> <init>= <expr><name>TODO_LIST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>todo_list</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read '%s'."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_stripspace</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>todo_list</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>edit_todo_list</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_todo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>&amp;&amp;</operator> <call><name>todo_list_write_to_file</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_todo</name></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>TODO_LIST_SHORTEN_IDS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>todo_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>todo_list_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>todo_list_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_revision_ranges</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>upstream</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>onto</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>orig_head</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>head_hash</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>revisions</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>shortrevisions</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>base_rev</name> <init>= <expr><ternary><condition><expr><name>upstream</name></expr> ?</condition><then> <expr><name>upstream</name></expr> </then><else>: <expr><name>onto</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shorthead</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>head_hash</name> <operator>=</operator> <call><name>find_unique_abbrev</name><argument_list>(<argument><expr><name>orig_head</name></expr></argument>, <argument><expr><name>GIT_MAX_HEXSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>revisions</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%s...%s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base_rev</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>*</operator><name>head_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shorthead</name> <operator>=</operator> <call><name>find_unique_abbrev</name><argument_list>(<argument><expr><name>orig_head</name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>upstream</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortrev</name></decl>;</decl_stmt>

<expr_stmt><expr><name>shortrev</name> <operator>=</operator> <call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>base_rev</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>,

<argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>shortrevisions</name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%s..%s"</literal></expr></argument>, <argument><expr><name>shortrev</name></expr></argument>, <argument><expr><name>shorthead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>shortrevisions</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>shorthead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_basic_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>head_name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>onto</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>interactive</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_directory</name><argument_list>(<argument><expr><call><name>merge_dir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>mkdir_in_gitdir</name><argument_list>(<argument><expr><call><name>merge_dir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not create temporary %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>merge_dir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>delete_reflog</name><argument_list>(<argument><expr><literal type="string">"REBASE_HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>interactive</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><call><name>path_interactive</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>interactive</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not mark as interactive"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>interactive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>write_basic_state</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>head_name</name></expr></argument>, <argument><expr><name>onto</name></expr></argument>, <argument><expr><name>orig_head</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>split_exec_commands</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>cmd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>string_list_split</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_remove_empty_items</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>do_interactive_rebase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>head_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>revisions</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>shortrevisions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>make_script_args</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>todo_list</name></name></type> <name>todo_list</name> <init>= <expr><name>TODO_LIST_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>replay_opts</name></name></type> <name>replay</name> <init>= <expr><call><name>get_replay_opts</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>commands</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_revision_ranges</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>upstream</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>onto</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>orig_head</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>head_hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revisions</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shortrevisions</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_basic_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>replay</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>head_name</name></name></expr> ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>head_name</name></name></expr> </then><else>: <expr><literal type="string">"detached HEAD"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>onto</name></name></expr></argument>, <argument><expr><name>head_hash</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>revisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>shortrevisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>upstream</name></name> <operator>&amp;&amp;</operator> <name><name>opts</name><operator>-&gt;</operator><name>squash_onto</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>path_squash_onto</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>squash_onto</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>make_script_args</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>revisions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>restrict_revision</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>make_script_args</name></expr></argument>, <argument><expr><literal type="string">"^%s"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>restrict_revision</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sequencer_make_script</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>todo_list</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><name><name>make_script_args</name><operator>.</operator><name>argc</name></name></expr></argument>, <argument><expr><name><name>make_script_args</name><operator>.</operator><name>argv</name></name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not generate todo list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>discard_cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>todo_list_parse_insn_buffer</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name><name>todo_list</name><operator>.</operator><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unusable todo list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>split_exec_commands</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>complete_action</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replay</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><name>shortrevisions</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>onto_name</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>onto</name></name></expr></argument>, <argument><expr><name>head_hash</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>commands</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>autosquash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commands</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>revisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>shortrevisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>todo_list_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>todo_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>make_script_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_sequencer_rebase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>action</name></name></type> <name>command</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>abbreviate_commands</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>git_config_get_bool</name><argument_list>(<argument><expr><literal type="string">"rebase.abbreviatecommands"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>abbreviate_commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <ternary><condition><expr><name>abbreviate_commands</name></expr> ?</condition><then> <expr><name>TODO_LIST_ABBREVIATE_CMDS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>rebase_merges</name></name></expr> ?</condition><then> <expr><name>TODO_LIST_REBASE_MERGES</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>rebase_cousins</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>TODO_LIST_REBASE_COUSINS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>root_with_onto</name></name></expr> ?</condition><then> <expr><name>TODO_LIST_ROOT_WITH_ONTO</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>|=</operator> <ternary><condition><expr><name>command</name> <operator>==</operator> <name>ACTION_SHORTEN_OIDS</name></expr> ?</condition><then> <expr><name>TODO_LIST_SHORTEN_IDS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>command</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ACTION_NONE</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>onto</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>upstream</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"a base commit must be provided with --upstream or --onto"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>do_interactive_rebase</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ACTION_SKIP</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>merge_rr</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>rerere_clear</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<case>case <expr><name>ACTION_CONTINUE</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>replay_opts</name></name></type> <name>replay_opts</name> <init>= <expr><call><name>get_replay_opts</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sequencer_continue</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>replay_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ACTION_EDIT_TODO</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>edit_todo_file</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTION_SHOW_CURRENT_PATCH</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>cmd</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"show"</literal></expr></argument>, <argument><expr><literal type="string">"REBASE_HEAD"</literal></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ACTION_SHORTEN_OIDS</name></expr>:</case>

<case>case <expr><name>ACTION_EXPAND_OIDS</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>transform_todo_file</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTION_CHECK_TODO_LIST</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_todo_list_from_file</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTION_REARRANGE_SQUASH</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rearrange_squash_in_todo_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ACTION_ADD_EXEC</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>commands</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>split_exec_commands</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>add_exec_commands</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commands</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"invalid command '%d'"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_opt_keep_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_ARG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REBASE_MERGE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>builtin_rebase_interactive_usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git rebase--interactive [&lt;options&gt;]"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>cmd_rebase__interactive</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rebase_options</name></name></type> <name>opts</name> <init>= <expr><name>REBASE_OPTIONS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>squash_onto</name> <init>= <expr><name>null_oid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>action</name></name></type> <name>command</name> <init>= <expr><name>ACTION_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_NEGBIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ff"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>flags</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"allow fast-forward"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>REBASE_FORCE</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="string">"keep-empty"</literal></expr>, <expr><operator>&amp;</operator><name>options</name></expr>, <expr><name>NULL</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"(DEPRECATED) keep empty commits"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NOARG</name> <operator>|</operator> <name>PARSE_OPT_HIDDEN</name></expr>,

<expr><name>parse_opt_keep_empty</name></expr> }</block></expr>,

<expr><call><name>OPT_BOOL_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"allow-empty-message"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>allow_empty_message</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"allow commits with empty messages"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_HIDDEN</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"rebase-merges"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>rebase_merges</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"rebase merge commits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"rebase-cousins"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>rebase_cousins</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"keep original branch points of cousins"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"autosquash"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>autosquash</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"move commits that begin with squash!/fixup!"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"signoff"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>signoff</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"sign commits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="string">"verbose"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>flags</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"display a diffstat of what changed upstream"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>REBASE_NO_QUIET</name> <operator>|</operator> <name>REBASE_VERBOSE</name> <operator>|</operator> <name>REBASE_DIFFSTAT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"continue"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"continue rebase"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>ACTION_CONTINUE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"skip"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"skip commit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACTION_SKIP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"edit-todo"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"edit the todo list"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>ACTION_EDIT_TODO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"show-current-patch"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show the current patch"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>ACTION_SHOW_CURRENT_PATCH</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"shorten-ids"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"shorten commit ids in the todo list"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACTION_SHORTEN_OIDS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"expand-ids"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"expand commit ids in the todo list"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACTION_EXPAND_OIDS</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check-todo-list"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"check the todo list"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACTION_CHECK_TODO_LIST</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"rearrange-squash"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"rearrange fixup/squash lines"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACTION_REARRANGE_SQUASH</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"add-exec-commands"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>command</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"insert exec commands in todo list"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACTION_ADD_EXEC</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"onto"</literal></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>onto</name></name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"onto"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"onto"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NONEG</name></expr>, <expr><name>parse_opt_commit</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"restrict-revision"</literal></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>restrict_revision</name></name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"restrict-revision"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"restrict revision"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NONEG</name></expr>, <expr><name>parse_opt_commit</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"squash-onto"</literal></expr>, <expr><operator>&amp;</operator><name>squash_onto</name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"squash-onto"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"squash onto"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>PARSE_OPT_NONEG</name></expr>, <expr><name>parse_opt_object_id</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"upstream"</literal></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>upstream</name></name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"upstream"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"the upstream commit"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>PARSE_OPT_NONEG</name></expr>, <expr><name>parse_opt_commit</name></expr>,

<expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"head-name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>head_name</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"head-name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"head name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_STRING</name></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="string">"gpg-sign"</literal></expr>, <expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>gpg_sign_opt</name></name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"key-id"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"GPG-sign commits"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_OPTARG</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <literal type="string">""</literal></expr> }</block></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"strategy"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>strategy</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"strategy"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"rebase strategy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"strategy-opts"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>strategy_opts</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"strategy-opts"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"strategy options"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"switch-to"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>switch_to</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"switch-to"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"the branch or commit to checkout"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"onto-name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>onto_name</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"onto-name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"onto name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"cmd"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>cmd</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"cmd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"the command to run"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_RERERE_AUTOUPDATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>allow_rerere_autoupdate</name></name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"reschedule-failed-exec"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>.</operator><name>reschedule_failed_exec</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"automatically re-schedule any `exec` that fails"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>rebase_cousins</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>builtin_rebase_interactive_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,

<argument><expr><name>builtin_rebase_interactive_usage</name></expr></argument>, <argument><expr><name>PARSE_OPT_KEEP_ARGV0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>squash_onto</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>squash_onto</name></name> <operator>=</operator> <operator>&amp;</operator><name>squash_onto</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>.</operator><name>rebase_cousins</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>opts</name><operator>.</operator><name>rebase_merges</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--[no-]rebase-cousins has no effect without "</literal>

<literal type="string">"--rebase-merges"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><call><name>run_sequencer_rebase</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_merge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REBASE_MERGE</name> <operator>||</operator>

<name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REBASE_PRESERVE_MERGES</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>imply_merge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>REBASE_APPLY</name></expr>:</case>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s requires an interactive rebase"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>REBASE_MERGE</name></expr>:</case>

<case>case <expr><name>REBASE_PRESERVE_MERGES</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REBASE_MERGE</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>state_dir_path</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>prefix_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prefix_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>state_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prefix_len</name> <operator>=</operator> <name><name>path</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_read_file</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_trim_trailing_newline</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_basic_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>head_name</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_one</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"head-name"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>head_name</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>read_one</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"onto"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>head_name</name></name> <operator>=</operator> <ternary><condition><expr><call><name>starts_with</name><argument_list>(<argument><expr><name><name>head_name</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"refs/"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><call><name>xstrdup</name><argument_list>(<argument><expr><name><name>head_name</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not get 'onto': '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>onto</name></name> <operator>=</operator> <call><name>lookup_commit_or_die</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"orig-head"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>read_one</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"orig-head"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>read_one</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"head"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>orig_head</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid orig-head: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"quiet"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REBASE_NO_QUIET</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REBASE_NO_QUIET</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"verbose"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REBASE_VERBOSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"signoff"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>signoff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REBASE_FORCE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"allow_rerere_autoupdate"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_one</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"allow_rerere_autoupdate"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"--rerere-autoupdate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_autoupdate</name></name> <operator>=</operator> <name>RERERE_AUTOUPDATE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="string">"--no-rerere-autoupdate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_autoupdate</name></name> <operator>=</operator> <name>RERERE_NOAUTOUPDATE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignoring invalid allow_rerere_autoupdate: "</literal>

<literal type="string">"'%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"gpg_sign_opt"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_one</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"gpg_sign_opt"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"strategy"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_one</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"strategy"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>strategy</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"strategy_opts"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_one</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"strategy_opts"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>strategy_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>strategy_opts</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rebase_write_basic_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"head-name"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>head_name</name></name></expr> ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>head_name</name></name></expr> </then><else>: <expr><literal type="string">"detached HEAD"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"onto"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>onto</name></name></expr> ?</condition><then> <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>onto</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"orig-head"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>orig_head</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_NO_QUIET</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"quiet"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_VERBOSE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"verbose"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>strategy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"strategy"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>strategy_opts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"strategy_opts"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>strategy_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_autoupdate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"allow_rerere_autoupdate"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"-%s-rerere-autoupdate"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_autoupdate</name></name> <operator>==</operator> <name>RERERE_AUTOUPDATE</name></expr> ?</condition><then>

<expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"-no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"gpg_sign_opt"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>signoff</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"signoff"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"--signoff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>apply_autostash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"autostash"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>autostash</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>stash_apply</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_one</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>autostash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not read '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>autostash</name></expr></argument>, <argument><expr><literal type="string">"^0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stash_apply</name><operator>.</operator><name>args</name></name></expr></argument>,

<argument><expr><literal type="string">"stash"</literal></expr></argument>, <argument><expr><literal type="string">"apply"</literal></expr></argument>, <argument><expr><name><name>autostash</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stash_apply</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stash_apply</name><operator>.</operator><name>no_stderr</name></name> <operator>=</operator> <name><name>stash_apply</name><operator>.</operator><name>no_stdout</name></name> <operator>=</operator>

<name><name>stash_apply</name><operator>.</operator><name>no_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stash_apply</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Applied autostash.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>argv_array</name></name></type> <name>args</name> <init>= <expr><name>ARGV_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>,

<argument><expr><literal type="string">"stash"</literal></expr></argument>, <argument><expr><literal type="string">"store"</literal></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>, <argument><expr><literal type="string">"autostash"</literal></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>,

<argument><expr><name><name>autostash</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>run_command_v_opt</name><argument_list>(<argument><expr><name><name>args</name><operator>.</operator><name>argv</name></name></expr></argument>, <argument><expr><name>RUN_GIT_CMD</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot store %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>autostash</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>autostash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Applying autostash resulted in conflicts.\n"</literal>

<literal type="string">"Your changes are safe in the stash.\n"</literal>

<literal type="string">"You can run \"git stash pop\" or \"git stash drop\" "</literal>

<literal type="string">"at any time.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>autostash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>finish_rebase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>dir</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv_gc_auto</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"gc"</literal></expr>, <expr><literal type="string">"--auto"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>delete_ref</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"REBASE_HEAD"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>REF_NO_DEREF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_autostash</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_object_store</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>run_command_v_opt</name><argument_list>(<argument><expr><name>argv_gc_auto</name></expr></argument>, <argument><expr><name>RUN_GIT_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REBASE_MERGE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>replay_opts</name></name></type> <name>replay</name> <init>= <expr><name>REPLAY_OPTS_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>REPLAY_INTERACTIVE_REBASE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sequencer_remove_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>replay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>state_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>remove_dir_recursively</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not remove '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>state_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>peel_committish</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><call><name>peel_to_type</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>OBJ_COMMIT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_var</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"unset %s; "</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s="</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sq_quote_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_REFLOG_ACTION_ENVIRONMENT</name></cpp:macro> <cpp:value>"GIT_REFLOG_ACTION"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_HEAD_DETACH</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_HEAD_HARD</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_HEAD_RUN_POST_CHECKOUT_HOOK</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_HEAD_REFS_ONLY</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET_ORIG_HEAD</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>reset_head</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>switch_to_branch</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reflog_orig_head</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reflog_head</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>detach_head</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RESET_HEAD_DETACH</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>reset_hard</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RESET_HEAD_HARD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>run_hook</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RESET_HEAD_RUN_POST_CHECKOUT_HOOK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>refs_only</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RESET_HEAD_REFS_ONLY</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>update_orig_head</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>RESET_ORIG_HEAD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>head_oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tree_desc</name></name></type> <name><name>desc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>, <expr><block>{ <expr><name>NULL</name></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>unpack_trees_options</name></name></type> <name>unpack_tree_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>reflog_action</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>msg</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>prefix_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>orig</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>oid_orig</name></decl>,

<decl><type ref="prev"><modifier>*</modifier></type><name>old_orig</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>oid_old_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>switch_to_branch</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name>switch_to_branch</name></expr></argument>, <argument><expr><literal type="string">"refs/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"Not a fully qualified branch: '%s'"</literal></expr></argument>, <argument><expr><name>switch_to_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>refs_only</name> <operator>&amp;&amp;</operator> <call><name>hold_locked_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><name>LOCK_REPORT_ON_ERROR</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>leave_reset_head</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>oid</name> <operator>||</operator> <operator>!</operator><name>reset_hard</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>get_oid</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>head_oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not determine HEAD revision"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>leave_reset_head</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>oid</name> <operator>=</operator> <operator>&amp;</operator><name>head_oid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>refs_only</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>reset_head_refs</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unpack_tree_opts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unpack_tree_opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_unpack_trees_porcelain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>unpack_tree_opts</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>unpack_tree_opts</name><operator>.</operator><name>head_idx</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>unpack_tree_opts</name><operator>.</operator><name>src_index</name></name> <operator>=</operator> <name><name>the_repository</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>unpack_tree_opts</name><operator>.</operator><name>dst_index</name></name> <operator>=</operator> <name><name>the_repository</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>unpack_tree_opts</name><operator>.</operator><name>fn</name></name> <operator>=</operator> <ternary><condition><expr><name>reset_hard</name></expr> ?</condition><then> <expr><name>oneway_merge</name></expr> </then><else>: <expr><name>twoway_merge</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>unpack_tree_opts</name><operator>.</operator><name>update</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>unpack_tree_opts</name><operator>.</operator><name>merge</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_checkout_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>unpack_tree_opts</name><operator>.</operator><name>meta</name></name></expr></argument>, <argument><expr><name>switch_to_branch</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>detach_head</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>unpack_tree_opts</name><operator>.</operator><name>reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>repo_read_index_unmerged</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>leave_reset_head</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reset_hard</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>fill_tree_descriptor</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desc</name><index>[<expr><name>nr</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>head_oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to find tree of %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>leave_reset_head</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fill_tree_descriptor</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>desc</name><index>[<expr><name>nr</name><operator>++</operator></expr>]</index></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to find tree of %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>leave_reset_head</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unpack_trees</name><argument_list>(<argument><expr><name>nr</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unpack_tree_opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>leave_reset_head</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name>parse_tree_indirect</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prime_cache_tree</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>tree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_locked_index</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><name>COMMIT_LOCK</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not write index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>leave_reset_head</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>reset_head_refs</name>:</label>

<expr_stmt><expr><name>reflog_action</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>GIT_REFLOG_ACTION_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>reflog_action</name></expr> ?</condition><then> <expr><name>reflog_action</name></expr> </then><else>: <expr><literal type="string">"rebase"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prefix_len</name> <operator>=</operator> <name><name>msg</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>update_orig_head</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_oid</name><argument_list>(<argument><expr><literal type="string">"ORIG_HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_old_orig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>old_orig</name> <operator>=</operator> <operator>&amp;</operator><name>oid_old_orig</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_oid</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid_orig</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>orig</name> <operator>=</operator> <operator>&amp;</operator><name>oid_orig</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reflog_orig_head</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"updating ORIG_HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reflog_orig_head</name> <operator>=</operator> <name><name>msg</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>update_ref</name><argument_list>(<argument><expr><name>reflog_orig_head</name></expr></argument>, <argument><expr><literal type="string">"ORIG_HEAD"</literal></expr></argument>, <argument><expr><name>orig</name></expr></argument>,

<argument><expr><name>old_orig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UPDATE_REFS_MSG_ON_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>old_orig</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>delete_ref</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"ORIG_HEAD"</literal></expr></argument>, <argument><expr><name>old_orig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>reflog_head</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"updating HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>reflog_head</name> <operator>=</operator> <name><name>msg</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>switch_to_branch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_ref</name><argument_list>(<argument><expr><name>reflog_head</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>detach_head</name></expr> ?</condition><then> <expr><name>REF_NO_DEREF</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>UPDATE_REFS_MSG_ON_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>update_ref</name><argument_list>(<argument><expr><name>reflog_head</name></expr></argument>, <argument><expr><name>switch_to_branch</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UPDATE_REFS_MSG_ON_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>create_symref</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name>switch_to_branch</name></expr></argument>,

<argument><expr><name>reflog_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>run_hook</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>run_hook_le</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"post-checkout"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><ternary><condition><expr><name>orig</name></expr> ?</condition><then> <expr><name>orig</name></expr> </then><else>: <expr><operator>&amp;</operator><name>null_oid</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>leave_reset_head</name>:</label>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>nr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>desc</name><index>[<expr><operator>--</operator><name>nr</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>move_to_original_branch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>orig_head_reflog</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>, <decl><type ref="prev"/><name>head_reflog</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>head_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opts</name><operator>-&gt;</operator><name>onto</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"move_to_original_branch without onto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>orig_head_reflog</name></expr></argument>, <argument><expr><literal type="string">"rebase finished: %s onto %s"</literal></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>head_name</name></name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>onto</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head_reflog</name></expr></argument>, <argument><expr><literal type="string">"rebase finished: returning to %s"</literal></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>head_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>reset_head</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>head_name</name></name></expr></argument>, <argument><expr><name>RESET_HEAD_REFS_ONLY</name></expr></argument>,

<argument><expr><name><name>orig_head_reflog</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>head_reflog</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>orig_head_reflog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head_reflog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>resolvemsg</name> <init>=

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Resolve all conflicts manually, mark them as resolved with\n"</literal>

<literal type="string">"\"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\n"</literal>

<literal type="string">"You can instead skip this commit: run \"git rebase --skip\".\n"</literal>

<literal type="string">"To abort and get back to the state before \"git rebase\", run "</literal>

<literal type="string">"\"git rebase --abort\"."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_am</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>am</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>format_patch</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>revisions</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rebased_patches</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>am</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"am"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>action</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"continue"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--resolved"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--resolvemsg=%s"</literal></expr></argument>, <argument><expr><name>resolvemsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>am</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>move_to_original_branch</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>action</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"skip"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--skip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--resolvemsg=%s"</literal></expr></argument>, <argument><expr><name>resolvemsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>am</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>status</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>move_to_original_branch</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>action</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"show-current-patch"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--show-current-patch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>am</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revisions</name></expr></argument>, <argument><expr><literal type="string">"%s...%s"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>root</name></name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>onto</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr> </then><else>:

<expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>upstream</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>orig_head</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rebased_patches</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><call><name>git_path</name><argument_list>(<argument><expr><literal type="string">"rebased-patches"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>format_patch</name><operator>.</operator><name>out</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>rebased_patches</name></expr></argument>,

<argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>format_patch</name><operator>.</operator><name>out</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not open '%s' for writing"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>rebased_patches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rebased_patches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>format_patch</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>format_patch</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"format-patch"</literal></expr></argument>, <argument><expr><literal type="string">"-k"</literal></expr></argument>, <argument><expr><literal type="string">"--stdout"</literal></expr></argument>,

<argument><expr><literal type="string">"--full-index"</literal></expr></argument>, <argument><expr><literal type="string">"--cherry-pick"</literal></expr></argument>, <argument><expr><literal type="string">"--right-only"</literal></expr></argument>,

<argument><expr><literal type="string">"--src-prefix=a/"</literal></expr></argument>, <argument><expr><literal type="string">"--dst-prefix=b/"</literal></expr></argument>, <argument><expr><literal type="string">"--no-renames"</literal></expr></argument>,

<argument><expr><literal type="string">"--no-cover-letter"</literal></expr></argument>, <argument><expr><literal type="string">"--pretty=mboxrd"</literal></expr></argument>, <argument><expr><literal type="string">"--topo-order"</literal></expr></argument>,

<argument><expr><literal type="string">"--no-base"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>git_format_patch_opt</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>format_patch</name><operator>.</operator><name>args</name></name></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>git_format_patch_opt</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>format_patch</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name><name>revisions</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>restrict_revision</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>format_patch</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"^%s"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>restrict_revision</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>format_patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>status</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>rebased_patches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rebased_patches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>orig_head</name></name></expr></argument>, <argument><expr><literal type="string">"checkout"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>head_name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\ngit encountered an error while preparing the "</literal>

<literal type="string">"patches to replay\n"</literal>

<literal type="string">"these revisions:\n"</literal>

<literal type="string">"\n %s\n\n"</literal>

<literal type="string">"As a result, git cannot rebase them."</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>revisions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>am</name><operator>.</operator><name>in</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>rebased_patches</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>am</name><operator>.</operator><name>in</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>error_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not open '%s' for reading"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>rebased_patches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rebased_patches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>argv_array_pushv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>git_am_opts</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--rebasing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--resolvemsg=%s"</literal></expr></argument>, <argument><expr><name>resolvemsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--patch-format=mboxrd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_autoupdate</name></name> <operator>==</operator> <name>RERERE_AUTOUPDATE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--rerere-autoupdate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_autoupdate</name></name> <operator>==</operator> <name>RERERE_NOAUTOUPDATE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--no-rerere-autoupdate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>am</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>run_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>am</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>rebased_patches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>rebased_patches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>move_to_original_branch</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_directory</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>state_dir</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>rebase_write_basic_state</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_specific_rebase</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>action</name></name></type> <name>action</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>script_snippet</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>, <decl><type ref="prev"/><name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>backend</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>backend_func</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REBASE_MERGE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"GIT_CHERRY_PICK_HELP"</literal></expr></argument>, <argument><expr><name>resolvemsg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_INTERACTIVE_EXPLICIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"GIT_SEQUENCE_EDITOR"</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>autosquash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>run_sequencer_rebase</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>finished_rebase</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REBASE_APPLY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>run_am</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>finished_rebase</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"GIT_DIR"</literal></expr></argument>, <argument><expr><call><name>absolute_path</name><argument_list>(<argument><expr><call><name>get_git_dir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"state_dir"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>state_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"upstream_name"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>upstream_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"upstream"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>upstream</name></name></expr> ?</condition><then>

<expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>upstream</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"head_name"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>head_name</name></name></expr> ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>head_name</name></name></expr> </then><else>: <expr><literal type="string">"detached HEAD"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"orig_head"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>orig_head</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"onto"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>onto</name></name></expr> ?</condition><then>

<expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>onto</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"onto_name"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>onto_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"revisions"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>revisions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"restrict_revision"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>restrict_revision</name></name></expr> ?</condition><then>

<expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>restrict_revision</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sq_quote_argv_pretty</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>git_am_opts</name><operator>.</operator><name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"git_am_opt"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"verbose"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_VERBOSE</name></expr> ?</condition><then> <expr><literal type="string">"t"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"diffstat"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_DIFFSTAT</name></expr> ?</condition><then> <expr><literal type="string">"t"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"force_rebase"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_FORCE</name></expr> ?</condition><then> <expr><literal type="string">"t"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>switch_to</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"switch_to"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>switch_to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"action"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>action</name></name></expr> ?</condition><then> <expr><name><name>opts</name><operator>-&gt;</operator><name>action</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"signoff"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>signoff</name></name></expr> ?</condition><then> <expr><literal type="string">"--signoff"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"allow_rerere_autoupdate"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_autoupdate</name></name></expr> ?</condition><then>

<expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>allow_rerere_autoupdate</name></name> <operator>==</operator> <name>RERERE_AUTOUPDATE</name></expr> ?</condition><then>

<expr><literal type="string">"--rerere-autoupdate"</literal></expr> </then><else>: <expr><literal type="string">"--no-rerere-autoupdate"</literal></expr></else></ternary></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"autosquash"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>autosquash</name></name></expr> ?</condition><then> <expr><literal type="string">"t"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"gpg_sign_opt"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"cmd"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"allow_empty_message"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>allow_empty_message</name></name></expr> ?</condition><then> <expr><literal type="string">"--allow-empty-message"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"rebase_merges"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>rebase_merges</name></name></expr> ?</condition><then> <expr><literal type="string">"t"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"rebase_cousins"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>rebase_cousins</name></name></expr> ?</condition><then> <expr><literal type="string">"t"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"strategy"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"strategy_opts"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>strategy_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"rebase_root"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>root</name></name></expr> ?</condition><then> <expr><literal type="string">"t"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"squash_onto"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>squash_onto</name></name></expr> ?</condition><then> <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>squash_onto</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_var</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>, <argument><expr><literal type="string">"git_format_patch_opt"</literal></expr></argument>,

<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>git_format_patch_opt</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_merge</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_INTERACTIVE_EXPLICIT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>,

<argument><expr><literal type="string">"GIT_SEQUENCE_EDITOR=:; export GIT_SEQUENCE_EDITOR; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>autosquash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>REBASE_PRESERVE_MERGES</name></expr>:</case>

<expr_stmt><expr><name>backend</name> <operator>=</operator> <literal type="string">"git-rebase--preserve-merges"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>backend_func</name> <operator>=</operator> <literal type="string">"git_rebase__preserve_merges"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"Unhandled rebase type %d"</literal></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>,

<argument><expr><literal type="string">". git-sh-setup &amp;&amp; . %s &amp;&amp; %s"</literal></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>backend_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>script_snippet</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>run_command_v_opt</name><argument_list>(<argument><expr><name>argv</name></expr></argument>, <argument><expr><name>RUN_USING_SHELL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finished_rebase</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>dont_finish_rebase</name></name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>REBASE_MERGE</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"stopped-sha"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>finish_rebase</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>status</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>dir</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>apply_autostash</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><name><name>opts</name><operator>-&gt;</operator><name>state_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_dir_recursively</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Nothing to do"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>script_snippet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>status</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rebase_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"rebase.stat"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REBASE_DIFFSTAT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REBASE_DIFFSTAT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"rebase.autosquash"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>autosquash</name></name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"commit.gpgsign"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>gpg_sign_opt</name></name> <operator>=</operator> <ternary><condition><expr><call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><call><name>xstrdup</name><argument_list>(<argument><expr><literal type="string">"-S"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"rebase.autostash"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>autostash</name></name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"rebase.reschedulefailedexec"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>reschedule_failed_exec</name></name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"rebase.usebuiltin"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>use_legacy_rebase</name></name> <operator>=</operator> <operator>!</operator><call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"rebase.backend"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opts</name><operator>-&gt;</operator><name>default_backend</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>git_default_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_linear_history</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>to</name> <operator>&amp;&amp;</operator> <name>to</name> <operator>!=</operator> <name>from</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_commit</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>to</name><operator>-&gt;</operator><name>parents</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>to</name><operator>-&gt;</operator><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>to</name><operator>-&gt;</operator><name>parents</name><operator>-&gt;</operator><name>item</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>can_fast_forward</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>onto</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>upstream</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>restrict_revision</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>head_oid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>merge_base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>head</name> <init>= <expr><call><name>lookup_commit</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>head_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>merge_bases</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>head</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>merge_bases</name> <operator>=</operator> <call><name>get_merge_bases</name><argument_list>(<argument><expr><name>onto</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>merge_bases</name> <operator>||</operator> <name><name>merge_bases</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><name>merge_base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>null_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><name>merge_base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>merge_bases</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><name>merge_base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>onto</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>restrict_revision</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>restrict_revision</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>merge_base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>upstream</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_commit_list</name><argument_list>(<argument><expr><name>merge_bases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>merge_bases</name> <operator>=</operator> <call><name>get_merge_bases</name><argument_list>(<argument><expr><name>upstream</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>merge_bases</name> <operator>||</operator> <name><name>merge_bases</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>onto</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>merge_bases</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>free_commit_list</name><argument_list>(<argument><expr><name>merge_bases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name> <operator>&amp;&amp;</operator> <call><name>is_linear_history</name><argument_list>(<argument><expr><name>onto</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_opt_am</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_ARG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REBASE_APPLY</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_opt_merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_ARG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_merge</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REBASE_MERGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_opt_interactive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_ARG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>REBASE_MERGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>REBASE_INTERACTIVE_EXPLICIT</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>empty_type</name></name></type> <name>parse_empty_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"drop"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EMPTY_DROP</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"keep"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EMPTY_KEEP</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"ask"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>EMPTY_ASK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unrecognized empty type '%s'; valid values are \"drop\", \"keep\", and \"ask\"."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_opt_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name><name>opt</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>empty_type</name></name></type> <name>value</name> <init>= <expr><call><name>parse_empty_value</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>-&gt;</operator><name>empty</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>NORETURN</name></type> <name>error_on_missing_default_upstream</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>current_branch</name> <init>= <expr><call><name>branch_get</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal>

<literal type="string">"Please specify which branch you want to rebase against.\n"</literal>

<literal type="string">"See git-rebase(1) for details.\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" git rebase '&lt;branch&gt;'\n"</literal>

<literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name>current_branch</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"There is no tracking information for "</literal>

<literal type="string">"the current branch."</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You are not currently on a branch."</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_branch</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>remote</name> <init>= <expr><name><name>current_branch</name><operator>-&gt;</operator><name>remote_name</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>remote</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>remote</name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"&lt;remote&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"If you wish to set tracking information for this "</literal>

<literal type="string">"branch you can do so with:\n"</literal>

<literal type="string">"\n"</literal>

<literal type="string">" git branch --set-upstream-to=%s/&lt;branch&gt; %s\n"</literal>

<literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>remote</name></expr></argument>, <argument><expr><name><name>current_branch</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_reflog_action</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rebase_options</name></name> <modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>env</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_merge</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>GIT_REFLOG_ACTION_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>env</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"rebase"</literal></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"rebase (%s)"</literal></expr></argument>, <argument><expr><name><name>options</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_REFLOG_ACTION_ENVIRONMENT</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_exec_cmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"exec commands cannot contain newlines"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cmd</name><index>[<expr><call><name>strspn</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">" \t\r\f\v"</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"empty exec command"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_rebase</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rebase_options</name></name></type> <name>options</name> <init>= <expr><name>REBASE_OPTIONS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>branch_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>total_argc</name></decl>, <decl><type ref="prev"/><name>in_progress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keep_base</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok_to_skip_pre_rebase</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>msg</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>revisions</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>merge_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>action</name></name></type> <name>action</name> <init>= <expr><name>ACTION_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gpg_sign</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>exec</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rebase_merges</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fork_point</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>strategy_options</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>squash_onto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>squash_onto_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reschedule_failed_exec</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allow_preemptive_ff</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>builtin_rebase_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"onto"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"revision"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"rebase onto given branch instead of upstream"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"keep-base"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keep_base</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use the merge-base of upstream and branch as the current base"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no-verify"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok_to_skip_pre_rebase</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"allow pre-rebase hook to run"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_NEGBIT</name><argument_list>(<argument><expr><literal type="char">'q'</literal></expr></argument>, <argument><expr><literal type="string">"quiet"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>flags</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"be quiet. implies --no-stat"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>REBASE_NO_QUIET</name> <operator>|</operator> <name>REBASE_VERBOSE</name> <operator>|</operator> <name>REBASE_DIFFSTAT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="string">"verbose"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>flags</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"display a diffstat of what changed upstream"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>REBASE_NO_QUIET</name> <operator>|</operator> <name>REBASE_VERBOSE</name> <operator>|</operator> <name>REBASE_DIFFSTAT</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{<expr><name>OPTION_NEGBIT</name></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="string">"no-stat"</literal></expr>, <expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>flags</name></name></expr>, <expr><name>NULL</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"do not show diffstat of what changed upstream"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NOARG</name></expr>, <expr><name>NULL</name></expr>, <expr><name>REBASE_DIFFSTAT</name></expr> }</block></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"signoff"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>signoff</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"add a Signed-off-by: line to each commit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_PASSTHRU_ARGV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ignore-whitespace"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>git_am_opts</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"passed to 'git am'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NOARG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_PASSTHRU_ARGV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"committer-date-is-author-date"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>git_am_opts</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"passed to 'git am'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PARSE_OPT_NOARG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_PASSTHRU_ARGV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ignore-date"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>git_am_opts</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"passed to 'git am'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PARSE_OPT_NOARG</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_PASSTHRU_ARGV</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>git_am_opts</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"passed to 'git apply'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_PASSTHRU_ARGV</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"whitespace"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>git_am_opts</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"action"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"passed to 'git apply'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="string">"force-rebase"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>flags</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"cherry-pick all commits, even if unchanged"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>REBASE_FORCE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no-ff"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>flags</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"cherry-pick all commits, even if unchanged"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>REBASE_FORCE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"continue"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"continue"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>ACTION_CONTINUE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"skip"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"skip current patch and continue"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACTION_SKIP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"abort"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"abort and check out the original branch"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>ACTION_ABORT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"quit"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"abort but keep HEAD where it is"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACTION_QUIT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"edit-todo"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"edit the todo list "</literal>

<literal type="string">"during an interactive rebase"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACTION_EDIT_TODO</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CMDMODE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"show-current-patch"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>action</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show the patch file being applied or merged"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>ACTION_SHOW_CURRENT_PATCH</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"apply"</literal></expr>, <expr><operator>&amp;</operator><name>options</name></expr>, <expr><name>NULL</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use apply strategies to rebase"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NOARG</name> <operator>|</operator> <name>PARSE_OPT_NONEG</name></expr>,

<expr><name>parse_opt_am</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="string">"merge"</literal></expr>, <expr><operator>&amp;</operator><name>options</name></expr>, <expr><name>NULL</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use merging strategies to rebase"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NOARG</name> <operator>|</operator> <name>PARSE_OPT_NONEG</name></expr>,

<expr><name>parse_opt_merge</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="string">"interactive"</literal></expr>, <expr><operator>&amp;</operator><name>options</name></expr>, <expr><name>NULL</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"let the user edit the list of commits to rebase"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NOARG</name> <operator>|</operator> <name>PARSE_OPT_NONEG</name></expr>,

<expr><name>parse_opt_interactive</name></expr> }</block></expr>,

<expr><call><name>OPT_SET_INT_F</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="string">"preserve-merges"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>type</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"(DEPRECATED) try to recreate merges instead of "</literal>

<literal type="string">"ignoring them"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>REBASE_PRESERVE_MERGES</name></expr></argument>, <argument><expr><name>PARSE_OPT_HIDDEN</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_RERERE_AUTOUPDATE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>allow_rerere_autoupdate</name></name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_CALLBACK_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"empty"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"{drop,keep,ask}"</literal></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"how to handle commits that become empty"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_NONEG</name></expr></argument>, <argument><expr><name>parse_opt_empty</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="string">"keep-empty"</literal></expr>, <expr><operator>&amp;</operator><name>options</name></expr>, <expr><name>NULL</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"(DEPRECATED) keep empty commits"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NOARG</name> <operator>|</operator> <name>PARSE_OPT_HIDDEN</name></expr>,

<expr><name>parse_opt_keep_empty</name></expr> }</block></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"autosquash"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>autosquash</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"move commits that begin with "</literal>

<literal type="string">"squash!/fixup! under -i"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_STRING</name></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="string">"gpg-sign"</literal></expr>, <expr><operator>&amp;</operator><name>gpg_sign</name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"key-id"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"GPG-sign commits"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_OPTARG</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>intptr_t</name><operator>)</operator> <literal type="string">""</literal></expr> }</block></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"autostash"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>autostash</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"automatically stash/stash pop before and after"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING_LIST</name><argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><literal type="string">"exec"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>exec</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"exec"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"add exec lines after each commit of the "</literal>

<literal type="string">"editable list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL_F</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"allow-empty-message"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>allow_empty_message</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"allow rebasing commits with empty messages"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>PARSE_OPT_HIDDEN</name></expr></argument>)</argument_list></call></expr>,

<expr><block>{<expr><name>OPTION_STRING</name></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="string">"rebase-merges"</literal></expr>, <expr><operator>&amp;</operator><name>rebase_merges</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"mode"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"try to rebase merges instead of skipping them"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_OPTARG</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><literal type="string">""</literal></expr>}</block></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"fork-point"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fork_point</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use 'merge-base --fork-point' to refine upstream"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="string">"strategy"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>strategy</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"strategy"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"use the given merge strategy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING_LIST</name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="string">"strategy-option"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strategy_options</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"option"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"pass the argument through to the merge "</literal>

<literal type="string">"strategy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>root</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"rebase all reachable commits up to the root(s)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"reschedule-failed-exec"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>reschedule_failed_exec</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"automatically re-schedule any `exec` that fails"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_END</name><argument_list>()</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>builtin_rebase_usage</name></expr></argument>,

<argument><expr><name>builtin_rebase_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>allow_empty_message</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>rebase_config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>use_legacy_rebase</name></name> <operator>||</operator>

<operator>!</operator><call><name>git_env_bool</name><argument_list>(<argument><expr><literal type="string">"GIT_TEST_REBASE_USE_BUILTIN"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"the rebase.useBuiltin support has been removed!\n"</literal>

<literal type="string">"See its entry in 'git help config' for details."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/applying"</literal></expr></argument>, <argument><expr><call><name>apply_dir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"It looks like 'git am' is in progress. Cannot rebase."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_directory</name><argument_list>(<argument><expr><call><name>apply_dir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>REBASE_APPLY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>state_dir</name></name> <operator>=</operator> <call><name>apply_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_directory</name><argument_list>(<argument><expr><call><name>merge_dir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/rewritten"</literal></expr></argument>, <argument><expr><call><name>merge_dir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_directory</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>REBASE_PRESERVE_MERGES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>REBASE_INTERACTIVE_EXPLICIT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/interactive"</literal></expr></argument>, <argument><expr><call><name>merge_dir</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>REBASE_MERGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>REBASE_INTERACTIVE_EXPLICIT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>REBASE_MERGE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>state_dir</name></name> <operator>=</operator> <call><name>merge_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>REBASE_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>in_progress</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total_argc</name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>,

<argument><expr><name>builtin_rebase_options</name></expr></argument>,

<argument><expr><name>builtin_rebase_usage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>ACTION_NONE</name> <operator>&amp;&amp;</operator> <name>total_argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>builtin_rebase_usage</name></expr></argument>,

<argument><expr><name>builtin_rebase_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>builtin_rebase_usage</name></expr></argument>,

<argument><expr><name>builtin_rebase_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REBASE_PRESERVE_MERGES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"git rebase --preserve-merges is deprecated. "</literal>

<literal type="string">"Use --rebase-merges instead."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keep_base</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot combine '--keep-base' with '--onto'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>root</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot combine '--keep-base' with '--root'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <name>ACTION_NONE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>in_progress</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No rebase in progress?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><name>GIT_REFLOG_ACTION_ENVIRONMENT</name></expr></argument>, <argument><expr><literal type="string">"rebase"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <name>ACTION_EDIT_TODO</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The --edit-todo action can only be used during "</literal>

<literal type="string">"interactive rebase."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>trace2_is_enabled</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>trace2_cmd_mode</name><argument_list>(<argument><expr><literal type="string">"interactive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>exec</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>trace2_cmd_mode</name><argument_list>(<argument><expr><literal type="string">"interactive-exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>trace2_cmd_mode</name><argument_list>(<argument><expr><name><name>action_names</name><index>[<expr><name>action</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>action</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ACTION_CONTINUE</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock_file</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>action</name></name> <operator>=</operator> <literal type="string">"continue"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_reflog_action</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot read HEAD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>hold_locked_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>repo_read_index</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>refresh_index</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name>REFRESH_QUIET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>repo_update_index_if_able</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_unstaged_changes</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You must edit all merge conflicts and then\n"</literal>

<literal type="string">"mark them as resolved using git add"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_basic_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>run_rebase</name>;</goto>

</block_content>}</block>

<case>case <expr><name>ACTION_SKIP</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>merge_rr</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>action</name></name> <operator>=</operator> <literal type="string">"skip"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_reflog_action</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rerere_clear</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge_rr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>reset_head</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RESET_HEAD_HARD</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not discard worktree changes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>remove_branch_state</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_basic_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>run_rebase</name>;</goto>

</block_content>}</block>

<case>case <expr><name>ACTION_ABORT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>merge_rr</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>action</name></name> <operator>=</operator> <literal type="string">"abort"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_reflog_action</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rerere_clear</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge_rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge_rr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_basic_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>reset_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>orig_head</name></name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>,

<argument><expr><name><name>options</name><operator>.</operator><name>head_name</name></name></expr></argument>, <argument><expr><name>RESET_HEAD_HARD</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not move back to %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>orig_head</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>remove_branch_state</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>finish_rebase</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block>

<case>case <expr><name>ACTION_QUIT</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REBASE_MERGE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>replay_opts</name></name></type> <name>replay</name> <init>= <expr><name>REPLAY_OPTS_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>replay</name><operator>.</operator><name>action</name></name> <operator>=</operator> <name>REPLAY_INTERACTIVE_REBASE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>sequencer_remove_state</name><argument_list>(<argument><expr><operator>&amp;</operator><name>replay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>state_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>remove_dir_recursively</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not remove '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>options</name><operator>.</operator><name>state_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block>

<case>case <expr><name>ACTION_EDIT_TODO</name></expr>:</case>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>action</name></name> <operator>=</operator> <literal type="string">"edit-todo"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>dont_finish_rebase</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>run_rebase</name>;</goto>

<case>case <expr><name>ACTION_SHOW_CURRENT_PATCH</name></expr>:</case>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>action</name></name> <operator>=</operator> <literal type="string">"show-current-patch"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>dont_finish_rebase</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>run_rebase</name>;</goto>

<case>case <expr><name>ACTION_NONE</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"action: %d"</literal></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>in_progress</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>last_slash</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>state_dir</name></name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>state_dir_base</name> <init>=

<expr><ternary><condition><expr><name>last_slash</name></expr> ?</condition><then> <expr><name>last_slash</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>options</name><operator>.</operator><name>state_dir</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd_live_rebase</name> <init>=

<expr><literal type="string">"git rebase (--continue | --abort | --skip)"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"rm -fr \"%s\""</literal></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>state_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"It seems that there is already a %s directory, and\n"</literal>

<literal type="string">"I wonder if you are in the middle of another rebase. "</literal>

<literal type="string">"If that is the\n"</literal>

<literal type="string">"case, please try\n\t%s\n"</literal>

<literal type="string">"If that is not the case, please\n\t%s\n"</literal>

<literal type="string">"and run me again. I am stopping in case you still "</literal>

<literal type="string">"have something\n"</literal>

<literal type="string">"valuable there.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>state_dir_base</name></expr></argument>, <argument><expr><name>cmd_live_rebase</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_INTERACTIVE_EXPLICIT</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>action</name> <operator>!=</operator> <name>ACTION_NONE</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>exec</name><operator>.</operator><name>nr</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<name><name>options</name><operator>.</operator><name>autosquash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>allow_preemptive_ff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>options</name><operator>.</operator><name>git_am_opts</name><operator>.</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><name><name>options</name><operator>.</operator><name>git_am_opts</name><operator>.</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"--committer-date-is-author-date"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"--ignore-date"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"--whitespace=fix"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"--whitespace=strip"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>allow_preemptive_ff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"-C"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"switch `C' expects a "</literal>

<literal type="string">"numerical value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"--whitespace="</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"warn"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"nowarn"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"error-all"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Invalid whitespace option: '%s'"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>exec</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_exec_cmd</name><argument_list>(<argument><expr><name><name>exec</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_NO_QUIET</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>git_am_opts</name></name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>empty</name></name> <operator>!=</operator> <name>EMPTY_UNSPECIFIED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>imply_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"--empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gpg_sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>gpg_sign_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>gpg_sign_opt</name></name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"-S%s"</literal></expr></argument>, <argument><expr><name>gpg_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>exec</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>imply_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"--exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>exec</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"exec %s\n"</literal></expr></argument>, <argument><expr><name><name>exec</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>cmd</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rebase_merges</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>rebase_merges</name></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"rebase-cousins"</literal></expr></argument>, <argument><expr><name>rebase_merges</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>rebase_cousins</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"no-rebase-cousins"</literal></expr></argument>, <argument><expr><name>rebase_merges</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown mode: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rebase_merges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>rebase_merges</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>imply_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"--rebase-merges"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>strategy_options</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>strategy</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>strategy</name></name> <operator>=</operator> <literal type="string">"recursive"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>strategy_options</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">" --%s"</literal></expr></argument>,

<argument><expr><name><name>strategy_options</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>strategy_opts</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>strategy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>strategy</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>options</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>REBASE_APPLY</name></expr>:</case>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--strategy requires --merge or --interactive"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>REBASE_MERGE</name></expr>:</case>

<case>case <expr><name>REBASE_PRESERVE_MERGES</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>REBASE_UNSPECIFIED</name></expr>:</case>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>REBASE_MERGE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unhandled rebase type (%d)"</literal></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REBASE_MERGE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>imply_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"--merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>root</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>imply_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"--root without --onto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>options</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_NO_QUIET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>git_format_patch_opt</name></name></expr></argument>, <argument><expr><literal type="string">" --progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>git_am_opts</name><operator>.</operator><name>argc</name></name> <operator>||</operator> <name><name>options</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REBASE_APPLY</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>git_am_opts</name><operator>.</operator><name>argc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>git_am_opts</name><operator>.</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot combine apply options with "</literal>

<literal type="string">"merge options"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>REBASE_APPLY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REBASE_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>default_backend</name></name></expr></argument>, <argument><expr><literal type="string">"merge"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>imply_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">"--merge"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>default_backend</name></name></expr></argument>, <argument><expr><literal type="string">"apply"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>REBASE_APPLY</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown rebase backend: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>options</name><operator>.</operator><name>default_backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>options</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>REBASE_MERGE</name></expr>:</case>

<case>case <expr><name>REBASE_PRESERVE_MERGES</name></expr>:</case>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>state_dir</name></name> <operator>=</operator> <call><name>merge_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>REBASE_APPLY</name></expr>:</case>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>state_dir</name></name> <operator>=</operator> <call><name>apply_dir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"options.type was just set above; should be unreachable."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>empty</name></name> <operator>==</operator> <name>EMPTY_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_INTERACTIVE_EXPLICIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>empty</name></name> <operator>=</operator> <name>EMPTY_ASK</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>exec</name><operator>.</operator><name>nr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>empty</name></name> <operator>=</operator> <name>EMPTY_KEEP</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>empty</name></name> <operator>=</operator> <name>EMPTY_DROP</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reschedule_failed_exec</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>is_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--reschedule-failed-exec requires "</literal>

<literal type="string">"--exec or --interactive"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reschedule_failed_exec</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>reschedule_failed_exec</name></name> <operator>=</operator> <name>reschedule_failed_exec</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>signoff</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REBASE_PRESERVE_MERGES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot combine '--signoff' with "</literal>

<literal type="string">"'--preserve-merges'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>git_am_opts</name></name></expr></argument>, <argument><expr><literal type="string">"--signoff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>REBASE_FORCE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>REBASE_PRESERVE_MERGES</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>rebase_merges</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot combine '--preserve-merges' with "</literal>

<literal type="string">"'--rebase-merges'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>reschedule_failed_exec</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error: cannot combine '--preserve-merges' with "</literal>

<literal type="string">"'--reschedule-failed-exec'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>root</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>branch</name></name> <modifier>*</modifier></type><name>branch</name></decl>;</decl_stmt>

<expr_stmt><expr><name>branch</name> <operator>=</operator> <call><name>branch_get</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>upstream_name</name></name> <operator>=</operator> <call><name>branch_get_upstream</name><argument_list>(<argument><expr><name>branch</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>upstream_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error_on_missing_default_upstream</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fork_point</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>fork_point</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>upstream_name</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>upstream_name</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>upstream_name</name></name> <operator>=</operator> <literal type="string">"@{-1}"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>upstream</name></name> <operator>=</operator> <call><name>peel_committish</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>upstream_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>upstream</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid upstream '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>upstream_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>upstream_arg</name></name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>upstream_name</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>commit_tree</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>empty_tree</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>squash_onto</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not create new root commit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>squash_onto</name></name> <operator>=</operator> <operator>&amp;</operator><name>squash_onto</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>onto_name</name></name> <operator>=</operator> <name>squash_onto_name</name> <operator>=</operator>

<call><name>xstrdup</name><argument_list>(<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>squash_onto</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>root_with_onto</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>upstream_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>upstream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>builtin_rebase_usage</name></expr></argument>,

<argument><expr><name>builtin_rebase_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>upstream_arg</name></name> <operator>=</operator> <literal type="string">"--root"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keep_base</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>upstream_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>onto_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>onto_name</name></name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>upstream_name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr></argument>, <argument><expr><literal type="string">"..."</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_oid_mb</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge_base</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>keep_base</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s': need exactly one merge base with branch"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>options</name><operator>.</operator><name>upstream_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"'%s': need exactly one merge base"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>onto</name></name> <operator>=</operator> <call><name>lookup_commit_or_die</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge_base</name></expr></argument>,

<argument><expr><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>onto</name></name> <operator>=</operator> <call><name>peel_committish</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>onto</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Does not point to a valid commit '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>branch_name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>switch_to</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/%s"</literal></expr></argument>, <argument><expr><name>branch_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_ref</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>orig_head</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>die_if_checked_out</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>head_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>get_oid</name><argument_list>(<argument><expr><name>branch_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>orig_head</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>head_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"fatal: no such branch/commit '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>branch_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>head_name</name></name> <operator>=</operator>

<call><name>xstrdup_or_null</name><argument_list>(<argument><expr><call><name>resolve_ref_unsafe</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>head_name</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No such ref: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>REF_ISSYMREF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>skip_prefix</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>head_name</name></name></expr></argument>,

<argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>branch_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>branch_name</name> <operator>=</operator> <name><name>options</name><operator>.</operator><name>head_name</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>head_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>branch_name</name> <operator>=</operator> <literal type="string">"HEAD"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>orig_head</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not resolve HEAD to a revision"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"unexpected number of arguments left to parse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fork_point</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>head</name> <init>=

<expr><call><name>lookup_commit_reference</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>orig_head</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>restrict_revision</name></name> <operator>=</operator>

<call><name>get_fork_point</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>upstream_name</name></name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>repo_read_index</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>autostash</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lock_file</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>hold_locked_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>refresh_cache</name><argument_list>(<argument><expr><name>REFRESH_QUIET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>fd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>repo_update_index_if_able</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>rollback_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_unstaged_changes</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>has_uncommitted_changes</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>autostash</name> <init>=

<expr><call><name>state_dir_path</name><argument_list>(<argument><expr><literal type="string">"autostash"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>stash</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>argv_array_pushl</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>stash</name><operator>.</operator><name>args</name></name></expr></argument>,

<argument><expr><literal type="string">"stash"</literal></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="string">"autostash"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stash</name><operator>.</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stash</name><operator>.</operator><name>no_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>capture_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>GIT_MAX_HEXSZ</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Cannot autostash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_trim_trailing_newline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unexpected stash response: '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>safe_create_leading_directories_const</name><argument_list>(<argument><expr><name>autostash</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not create directory for '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>options</name><operator>.</operator><name>state_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_file</name><argument_list>(<argument><expr><name>autostash</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Created autostash: %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>reset_head</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"reset --hard"</literal></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RESET_HEAD_HARD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not reset --hard"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>discard_index</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>repo_read_index</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not read index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>require_clean_work_tree</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><literal type="string">"rebase"</literal></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Please commit or stash them."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>can_fast_forward</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>onto</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>upstream</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>restrict_revision</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>orig_head</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge_base</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name>allow_preemptive_ff</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_FORCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>switch_to</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s: checkout %s"</literal></expr></argument>,

<argument><expr><call><name>getenv</name><argument_list>(<argument><expr><name>GIT_REFLOG_ACTION_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>options</name><operator>.</operator><name>switch_to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>reset_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>orig_head</name></name></expr></argument>, <argument><expr><literal type="string">"checkout"</literal></expr></argument>,

<argument><expr><name><name>options</name><operator>.</operator><name>head_name</name></name></expr></argument>,

<argument><expr><name>RESET_HEAD_RUN_POST_CHECKOUT_HOOK</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not switch to "</literal>

<literal type="string">"%s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>options</name><operator>.</operator><name>switch_to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_NO_QUIET</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>branch_name</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>resolve_ref_unsafe</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"HEAD is up to date."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Current branch %s is up to date.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>branch_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>finish_rebase</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_NO_QUIET</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>branch_name</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>resolve_ref_unsafe</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"HEAD is up to date, rebase forced."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Current branch %s is up to date, rebase "</literal>

<literal type="string">"forced.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>branch_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok_to_skip_pre_rebase</name> <operator>&amp;&amp;</operator>

<call><name>run_hook_le</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pre-rebase"</literal></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>upstream_arg</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>argc</name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The pre-rebase hook refused to rebase."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_DIFFSTAT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>diff_options</name></name></type> <name>opts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_VERBOSE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge_base</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Changes to %s:\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>onto</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Changes from %s to %s:\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge_base</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>onto</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>diff_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>stat_width</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>stat_graph_width</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>output_format</name></name> <operator>|=</operator>

<name>DIFF_FORMAT_SUMMARY</name> <operator>|</operator> <name>DIFF_FORMAT_DIFFSTAT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>opts</name><operator>.</operator><name>detect_rename</name></name> <operator>=</operator> <name>DIFF_DETECT_RENAME</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_setup_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_tree_oid</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>is_null_oid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge_base</name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>empty_tree</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>merge_base</name></expr></else></ternary></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>onto</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diffcore_std</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>diff_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>run_rebase</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REBASE_NO_QUIET</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"First, rewinding head to replay your work on top of "</literal>

<literal type="string">"it...\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s: checkout %s"</literal></expr></argument>,

<argument><expr><call><name>getenv</name><argument_list>(<argument><expr><name>GIT_REFLOG_ACTION_ENVIRONMENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>reset_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>onto</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><literal type="string">"checkout"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>RESET_HEAD_DETACH</name> <operator>|</operator> <name>RESET_ORIG_HEAD</name> <operator>|</operator>

<name>RESET_HEAD_RUN_POST_CHECKOUT_HOOK</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Could not detach HEAD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge_base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>orig_head</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Fast-forwarded %s to %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>branch_name</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>onto_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="string">"rebase finished: %s onto %s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>options</name><operator>.</operator><name>head_name</name></name></expr> ?</condition><then> <expr><name><name>options</name><operator>.</operator><name>head_name</name></name></expr> </then><else>: <expr><literal type="string">"detached HEAD"</literal></expr></else></ternary></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>onto</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>reset_head</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Fast-forwarded"</literal></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>head_name</name></name></expr></argument>,

<argument><expr><name>RESET_HEAD_REFS_ONLY</name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>finish_rebase</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revisions</name></expr></argument>, <argument><expr><literal type="string">"%s..%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>options</name><operator>.</operator><name>root</name></name></expr> ?</condition><then> <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>onto</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><operator>(</operator><ternary><condition><expr><name><name>options</name><operator>.</operator><name>restrict_revision</name></name></expr> ?</condition><then>

<expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>restrict_revision</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>upstream</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>options</name><operator>.</operator><name>orig_head</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>options</name><operator>.</operator><name>revisions</name></name> <operator>=</operator> <name><name>revisions</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<label><name>run_rebase</name>:</label>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>run_specific_rebase</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revisions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>head_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>gpg_sign_opt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>squash_onto_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
