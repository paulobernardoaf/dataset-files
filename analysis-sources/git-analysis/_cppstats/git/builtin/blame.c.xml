<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\builtin\blame.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"color.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mailmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prio-queue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf8.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"userdiff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"line-range.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"line-log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>blame_usage</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git blame [&lt;options&gt;] [&lt;rev-opts&gt;] [&lt;rev&gt;] [--] &lt;file&gt;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>blame_opt_usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>blame_usage</name></expr>,

<expr><literal type="string">""</literal></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"&lt;rev-opts&gt; are documented in git-rev-list(1)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>longest_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>longest_author</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>max_orig_digits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>max_digits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>max_score_digits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>show_root</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reverse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>blank_boundary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>incremental</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xdl_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>abbrev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>no_whole_file_rename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>show_progress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>repeated_meta_color</name><index>[<expr><name>COLOR_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>coloring_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>string_list</name></name></type> <name>ignore_revs_file_list</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mark_unblamable_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mark_ignored_lines</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>date_mode</name></name></type> <name>blame_date_mode</name> <init>= <expr><block>{ <expr><name>DATE_ISO8601</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>blame_date_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>string_list</name></name></type> <name>mailmap</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_BLAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_BLAME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>blame_move_score</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type> <name>blame_copy_score</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METAINFO_SHOWN</name></cpp:macro> <cpp:value>(1u&lt;&lt;12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MORE_THAN_ONE_PATH</name></cpp:macro> <cpp:value>(1u&lt;&lt;13)</cpp:value></cpp:define>

<struct>struct <name>progress_info</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blamed_lines</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nth_line_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lno</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>blame_nth_line</name><argument_list>(<argument><expr><operator>(</operator>struct <name>blame_scoreboard</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>lno</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>commit_info</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>author</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>author_mail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timestamp_t</name></type> <name>author_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>author_tz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>committer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>committer_mail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timestamp_t</name></type> <name>committer_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>committer_tz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>summary</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_ac_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>inbuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>what</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>mail</name></decl></parameter>,

<parameter><decl><type><name>timestamp_t</name> <modifier>*</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>tz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ident_split</name></name></type> <name>ident</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>maillen</name></decl>, <decl><type ref="prev"/><name>namelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>endp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>namebuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mailbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error_out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>endp</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>endp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>endp</name> <operator>-</operator> <name>tmp</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>split_ident_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ident</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<label><name>error_out</name>:</label>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="string">"(unknown)"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>mail</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>namelen</name> <operator>=</operator> <name><name>ident</name><operator>.</operator><name>name_end</name></name> <operator>-</operator> <name><name>ident</name><operator>.</operator><name>name_begin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>namebuf</name> <operator>=</operator> <name><name>ident</name><operator>.</operator><name>name_begin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>maillen</name> <operator>=</operator> <name><name>ident</name><operator>.</operator><name>mail_end</name></name> <operator>-</operator> <name><name>ident</name><operator>.</operator><name>mail_begin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mailbuf</name> <operator>=</operator> <name><name>ident</name><operator>.</operator><name>mail_begin</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ident</name><operator>.</operator><name>date_begin</name></name> <operator>&amp;&amp;</operator> <name><name>ident</name><operator>.</operator><name>date_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>time</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name><name>ident</name><operator>.</operator><name>date_begin</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ident</name><operator>.</operator><name>tz_begin</name></name> <operator>&amp;&amp;</operator> <name><name>ident</name><operator>.</operator><name>tz_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><name><name>ident</name><operator>.</operator><name>tz_begin</name></name></expr></argument>, <argument><expr><name><name>ident</name><operator>.</operator><name>tz_end</name></name> <operator>-</operator> <name><name>ident</name><operator>.</operator><name>tz_begin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>tz</name></expr></argument>, <argument><expr><literal type="string">"(unknown)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>map_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mailmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mailbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maillen</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>namebuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>mail</name></expr></argument>, <argument><expr><literal type="string">"&lt;%.*s&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>maillen</name></expr></argument>, <argument><expr><name>mailbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>commit_info_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_info</name></name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>author</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>author_mail</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>author_tz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>committer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>committer_mail</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>committer_tz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>commit_info_destroy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_info</name></name> <modifier>*</modifier></type><name>ci</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>author_mail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>author_tz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>committer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>committer_mail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>committer_tz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ci</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_commit_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit_info</name></name> <modifier>*</modifier></type><name>ret</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>detailed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subject</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>commit_info_init</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>encoding</name> <operator>=</operator> <call><name>get_log_output_encoding</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>logmsg_reencode</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_ac_line</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">"\nauthor "</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>author</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>author_mail</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>author_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>author_tz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>detailed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>unuse_commit_buffer</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>get_ac_line</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">"\ncommitter "</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>committer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>committer_mail</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>committer_time</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>committer_tz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>find_commit_subject</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>, <argument><expr><name>subject</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ret</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>, <argument><expr><literal type="string">"(%s)"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>unuse_commit_buffer</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_filename_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>suspect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>suspect</name><operator>-&gt;</operator><name>previous</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name><name>suspect</name><operator>-&gt;</operator><name>previous</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"previous %s "</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name><name>prev</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"filename "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_name_quoted</name><argument_list>(<argument><expr><name><name>suspect</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>emit_one_suspect_detail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>suspect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_info</name></name></type> <name>ci</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>repeat</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>suspect</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>METAINFO_SHOWN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>suspect</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>METAINFO_SHOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_commit_info</name><argument_list>(<argument><expr><name><name>suspect</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ci</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"author %s\n"</literal></expr></argument>, <argument><expr><name><name>ci</name><operator>.</operator><name>author</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"author-mail %s\n"</literal></expr></argument>, <argument><expr><name><name>ci</name><operator>.</operator><name>author_mail</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"author-time %"</literal><name>PRItime</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ci</name><operator>.</operator><name>author_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"author-tz %s\n"</literal></expr></argument>, <argument><expr><name><name>ci</name><operator>.</operator><name>author_tz</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"committer %s\n"</literal></expr></argument>, <argument><expr><name><name>ci</name><operator>.</operator><name>committer</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"committer-mail %s\n"</literal></expr></argument>, <argument><expr><name><name>ci</name><operator>.</operator><name>committer_mail</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"committer-time %"</literal><name>PRItime</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>ci</name><operator>.</operator><name>committer_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"committer-tz %s\n"</literal></expr></argument>, <argument><expr><name><name>ci</name><operator>.</operator><name>committer_tz</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"summary %s\n"</literal></expr></argument>, <argument><expr><name><name>ci</name><operator>.</operator><name>summary</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>suspect</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"boundary\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>commit_info_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>found_guilty_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>progress_info</name></name> <modifier>*</modifier></type><name>pi</name> <init>= <expr><operator>(</operator>struct <name>progress_info</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>incremental</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>suspect</name> <init>= <expr><name><name>ent</name><operator>-&gt;</operator><name>suspect</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %d %d %d\n"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>suspect</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>s_lno</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>lno</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>num_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_one_suspect_detail</name><argument_list>(<argument><expr><name>suspect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_filename_info</name><argument_list>(<argument><expr><name>suspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maybe_flush_or_die</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pi</name><operator>-&gt;</operator><name>blamed_lines</name></name> <operator>+=</operator> <name><name>ent</name><operator>-&gt;</operator><name>num_lines</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>pi</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name><name>pi</name><operator>-&gt;</operator><name>blamed_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format_time</name><parameter_list>(<parameter><decl><type><name>timestamp_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tz_str</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>show_raw_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>strbuf</name></name></type> <name>time_buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_raw_time</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRItime</name><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>tz_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>time_str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>time_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tz</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>tz_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>time_str</name> <operator>=</operator> <call><name>show_date</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blame_date_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_buf</name></expr></argument>, <argument><expr><name>time_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>time_width</name> <operator>=</operator> <call><name>utf8_strwidth</name><argument_list>(<argument><expr><name>time_str</name></expr></argument>)</argument_list></call></expr>;</init>

<condition><expr><name>time_width</name> <operator>&lt;</operator> <name>blame_date_width</name></expr>;</condition>

<incr><expr><name>time_width</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name><name>time_buf</name><operator>.</operator><name>buf</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_ANNOTATE_COMPAT</name></cpp:macro> <cpp:value>(1U&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_LONG_OBJECT_NAME</name></cpp:macro> <cpp:value>(1U&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_RAW_TIMESTAMP</name></cpp:macro> <cpp:value>(1U&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_PORCELAIN</name></cpp:macro> <cpp:value>(1U&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_SHOW_NAME</name></cpp:macro> <cpp:value>(1U&lt;&lt;4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_SHOW_NUMBER</name></cpp:macro> <cpp:value>(1U&lt;&lt;5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_SHOW_SCORE</name></cpp:macro> <cpp:value>(1U&lt;&lt;6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_NO_AUTHOR</name></cpp:macro> <cpp:value>(1U&lt;&lt;7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_SHOW_EMAIL</name></cpp:macro> <cpp:value>(1U&lt;&lt;8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_LINE_PORCELAIN</name></cpp:macro> <cpp:value>(1U&lt;&lt;9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_COLOR_LINE</name></cpp:macro> <cpp:value>(1U&lt;&lt;10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_SHOW_AGE_WITH_COLOR</name></cpp:macro> <cpp:value>(1U&lt;&lt;11)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_porcelain_details</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>suspect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>repeat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>emit_one_suspect_detail</name><argument_list>(<argument><expr><name>suspect</name></expr></argument>, <argument><expr><name>repeat</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><name><name>suspect</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>MORE_THAN_ONE_PATH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_filename_info</name><argument_list>(<argument><expr><name>suspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_porcelain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>repeat</name> <init>= <expr><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_LINE_PORCELAIN</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>suspect</name> <init>= <expr><name><name>ent</name><operator>-&gt;</operator><name>suspect</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hex</name><index>[<expr><name>GIT_MAX_HEXSZ</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oid_to_hex_r</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>suspect</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %d %d %d\n"</literal></expr></argument>,

<argument><expr><name>hex</name></expr></argument>,

<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>s_lno</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>lno</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>num_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emit_porcelain_details</name><argument_list>(<argument><expr><name>suspect</name></expr></argument>, <argument><expr><name>repeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>blame_nth_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>lno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name><name>ent</name><operator>-&gt;</operator><name>num_lines</name></name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %d %d\n"</literal></expr></argument>, <argument><expr><name>hex</name></expr></argument>,

<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>s_lno</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>cnt</name></expr></argument>,

<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>lno</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>repeat</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_porcelain_details</name><argument_list>(<argument><expr><name>suspect</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>

<name>cp</name> <operator>&lt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>final_buf</name></name> <operator>+</operator> <name><name>sb</name><operator>-&gt;</operator><name>final_buf_size</name></name></expr>)</condition>;</do>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>final_buf_size</name></name> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<struct><specifier>static</specifier> struct <name>color_field</name> <block>{

<decl_stmt><decl><type><name>timestamp_t</name></type> <name>hop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>col</name><index>[<expr><name>COLOR_MAXLEN</name></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>colorfield</name></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>colorfield_nr</name></decl>, <decl><type ref="prev"/><name>colorfield_alloc</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_color_fields</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>l</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>EXPECT_DATE</name></decl>, <decl><name>EXPECT_COLOR</name></decl> }</block> <decl><name>next</name> <init>= <expr><name>EXPECT_COLOR</name></expr></init></decl>;</enum>

<expr_stmt><expr><name>colorfield_nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_split</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>colorfield</name></expr></argument>, <argument><expr><name>colorfield_nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>colorfield_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>&amp;l</argument>)</argument_list></macro> <block>{<block_content>

<switch>switch <condition>(<expr><name>next</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>EXPECT_DATE</name></expr>:</case>

<expr_stmt><expr><name><name>colorfield</name><index>[<expr><name>colorfield_nr</name></expr>]</index></name><operator>.</operator><name>hop</name> <operator>=</operator> <call><name>approxidate</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>EXPECT_COLOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name>colorfield_nr</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>colorfield</name></expr></argument>, <argument><expr><name>colorfield_nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>colorfield_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>EXPECT_COLOR</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>color_parse</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>colorfield</name><index>[<expr><name>colorfield_nr</name></expr>]</index></name><operator>.</operator><name>col</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"expecting a color: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>EXPECT_DATE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>EXPECT_COLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"must end with a color"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>colorfield</name><index>[<expr><name>colorfield_nr</name></expr>]</index></name><operator>.</operator><name>hop</name> <operator>=</operator> <name>TIME_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_default_color_by_age</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>parse_color_fields</name><argument_list>(<argument><expr><literal type="string">"blue,12 month ago,white,1 month ago,red"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>determine_line_heat</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest_color</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_info</name></name></type> <name>ci</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_commit_info</name><argument_list>(<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>suspect</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ci</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name>colorfield_nr</name> <operator>&amp;&amp;</operator> <name><name>ci</name><operator>.</operator><name>author_time</name></name></expr></argument> &gt;</argument_list></name> <name><name>colorfield</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hop</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>dest_color</name> <operator>=</operator> <name><name>colorfield</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_other</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>ent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>suspect</name> <init>= <expr><name><name>ent</name><operator>-&gt;</operator><name>suspect</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_info</name></name></type> <name>ci</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>hex</name><index>[<expr><name>GIT_MAX_HEXSZ</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_raw_time</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_RAW_TIMESTAMP</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_color</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>color</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>reset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_commit_info</name><argument_list>(<argument><expr><name><name>suspect</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ci</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oid_to_hex_r</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>suspect</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>blame_nth_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>lno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_SHOW_AGE_WITH_COLOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>determine_line_heat</name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>default_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <name>default_color</name></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <name>GIT_COLOR_RESET</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name><name>ent</name><operator>-&gt;</operator><name>num_lines</name></name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_LONG_OBJECT_NAME</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr> </then><else>: <expr><name>abbrev</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_COLOR_LINE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <name>repeated_meta_color</name></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <name>GIT_COLOR_RESET</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>color</name> <operator>=</operator> <ternary><condition><expr><name>default_color</name></expr> ?</condition><then> <expr><name>default_color</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>reset</name> <operator>=</operator> <ternary><condition><expr><name>default_color</name></expr> ?</condition><then> <expr><name>GIT_COLOR_RESET</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>suspect</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>UNINTERESTING</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blank_boundary</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_ANNOTATE_COMPAT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'^'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mark_unblamable_lines</name> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>unblamable</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mark_ignored_lines</name> <operator>&amp;&amp;</operator> <name><name>ent</name><operator>-&gt;</operator><name>ignored</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_ANNOTATE_COMPAT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_SHOW_EMAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ci</name><operator>.</operator><name>author_mail</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ci</name><operator>.</operator><name>author</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t(%10s\t%10s\t%d)"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,

<argument><expr><call><name>format_time</name><argument_list>(<argument><expr><name><name>ci</name><operator>.</operator><name>author_time</name></name></expr></argument>, <argument><expr><name><name>ci</name><operator>.</operator><name>author_tz</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><name>show_raw_time</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>lno</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_SHOW_SCORE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %*d %02d"</literal></expr></argument>,

<argument><expr><name>max_score_digits</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>score</name></name></expr></argument>,

<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>suspect</name><operator>-&gt;</operator><name>refcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_SHOW_NAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %-*.*s"</literal></expr></argument>, <argument><expr><name>longest_file</name></expr></argument>, <argument><expr><name>longest_file</name></expr></argument>,

<argument><expr><name><name>suspect</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_SHOW_NUMBER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %*d"</literal></expr></argument>, <argument><expr><name>max_orig_digits</name></expr></argument>,

<argument><expr><name><name>ent</name><operator>-&gt;</operator><name>s_lno</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_NO_AUTHOR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pad</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>opt</name> <operator>&amp;</operator> <name>OUTPUT_SHOW_EMAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ci</name><operator>.</operator><name>author_mail</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>ci</name><operator>.</operator><name>author</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <name>longest_author</name> <operator>-</operator> <call><name>utf8_strwidth</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" (%s%*s %10s"</literal></expr></argument>,

<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pad</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,

<argument><expr><call><name>format_time</name><argument_list>(<argument><expr><name><name>ci</name><operator>.</operator><name>author_time</name></name></expr></argument>,

<argument><expr><name><name>ci</name><operator>.</operator><name>author_tz</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><name>show_raw_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %*d) "</literal></expr></argument>,

<argument><expr><name>max_digits</name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>lno</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>reset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>reset</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator>

<name>cp</name> <operator>&lt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>final_buf</name></name> <operator>+</operator> <name><name>sb</name><operator>-&gt;</operator><name>final_buf_size</name></name></expr>)</condition>;</do>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>sb</name><operator>-&gt;</operator><name>final_buf_size</name></name> <operator>&amp;&amp;</operator> <name><name>cp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>commit_info_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>ent</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>option</name> <operator>&amp;</operator> <name>OUTPUT_PORCELAIN</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ent</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>ent</name></name></expr>;</init> <condition><expr><name>ent</name></expr>;</condition> <incr><expr><name>ent</name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>suspect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name><name>ent</name><operator>-&gt;</operator><name>suspect</name><operator>-&gt;</operator><name>commit</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>MORE_THAN_ONE_PATH</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>suspect</name> <operator>=</operator> <call><name>get_blame_suspects</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>suspect</name></expr>;</condition> <incr><expr><name>suspect</name> <operator>=</operator> <name><name>suspect</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>suspect</name><operator>-&gt;</operator><name>guilty</name></name> <operator>&amp;&amp;</operator> <name>count</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>MORE_THAN_ONE_PATH</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ent</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>ent</name></name></expr>;</init> <condition><expr><name>ent</name></expr>;</condition> <incr><expr><name>ent</name> <operator>=</operator> <name><name>ent</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>option</name> <operator>&amp;</operator> <name>OUTPUT_PORCELAIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>emit_porcelain</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>emit_other</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>ent</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_ancestry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>graft_file</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen_or_warn</name><argument_list>(<argument><expr><name>graft_file</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>strbuf_getwholeline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graft</name></name> <modifier>*</modifier></type><name>graft</name> <init>= <expr><call><name>read_graft_line</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>graft</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>register_commit_graft</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>graft</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_auto_abbrev</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>auto_abbrev</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>suspect</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>uniq</name> <init>= <expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>suspect</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>,

<argument><expr><name>auto_abbrev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>uniq</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>auto_abbrev</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>len</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>auto_abbrev</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>find_alignment</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>longest_src_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>longest_dst_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>largest_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compute_auto_abbrev</name> <init>= <expr><operator>(</operator><name>abbrev</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>auto_abbrev</name> <init>= <expr><name>DEFAULT_ABBREV</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name><name>sb</name><operator>-&gt;</operator><name>ent</name></name></expr>;</init> <condition><expr><name>e</name></expr>;</condition> <incr><expr><name>e</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>suspect</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>suspect</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compute_auto_abbrev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>auto_abbrev</name> <operator>=</operator> <call><name>update_auto_abbrev</name><argument_list>(<argument><expr><name>auto_abbrev</name></expr></argument>, <argument><expr><name>suspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>suspect</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>sb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>option</name> <operator>|=</operator> <name>OUTPUT_SHOW_NAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>suspect</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>longest_file</name> <operator>&lt;</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>longest_file</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>suspect</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>METAINFO_SHOWN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_info</name></name></type> <name>ci</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>suspect</name><operator>-&gt;</operator><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>METAINFO_SHOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>get_commit_info</name><argument_list>(<argument><expr><name><name>suspect</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ci</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>option</name> <operator>&amp;</operator> <name>OUTPUT_SHOW_EMAIL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>utf8_strwidth</name><argument_list>(<argument><expr><name><name>ci</name><operator>.</operator><name>author_mail</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>utf8_strwidth</name><argument_list>(<argument><expr><name><name>ci</name><operator>.</operator><name>author</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>longest_author</name> <operator>&lt;</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>longest_author</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>commit_info_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>s_lno</name></name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>num_lines</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>longest_src_lines</name> <operator>&lt;</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>longest_src_lines</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>lno</name></name> <operator>+</operator> <name><name>e</name><operator>-&gt;</operator><name>num_lines</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>longest_dst_lines</name> <operator>&lt;</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>longest_dst_lines</name> <operator>=</operator> <name>num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>largest_score</name> <operator>&lt;</operator> <call><name>blame_entry_score</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>largest_score</name> <operator>=</operator> <call><name>blame_entry_score</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>max_orig_digits</name> <operator>=</operator> <call><name>decimal_width</name><argument_list>(<argument><expr><name>longest_src_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_digits</name> <operator>=</operator> <call><name>decimal_width</name><argument_list>(<argument><expr><name>longest_dst_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_score_digits</name> <operator>=</operator> <call><name>decimal_width</name><argument_list>(<argument><expr><name>largest_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compute_auto_abbrev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>abbrev</name> <operator>=</operator> <name>auto_abbrev</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sanity_check_on_fail</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>baa</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>opt</name> <init>= <expr><name>OUTPUT_SHOW_SCORE</name> <operator>|</operator> <name>OUTPUT_SHOW_NUMBER</name> <operator>|</operator> <name>OUTPUT_SHOW_NAME</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>find_alignment</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>output</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Baa %d!"</literal></expr></argument>, <argument><expr><name>baa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>parse_score</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>score</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>score</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>add_prefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>prefix_path</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>git_blame_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"blame.showroot"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>show_root</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"blame.blankboundary"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>blank_boundary</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"blame.showemail"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>output_option</name> <init>= <expr><name>cb</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>output_option</name> <operator>|=</operator> <name>OUTPUT_SHOW_EMAIL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>output_option</name> <operator>&amp;=</operator> <operator>~</operator><name>OUTPUT_SHOW_EMAIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"blame.date"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>config_error_nonbool</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>parse_date_format</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blame_date_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"blame.ignorerevsfile"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>git_config_pathname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ignore_revs_file_list</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"blame.markunblamablelines"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mark_unblamable_lines</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"blame.markignoredlines"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mark_ignored_lines</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"color.blame.repeatedlines"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>color_parse_mem</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>repeated_meta_color</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid color '%s' in color.blame.repeatedLines"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"color.blame.highlightrecent"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_color_fields</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"blame.coloring"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"repeatedLines"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coloring_mode</name> <operator>|=</operator> <name>OUTPUT_COLOR_LINE</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"highlightRecent"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coloring_mode</name> <operator>|=</operator> <name>OUTPUT_SHOW_AGE_WITH_COLOR</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coloring_mode</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>OUTPUT_COLOR_LINE</name> <operator>|</operator>

<name>OUTPUT_SHOW_AGE_WITH_COLOR</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid value for blame.coloring"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_diff_heuristic_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>userdiff_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>git_default_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blame_copy_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>option</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>opt</name> <operator>&amp;</operator> <name>PICKAXE_BLAME_COPY_HARDER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>opt</name> <operator>|=</operator> <name>PICKAXE_BLAME_COPY_HARDEST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>opt</name> <operator>&amp;</operator> <name>PICKAXE_BLAME_COPY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>opt</name> <operator>|=</operator> <name>PICKAXE_BLAME_COPY_HARDER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>opt</name> <operator>|=</operator> <name>PICKAXE_BLAME_COPY</name> <operator>|</operator> <name>PICKAXE_BLAME_MOVE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>blame_copy_score</name> <operator>=</operator> <call><name>parse_score</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>blame_move_callback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name> <modifier>*</modifier></type><name>option</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name><name>option</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BUG_ON_OPT_NEG</name><argument_list>(<argument><expr><name>unset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>opt</name> <operator>|=</operator> <name>PICKAXE_BLAME_MOVE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>blame_move_score</name> <operator>=</operator> <call><name>parse_score</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_a_rev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>OBJ_NONE</name> <operator>&lt;</operator> <call><name>oid_object_info</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>build_ignorelist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>ignore_revs_file_list</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>ignore_rev_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>oidset_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>ignore_list</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>i</argument>, <argument>ignore_revs_file_list</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidset_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>ignore_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>oidset_parse_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>ignore_list</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>i</argument>, <argument>ignore_rev_list</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_oid_committish</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot find revision %s to ignore"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>i</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oidset_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sb</name><operator>-&gt;</operator><name>ignore_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_blame</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name></type> <name>revs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_scoreboard</name></name></type> <name>sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_origin</name></name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>dashdash_pos</name></decl>, <decl><type ref="prev"/><name>lno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>progress_info</name></name></type> <name>pi</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>range_list</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>ignore_rev_list</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>output_option</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>opt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>show_stats</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>revs_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contents_from</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"incremental"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>incremental</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show blame entries as we find them, incrementally"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blank_boundary</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show blank SHA-1 for boundary commits (Default: off)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_root</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Do not treat root commits as boundaries (Default: off)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"show-stats"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_stats</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show work cost statistics"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"progress"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>show_progress</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Force progress reporting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"score-debug"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show output score for blame entries"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT_SHOW_SCORE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="string">"show-name"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show original filename (Default: auto)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT_SHOW_NAME</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="string">"show-number"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show original linenumber (Default: off)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT_SHOW_NUMBER</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="string">"porcelain"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show in a format designed for machine consumption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT_PORCELAIN</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"line-porcelain"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show porcelain format with per-line commit information"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT_PORCELAIN</name><operator>|</operator><name>OUTPUT_LINE_PORCELAIN</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Use the same output mode as git-annotate (Default: off)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT_ANNOTATE_COMPAT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show raw timestamp (Default: off)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT_RAW_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show long commit SHA1 (Default: off)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT_LONG_OBJECT_NAME</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Suppress author name and timestamp (Default: off)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT_NO_AUTHOR</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="string">"show-email"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Show author email instead of name (Default: off)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT_SHOW_EMAIL</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xdl_opts</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Ignore whitespace differences"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>XDF_IGNORE_WHITESPACE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING_LIST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ignore-rev"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore_rev_list</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"rev"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Ignore &lt;rev&gt; when blaming"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING_LIST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ignore-revs-file"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore_revs_file_list</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Ignore revisions from &lt;file&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"color-lines"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"color redundant metadata from previous line differently"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT_COLOR_LINE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"color-by-age"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"color lines by age"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OUTPUT_SHOW_AGE_WITH_COLOR</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"minimal"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>xdl_opts</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Spend extra cycles to find better match"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>XDF_NEED_MINIMAL</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs_file</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Use revisions from &lt;file&gt; instead of calling git-rev-list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"contents"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>contents_from</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Use &lt;file&gt;'s contents as the final image"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>opt</name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"score"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Find line copies within and across files"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>PARSE_OPT_OPTARG</name></expr>, <expr><name>blame_copy_callback</name></expr> }</block></expr>,

<expr><block>{ <expr><name>OPTION_CALLBACK</name></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>opt</name></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"score"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Find line movements within and across files"</literal></expr></argument>)</argument_list></call></expr>, <expr><name>PARSE_OPT_OPTARG</name></expr>, <expr><name>blame_move_callback</name></expr> }</block></expr>,

<expr><call><name>OPT_STRING_LIST</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>range_list</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"n,m"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Process only line range n,m, counting from 1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT__ABBREV</name><argument_list>(<argument><expr><operator>&amp;</operator><name>abbrev</name></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>parse_opt_ctx_t</name></name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmd_is_annotate</name> <init>= <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"annotate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>range_set</name></name></type> <name>ranges</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>range_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>anchor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hexsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setup_default_color_by_age</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>git_blame_config</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>repo_init_revisions</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>date_mode</name></name> <operator>=</operator> <name>blame_date_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>allow_textconv</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>follow_renames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>save_commit_buffer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dashdash_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>show_progress</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_options_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,

<argument><expr><name>PARSE_OPT_KEEP_DASHDASH</name> <operator>|</operator> <name>PARSE_OPT_KEEP_ARGV0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><call><name>parse_options_step</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>blame_opt_usage</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PARSE_OPT_HELP</name></expr>:</case>

<case>case <expr><name>PARSE_OPT_ERROR</name></expr>:</case>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>PARSE_OPT_COMPLETE</name></expr>:</case>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>PARSE_OPT_DONE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dashdash_pos</name> <operator>=</operator> <name><name>ctx</name><operator>.</operator><name>cpidx</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>parse_done</name>;</goto>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--reverse"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"--children"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>reverse</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>parse_revision_opt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>blame_opt_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>parse_done</name>:</label>

<expr_stmt><expr><name>no_whole_file_rename</name> <operator>=</operator> <operator>!</operator><name><name>revs</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>follow_renames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>xdl_opts</name> <operator>|=</operator> <name><name>revs</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>xdl_opts</name></name> <operator>&amp;</operator> <name>XDF_INDENT_HEURISTIC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>follow_renames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>incremental</name> <operator>||</operator> <operator>(</operator><name>output_option</name> <operator>&amp;</operator> <name>OUTPUT_PORCELAIN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>show_progress</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--progress can't be used with --incremental or porcelain formats"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>show_progress</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>show_progress</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>show_progress</name> <operator>=</operator> <call><name>isatty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>abbrev</name> <operator>&amp;&amp;</operator> <name>abbrev</name> <operator>&lt;</operator> <name>hexsz</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>abbrev</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>abbrev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>abbrev</name> <operator>=</operator> <name>hexsz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>revs_file</name> <operator>&amp;&amp;</operator> <call><name>read_ancestry</name><argument_list>(<argument><expr><name>revs_file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"reading graft file '%s' failed"</literal></expr></argument>, <argument><expr><name>revs_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd_is_annotate</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>output_option</name> <operator>|=</operator> <name>OUTPUT_ANNOTATE_COMPAT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>blame_date_mode</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>DATE_ISO8601</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>blame_date_mode</name> <operator>=</operator> <name><name>revs</name><operator>.</operator><name>date_mode</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>blame_date_mode</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DATE_RFC2822</name></expr>:</case>

<expr_stmt><expr><name>blame_date_width</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Thu, 19 Oct 2006 16:00:04 -0700"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DATE_ISO8601_STRICT</name></expr>:</case>

<expr_stmt><expr><name>blame_date_width</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"2006-10-19T16:00:04-07:00"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DATE_ISO8601</name></expr>:</case>

<expr_stmt><expr><name>blame_date_width</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"2006-10-19 16:00:04 -0700"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DATE_RAW</name></expr>:</case>

<expr_stmt><expr><name>blame_date_width</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"1161298804 -0700"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DATE_UNIX</name></expr>:</case>

<expr_stmt><expr><name>blame_date_width</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"1161298804"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DATE_SHORT</name></expr>:</case>

<expr_stmt><expr><name>blame_date_width</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"2006-10-19"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DATE_RELATIVE</name></expr>:</case>

<expr_stmt><expr><name>blame_date_width</name> <operator>=</operator> <call><name>utf8_strwidth</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"4 years, 11 months ago"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>DATE_HUMAN</name></expr>:</case>

<expr_stmt><expr><name>blame_date_width</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Thu Oct 19 16:00"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DATE_NORMAL</name></expr>:</case>

<expr_stmt><expr><name>blame_date_width</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"Thu Oct 19 16:00:04 2006 -0700"</literal></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DATE_STRFTIME</name></expr>:</case>

<expr_stmt><expr><name>blame_date_width</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>show_date</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>blame_date_mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>blame_date_width</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>revs</name><operator>.</operator><name>diffopt</name><operator>.</operator><name>flags</name><operator>.</operator><name>find_copies_harder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opt</name> <operator>|=</operator> <operator>(</operator><name>PICKAXE_BLAME_COPY</name> <operator>|</operator> <name>PICKAXE_BLAME_MOVE</name> <operator>|</operator>

<name>PICKAXE_BLAME_COPY_HARDER</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dashdash_pos</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>argc</name> <operator>-</operator> <name>dashdash_pos</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>blame_opt_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"--"</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>add_prefix</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>--</operator><name>argc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>blame_opt_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>blame_opt_usage</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>is_a_rev</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>add_prefix</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>is_a_rev</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>get_git_work_tree</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"missing &lt;path&gt; to blame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>add_prefix</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>argv</name><index>[<expr><name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"--"</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>revs</name><operator>.</operator><name>disable_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_revisions</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>revs</name><operator>.</operator><name>pending</name><operator>.</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <call><name>is_bare_repository</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>head_commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>head_oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>resolve_ref_unsafe</name><argument_list>(<argument><expr><literal type="string">"HEAD"</literal></expr></argument>, <argument><expr><name>RESOLVE_REF_READING</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>head_oid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><operator>(</operator><name>head_commit</name> <operator>=</operator> <call><name>lookup_commit_reference_gently</name><argument_list>(<argument><expr><name><name>revs</name><operator>.</operator><name>repo</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>head_oid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"no such ref: HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_pending_object</name><argument_list>(<argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>head_commit</name><operator>-&gt;</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="string">"HEAD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_scoreboard</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>revs</name></name> <operator>=</operator> <operator>&amp;</operator><name>revs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>contents_from</name></name> <operator>=</operator> <name>contents_from</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>reverse</name></name> <operator>=</operator> <name>reverse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>repo</name></name> <operator>=</operator> <name>the_repository</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>build_ignorelist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore_revs_file_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore_rev_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ignore_revs_file_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ignore_rev_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setup_scoreboard</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lno</name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>num_lines</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lno</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>range_list</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>range_list</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>anchor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_set_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ranges</name></expr></argument>, <argument><expr><name><name>range_list</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>range_i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>range_i</name> <operator>&lt;</operator> <name><name>range_list</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>range_i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>bottom</name></decl>, <decl><type ref="prev"/><name>top</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_range_arg</name><argument_list>(<argument><expr><name><name>range_list</name><operator>.</operator><name>items</name><index>[<expr><name>range_i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>,

<argument><expr><name>nth_line_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>lno</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>bottom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>top</name></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>path</name></name></expr></argument>,

<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>blame_usage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>lno</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>top</name> <operator>||</operator> <name>bottom</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>lno</name> <operator>&lt;</operator> <name>bottom</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"file %s has only %lu line"</literal></expr></argument>,

<argument><expr><literal type="string">"file %s has only %lu lines"</literal></expr></argument>,

<argument><expr><name>lno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>lno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bottom</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>lno</name> <operator>&lt;</operator> <name>top</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>lno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bottom</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_set_append_unsafe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ranges</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>anchor</name> <operator>=</operator> <name>top</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>sort_and_merge_range_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>range_i</name> <operator>=</operator> <name><name>ranges</name><operator>.</operator><name>nr</name></name></expr>;</init> <condition><expr><name>range_i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>range_i</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>range</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>&amp;</operator><name><name>ranges</name><operator>.</operator><name>ranges</name><index>[<expr><name>range_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <call><name>blame_entry_prepend</name><argument_list>(<argument><expr><name>ent</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>suspects</name></name> <operator>=</operator> <name>ent</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prio_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sb</name><operator>.</operator><name>commits</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blame_origin_decref</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_set_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>range_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>ent</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blame_move_score</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>move_score</name></name> <operator>=</operator> <name>blame_move_score</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blame_copy_score</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>copy_score</name></name> <operator>=</operator> <name>blame_copy_score</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>debug</name></name> <operator>=</operator> <name>DEBUG_BLAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>on_sanity_fail</name></name> <operator>=</operator> <operator>&amp;</operator><name>sanity_check_on_fail</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>show_root</name></name> <operator>=</operator> <name>show_root</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>xdl_opts</name></name> <operator>=</operator> <name>xdl_opts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>no_whole_file_rename</name></name> <operator>=</operator> <name>no_whole_file_rename</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_mailmap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mailmap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>found_guilty_entry</name></name> <operator>=</operator> <operator>&amp;</operator><name>found_guilty_entry</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sb</name><operator>.</operator><name>found_guilty_entry_data</name></name> <operator>=</operator> <operator>&amp;</operator><name>pi</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>show_progress</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pi</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Blaming lines"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>num_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assign_blame</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pi</name><operator>.</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>incremental</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setup_pager</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>blame_sort_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>blame_coalesce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>output_option</name> <operator>&amp;</operator> <operator>(</operator><name>OUTPUT_COLOR_LINE</name> <operator>|</operator> <name>OUTPUT_SHOW_AGE_WITH_COLOR</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>output_option</name> <operator>|=</operator> <name>coloring_mode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>output_option</name> <operator>&amp;</operator> <name>OUTPUT_PORCELAIN</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>find_alignment</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>repeated_meta_color</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>output_option</name> <operator>&amp;</operator> <name>OUTPUT_COLOR_LINE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>repeated_meta_color</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>repeated_meta_color</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>GIT_COLOR_CYAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output_option</name> <operator>&amp;</operator> <name>OUTPUT_ANNOTATE_COMPAT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>output_option</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>OUTPUT_COLOR_LINE</name> <operator>|</operator> <name>OUTPUT_SHOW_AGE_WITH_COLOR</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>output</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>output_option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>sb</name><operator>.</operator><name>final_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ent</name> <operator>=</operator> <name><name>sb</name><operator>.</operator><name>ent</name></name></expr>;</init> <condition><expr><name>ent</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>blame_entry</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>ent</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ent</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>show_stats</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num read blob: %d\n"</literal></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>num_read_blob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num get patch: %d\n"</literal></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>num_get_patch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num commits: %d\n"</literal></expr></argument>, <argument><expr><name><name>sb</name><operator>.</operator><name>num_commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
