<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\builtin\name-rev.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repository.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tag.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"prio-queue.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-lookup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit-slab.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUTOFF_DATE_SLOP</name></cpp:macro> <cpp:value>86400</cpp:value></cpp:define>

<struct>struct <name>rev_name</name> <block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tip_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timestamp_t</name></type> <name>taggerdate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>generation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>distance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>from_tag</name></decl>;</decl_stmt>

}</block>;</struct>

<expr_stmt><expr><call><name>define_commit_slab</name><argument_list>(<argument><expr><name>commit_rev_name</name></expr></argument>, <argument><expr>struct <name>rev_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>timestamp_t</name></type> <name>cutoff</name> <init>= <expr><name>TIME_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>commit_rev_name</name></name></type> <name>rev_names</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE_TRAVERSAL_WEIGHT</name></cpp:macro> <cpp:value>65535</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_valid_rev_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rev_name</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>name</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>name</name><operator>-&gt;</operator><name>generation</name></name> <operator>||</operator> <name><name>name</name><operator>-&gt;</operator><name>tip_name</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>rev_name</name></name> <modifier>*</modifier></type><name>get_commit_rev_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_name</name></name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>commit_rev_name_peek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rev_names</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>is_valid_rev_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_better_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>rev_name</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>,

<parameter><decl><type><name>timestamp_t</name></type> <name>taggerdate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>distance</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>from_tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>from_tag</name> <operator>&amp;&amp;</operator> <name><name>name</name><operator>-&gt;</operator><name>from_tag</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name><name>name</name><operator>-&gt;</operator><name>taggerdate</name></name> <operator>&gt;</operator> <name>taggerdate</name> <operator>||</operator>

<operator>(</operator><name><name>name</name><operator>-&gt;</operator><name>taggerdate</name></name> <operator>==</operator> <name>taggerdate</name> <operator>&amp;&amp;</operator>

<name><name>name</name><operator>-&gt;</operator><name>distance</name></name> <operator>&gt;</operator> <name>distance</name><operator>)</operator><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>from_tag</name></name> <operator>!=</operator> <name>from_tag</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>from_tag</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>distance</name></name> <operator>!=</operator> <name>distance</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>name</name><operator>-&gt;</operator><name>distance</name></name> <operator>&gt;</operator> <name>distance</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>taggerdate</name></name> <operator>!=</operator> <name>taggerdate</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>name</name><operator>-&gt;</operator><name>taggerdate</name></name> <operator>&gt;</operator> <name>taggerdate</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>rev_name</name></name> <modifier>*</modifier></type><name>create_or_update_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,

<parameter><decl><type><name>timestamp_t</name></type> <name>taggerdate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>generation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>distance</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>from_tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_name</name></name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>commit_rev_name_at</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rev_names</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_valid_rev_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_better_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>taggerdate</name></expr></argument>, <argument><expr><name>distance</name></expr></argument>, <argument><expr><name>from_tag</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>name</name><operator>-&gt;</operator><name>generation</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>tip_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>taggerdate</name></name> <operator>=</operator> <name>taggerdate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>generation</name></name> <operator>=</operator> <name>generation</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>distance</name></name> <operator>=</operator> <name>distance</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>name</name><operator>-&gt;</operator><name>from_tag</name></name> <operator>=</operator> <name>from_tag</name></expr>;</expr_stmt>

<return>return <expr><name>name</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_parent_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rev_name</name></name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parent_number</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>sb</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strip_suffix</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>tip_name</name></name></expr></argument>, <argument><expr><literal type="string">"^0"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>generation</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator>

<literal type="number">1</literal> <operator>+</operator> <call><name>decimal_width</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>generation</name></name></expr></argument>)</argument_list></call> <operator>+</operator>

<literal type="number">1</literal> <operator>+</operator> <call><name>decimal_width</name><argument_list>(<argument><expr><name>parent_number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%.*s~%d^%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>tip_name</name></name></expr></argument>,

<argument><expr><name><name>name</name><operator>-&gt;</operator><name>generation</name></name></expr></argument>, <argument><expr><name>parent_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_grow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator>

<literal type="number">1</literal> <operator>+</operator> <call><name>decimal_width</name><argument_list>(<argument><expr><name>parent_number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><literal type="string">"%.*s^%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name><name>name</name><operator>-&gt;</operator><name>tip_name</name></name></expr></argument>,

<argument><expr><name>parent_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>name_rev</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>start_commit</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tip_name</name></decl></parameter>, <parameter><decl><type><name>timestamp_t</name></type> <name>taggerdate</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>from_tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>prio_queue</name></name></type> <name>queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>parents_to_queue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>parents_to_queue_nr</name></decl>, <decl><type ref="prev"/><name>parents_to_queue_alloc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_name</name></name> <modifier>*</modifier></type><name>start_name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parse_commit</name><argument_list>(<argument><expr><name>start_commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>start_commit</name><operator>-&gt;</operator><name>date</name></name> <operator>&lt;</operator> <name>cutoff</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_name</name> <operator>=</operator> <call><name>create_or_update_name</name><argument_list>(<argument><expr><name>start_commit</name></expr></argument>, <argument><expr><name>taggerdate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>from_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>start_name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>deref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>start_name</name><operator>-&gt;</operator><name>tip_name</name></name> <operator>=</operator> <call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%s^0"</literal></expr></argument>, <argument><expr><name>tip_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>start_name</name><operator>-&gt;</operator><name>tip_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>tip_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>prio_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>, <argument><expr><name>start_commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>commit</name> <operator>=</operator> <call><name>prio_queue_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_name</name></name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>get_commit_rev_name</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parent_number</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>parents_to_queue_nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>parents</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init>

<condition><expr><name>parents</name></expr>;</condition>

<incr><expr><name>parents</name> <operator>=</operator> <name><name>parents</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>parent_number</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>parents</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_name</name></name> <modifier>*</modifier></type><name>parent_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>generation</name></decl>, <decl><type ref="prev"/><name>distance</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>parse_commit</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>date</name></name> <operator>&lt;</operator> <name>cutoff</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parent_number</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>generation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>distance</name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>distance</name></name> <operator>+</operator> <name>MERGE_TRAVERSAL_WEIGHT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>generation</name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>generation</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>distance</name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>distance</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>parent_name</name> <operator>=</operator> <call><name>create_or_update_name</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>taggerdate</name></expr></argument>,

<argument><expr><name>generation</name></expr></argument>,

<argument><expr><name>distance</name></expr></argument>, <argument><expr><name>from_tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent_name</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>parent_number</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>parent_name</name><operator>-&gt;</operator><name>tip_name</name></name> <operator>=</operator>

<call><name>get_parent_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>,

<argument><expr><name>parent_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>parent_name</name><operator>-&gt;</operator><name>tip_name</name></name> <operator>=</operator> <name><name>name</name><operator>-&gt;</operator><name>tip_name</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name>parents_to_queue</name></expr></argument>,

<argument><expr><name>parents_to_queue_nr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>parents_to_queue_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parents_to_queue</name><index>[<expr><name>parents_to_queue_nr</name></expr>]</index></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>

<expr_stmt><expr><name>parents_to_queue_nr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>parents_to_queue_nr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prio_queue_put</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>,

<argument><expr><name><name>parents_to_queue</name><index>[<expr><operator>--</operator><name>parents_to_queue_nr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></while>

<expr_stmt><expr><call><name>clear_prio_queue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>parents_to_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>subpath_matches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subpath</name> <init>= <expr><name>path</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>subpath</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>wildmatch</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>subpath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>subpath</name> <operator>-</operator> <name>path</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>subpath</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>subpath</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>subpath</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>subpath</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_ref_abbrev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shorten_unambiguous</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>shorten_unambiguous</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>refname</name> <operator>=</operator> <call><name>shorten_unambiguous_ref</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="string">"refs/heads/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>refname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_prefix</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="string">"refs/"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>refname</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>name_ref_data</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>tags_only</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>name_only</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>ref_filters</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>exclude_filters</name></decl>;</decl_stmt>

}</block>;</struct>

<struct><specifier>static</specifier> struct <name>tip_table</name> <block>{

<struct>struct <name>tip_table_entry</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timestamp_t</name></type> <name>taggerdate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>from_tag</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>deref</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>table</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sorted</name></decl>;</decl_stmt>

}</block> <decl><name>tip_table</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_to_tip_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>shorten_unambiguous</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>,

<parameter><decl><type><name>timestamp_t</name></type> <name>taggerdate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from_tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>refname</name> <operator>=</operator> <call><name>name_ref_abbrev</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><name>shorten_unambiguous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>tip_table</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>tip_table</name><operator>.</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tip_table</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tip_table</name><operator>.</operator><name>table</name><index>[<expr><name><name>tip_table</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tip_table</name><operator>.</operator><name>table</name><index>[<expr><name><name>tip_table</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>refname</name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tip_table</name><operator>.</operator><name>table</name><index>[<expr><name><name>tip_table</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>commit</name> <operator>=</operator> <name>commit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tip_table</name><operator>.</operator><name>table</name><index>[<expr><name><name>tip_table</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>taggerdate</name> <operator>=</operator> <name>taggerdate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tip_table</name><operator>.</operator><name>table</name><index>[<expr><name><name>tip_table</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>from_tag</name> <operator>=</operator> <name>from_tag</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tip_table</name><operator>.</operator><name>table</name><index>[<expr><name><name>tip_table</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>.</operator><name>deref</name> <operator>=</operator> <name>deref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tip_table</name><operator>.</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tip_table</name><operator>.</operator><name>sorted</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tipcmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tip_table_entry</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>a_</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><name>b_</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>oidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_by_tag_and_age</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tip_table_entry</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>a_</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name> <init>= <expr><name>b_</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>from_tag</name></name> <operator>-</operator> <name><name>a</name><operator>-&gt;</operator><name>from_tag</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>taggerdate</name></name> <operator>&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>taggerdate</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>a</name><operator>-&gt;</operator><name>taggerdate</name></name> <operator>!=</operator> <name><name>b</name><operator>-&gt;</operator><name>taggerdate</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>name_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>name_ref_data</name></name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>cb_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>can_abbreviate_output</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>tags_only</name></name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>name_only</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>deref</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>from_tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timestamp_t</name></type> <name>taggerdate</name> <init>= <expr><name>TIME_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>tags_only</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>starts_with</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"refs/tags/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>exclude_filters</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>&amp;data-&gt;exclude_filters</argument>)</argument_list></macro> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>subpath_matches</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>ref_filters</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matched</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>&amp;data-&gt;ref_filters</argument>)</argument_list></macro> <block>{<block_content>

<switch>switch <condition>(<expr><call><name>subpath_matches</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name>matched</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>can_abbreviate_output</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>matched</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_TAG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tag</name></name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator>struct <name>tag</name> <operator>*</operator><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>tagged</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>tagged</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>deref</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>taggerdate</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_COMMIT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>commit</name> <operator>=</operator> <operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>o</name></expr>;</expr_stmt>

<expr_stmt><expr><name>from_tag</name> <operator>=</operator> <call><name>starts_with</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"refs/tags/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>taggerdate</name> <operator>==</operator> <name>TIME_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>taggerdate</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_to_tip_table</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>can_abbreviate_output</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>, <argument><expr><name>taggerdate</name></expr></argument>,

<argument><expr><name>from_tag</name></expr></argument>, <argument><expr><name>deref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>name_tips</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>tip_table</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>tip_table</name><operator>.</operator><name>nr</name></name></expr></argument>, <argument><expr><name>cmp_by_tag_and_age</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tip_table</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tip_table_entry</name></name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>tip_table</name><operator>.</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>commit</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>name_rev</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>commit</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>taggerdate</name></name></expr></argument>,

<argument><expr><name><name>e</name><operator>-&gt;</operator><name>from_tag</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>deref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nth_tip_table_ent</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>ix</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>table_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tip_table_entry</name></name> <modifier>*</modifier></type><name>table</name> <init>= <expr><name>table_</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>table</name><index>[<expr><name>ix</name></expr>]</index></name><operator>.</operator><name><name>oid</name><operator>.</operator><name>hash</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_exact_ref_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tip_table</name><operator>.</operator><name>table</name></name> <operator>||</operator> <operator>!</operator><name><name>tip_table</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tip_table</name><operator>.</operator><name>sorted</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>tip_table</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>tip_table</name><operator>.</operator><name>nr</name></name></expr></argument>, <argument><expr><name>tipcmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tip_table</name><operator>.</operator><name>sorted</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>sha1_pos</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>tip_table</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>tip_table</name><operator>.</operator><name>nr</name></name></expr></argument>,

<argument><expr><name>nth_tip_table_ent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>found</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>tip_table</name><operator>.</operator><name>table</name><index>[<expr><name>found</name></expr>]</index></name><operator>.</operator><name>refname</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_rev_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_name</name></name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_COMMIT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>get_exact_ref_match</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>commit</name> <operator>*</operator><operator>)</operator> <name>o</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>get_commit_rev_name</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>n</name><operator>-&gt;</operator><name>generation</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>n</name><operator>-&gt;</operator><name>tip_name</name></name></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_reset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>tip_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_strip_suffix</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"^0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"~%d"</literal></expr></argument>, <argument><expr><name><name>n</name><operator>-&gt;</operator><name>generation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>caller_name</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>always</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_undefined</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name_only</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name> <init>= <expr><operator>&amp;</operator><name><name>obj</name><operator>-&gt;</operator><name>oid</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name_only</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>caller_name</name></expr> ?</condition><then> <expr><name>caller_name</name></expr> </then><else>: <expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>get_rev_name</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>allow_undefined</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"undefined\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>always</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>find_unique_abbrev</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><name>DEFAULT_ABBREV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"cannot describe '%s'"</literal></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>name_rev_usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git name-rev [&lt;options&gt;] &lt;commit&gt;..."</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git name-rev [&lt;options&gt;] --all"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git name-rev [&lt;options&gt;] --stdin"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>name_rev_line</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>name_ref_data</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hexsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p_start</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ishex</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(isdigit((x)) || ((x) &gt;= 'a' &amp;&amp; (x) &lt;= 'f'))</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ishex</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>++</operator><name>counter</name> <operator>==</operator> <name>hexsz</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>ishex</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p_len</name> <init>= <expr><name>p</name> <operator>-</operator> <name>p_start</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_oid</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <operator>(</operator><name>hexsz</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>o</name> <init>=

<expr><call><name>lookup_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>get_rev_name</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>name_only</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s%s"</literal></expr></argument>, <argument><expr><name>p_len</name> <operator>-</operator> <name>hexsz</name></expr></argument>, <argument><expr><name>p_start</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s (%s)"</literal></expr></argument>, <argument><expr><name>p_len</name></expr></argument>, <argument><expr><name>p_start</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p_start</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p_start</name> <operator>!=</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>p_start</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>p_start</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>cmd_name_rev</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_array</name></name></type> <name>revs</name> <init>= <expr><name>OBJECT_ARRAY_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>all</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>transform_stdin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>allow_undefined</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>always</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>peel_tag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>name_ref_data</name></name></type> <name>data</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>STRING_LIST_INIT_NODUP</name></expr>, <expr><name>STRING_LIST_INIT_NODUP</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>opts</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"name-only"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>name_only</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"print only names (no SHA-1)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"tags"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>tags_only</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"only use tags to name the commits"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING_LIST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"refs"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>ref_filters</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"pattern"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"only use refs matching &lt;pattern&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING_LIST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"exclude"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><operator>.</operator><name>exclude_filters</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"pattern"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"ignore refs matching &lt;pattern&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_GROUP</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>all</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"list all commits reachable from all refs"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"stdin"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>transform_stdin</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"read from stdin"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"undefined"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>allow_undefined</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"allow to print `undefined` names (default)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"always"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>always</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"show abbreviated commit object as fallback"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><block>{

<expr><name>OPTION_SET_INT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"peel-tag"</literal></expr>, <expr><operator>&amp;</operator><name>peel_tag</name></expr>, <expr><name>NULL</name></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"dereference tags in the input (internal use)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>PARSE_OPT_NOARG</name> <operator>|</operator> <name>PARSE_OPT_HIDDEN</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr>,

}</block></expr>,

<expr><call><name>OPT_END</name><argument_list>()</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_commit_rev_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rev_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>git_default_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>name_rev_usage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>all</name> <operator>+</operator> <name>transform_stdin</name> <operator>+</operator> <operator>!</operator><operator>!</operator><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Specify either a list, or --all, not both!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>usage_with_options</name><argument_list>(<argument><expr><name>name_rev_usage</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>all</name> <operator>||</operator> <name>transform_stdin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>argc</name></expr>;</condition> <incr><expr><name>argc</name><operator>--</operator></expr><operator>,</operator> <expr><name>argv</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid</name><argument_list>(<argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not get sha1 for %s. Skipping.\n"</literal></expr></argument>,

<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>commit</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>object</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>peeled</name> <init>= <expr><call><name>deref_tag</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>,

<argument><expr><name>object</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>peeled</name> <operator>&amp;&amp;</operator> <name><name>peeled</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>OBJ_COMMIT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>commit</name> <operator>=</operator> <operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>peeled</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>object</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not get object for %s. Skipping.\n"</literal></expr></argument>,

<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cutoff</name> <operator>&gt;</operator> <name><name>commit</name><operator>-&gt;</operator><name>date</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>peel_tag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Could not get commit for %s. Skipping.\n"</literal></expr></argument>,

<argument><expr><operator>*</operator><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>object</name> <operator>=</operator> <operator>(</operator>struct <name>object</name> <operator>*</operator><operator>)</operator><name>commit</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>add_object_array</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>cutoff</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cutoff</name> <operator>&gt;</operator> <name>TIME_MIN</name> <operator>+</operator> <name>CUTOFF_DATE_SLOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <name>cutoff</name> <operator>-</operator> <name>CUTOFF_DATE_SLOP</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cutoff</name> <operator>=</operator> <name>TIME_MIN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>for_each_ref</name><argument_list>(<argument><expr><name>name_ref</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>name_tips</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>transform_stdin</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>name_rev_line</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>all</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>get_max_object_index</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object</name></name> <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>get_indexed_object</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <name><name>obj</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>OBJ_COMMIT</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>show_name</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>always</name></expr></argument>, <argument><expr><name>allow_undefined</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>name_only</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>revs</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>show_name</name><argument_list>(<argument><expr><name><name>revs</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name></expr></argument>, <argument><expr><name><name>revs</name><operator>.</operator><name>objects</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,

<argument><expr><name>always</name></expr></argument>, <argument><expr><name>allow_undefined</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>name_only</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>UNLEAK</name><argument_list>(<argument><expr><name>revs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
