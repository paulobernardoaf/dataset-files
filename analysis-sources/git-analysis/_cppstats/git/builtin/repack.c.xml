<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\builtin\repack.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parse-options.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sigchain.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string-list.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"argv-array.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"midx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"promisor-remote.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>delta_base_offset</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pack_kept_objects</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>write_bitmaps</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>use_delta_islands</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>packdir</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>packtmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>git_repack_usage</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"git repack [&lt;options&gt;]"</literal></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>incremental_bitmap_conflict_error</name><index>[]</index></name> <init>= <expr><call><name>N_</name><argument_list>(

<argument><expr><literal type="string">"Incremental repacks are incompatible with bitmap indexes. Use\n"</literal>

<literal type="string">"--no-write-bitmap-index or disable the pack.writebitmaps configuration."</literal></expr></argument>

)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>repack_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"repack.usedeltabaseoffset"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delta_base_offset</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"repack.packkeptobjects"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pack_kept_objects</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"repack.writebitmaps"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"pack.writebitmaps"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>write_bitmaps</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"repack.usedeltaislands"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>use_delta_islands</name> <operator>=</operator> <call><name>git_config_bool</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>git_default_config</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_temporary_files</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dirlen</name></decl>, <decl><type ref="prev"/><name>prefixlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>packdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dirlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>packdir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>packtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>prefixlen</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>len</name></name> <operator>-</operator> <name>dirlen</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name>dirlen</name></expr></argument>, <argument><expr><name>prefixlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>dirlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_pack_on_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signo</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>remove_temporary_files</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigchain_pop</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>signo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_non_kept_pack_filenames</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>fname_list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>extra_keep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name>packdir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>extra_keep</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fspathcmp</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name><name>extra_keep</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>extra_keep</name><operator>-&gt;</operator><name>nr</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>extra_keep</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strip_suffix</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><literal type="string">".pack"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><call><name>mkpath</name><argument_list>(<argument><expr><literal type="string">"%s/%s.keep"</literal></expr></argument>, <argument><expr><name>packdir</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_append_nodup</name><argument_list>(<argument><expr><name>fname_list</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_redundant_pack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>base_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s/%s.pack"</literal></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unlink_pack_path</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>pack_objects_args</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>window</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>window_memory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>threads</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>max_pack_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no_reuse_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no_reuse_object</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quiet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>local</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_pack_objects</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pack_objects_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"pack-objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>window</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--window=%s"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>window_memory</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--window-memory=%s"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>window_memory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>depth</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--depth=%s"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>threads</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--threads=%s"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>max_pack_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--max-pack-size=%s"</literal></expr></argument>, <argument><expr><name><name>args</name><operator>-&gt;</operator><name>max_pack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>no_reuse_delta</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--no-reuse-delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>no_reuse_object</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--no-reuse-object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>local</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>args</name><operator>-&gt;</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--quiet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>delta_base_offset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--delta-base-offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>packtmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>git_cmd</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>out</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>in</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>start_command</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not start pack-objects to repack promisor objects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>xwrite</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xwrite</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>repack_promisor_objects</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pack_objects_args</name></name> <modifier>*</modifier></type><name>args</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>names</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>cmd</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>line</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prepare_pack_objects</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>in</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>for_each_packed_object</name><argument_list>(<argument><expr><name>write_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>,

<argument><expr><name>FOR_EACH_OBJECT_PROMISOR_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>.</operator><name>in</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>cmd</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>xfdopen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>strbuf_getline_lf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>promisor_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"repack: Expecting full hex object ID lines only from pack-objects."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name><name>line</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>promisor_name</name> <operator>=</operator> <call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s-%s.promisor"</literal></expr></argument>, <argument><expr><name>packtmp</name></expr></argument>,

<argument><expr><name><name>line</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>promisor_name</name></expr></argument>, <argument><expr><name>O_CREAT</name><operator>|</operator><name>O_EXCL</name><operator>|</operator><name>O_WRONLY</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to create '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>promisor_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>promisor_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not finish pack-objects to repack promisor objects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL_INTO_ONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOSEN_UNREACHABLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>cmd_repack</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>optional</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block> <decl><name><name>exts</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">".pack"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">".idx"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">".bitmap"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">".promisor"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>child_process</name></name></type> <name>cmd</name> <init>= <expr><name>CHILD_PROCESS_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list_item</name></name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>names</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>rollback</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>existing_packs</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>line</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ext</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>failed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pack_everything</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delete_redundant</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unpack_unreachable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keep_unreachable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>keep_pack_list</name> <init>= <expr><name>STRING_LIST_INIT_NODUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no_update_server_info</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>midx_cleared</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>pack_objects_args</name></name></type> <name>po_args</name> <init>= <expr><block>{<expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>option</name></name></type> <name><name>builtin_repack_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pack_everything</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"pack everything in a single pack"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ALL_INTO_ONE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BIT</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pack_everything</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"same as -a, and turn unreachable objects loose"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>LOOSEN_UNREACHABLE</name> <operator>|</operator> <name>ALL_INTO_ONE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delete_redundant</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"remove redundant packs, and run git-prune-packed"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>po_args</name><operator>.</operator><name>no_reuse_delta</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"pass --no-reuse-delta to git-pack-objects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'F'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>po_args</name><operator>.</operator><name>no_reuse_object</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"pass --no-reuse-object to git-pack-objects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>no_update_server_info</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"do not run git-update-server-info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT__QUIET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>po_args</name><operator>.</operator><name>quiet</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"be quiet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>po_args</name><operator>.</operator><name>local</name></name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"pass --local to git-pack-objects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'b'</literal></expr></argument>, <argument><expr><literal type="string">"write-bitmap-index"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>write_bitmaps</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"write bitmap index"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="string">"delta-islands"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_delta_islands</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"pass --delta-islands to git-pack-objects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"unpack-unreachable"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>unpack_unreachable</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"approxidate"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"with -A, do not loosen objects older than this"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="char">'k'</literal></expr></argument>, <argument><expr><literal type="string">"keep-unreachable"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keep_unreachable</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"with -a, repack unreachable objects"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"window"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>po_args</name><operator>.</operator><name>window</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"size of the window used for delta compression"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"window-memory"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>po_args</name><operator>.</operator><name>window_memory</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"bytes"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"same as the above, but limit memory size instead of entries count"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"depth"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>po_args</name><operator>.</operator><name>depth</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"limits the maximum delta depth"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"threads"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>po_args</name><operator>.</operator><name>threads</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"limits the maximum number of threads"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"max-pack-size"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>po_args</name><operator>.</operator><name>max_pack_size</name></name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"bytes"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"maximum size of each packfile"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"pack-kept-objects"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pack_kept_objects</name></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"repack objects in packs marked with .keep"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<expr><call><name>OPT_STRING_LIST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"keep-pack"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keep_pack_list</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"do not repack this pack"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,

<macro><name>OPT_END</name><argument_list>()</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>repack_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>argc</name> <operator>=</operator> <call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>builtin_repack_options</name></expr></argument>,

<argument><expr><name>git_repack_usage</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delete_redundant</name> <operator>&amp;&amp;</operator> <name>repository_format_precious_objects</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot delete packs in a precious-objects repo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keep_unreachable</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>unpack_unreachable</name> <operator>||</operator> <operator>(</operator><name>pack_everything</name> <operator>&amp;</operator> <name>LOOSEN_UNREACHABLE</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"--keep-unreachable and -A are incompatible"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>write_bitmaps</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pack_everything</name> <operator>&amp;</operator> <name>ALL_INTO_ONE</name><operator>)</operator> <operator>||</operator>

<operator>!</operator><call><name>is_bare_repository</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>write_bitmaps</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pack_kept_objects</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pack_kept_objects</name> <operator>=</operator> <name>write_bitmaps</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>write_bitmaps</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>pack_everything</name> <operator>&amp;</operator> <name>ALL_INTO_ONE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>incremental_bitmap_conflict_error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>packdir</name> <operator>=</operator> <call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s/pack"</literal></expr></argument>, <argument><expr><call><name>get_object_directory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>packtmp</name> <operator>=</operator> <call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s/.tmp-%d-pack"</literal></expr></argument>, <argument><expr><name>packdir</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sigchain_push_common</name><argument_list>(<argument><expr><name>remove_pack_on_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prepare_pack_objects</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>po_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--keep-true-parents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pack_kept_objects</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--honor-pack-keep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>keep_pack_list</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--keep-pack=%s"</literal></expr></argument>,

<argument><expr><name><name>keep_pack_list</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--non-empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--reflog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--indexed-objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>has_promisor_remote</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--exclude-promisor-objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>write_bitmaps</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--write-bitmap-index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>write_bitmaps</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--write-bitmap-index-quiet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>use_delta_islands</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--delta-islands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pack_everything</name> <operator>&amp;</operator> <name>ALL_INTO_ONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>get_non_kept_pack_filenames</name><argument_list>(<argument><expr><operator>&amp;</operator><name>existing_packs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keep_pack_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>repack_promisor_objects</name><argument_list>(<argument><expr><operator>&amp;</operator><name>po_args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>existing_packs</name><operator>.</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <name>delete_redundant</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>unpack_unreachable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>argv_array_pushf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>,

<argument><expr><literal type="string">"--unpack-unreachable=%s"</literal></expr></argument>,

<argument><expr><name>unpack_unreachable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>env_array</name></name></expr></argument>, <argument><expr><literal type="string">"GIT_REF_PARANOIA=1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pack_everything</name> <operator>&amp;</operator> <name>LOOSEN_UNREACHABLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>,

<argument><expr><literal type="string">"--unpack-unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>keep_unreachable</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--keep-unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--pack-loose-unreachable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>env_array</name></name></expr></argument>, <argument><expr><literal type="string">"GIT_REF_PARANOIA=1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--unpacked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>argv_array_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>.</operator><name>args</name></name></expr></argument>, <argument><expr><literal type="string">"--incremental"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>no_stdin</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>start_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>xfdopen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>strbuf_getline_lf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>line</name><operator>.</operator><name>len</name></name> <operator>!=</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"repack: Expecting full hex object ID lines only from pack-objects."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>names</name></expr></argument>, <argument><expr><name><name>line</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>finish_command</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>names</name><operator>.</operator><name>nr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>po_args</name><operator>.</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf_ln</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Nothing new to pack."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close_object_store</name><argument_list>(<argument><expr><name><name>the_repository</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>&amp;names</argument>)</argument_list></macro> <block>{<block_content>

<for>for <control>(<init><expr><name>ext</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ext</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>exts</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ext</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fname_old</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>midx_cleared</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_midx_file</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>midx_cleared</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s/pack-%s%s"</literal></expr></argument>, <argument><expr><name>packdir</name></expr></argument>,

<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>exts</name><index>[<expr><name>ext</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fname_old</name> <operator>=</operator> <call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s/old-%s%s"</literal></expr></argument>, <argument><expr><name>packdir</name></expr></argument>,

<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>exts</name><index>[<expr><name>ext</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><name>fname_old</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>fname_old</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>failed</name> <operator>&amp;&amp;</operator> <call><name>rename</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fname_old</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rollback</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>rollback_failure</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>&amp;rollback</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fname_old</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>packdir</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fname_old</name> <operator>=</operator> <call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s/old-%s"</literal></expr></argument>, <argument><expr><name>packdir</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>fname_old</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rollback_failure</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>rollback_failure</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"WARNING: Some packs in use have been renamed by\n"</literal>

<literal type="string">"WARNING: prefixing old- to their name, in order to\n"</literal>

<literal type="string">"WARNING: replace them with the new version of the\n"</literal>

<literal type="string">"WARNING: file. But the operation failed, and the\n"</literal>

<literal type="string">"WARNING: attempt to rename them back to their\n"</literal>

<literal type="string">"WARNING: original names also failed.\n"</literal>

<literal type="string">"WARNING: Please rename them in %s manually:\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>packdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rollback_failure</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"WARNING: old-%s -&gt; %s\n"</literal></expr></argument>,

<argument><expr><name><name>rollback_failure</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>,

<argument><expr><name><name>rollback_failure</name><operator>.</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>&amp;names</argument>)</argument_list></macro> <block>{<block_content>

<for>for <control>(<init><expr><name>ext</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ext</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>exts</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ext</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fname_old</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exists</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s/pack-%s%s"</literal></expr></argument>,

<argument><expr><name>packdir</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>exts</name><index>[<expr><name>ext</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fname_old</name> <operator>=</operator> <call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s-%s%s"</literal></expr></argument>,

<argument><expr><name>packtmp</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>exts</name><index>[<expr><name>ext</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>stat</name><argument_list>(<argument><expr><name>fname_old</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuffer</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>statbuffer</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>S_IWUSR</name> <operator>|</operator> <name>S_IWGRP</name> <operator>|</operator> <name>S_IWOTH</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>chmod</name><argument_list>(<argument><expr><name>fname_old</name></expr></argument>, <argument><expr><name><name>statbuffer</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>exists</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>exists</name> <operator>||</operator> <operator>!</operator><name><name>exts</name><index>[<expr><name>ext</name></expr>]</index></name><operator>.</operator><name>optional</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>fname_old</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"renaming '%s' failed"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname_old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>&amp;names</argument>)</argument_list></macro> <block>{<block_content>

<for>for <control>(<init><expr><name>ext</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ext</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>exts</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ext</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>mkpathdup</name><argument_list>(<argument><expr><literal type="string">"%s/old-%s%s"</literal></expr></argument>,

<argument><expr><name>packdir</name></expr></argument>,

<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>,

<argument><expr><name><name>exts</name><index>[<expr><name>ext</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>remove_path</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to remove '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><call><name>reprepare_packed_git</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delete_redundant</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>hexsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>string_list_sort</name><argument_list>(<argument><expr><operator>&amp;</operator><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>for_each_string_list_item</name><argument_list>(<argument>item</argument>, <argument>&amp;existing_packs</argument>)</argument_list></macro> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sha1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>hexsz</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sha1</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>string</name></name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>hexsz</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>string_list_has_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>names</name></expr></argument>, <argument><expr><name>sha1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>remove_redundant_pack</name><argument_list>(<argument><expr><name>packdir</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>po_args</name><operator>.</operator><name>quiet</name></name> <operator>&amp;&amp;</operator> <call><name>isatty</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opts</name> <operator>|=</operator> <name>PRUNE_PACKED_VERBOSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prune_packed_objects</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>keep_unreachable</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><operator>(</operator><name>pack_everything</name> <operator>&amp;</operator> <name>LOOSEN_UNREACHABLE</name><operator>)</operator> <operator>||</operator>

<name>unpack_unreachable</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>is_repository_shallow</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prune_shallow</name><argument_list>(<argument><expr><name>PRUNE_QUICK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_update_server_info</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>update_server_info</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>remove_temporary_files</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_env_bool</name><argument_list>(<argument><expr><name>GIT_TEST_MULTI_PACK_INDEX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_midx_file</name><argument_list>(<argument><expr><call><name>get_object_directory</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>names</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rollback</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>existing_packs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
