<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\trace.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>

<struct>struct <name>trace_key</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>initialized</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>need_close</name> <range>: <expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>trace_key</name></name></type> <name>trace_default_key</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE_KEY_INIT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ "GIT_TRACE_" #name, 0, 0, 0 }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>trace_key</name></name></type> <name>trace_perf_key</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>trace_key</name></name></type> <name>trace_setup_key</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>trace_repo_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>trace_want</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>trace_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>trace_disable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>trace_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>getnanotime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>trace_command_performance</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>trace_verbatim</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>trace_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint64_t</name></type> <name>trace_performance_enter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_VARIADIC_MACROS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">1</literal>, <literal type="number">2</literal>))</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>trace_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">2</literal>, <literal type="number">3</literal>))</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>trace_printf_key</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>trace_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">2</literal>, <literal type="number">3</literal>))</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>trace_argv_printf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>trace_strbuf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>trace_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">2</literal>, <literal type="number">3</literal>))</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>trace_performance</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>nanos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">2</literal>, <literal type="number">3</literal>))</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>trace_performance_since</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">1</literal>, <literal type="number">2</literal>))</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>trace_performance_leave</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TRACE_CONTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE_CONTEXT</name></cpp:macro> <cpp:value>__FILE__</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace_printf_key</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (trace_pass_fl(key)) trace_printf_key_fl(TRACE_CONTEXT, __LINE__, key, __VA_ARGS__); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace_printf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>trace_printf_key(&amp;trace_default_key, __VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace_argv_printf</name><parameter_list>(<parameter><type><name>argv</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (trace_pass_fl(&amp;trace_default_key)) trace_argv_printf_fl(TRACE_CONTEXT, __LINE__, argv, __VA_ARGS__); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace_strbuf</name><parameter_list>(<parameter><type><name>key</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (trace_pass_fl(key)) trace_strbuf_fl(TRACE_CONTEXT, __LINE__, key, data);} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace_performance</name><parameter_list>(<parameter><type><name>nanos</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (trace_pass_fl(&amp;trace_perf_key)) trace_performance_fl(TRACE_CONTEXT, __LINE__, nanos,__VA_ARGS__); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace_performance_since</name><parameter_list>(<parameter><type><name>start</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (trace_pass_fl(&amp;trace_perf_key)) trace_performance_fl(TRACE_CONTEXT, __LINE__, getnanotime() - (start), __VA_ARGS__); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace_performance_leave</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (trace_pass_fl(&amp;trace_perf_key)) trace_performance_leave_fl(TRACE_CONTEXT, __LINE__, getnanotime(), __VA_ARGS__); } while (0)</cpp:value></cpp:define>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">4</literal>, <literal type="number">5</literal>))</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>trace_printf_key_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>trace_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">4</literal>, <literal type="number">5</literal>))</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>trace_argv_printf_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>trace_strbuf_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>trace_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">4</literal>, <literal type="number">5</literal>))</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>trace_performance_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>nanos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>__attribute__</name><argument_list>(<argument>(format (printf, <literal type="number">4</literal>, <literal type="number">5</literal>))</argument>)</argument_list></macro>

<function_decl><type><name>void</name></type> <name>trace_performance_leave_fl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>nanos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>trace_pass_fl</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>trace_key</name></name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>key</name><operator>-&gt;</operator><name>fd</name></name> <operator>||</operator> <operator>!</operator><name><name>key</name><operator>-&gt;</operator><name>initialized</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
