<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\commit-graph.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"git-compat-util.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lockfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revision.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1-lookup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commit-graph.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"alloc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hashmap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replace-object.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"progress.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_SIGNATURE</name></cpp:macro> <cpp:value>0x43475048</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_CHUNKID_OIDFANOUT</name></cpp:macro> <cpp:value>0x4f494446</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_CHUNKID_OIDLOOKUP</name></cpp:macro> <cpp:value>0x4f49444c</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_CHUNKID_DATA</name></cpp:macro> <cpp:value>0x43444154</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_CHUNKID_EXTRAEDGES</name></cpp:macro> <cpp:value>0x45444745</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_CHUNKID_BASE</name></cpp:macro> <cpp:value>0x42415345</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_DATA_WIDTH</name></cpp:macro> <cpp:value>(the_hash_algo-&gt;rawsz + 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_VERSION_1</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_VERSION</name></cpp:macro> <cpp:value>GRAPH_VERSION_1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_EXTRA_EDGES_NEEDED</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_EDGE_LAST_MASK</name></cpp:macro> <cpp:value>0x7fffffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_PARENT_NONE</name></cpp:macro> <cpp:value>0x70000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_LAST_EDGE</name></cpp:macro> <cpp:value>0x80000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_HEADER_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_FANOUT_SIZE</name></cpp:macro> <cpp:value>(4 * 256)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_CHUNKLOOKUP_WIDTH</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAPH_MIN_SIZE</name></cpp:macro> <cpp:value>(GRAPH_HEADER_SIZE + 4 * GRAPH_CHUNKLOOKUP_WIDTH + GRAPH_FANOUT_SIZE + the_hash_algo-&gt;rawsz)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REACHABLE</name></cpp:macro> <cpp:value>(1u&lt;&lt;15)</cpp:value></cpp:define>

<function><type><name>char</name> <modifier>*</modifier></type><name>get_commit_graph_filename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%s/info/commit-graph"</literal></expr></argument>, <argument><expr><name><name>odb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_split_graph_filename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid_hex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%s/info/commit-graphs/graph-%s.graph"</literal></expr></argument>, <argument><expr><name><name>odb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,

<argument><expr><name>oid_hex</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_chain_filename</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>xstrfmt</name><argument_list>(<argument><expr><literal type="string">"%s/info/commit-graphs/commit-graph-chain"</literal></expr></argument>, <argument><expr><name><name>odb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>oid_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>alloc_commit_graph</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>graph_fd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>g</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>read_replace_refs</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>commit_graph_compatible</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>gitdir</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>read_replace_refs</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prepare_replace_object</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>hashmap_get_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>replace_map</name><operator>-&gt;</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>prepare_commit_graft</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>parsed_objects</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>parsed_objects</name><operator>-&gt;</operator><name>grafts_nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>is_repository_shallow</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>open_commit_graph</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>graph_file</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fd</name> <operator>=</operator> <call><name>git_open</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><operator>*</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>load_commit_graph_one_fd_st</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>stat</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>graph_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>graph_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>graph_size</name> <operator>=</operator> <call><name>xsize_t</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>graph_size</name> <operator>&lt;</operator> <name>GRAPH_MIN_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph file is too small"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>graph_map</name> <operator>=</operator> <call><name>xmmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>graph_size</name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_commit_graph</name><argument_list>(<argument><expr><name>graph_map</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>graph_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>odb</name></name> <operator>=</operator> <name>odb</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>graph_map</name></expr></argument>, <argument><expr><name>graph_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_commit_graph_lite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>chunk_oid_fanout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"commit-graph is missing the OID Fanout chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>chunk_oid_lookup</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"commit-graph is missing the OID Lookup chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>chunk_commit_data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"commit-graph is missing the Commit Data chunk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>parse_commit_graph</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>graph_map</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>graph_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>chunk_lookup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>graph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>last_chunk_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>last_chunk_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>graph_signature</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>graph_version</name></decl>, <decl><type ref="prev"/><name>hash_version</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>graph_map</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>graph_size</name> <operator>&lt;</operator> <name>GRAPH_MIN_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>graph_map</name></expr>;</expr_stmt>

<expr_stmt><expr><name>graph_signature</name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>graph_signature</name> <operator>!=</operator> <name>GRAPH_SIGNATURE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph signature %X does not match signature %X"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>graph_signature</name></expr></argument>, <argument><expr><name>GRAPH_SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>graph_version</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>graph_version</name> <operator>!=</operator> <name>GRAPH_VERSION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph version %X does not match version %X"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>graph_version</name></expr></argument>, <argument><expr><name>GRAPH_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hash_version</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>hash_version</name> <operator>!=</operator> <call><name>oid_version</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph hash version %X does not match version %X"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>hash_version</name></expr></argument>, <argument><expr><call><name>oid_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>graph</name> <operator>=</operator> <call><name>alloc_commit_graph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>=</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>num_chunks</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>graph_fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>graph_map</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <name>graph_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_chunk_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_chunk_offset</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_lookup</name> <operator>=</operator> <name>data</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>graph</name><operator>-&gt;</operator><name>num_chunks</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chunk_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>chunk_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chunk_repeated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>+</operator> <name>graph_size</name> <operator>-</operator> <name>chunk_lookup</name> <operator>&lt;</operator>

<name>GRAPH_CHUNKLOOKUP_WIDTH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph chunk lookup table entry missing; file may be incomplete"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>chunk_id</name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name>chunk_lookup</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_offset</name> <operator>=</operator> <call><name>get_be64</name><argument_list>(<argument><expr><name>chunk_lookup</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_lookup</name> <operator>+=</operator> <name>GRAPH_CHUNKLOOKUP_WIDTH</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_offset</name> <operator>&gt;</operator> <name>graph_size</name> <operator>-</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph improper chunk offset %08x%08x"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>chunk_offset</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name>chunk_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>chunk_id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>GRAPH_CHUNKID_OIDFANOUT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>chunk_oid_fanout</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chunk_repeated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>chunk_oid_fanout</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>data</name> <operator>+</operator> <name>chunk_offset</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_CHUNKID_OIDLOOKUP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>chunk_oid_lookup</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chunk_repeated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>chunk_oid_lookup</name></name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>chunk_offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_CHUNKID_DATA</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>chunk_commit_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chunk_repeated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>chunk_commit_data</name></name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>chunk_offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_CHUNKID_EXTRAEDGES</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>chunk_extra_edges</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chunk_repeated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>chunk_extra_edges</name></name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>chunk_offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>GRAPH_CHUNKID_BASE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>graph</name><operator>-&gt;</operator><name>chunk_base_graphs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>chunk_repeated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>chunk_base_graphs</name></name> <operator>=</operator> <name>data</name> <operator>+</operator> <name>chunk_offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>chunk_repeated</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph chunk id %08x appears multiple times"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chunk_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last_chunk_id</name> <operator>==</operator> <name>GRAPH_CHUNKID_OIDLOOKUP</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>graph</name><operator>-&gt;</operator><name>num_commits</name></name> <operator>=</operator> <operator>(</operator><name>chunk_offset</name> <operator>-</operator> <name>last_chunk_offset</name><operator>)</operator>

<operator>/</operator> <name><name>graph</name><operator>-&gt;</operator><name>hash_len</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_chunk_id</name> <operator>=</operator> <name>chunk_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_chunk_offset</name> <operator>=</operator> <name>chunk_offset</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hashcpy</name><argument_list>(<argument><expr><name><name>graph</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>graph</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>graph</name><operator>-&gt;</operator><name>data_len</name></name> <operator>-</operator> <name><name>graph</name><operator>-&gt;</operator><name>hash_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>verify_commit_graph_lite</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>graph</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>load_commit_graph_one</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>graph_file</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>open_ok</name> <init>= <expr><call><name>open_commit_graph</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>open_ok</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>load_commit_graph_one_fd_st</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>odb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>graph_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>g</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>load_commit_graph_v1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name> <init>= <expr><call><name>get_commit_graph_filename</name><argument_list>(<argument><expr><name>odb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>load_commit_graph_one</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>, <argument><expr><name>odb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>g</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_graph_to_chain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>chain</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oids</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>cur_g</name> <init>= <expr><name>chain</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>chunk_base_graphs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph has no base graphs chunk"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cur_g</name> <operator>||</operator>

<operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oids</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cur_g</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>hasheq</name><argument_list>(<argument><expr><name><name>oids</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>chunk_base_graphs</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph chain does not match"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur_g</name> <operator>=</operator> <name><name>cur_g</name><operator>-&gt;</operator><name>base_graph</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name> <operator>=</operator> <name>chain</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chain</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name> <operator>=</operator> <name><name>chain</name><operator>-&gt;</operator><name>num_commits</name></name> <operator>+</operator> <name><name>chain</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>load_commit_graph_chain</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>graph_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>line</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oids</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>valid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chain_name</name> <init>= <expr><call><name>get_chain_filename</name><argument_list>(<argument><expr><name>odb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stat_res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>chain_name</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stat_res</name> <operator>=</operator> <call><name>stat</name><argument_list>(<argument><expr><name>chain_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chain_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name> <operator>||</operator>

<name>stat_res</name> <operator>||</operator>

<name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>&lt;=</operator> <name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name> <operator>/</operator> <operator>(</operator><name><name>the_hash_algo</name><operator>-&gt;</operator><name>hexsz</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>oids</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>object_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>prepare_alt_odb</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strbuf_getline_lf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_oid_hex</name><argument_list>(<argument><expr><name><name>line</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>oids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid commit-graph chain: line '%s' not a hash"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>line</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>odb</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>odb</name></name></expr>;</init> <condition><expr><name>odb</name></expr>;</condition> <incr><expr><name>odb</name> <operator>=</operator> <name><name>odb</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name> <init>= <expr><call><name>get_split_graph_filename</name><argument_list>(<argument><expr><name>odb</name></expr></argument>, <argument><expr><name><name>line</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>load_commit_graph_one</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>, <argument><expr><name>odb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>add_graph_to_chain</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>graph_chain</name></expr></argument>, <argument><expr><name>oids</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>graph_chain</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to find all commit-graph files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>oids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>graph_chain</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>read_commit_graph_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><call><name>load_commit_graph_v1</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>odb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>load_commit_graph_chain</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>odb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>g</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_commit_graph_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name> <operator>=</operator> <call><name>read_commit_graph_one</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>odb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prepare_commit_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>commit_graph_disabled</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph_attempted</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph_attempted</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>git_env_bool</name><argument_list>(<argument><expr><name>GIT_TEST_COMMIT_GRAPH_DIE_ON_LOAD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"dying as requested by the '%s' variable on commit-graph load!"</literal></expr></argument>,

<argument><expr><name>GIT_TEST_COMMIT_GRAPH_DIE_ON_LOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prepare_repo_settings</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>git_env_bool</name><argument_list>(<argument><expr><name>GIT_TEST_COMMIT_GRAPH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>r</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>core_commit_graph</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>commit_graph_compatible</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>prepare_alt_odb</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>odb</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>odb</name></name></expr>;</init>

<condition><expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name> <operator>&amp;&amp;</operator> <name>odb</name></expr>;</condition>

<incr><expr><name>odb</name> <operator>=</operator> <name><name>odb</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prepare_commit_graph_one</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>odb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>generation_numbers_enabled</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>first_generation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prepare_commit_graph</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>first_generation</name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>chunk_commit_data</name></name> <operator>+</operator>

<name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name>first_generation</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_commit_graph_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close_commit_graph_one</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_commit_graph</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>close_commit_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raw_object_store</name></name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>close_commit_graph_one</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>commit_graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>-&gt;</operator><name>commit_graph</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bsearch_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>bsearch_hash</name><argument_list>(<argument><expr><name><name>oid</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>chunk_oid_fanout</name></name></expr></argument>,

<argument><expr><name><name>g</name><operator>-&gt;</operator><name>chunk_oid_lookup</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_oid_from_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>lex_index</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>g</name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"NULL commit-graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid commit position. commit-graph is likely corrupt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lex_index</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashcpy</name><argument_list>(<argument><expr><name><name>oid</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>chunk_oid_lookup</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>*</operator> <name>lex_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>insert_parent_or_die</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"invalid parent position %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>load_oid_from_graph</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>lookup_commit</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not find commit %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>graph_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><call><name>commit_list_insert</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>pptr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>next</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_commit_graph_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>commit_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>lex_index</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>lex_index</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>commit_data</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>chunk_commit_data</name></name> <operator>+</operator> <name>GRAPH_DATA_WIDTH</name> <operator>*</operator> <name>lex_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>graph_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>generation</name></name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name>commit_data</name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>set_commit_tree</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>maybe_tree</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_commit_in_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>edge_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>parent_data_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>date_low</name></decl>, <decl><type ref="prev"/><name>date_high</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>commit_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>lex_index</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid commit position. commit-graph is likely corrupt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>graph_pos</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lex_index</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>commit_data</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>chunk_commit_data</name></name> <operator>+</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name>lex_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>parsed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_commit_tree</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>date_high</name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name>commit_data</name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>date_low</name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name>commit_data</name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <operator>(</operator><name>timestamp_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>date_high</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>date_low</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>generation</name></name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name>commit_data</name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pptr</name> <operator>=</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>parents</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>edge_value</name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name>commit_data</name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>edge_value</name> <operator>==</operator> <name>GRAPH_PARENT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pptr</name> <operator>=</operator> <call><name>insert_parent_or_die</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>edge_value</name></expr></argument>, <argument><expr><name>pptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>edge_value</name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name>commit_data</name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>edge_value</name> <operator>==</operator> <name>GRAPH_PARENT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>edge_value</name> <operator>&amp;</operator> <name>GRAPH_EXTRA_EDGES_NEEDED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pptr</name> <operator>=</operator> <call><name>insert_parent_or_die</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>edge_value</name></expr></argument>, <argument><expr><name>pptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>parent_data_ptr</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>chunk_extra_edges</name></name> <operator>+</operator>

<literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>edge_value</name> <operator>&amp;</operator> <name>GRAPH_EDGE_LAST_MASK</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>edge_value</name> <operator>=</operator> <call><name>get_be32</name><argument_list>(<argument><expr><name>parent_data_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pptr</name> <operator>=</operator> <call><name>insert_parent_or_die</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>,

<argument><expr><name>edge_value</name> <operator>&amp;</operator> <name>GRAPH_EDGE_LAST_MASK</name></expr></argument>,

<argument><expr><name>pptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parent_data_ptr</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><operator>(</operator><name>edge_value</name> <operator>&amp;</operator> <name>GRAPH_LAST_EDGE</name><operator>)</operator></expr>)</condition>;</do>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_commit_in_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>graph_pos</name></name> <operator>!=</operator> <name>COMMIT_NOT_FROM_GRAPH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>graph_pos</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>cur_g</name> <init>= <expr><name>g</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>lex_index</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>cur_g</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bsearch_graph</name><argument_list>(<argument><expr><name>cur_g</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>lex_index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cur_g</name> <operator>=</operator> <name><name>cur_g</name><operator>-&gt;</operator><name>base_graph</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>cur_g</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <name>lex_index</name> <operator>+</operator> <name><name>cur_g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_commit_in_graph_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>parsed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_commit_in_graph</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>fill_commit_in_graph</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>parse_commit_in_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prepare_commit_graph</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>parse_commit_in_graph_one</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>load_commit_graph_info</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>prepare_commit_graph</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_commit_in_graph</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fill_commit_graph_info</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>load_tree_for_commit</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>commit_data</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>graph_pos</name></name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>commit_data</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>chunk_commit_data</name></name> <operator>+</operator>

<name>GRAPH_DATA_WIDTH</name> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>graph_pos</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashcpy</name><argument_list>(<argument><expr><name><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>commit_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_commit_tree</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>lookup_tree</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>maybe_tree</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>get_commit_tree_in_graph_one</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>maybe_tree</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>maybe_tree</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>graph_pos</name></name> <operator>==</operator> <name>COMMIT_NOT_FROM_GRAPH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"get_commit_tree_in_graph_one called from non-commit-graph commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>load_tree_for_commit</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>tree</name></name> <modifier>*</modifier></type><name>get_commit_tree_in_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_commit_tree_in_graph_one</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>packed_commit_list</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alloc</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>packed_oid_list</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alloc</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>write_commit_graph_context</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>packed_oid_list</name></name></type> <name>oids</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>packed_commit_list</name></name></type> <name>commits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_extra_edges</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>approx_nr_objects</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>progress_done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>progress_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base_graph_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_commit_graphs_before</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_commit_graphs_after</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>commit_graph_filenames_before</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>commit_graph_filenames_after</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>commit_graph_hash_after</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>new_num_commits_in_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>new_base_graph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>append</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>report_progress</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>split</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,

<decl><type ref="prev"/><name>check_oids</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>split_commit_graph_opts</name></name> <modifier>*</modifier></type><name>split_opts</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_graph_chunk_fanout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name><name>object</name><operator>.</operator><name>oid</name><operator>.</operator><name>hash</name></name></name><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>hashwrite_be32</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_graph_chunk_oids</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr><operator>,</operator> <expr><name>list</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name><name>object</name><operator>.</operator><name>oid</name><operator>.</operator><name>hash</name></name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>hash_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>commit_to_sha1</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>commits</name> <init>= <expr><name>table</name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>commits</name><index>[<expr><name>index</name></expr>]</index></name><operator>-&gt;</operator><name><name>object</name><operator>.</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_graph_chunk_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_len</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_extra_edges</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>list</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>tree</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>edge_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>packedDate</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_commit_no_graph</name><argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to parse commit %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name><name>object</name><operator>.</operator><name>oid</name></name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name>get_commit_tree_oid</name><argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>tree</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>hash_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name>parents</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edge_value</name> <operator>=</operator> <name>GRAPH_PARENT_NONE</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>edge_value</name> <operator>=</operator> <call><name>sha1_pos</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr></argument>,

<argument><expr><name>commit_to_sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>edge_value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edge_value</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>new_num_commits_in_base</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_commit_in_graph</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>item</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>new_base_graph</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edge_value</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>edge_value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"missing parent %s for commit %s"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name><name>object</name><operator>.</operator><name>oid</name></name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>hashwrite_be32</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>edge_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edge_value</name> <operator>=</operator> <name>GRAPH_PARENT_NONE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edge_value</name> <operator>=</operator> <name>GRAPH_EXTRA_EDGES_NEEDED</name> <operator>|</operator> <name>num_extra_edges</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>edge_value</name> <operator>=</operator> <call><name>sha1_pos</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr></argument>,

<argument><expr><name>commit_to_sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>edge_value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edge_value</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>new_num_commits_in_base</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_commit_in_graph</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>item</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>new_base_graph</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edge_value</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>edge_value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"missing parent %s for commit %s"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name><name>object</name><operator>.</operator><name>oid</name></name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>hashwrite_be32</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>edge_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>edge_value</name> <operator>&amp;</operator> <name>GRAPH_EXTRA_EDGES_NEEDED</name></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><name>num_extra_edges</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>parent</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name>date</name></name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>packedDate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>(</operator><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name>date</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>packedDate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>packedDate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name>generation</name></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>packedDate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name>date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>packedDate</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>list</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_graph_chunk_extra_edges</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>list</name> <operator>&lt;</operator> <name>last</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num_parents</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress_cnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>parent</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>num_parents</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>parent</name></expr>;</condition>

<incr><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>num_parents</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>num_parents</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>list</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>parent</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name><name>parents</name><operator>-&gt;</operator><name>next</name></name></name></expr>;</init> <condition><expr><name>parent</name></expr>;</condition> <incr><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>edge_value</name> <init>= <expr><call><name>sha1_pos</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr></argument>,

<argument><expr><name>commit_to_sha1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>edge_value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edge_value</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>new_num_commits_in_base</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>find_commit_in_graph</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>item</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>new_base_graph</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edge_value</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>edge_value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"missing parent %s for commit %s"</literal></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>list</name><operator>)</operator><operator>-&gt;</operator><name><name>object</name><operator>.</operator><name>oid</name></name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>edge_value</name> <operator>|=</operator> <name>GRAPH_LAST_EDGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hashwrite_be32</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>edge_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>list</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>oid_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>object_id</name> <operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>object_id</name> <operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>oidcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_packed_commits</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>pack</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>pos</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>write_commit_graph_context</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>object_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>off_t</name></type> <name>offset</name> <init>= <expr><call><name>nth_packed_object_offset</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_info</name></name></type> <name>oi</name> <init>= <expr><name>OBJECT_INFO_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>oi</name><operator>.</operator><name>typep</name></name> <operator>=</operator> <operator>&amp;</operator><name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>packed_object_info</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name>pack</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oi</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to get type of object %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>OBJ_COMMIT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>add_missing_parents</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>parent</name> <operator>=</operator> <name><name>commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>parent</name></expr>;</condition> <incr><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>REACHABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>REACHABLE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>close_reachable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Loading known commits in commit graph"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>lookup_commit</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>REACHABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expanding reachable commits in commit graph"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>lookup_commit</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>commit</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_commit</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>commit</name><operator>-&gt;</operator><name>graph_pos</name></name> <operator>==</operator> <name>COMMIT_NOT_FROM_GRAPH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_missing_parents</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>parse_commit_no_graph</name><argument_list>(<argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>add_missing_parents</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>commit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Clearing commit marks in commit graph"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>commit</name> <operator>=</operator> <call><name>lookup_commit</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>commit</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REACHABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_generation_numbers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Computing commit graph generation numbers"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>generation</name> <operator>!=</operator> <name>GENERATION_NUMBER_INFINITY</name> <operator>&amp;&amp;</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>generation</name> <operator>!=</operator> <name>GENERATION_NUMBER_ZERO</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>commit_list_insert</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>item</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>all_parents_computed</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_generation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>parent</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>parents</name></name></expr>;</init> <condition><expr><name>parent</name></expr>;</condition> <incr><expr><name>parent</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>generation</name></name> <operator>==</operator> <name>GENERATION_NUMBER_INFINITY</name> <operator>||</operator>

<name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>generation</name></name> <operator>==</operator> <name>GENERATION_NUMBER_ZERO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>all_parents_computed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>commit_list_insert</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>item</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>generation</name></name> <operator>&gt;</operator> <name>max_generation</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_generation</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>generation</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>all_parents_computed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>generation</name></name> <operator>=</operator> <name>max_generation</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pop_commit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>generation</name></name> <operator>&gt;</operator> <name>GENERATION_NUMBER_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>generation</name></name> <operator>=</operator> <name>GENERATION_NUMBER_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_ref_to_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>(</operator>struct <name>string_list</name> <operator>*</operator><operator>)</operator><name>cb_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>string_list_append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>write_commit_graph_reachable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>commit_graph_write_flags</name></name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>split_commit_graph_opts</name></name> <modifier>*</modifier></type><name>split_opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>string_list</name></name></type> <name>list</name> <init>= <expr><name>STRING_LIST_INIT_DUP</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>for_each_ref</name><argument_list>(<argument><expr><name>add_ref_to_list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>write_commit_graph</name><argument_list>(<argument><expr><name>odb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>,

<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>split_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>string_list_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_oids_from_packs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>pack_indexes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>progress_title</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>packname</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dirlen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packname</name></expr></argument>, <argument><expr><literal type="string">"%s/pack/"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>odb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dirlen</name> <operator>=</operator> <name><name>packname</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress_title</name></expr></argument>,

<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"Finding commits for commit graph in %d pack"</literal></expr></argument>,

<argument><expr><literal type="string">"Finding commits for commit graph in %d packs"</literal></expr></argument>,

<argument><expr><name><name>pack_indexes</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>pack_indexes</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(<argument><expr><name><name>progress_title</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pack_indexes</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packname</name></expr></argument>, <argument><expr><name>dirlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packname</name></expr></argument>, <argument><expr><name><name>pack_indexes</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>add_packed_git</name><argument_list>(<argument><expr><name><name>packname</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>packname</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error adding pack %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>packname</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>open_pack_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error opening index for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>packname</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>for_each_object_in_pack</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>add_packed_commits</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,

<argument><expr><name>FOR_EACH_OBJECT_PACK_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close_pack</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_oids_from_commit_hex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>commit_hex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>progress_title</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress_title</name></expr></argument>,

<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"Finding commits for commit graph from %d ref"</literal></expr></argument>,

<argument><expr><literal type="string">"Finding commits for commit graph from %d refs"</literal></expr></argument>,

<argument><expr><name><name>commit_hex</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>commit_hex</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(

<argument><expr><name><name>progress_title</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><name><name>commit_hex</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>commit_hex</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_oid_hex</name><argument_list>(<argument><expr><name><name>commit_hex</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name>result</name> <operator>=</operator> <call><name>lookup_commit_reference_gently</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>result</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>check_oids</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid commit object id: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>commit_hex</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_oids_from_all_packs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Finding commits for commit graph among packed objects"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>approx_nr_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>for_each_packed_object</name><argument_list>(<argument><expr><name>add_packed_commits</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,

<argument><expr><name>FOR_EACH_OBJECT_PACK_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>progress_done</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>approx_nr_objects</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>approx_nr_objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>count_distinct_commits</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count_distinct</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Counting distinct commits in commit graph"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr></argument>, <argument><expr><name>oid_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>lookup_commit</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>graph_pos</name></name> <operator>!=</operator> <name>COMMIT_NOT_FROM_GRAPH</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>count_distinct</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>count_distinct</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_oids_to_commits</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_extra_edges</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Finding extra edges in commit graph"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_parents</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>]</index></name> <operator>=</operator> <call><name>lookup_commit</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name> <operator>&amp;&amp;</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>-&gt;</operator><name>graph_pos</name> <operator>!=</operator> <name>COMMIT_NOT_FROM_GRAPH</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>parse_commit_no_graph</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_parents</name> <operator>=</operator> <call><name>commit_list_count</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>]</index></name><operator>-&gt;</operator><name>parents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_parents</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_extra_edges</name></name> <operator>+=</operator> <name>num_parents</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_graph_chunk_base_1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>write_graph_chunk_base_1</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>num</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_graph_chunk_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>write_graph_chunk_base_1</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>new_base_graph</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to write correct number of base graph ids"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_commit_graph_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>lock_file</name></name></type> <name>lk</name> <init>= <expr><name>LOCK_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>chunk_ids</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>chunk_offsets</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hashsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>progress_title</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_chunks</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>file_hash</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>tmp_file</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_file</name></expr></argument>,

<argument><expr><literal type="string">"%s/info/commit-graphs/tmp_graph_XXXXXX"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>odb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph_name</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph_name</name></name> <operator>=</operator> <call><name>get_commit_graph_filename</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>odb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>safe_create_leading_directories</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>UNLEAK</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to create leading directories of %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lock_name</name> <init>= <expr><call><name>get_chain_filename</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>odb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hold_lock_file_for_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lk</name></expr></argument>, <argument><expr><name>lock_name</name></expr></argument>, <argument><expr><name>LOCK_DIE_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>git_mkstemp_mode</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>, <argument><expr><literal type="number">0444</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to create '%s'"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>hashfd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>hold_lock_file_for_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lk</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>, <argument><expr><name>LOCK_DIE_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <name><name>lk</name><operator>.</operator><name>tempfile</name><operator>-&gt;</operator><name>fd</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>hashfd</name><argument_list>(<argument><expr><name><name>lk</name><operator>.</operator><name>tempfile</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>lk</name><operator>.</operator><name>tempfile</name><operator>-&gt;</operator><name>filename</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>chunk_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GRAPH_CHUNKID_OIDFANOUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk_ids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>GRAPH_CHUNKID_OIDLOOKUP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk_ids</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>GRAPH_CHUNKID_DATA</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_extra_edges</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chunk_ids</name><index>[<expr><name>num_chunks</name></expr>]</index></name> <operator>=</operator> <name>GRAPH_CHUNKID_EXTRAEDGES</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_chunks</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chunk_ids</name><index>[<expr><name>num_chunks</name></expr>]</index></name> <operator>=</operator> <name>GRAPH_CHUNKID_BASE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_chunks</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>chunk_ids</name><index>[<expr><name>num_chunks</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk_offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <operator>(</operator><name>num_chunks</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>GRAPH_CHUNKLOOKUP_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk_offsets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>chunk_offsets</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>GRAPH_FANOUT_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk_offsets</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>chunk_offsets</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>hashsz</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk_offsets</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>chunk_offsets</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>hashsz</name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_chunks</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_extra_edges</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chunk_offsets</name><index>[<expr><name>num_chunks</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>chunk_offsets</name><index>[<expr><name>num_chunks</name></expr>]</index></name> <operator>+</operator>

<literal type="number">4</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_extra_edges</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_chunks</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chunk_offsets</name><index>[<expr><name>num_chunks</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>chunk_offsets</name><index>[<expr><name>num_chunks</name></expr>]</index></name> <operator>+</operator>

<name>hashsz</name> <operator>*</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>num_chunks</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hashwrite_be32</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>GRAPH_SIGNATURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite_u8</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>GRAPH_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite_u8</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>oid_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite_u8</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>num_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite_u8</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_chunks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>chunk_write</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chunk_write</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>chunk_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk_write</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>chunk_offsets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk_write</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>chunk_offsets</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>chunk_write</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>strbuf_addf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress_title</name></expr></argument>,

<argument><expr><call><name>Q_</name><argument_list>(<argument><expr><literal type="string">"Writing out commit graph in %d pass"</literal></expr></argument>,

<argument><expr><literal type="string">"Writing out commit graph in %d passes"</literal></expr></argument>,

<argument><expr><name>num_chunks</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>num_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(

<argument><expr><name><name>progress_title</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><name>num_chunks</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>write_graph_chunk_fanout</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_graph_chunk_oids</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>hashsz</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_graph_chunk_data</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>hashsz</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_extra_edges</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>write_graph_chunk_extra_edges</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<call><name>write_graph_chunk_base</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress_title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>base_graph_name</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_base_hash</name> <init>= <expr><call><name>xstrdup</name><argument_list>(<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>new_base_graph</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_base_name</name> <init>= <expr><call><name>get_split_graph_filename</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>new_base_graph</name><operator>-&gt;</operator><name>odb</name></name></expr></argument>, <argument><expr><name>new_base_hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_after</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_hash_after</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_after</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>new_base_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_hash_after</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>new_base_hash</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>close_commit_graph</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>finalize_hashfile</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>file_hash</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>CSUM_HASH_IN_STREAM</name> <operator>|</operator> <name>CSUM_FSYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>chainf</name> <init>= <expr><call><name>fdopen_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lk</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>final_graph_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chainf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to open commit-graph chain file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>base_graph_name</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_after</name><index>[

<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>base_graph_name</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rename</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>base_graph_name</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to rename base commit-graph file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name> <init>= <expr><call><name>get_commit_graph_filename</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>odb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_hash_after</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>file_hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>final_graph_name</name> <operator>=</operator> <call><name>get_split_graph_filename</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>odb</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_hash_after</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_after</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>final_graph_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>rename</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>, <argument><expr><name>final_graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>lk</name><operator>.</operator><name>tempfile</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_hash_after</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to rename temporary commit-graph file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>commit_lock_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>split_graph_merge_strategy</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>num_commits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_commits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_mult</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split_opts</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_commits</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>split_opts</name><operator>-&gt;</operator><name>max_commits</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split_opts</name><operator>-&gt;</operator><name>size_multiple</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size_mult</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>split_opts</name><operator>-&gt;</operator><name>size_multiple</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_commits</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_before</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>g</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name> <operator>&lt;=</operator> <name>size_mult</name> <operator>*</operator> <name>num_commits</name> <operator>||</operator>

<operator>(</operator><name>max_commits</name> <operator>&amp;&amp;</operator> <name>num_commits</name> <operator>&gt;</operator> <name>max_commits</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>odb</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>odb</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num_commits</name> <operator>+=</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>new_base_graph</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>old_graph_name</name> <init>= <expr><call><name>get_commit_graph_filename</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>odb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>old_graph_name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>g</name><operator>-&gt;</operator><name>odb</name></name> <operator>!=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>odb</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>new_base_graph</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old_graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_after</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_hash_after</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>&amp;&amp;</operator>

<name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_before</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_after</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_before</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_before</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_hash_after</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_commit_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>load_oid_from_graph</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lookup_commit_reference_gently</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>commit_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> struct <name>commit</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>_a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> struct <name>commit</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>_b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>oidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sort_and_scan_merged_commits</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(

<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Scanning merged commits"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr></argument>, <argument><expr><name>commit_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_extra_edges</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unexpected duplicate commit id %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_parents</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_parents</name> <operator>=</operator> <call><name>commit_list_count</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>parents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_parents</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_extra_edges</name></name> <operator>+=</operator> <name>num_parents</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_commit_graphs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>current_graph_number</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_before</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>g</name> <operator>&amp;&amp;</operator> <name>current_graph_number</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>current_graph_number</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name> <operator>=</operator> <call><name>start_delayed_progress</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Merging commit-graph"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>merge_commit_graph</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>new_base_graph</name></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>new_num_commits_in_base</name></name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits_in_base</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>new_base_graph</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>base_graph_name</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>new_base_graph</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sort_and_scan_merged_commits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_commit_graphs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_before</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>utimbuf</name></name></type> <name>updated_time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>stat</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_before</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>updated_time</name><operator>.</operator><name>actime</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_atime</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>updated_time</name><operator>.</operator><name>modtime</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>utime</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_before</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>updated_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>expire_commit_graphs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>path</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>de</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>dirnamelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>timestamp_t</name></type> <name>expire_time</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split_opts</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>split_opts</name><operator>-&gt;</operator><name>expire_time</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>expire_time</name> <operator>-=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>split_opts</name><operator>-&gt;</operator><name>expire_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chain_file_name</name> <init>= <expr><call><name>get_chain_filename</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>odb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>chain_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>chain_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>odb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"/info/commit-graphs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>opendir</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strbuf_addch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dirnamelen</name> <operator>=</operator> <name><name>path</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>de</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strbuf_setlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name>dirnamelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_addstr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><name><name>de</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stat</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>.</operator><name>st_mtime</name></name> <operator>&gt;</operator> <name>expire_time</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>path</name><operator>.</operator><name>len</name></name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name> <operator>+</operator> <name><name>path</name><operator>.</operator><name>len</name></name> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">".graph"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_after</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<label><name>out</name>:</label>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>write_commit_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>object_directory</name></name> <modifier>*</modifier></type><name>odb</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>pack_indexes</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>commit_hex</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>commit_graph_write_flags</name></name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>split_commit_graph_opts</name></name> <modifier>*</modifier></type><name>split_opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>write_commit_graph_context</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count_distinct</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>commit_graph_compatible</name><argument_list>(<argument><expr><name>the_repository</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>write_commit_graph_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <name>the_repository</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>odb</name></name> <operator>=</operator> <name>odb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>append</name></name> <operator>=</operator> <ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>COMMIT_GRAPH_WRITE_APPEND</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>report_progress</name></name> <operator>=</operator> <ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>COMMIT_GRAPH_WRITE_PROGRESS</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name> <operator>=</operator> <ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>COMMIT_GRAPH_WRITE_SPLIT</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>check_oids</name></name> <operator>=</operator> <ternary><condition><expr><name>flags</name> <operator>&amp;</operator> <name>COMMIT_GRAPH_WRITE_CHECK_OIDS</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>split_opts</name></name> <operator>=</operator> <name>split_opts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>prepare_commit_graph</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_before</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_before</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_before</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_before</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_before</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_before</name><index>[<expr><operator>--</operator><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>approx_nr_objects</name></name> <operator>=</operator> <call><name>approximate_object_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>approx_nr_objects</name></name> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name> <operator>&amp;&amp;</operator> <name>split_opts</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>alloc</name></name> <operator>&gt;</operator> <name><name>split_opts</name><operator>-&gt;</operator><name>max_commits</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <name><name>split_opts</name><operator>-&gt;</operator><name>max_commits</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>append</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prepare_commit_graph_one</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>odb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>alloc</name></name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name><operator>-&gt;</operator><name>num_commits</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>alloc</name></name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>append</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>r</name><operator>-&gt;</operator><name>objects</name><operator>-&gt;</operator><name>commit_graph</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><name><name>g</name><operator>-&gt;</operator><name>chunk_oid_lookup</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>*</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hashcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>nr</name></name><operator>++</operator></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pack_indexes</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>fill_oids_from_packs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pack_indexes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>commit_hex</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>fill_oids_from_commit_hex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>commit_hex</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pack_indexes</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>commit_hex</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fill_oids_from_all_packs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close_reachable</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count_distinct</name> <operator>=</operator> <call><name>count_distinct_commits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count_distinct</name> <operator>&gt;=</operator> <name>GRAPH_EDGE_LAST_MASK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"the commit graph format cannot write %d commits"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>count_distinct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <name>count_distinct</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_oids_to_commits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name> <operator>&gt;=</operator> <name>GRAPH_EDGE_LAST_MASK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"too many commits to write graph"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>split_graph_merge_strategy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>merge_commit_graphs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>compute_generation_numbers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_commit_graph_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>split</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mark_commit_graphs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>expire_commit_graphs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commits</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>oids</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_after</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_after</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_after</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_hash_after</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>num_commit_graphs_before</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_before</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_after</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_filenames_before</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>commit_graph_hash_after</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERIFY_COMMIT_GRAPH_ERROR_HASH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>verify_commit_graph_error</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>graph_report</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><name>verify_commit_graph_error</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERATION_ZERO_EXISTS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GENERATION_NUMBER_EXISTS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>verify_commit_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cur_fanout_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>prev_oid</name></decl>, <decl><type ref="prev"/><name>cur_oid</name></decl>, <decl><type ref="prev"/><name>checksum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>generation_zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hashfile</name></name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>devnull</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>progress</name></name> <modifier>*</modifier></type><name>progress</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>local_error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><literal type="string">"no commit-graph file loaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>verify_commit_graph_error</name> <operator>=</operator> <call><name>verify_commit_graph_lite</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>verify_commit_graph_error</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>verify_commit_graph_error</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>devnull</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/null"</literal></expr></argument>, <argument><expr><name>O_WRONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>hashfd</name><argument_list>(<argument><expr><name>devnull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashwrite</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>finalize_hashfile</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>checksum</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name>CSUM_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasheq</name><argument_list>(<argument><expr><name><name>checksum</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>data_len</name></name> <operator>-</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"the commit-graph file has incorrect checksum and is likely corrupt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>verify_commit_graph_error</name> <operator>=</operator> <name>VERIFY_COMMIT_GRAPH_ERROR_HASH</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>graph_commit</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hashcpy</name><argument_list>(<argument><expr><name><name>cur_oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>chunk_oid_lookup</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <call><name>oidcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph has incorrect OID order: %s then %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev_oid</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prev_oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>cur_oid</name><operator>.</operator><name>hash</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name>cur_fanout_pos</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fanout_value</name> <init>= <expr><call><name>get_be32</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>chunk_oid_fanout</name></name> <operator>+</operator> <name>cur_fanout_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>fanout_value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph has incorrect fanout value: fanout[%d] = %u != %u"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>cur_fanout_pos</name></expr></argument>, <argument><expr><name>fanout_value</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur_fanout_pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>graph_commit</name> <operator>=</operator> <call><name>lookup_commit</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>parse_commit_in_graph_one</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>graph_commit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to parse commit %s from commit-graph"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><name>cur_fanout_pos</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fanout_value</name> <init>= <expr><call><name>get_be32</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>chunk_oid_fanout</name></name> <operator>+</operator> <name>cur_fanout_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name> <operator>!=</operator> <name>fanout_value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph has incorrect fanout value: fanout[%d] = %u != %u"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>cur_fanout_pos</name></expr></argument>, <argument><expr><name>fanout_value</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur_fanout_pos</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>verify_commit_graph_error</name> <operator>&amp;</operator> <operator>~</operator><name>VERIFY_COMMIT_GRAPH_ERROR_HASH</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>verify_commit_graph_error</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>COMMIT_GRAPH_WRITE_PROGRESS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>progress</name> <operator>=</operator> <call><name>start_progress</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Verifying commits in commit graph"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><operator>-&gt;</operator><name>num_commits</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>graph_commit</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>odb_commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit_list</name></name> <modifier>*</modifier></type><name>graph_parents</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>odb_parents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_generation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>display_progress</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hashcpy</name><argument_list>(<argument><expr><name><name>cur_oid</name><operator>.</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>chunk_oid_lookup</name></name> <operator>+</operator> <name><name>g</name><operator>-&gt;</operator><name>hash_len</name></name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>graph_commit</name> <operator>=</operator> <call><name>lookup_commit</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>odb_commit</name> <operator>=</operator> <operator>(</operator>struct <name>commit</name> <operator>*</operator><operator>)</operator><call><name>create_object</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>, <argument><expr><call><name>alloc_commit_node</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_commit_internal</name><argument_list>(<argument><expr><name>odb_commit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to parse commit %s from object database for commit-graph"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>get_commit_tree_in_graph_one</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>graph_commit</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>,

<argument><expr><call><name>get_commit_tree_oid</name><argument_list>(<argument><expr><name>odb_commit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"root tree OID for commit %s in commit-graph is %s != %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><call><name>get_commit_tree_oid</name><argument_list>(<argument><expr><name>graph_commit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><call><name>get_commit_tree_oid</name><argument_list>(<argument><expr><name>odb_commit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>graph_parents</name> <operator>=</operator> <name><name>graph_commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>odb_parents</name> <operator>=</operator> <name><name>odb_commit</name><operator>-&gt;</operator><name>parents</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>graph_parents</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>odb_parents</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph parent list for commit %s is too long"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>parse_commit_in_graph_one</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name><name>graph_parents</name><operator>-&gt;</operator><name>item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graph_parents</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>odb_parents</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph parent for %s is %s != %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>graph_parents</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>odb_parents</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>object</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph_parents</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>generation</name></name> <operator>&gt;</operator> <name>max_generation</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_generation</name> <operator>=</operator> <name><name>graph_parents</name><operator>-&gt;</operator><name>item</name><operator>-&gt;</operator><name>generation</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>graph_parents</name> <operator>=</operator> <name><name>graph_parents</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>odb_parents</name> <operator>=</operator> <name><name>odb_parents</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>odb_parents</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph parent list for commit %s terminates early"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>graph_commit</name><operator>-&gt;</operator><name>generation</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>generation_zero</name> <operator>==</operator> <name>GENERATION_NUMBER_EXISTS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph has generation number zero for commit %s, but non-zero elsewhere"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>generation_zero</name> <operator>=</operator> <name>GENERATION_ZERO_EXISTS</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>generation_zero</name> <operator>==</operator> <name>GENERATION_ZERO_EXISTS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph has non-zero generation number for commit %s, but zero elsewhere"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>generation_zero</name> <operator>==</operator> <name>GENERATION_ZERO_EXISTS</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>max_generation</name> <operator>==</operator> <name>GENERATION_NUMBER_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_generation</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph_commit</name><operator>-&gt;</operator><name>generation</name></name> <operator>!=</operator> <name>max_generation</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit-graph generation for commit %s is %u != %u"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>graph_commit</name><operator>-&gt;</operator><name>generation</name></name></expr></argument>,

<argument><expr><name>max_generation</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>graph_commit</name><operator>-&gt;</operator><name>date</name></name> <operator>!=</operator> <name><name>odb_commit</name><operator>-&gt;</operator><name>date</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>graph_report</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"commit date for commit %s in commit-graph is %"</literal><name>PRItime</name><literal type="string">" != %"</literal><name>PRItime</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>oid_to_hex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cur_oid</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>graph_commit</name><operator>-&gt;</operator><name>date</name></name></expr></argument>,

<argument><expr><name><name>odb_commit</name><operator>-&gt;</operator><name>date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>stop_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>local_error</name> <operator>=</operator> <name>verify_commit_graph_error</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>COMMIT_GRAPH_VERIFY_SHALLOW</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>local_error</name> <operator>|=</operator> <call><name>verify_commit_graph</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>base_graph</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>local_error</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_commit_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>commit_graph</name></name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>graph_fd</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>g</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>-&gt;</operator><name>data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>graph_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>disable_commit_graph</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>commit_graph_disabled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
