<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\linear-assignment.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"linear-assignment.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COST</name><parameter_list>(<parameter><type><name>column</name></type></parameter>, <parameter><type><name>row</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cost[(column) + column_count * (row)]</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>compute_assignment</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>column_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row_count</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>cost</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>column2row</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>row2column</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>free_row</name></decl>, <decl><type ref="prev"/><name>free_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>saved_free_count</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pred</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>phase</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>column_count</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>column2row</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>column_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>row2column</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>row_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>column2row</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>column_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>row2column</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>row_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>column_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>column_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>row_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>COST</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>COST</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>COST</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>row2column</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>row2column</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>column2row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>row2column</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>row2column</name><index>[<expr><name>i1</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>-</operator> <name><name>row2column</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>column2row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>free_row</name></expr></argument>, <argument><expr><name>row_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>row_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j1</name> <init>= <expr><name><name>row2column</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>j1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>free_row</name><index>[<expr><name>free_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>j1</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>row2column</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal> <operator>-</operator> <name>j1</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>min</name> <init>= <expr><call><name>COST</name><argument_list>(<argument><expr><operator>!</operator><name>j1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>v</name><index>[<expr><operator>!</operator><name>j1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>column_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>j1</name> <operator>&amp;&amp;</operator> <name>min</name> <operator>&gt;</operator> <call><name>COST</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>COST</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>j1</name></expr>]</index></name> <operator>-=</operator> <name>min</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>free_count</name> <operator>==</operator>

<operator>(</operator><ternary><condition><expr><name>column_count</name> <operator>&lt;</operator> <name>row_count</name></expr> ?</condition><then> <expr><name>row_count</name> <operator>-</operator> <name>column_count</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>free_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>phase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>phase</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>phase</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>saved_free_count</name> <operator>=</operator> <name>free_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>free_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>saved_free_count</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>u1</name></decl>, <decl><type ref="prev"/><name>u2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j2</name></decl>, <decl><type ref="prev"/><name>i0</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>free_row</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>u1</name> <operator>=</operator> <call><name>COST</name><argument_list>(<argument><expr><name>j1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>v</name><index>[<expr><name>j1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>u2</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>column_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>COST</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>u2</name> <operator>&gt;</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>u1</name> <operator>&lt;</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>u2</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j2</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>u2</name> <operator>=</operator> <name>u1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u1</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j2</name> <operator>=</operator> <name>j1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j1</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j2</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j2</name> <operator>=</operator> <name>j1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u2</name> <operator>=</operator> <name>u1</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i0</name> <operator>=</operator> <name><name>column2row</name><index>[<expr><name>j1</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>u1</name> <operator>&lt;</operator> <name>u2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>j1</name></expr>]</index></name> <operator>-=</operator> <name>u2</name> <operator>-</operator> <name>u1</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>i0</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j1</name> <operator>=</operator> <name>j2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i0</name> <operator>=</operator> <name><name>column2row</name><index>[<expr><name>j1</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i0</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>u1</name> <operator>&lt;</operator> <name>u2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>free_row</name><index>[<expr><operator>--</operator><name>k</name></expr>]</index></name> <operator>=</operator> <name>i0</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>free_row</name><index>[<expr><name>free_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i0</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>row2column</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>column2row</name><index>[<expr><name>j1</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<expr_stmt><expr><name>saved_free_count</name> <operator>=</operator> <name>free_count</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>column_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>pred</name></expr></argument>, <argument><expr><name>column_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><name>column_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>free_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>free_count</name> <operator>&lt;</operator> <name>saved_free_count</name></expr>;</condition> <incr><expr><name>free_count</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><name><name>free_row</name><index>[<expr><name>free_count</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>up</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>u1</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>column_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>COST</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pred</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <name><name>d</name><index>[<expr><name><name>col</name><index>[<expr><name>up</name><operator>++</operator></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>up</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>column_count</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>col</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>min</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>min</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>up</name> <operator>=</operator> <name>low</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>col</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>up</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><index>[<expr><name>up</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>low</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>up</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>column2row</name><index>[<expr><name><name>col</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>update</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j1</name> <init>= <expr><name><name>col</name><index>[<expr><name>low</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>column2row</name><index>[<expr><name>j1</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>u1</name> <operator>=</operator> <call><name>COST</name><argument_list>(<argument><expr><name>j1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>v</name><index>[<expr><name>j1</name></expr>]</index></name> <operator>-</operator> <name>min</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name>up</name></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>column_count</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>col</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>COST</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>u1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name><name>d</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pred</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>min</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>column2row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>update</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>col</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>up</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>col</name><index>[<expr><name>up</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block> while <condition>(<expr><name>low</name> <operator>!=</operator> <name>up</name></expr>)</condition>;</do>

</block_content>}</block> while <condition>(<expr><name>low</name> <operator>==</operator> <name>up</name></expr>)</condition>;</do>

<label><name>update</name>:</label>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j1</name> <init>= <expr><name><name>col</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name>j1</name></expr>]</index></name> <operator>+=</operator> <name><name>d</name><index>[<expr><name>j1</name></expr>]</index></name> <operator>-</operator> <name>min</name></expr>;</expr_stmt>

</block_content>}</block></for>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"negative j: %d"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>pred</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>column2row</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>row2column</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>i1</name> <operator>!=</operator> <name>i</name></expr>)</condition>;</do>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>free_row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
