<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\refs\ref-cache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../refs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ref-cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../iterator.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>add_entry_to_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>(</operator><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name> <operator>==</operator> <name><name>dir</name><operator>-&gt;</operator><name>sorted</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<call><name>strcmp</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>,

<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>sorted</name></name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>get_ref_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>REF_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>subdir</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>REF_INCOMPLETE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dir</name><operator>-&gt;</operator><name>cache</name><operator>-&gt;</operator><name>fill_ref_dir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"incomplete ref_store without fill_ref_dir function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>dir</name><operator>-&gt;</operator><name>cache</name><operator>-&gt;</operator><name>fill_ref_dir</name></name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>cache</name><operator>-&gt;</operator><name>ref_store</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>REF_INCOMPLETE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dir</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>create_ref_entry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FLEX_ALLOC_STR</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>oidcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>value</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>

<return>return <expr><name>ref</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ref_cache</name></name> <modifier>*</modifier></type><name>create_ref_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_store</name></name> <modifier>*</modifier></type><name>refs</name></decl></parameter>,

<parameter><decl><type><name>fill_ref_dir_fn</name> <modifier>*</modifier></type><name>fill_ref_dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_cache</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>ref_store</name></name> <operator>=</operator> <name>refs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>fill_ref_dir</name></name> <operator>=</operator> <name>fill_ref_dir</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>create_dir_entry</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>clear_ref_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_ref_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>REF_DIR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>clear_ref_dir</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>subdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_ref_cache</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_cache</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free_ref_entry</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_ref_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_ref_entry</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>sorted</name></name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>create_dir_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_cache</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>incomplete</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>direntry</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FLEX_ALLOC_MEM</name><argument_list>(<argument><expr><name>direntry</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>direntry</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>subdir</name><operator>.</operator><name>cache</name></name> <operator>=</operator> <name>cache</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>direntry</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>REF_DIR</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>incomplete</name></expr> ?</condition><then> <expr><name>REF_INCOMPLETE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>direntry</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ref_entry_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>one</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>ref_entry</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>two</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>ref_entry</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>one</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>two</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sort_ref_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>string_slice</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ref_entry_cmp_sslice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key_</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ent_</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>string_slice</name></name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>key_</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>ent</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> struct <name>ref_entry</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name>ent_</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>ent</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>cmp</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="char">'\0'</literal> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>ent</name><operator>-&gt;</operator><name>name</name><index>[<expr><name><name>key</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>search_ref_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>string_slice</name></name></type> <name>key</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>refname</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sort_ref_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>refname</name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>dir</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>ref_entry_cmp_sslice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>r</name> <operator>-</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>search_for_subdir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subdirname</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mkdir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>entry_index</name> <init>= <expr><call><name>search_ref_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>subdirname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>entry_index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mkdir</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>create_dir_entry</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>cache</name></name></expr></argument>, <argument><expr><name>subdirname</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_entry_to_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>entry_index</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>get_ref_dir</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>find_containing_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mkdir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slash</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>slash</name></expr>;</condition> <incr><expr><name>slash</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>slash</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>dirnamelen</name> <init>= <expr><name>slash</name> <operator>-</operator> <name>refname</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>subdir</name></decl>;</decl_stmt>

<expr_stmt><expr><name>subdir</name> <operator>=</operator> <call><name>search_for_subdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>dirnamelen</name></expr></argument>, <argument><expr><name>mkdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>subdir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>subdir</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>dir</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>find_ref_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>entry_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>find_containing_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entry_index</name> <operator>=</operator> <call><name>search_ref_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>entry_index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>entry_index</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>REF_DIR</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>entry</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>remove_entry_from_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>refname_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>refname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>entry_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_dir</name> <init>= <expr><name><name>refname</name><index>[<expr><name>refname_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_dir</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dirname</name> <init>= <expr><call><name>xmemdupz</name><argument_list>(<argument><expr><name>refname</name></expr></argument>, <argument><expr><name>refname_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>find_containing_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>find_containing_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entry_index</name> <operator>=</operator> <call><name>search_ref_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>refname</name></expr></argument>, <argument><expr><name>refname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>entry_index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>entry_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MOVE_ARRAY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>entry_index</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>entry_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name> <operator>-</operator> <name>entry_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>sorted</name></name> <operator>&gt;</operator> <name>entry_index</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>sorted</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free_ref_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>add_ref_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>find_containing_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>add_entry_to_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_dup_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>ref1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>ref2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ref1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ref2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ref1</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>REF_DIR</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ref2</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>REF_DIR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Reference directory conflict: %s"</literal></expr></argument>, <argument><expr><name><name>ref1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>oideq</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref1</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>value</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ref2</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>value</name><operator>.</operator><name>oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"Duplicated ref, and SHA1s don't match: %s"</literal></expr></argument>, <argument><expr><name><name>ref1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Duplicated ref: %s"</literal></expr></argument>, <argument><expr><name><name>ref1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sort_ref_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>sorted</name></name> <operator>==</operator> <name><name>dir</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>QSORT</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>, <argument><expr><name>ref_entry_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&amp;&amp;</operator> <call><name>is_dup_ref</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free_ref_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>sorted</name></name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></function>

<enum>enum <name>prefix_state</name> <block>{

<decl><name>PREFIX_CONTAINS_DIR</name></decl>,

<decl><name>PREFIX_WITHIN_DIR</name></decl>,

<decl><name>PREFIX_EXCLUDES_DIR</name></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>prefix_state</name></name></type> <name>overlaps_prefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>prefix</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>dirname</name> <operator>==</operator> <operator>*</operator><name>prefix</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dirname</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prefix</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>prefix</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PREFIX_CONTAINS_DIR</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>*</operator><name>dirname</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>PREFIX_WITHIN_DIR</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>PREFIX_EXCLUDES_DIR</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prime_ref_dir</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dir</name><operator>-&gt;</operator><name>nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>REF_DIR</name><operator>)</operator></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>prefix</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>prime_ref_dir</name><argument_list>(<argument><expr><call><name>get_ref_dir</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><call><name>overlaps_prefix</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PREFIX_CONTAINS_DIR</name></expr>:</case>

<expr_stmt><expr><call><name>prime_ref_dir</name><argument_list>(<argument><expr><call><name>get_ref_dir</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PREFIX_WITHIN_DIR</name></expr>:</case>

<expr_stmt><expr><call><name>prime_ref_dir</name><argument_list>(<argument><expr><call><name>get_ref_dir</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PREFIX_EXCLUDES_DIR</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<struct>struct <name>cache_ref_iterator_level</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>prefix_state</name></name></type> <name>prefix_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>cache_ref_iterator</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>levels_nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>levels_alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_ref_iterator_level</name></name> <modifier>*</modifier></type><name>levels</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cache_ref_iterator_advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=

<expr><operator>(</operator>struct <name>cache_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_ref_iterator_level</name></name> <modifier>*</modifier></type><name>level</name> <init>=

<expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name> <init>= <expr><name><name>level</name><operator>-&gt;</operator><name>dir</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>prefix_state</name></name></type> <name>entry_prefix_state</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>level</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sort_ref_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>level</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name><name>level</name><operator>-&gt;</operator><name>dir</name><operator>-&gt;</operator><name>nr</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>dir</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name><name>level</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>level</name><operator>-&gt;</operator><name>prefix_state</name></name> <operator>==</operator> <name>PREFIX_WITHIN_DIR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>entry_prefix_state</name> <operator>=</operator> <call><name>overlaps_prefix</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>entry_prefix_state</name> <operator>==</operator> <name>PREFIX_EXCLUDES_DIR</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>entry_prefix_state</name> <operator>=</operator> <name><name>level</name><operator>-&gt;</operator><name>prefix_state</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>REF_DIR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>levels_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <call><name>get_ref_dir</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level</name><operator>-&gt;</operator><name>prefix_state</name></name> <operator>=</operator> <name>entry_prefix_state</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>oid</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>value</name><operator>.</operator><name>oid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>

<return>return <expr><name>ITER_OK</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cache_ref_iterator_peel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>peeled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>peel_object</name><argument_list>(<argument><expr><name><name>ref_iterator</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>peeled</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cache_ref_iterator_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=

<expr><operator>(</operator>struct <name>cache_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>iter</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>base_ref_iterator_free</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ITER_DONE</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ref_iterator_vtable</name></name></type> <name>cache_ref_iterator_vtable</name> <init>= <expr><block>{

<expr><name>cache_ref_iterator_advance</name></expr>,

<expr><name>cache_ref_iterator_peel</name></expr>,

<expr><name>cache_ref_iterator_abort</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>cache_ref_iterator_begin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_cache</name></name> <modifier>*</modifier></type><name>cache</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>prime_dir</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_dir</name></name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>cache_ref_iterator_level</name></name> <modifier>*</modifier></type><name>level</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>get_ref_dir</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>prefix</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>find_containing_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dir</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>empty_ref_iterator_begin</name><argument_list>()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prime_dir</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>prime_ref_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_iterator</name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>base_ref_iterator_init</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cache_ref_iterator_vtable</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_GROW</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>levels</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>levels_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>levels_nr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>levels</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>dir</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>prefix</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>level</name><operator>-&gt;</operator><name>prefix_state</name></name> <operator>=</operator> <name>PREFIX_WITHIN_DIR</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>level</name><operator>-&gt;</operator><name>prefix_state</name></name> <operator>=</operator> <name>PREFIX_CONTAINS_DIR</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ref_iterator</name></expr>;</return>

</block_content>}</block></function>

</unit>
