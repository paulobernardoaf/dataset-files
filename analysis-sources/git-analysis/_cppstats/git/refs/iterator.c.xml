<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\refs\iterator.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"refs/refs-internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iterator.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ref_iterator_advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>ref_iterator</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>advance</name></name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ref_iterator_peel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>peeled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>ref_iterator</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>peel</name></name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>, <argument><expr><name>peeled</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ref_iterator_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name><name>ref_iterator</name><operator>-&gt;</operator><name>vtable</name><operator>-&gt;</operator><name>abort</name></name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>base_ref_iterator_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ref_iterator_vtable</name></name> <modifier>*</modifier></type><name>vtable</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ordered</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <name>vtable</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ordered</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>ordered</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>refname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>base_ref_iterator_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>vtable</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>empty_ref_iterator</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name></type> <name>base</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>empty_ref_iterator_advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>empty_ref_iterator_peel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>peeled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"peel called for empty iterator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>empty_ref_iterator_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>base_ref_iterator_free</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ITER_DONE</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ref_iterator_vtable</name></name></type> <name>empty_ref_iterator_vtable</name> <init>= <expr><block>{

<expr><name>empty_ref_iterator_advance</name></expr>,

<expr><name>empty_ref_iterator_peel</name></expr>,

<expr><name>empty_ref_iterator_abort</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>empty_ref_iterator_begin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>empty_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name> <init>= <expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>base_ref_iterator_init</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty_ref_iterator_vtable</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ref_iterator</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>is_empty_ref_iterator</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>ref_iterator</name><operator>-&gt;</operator><name>vtable</name></name> <operator>==</operator> <operator>&amp;</operator><name>empty_ref_iterator_vtable</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>merge_ref_iterator</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ref_iterator_select_fn</name> <modifier>*</modifier></type><name>select</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>merge_ref_iterator_advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>merge_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=

<expr><operator>(</operator>struct <name>merge_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iter</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>ref_iterator_advance</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ITER_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>==</operator> <name>ITER_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>ref_iterator_advance</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter1</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ITER_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter1</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>==</operator> <name>ITER_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>ref_iterator_advance</name><argument_list>(<argument><expr><operator>*</operator><name><name>iter</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ITER_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>iter</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>==</operator> <name>ITER_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>secondary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>iterator_selection</name></name></type> <name>selection</name> <init>=

<expr><call><name><name>iter</name><operator>-&gt;</operator><name>select</name></name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter1</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>cb_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>selection</name> <operator>==</operator> <name>ITER_SELECT_DONE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>selection</name> <operator>==</operator> <name>ITER_SELECT_ERROR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ITER_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>selection</name> <operator>&amp;</operator> <name>ITER_CURRENT_SELECTION_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>secondary</name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>iter1</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>iter1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>secondary</name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>selection</name> <operator>&amp;</operator> <name>ITER_SKIP_SECONDARY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>ref_iterator_advance</name><argument_list>(<argument><expr><operator>*</operator><name>secondary</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ITER_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>secondary</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>==</operator> <name>ITER_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>selection</name> <operator>&amp;</operator> <name>ITER_YIELD_CURRENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name><name>iter</name><operator>-&gt;</operator><name>current</name></name><operator>)</operator><operator>-&gt;</operator><name>refname</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>oid</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name><name>iter</name><operator>-&gt;</operator><name>current</name></name><operator>)</operator><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name><name>iter</name><operator>-&gt;</operator><name>current</name></name><operator>)</operator><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<return>return <expr><name>ITER_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ITER_ERROR</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>merge_ref_iterator_peel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>peeled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>merge_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=

<expr><operator>(</operator>struct <name>merge_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>iter</name><operator>-&gt;</operator><name>current</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"peel called before advance for merge iterator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>ref_iterator_peel</name><argument_list>(<argument><expr><operator>*</operator><name><name>iter</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><name>peeled</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>merge_ref_iterator_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>merge_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=

<expr><operator>(</operator>struct <name>merge_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><name>ITER_DONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ITER_DONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ITER_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>iter1</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter1</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ITER_DONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ITER_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>base_ref_iterator_free</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ok</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ref_iterator_vtable</name></name></type> <name>merge_ref_iterator_vtable</name> <init>= <expr><block>{

<expr><name>merge_ref_iterator_advance</name></expr>,

<expr><name>merge_ref_iterator_peel</name></expr>,

<expr><name>merge_ref_iterator_abort</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>merge_ref_iterator_begin</name><parameter_list>(

<parameter><decl><type><name>int</name></type> <name>ordered</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter0</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter1</name></decl></parameter>,

<parameter><decl><type><name>ref_iterator_select_fn</name> <modifier>*</modifier></type><name>select</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>merge_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>= <expr><call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name> <init>= <expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>base_ref_iterator_init</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge_ref_iterator_vtable</name></expr></argument>, <argument><expr><name>ordered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name> <operator>=</operator> <name>iter0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter1</name></name> <operator>=</operator> <name>iter1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>select</name></name> <operator>=</operator> <name>select</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>cb_data</name></name> <operator>=</operator> <name>cb_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ref_iterator</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>iterator_selection</name></name></type> <name>overlay_iterator_select</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>front</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>back</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>back</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>front</name></expr> ?</condition><then> <expr><name>ITER_SELECT_0</name></expr> </then><else>: <expr><name>ITER_SELECT_DONE</name></expr></else></ternary></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>!</operator><name>front</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ITER_SELECT_1</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>front</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name><name>back</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ITER_SELECT_0</name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ITER_SELECT_1</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>ITER_SELECT_0_SKIP_1</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>overlay_ref_iterator_begin</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>front</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>back</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>is_empty_ref_iterator</name><argument_list>(<argument><expr><name>front</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>front</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>back</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>is_empty_ref_iterator</name><argument_list>(<argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>front</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>front</name><operator>-&gt;</operator><name>ordered</name></name> <operator>||</operator> <operator>!</operator><name><name>back</name><operator>-&gt;</operator><name>ordered</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"overlay_ref_iterator requires ordered inputs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>merge_ref_iterator_begin</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>front</name></expr></argument>, <argument><expr><name>back</name></expr></argument>,

<argument><expr><name>overlay_iterator_select</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>prefix_ref_iterator</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>trim</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_prefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>refname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>*</operator><name>prefix</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>refname</name> <operator>!=</operator> <operator>*</operator><name>prefix</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>refname</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>prefix</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>refname</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>prefix</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prefix_ref_iterator_advance</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>prefix_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=

<expr><operator>(</operator>struct <name>prefix_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>ref_iterator_advance</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ITER_OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name> <init>= <expr><call><name>compare_prefix</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>ordered</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>trim</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>iter</name><operator>-&gt;</operator><name>trim</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BUG</name><argument_list>(<argument><expr><literal type="string">"attempt to trim too many characters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>refname</name></name> <operator>+</operator> <name><name>iter</name><operator>-&gt;</operator><name>trim</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>refname</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>refname</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>oid</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>iter0</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

<return>return <expr><name>ITER_OK</name></expr>;</return>

</block_content>}</block></while>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ITER_DONE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ITER_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ok</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prefix_ref_iterator_peel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>peeled</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>prefix_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=

<expr><operator>(</operator>struct <name>prefix_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ref_iterator_peel</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr></argument>, <argument><expr><name>peeled</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>prefix_ref_iterator_abort</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>prefix_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name> <init>=

<expr><operator>(</operator>struct <name>prefix_ref_iterator</name> <operator>*</operator><operator>)</operator><name>ref_iterator</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><name>ITER_DONE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>base_ref_iterator_free</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ok</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ref_iterator_vtable</name></name></type> <name>prefix_ref_iterator_vtable</name> <init>= <expr><block>{

<expr><name>prefix_ref_iterator_advance</name></expr>,

<expr><name>prefix_ref_iterator_peel</name></expr>,

<expr><name>prefix_ref_iterator_abort</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>prefix_ref_iterator_begin</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>trim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>prefix_ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>ref_iterator</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>prefix</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>trim</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>iter0</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>iter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_iterator</name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>base_ref_iterator_init</name><argument_list>(<argument><expr><name>ref_iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefix_ref_iterator_vtable</name></expr></argument>, <argument><expr><name><name>iter0</name><operator>-&gt;</operator><name>ordered</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter0</name></name> <operator>=</operator> <name>iter0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>trim</name></name> <operator>=</operator> <name>trim</name></expr>;</expr_stmt>

<return>return <expr><name>ref_iterator</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>current_ref_iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>do_for_each_repo_ref_iterator</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>iter</name></decl></parameter>,

<parameter><decl><type><name>each_repo_ref_fn</name></type> <name>fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>retval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ok</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ref_iterator</name></name> <modifier>*</modifier></type><name>old_ref_iter</name> <init>= <expr><name>current_ref_iter</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>current_ref_iter</name> <operator>=</operator> <name>iter</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name>ok</name> <operator>=</operator> <call><name>ref_iterator_advance</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ITER_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>cb_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>retval</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ref_iterator_abort</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<label><name>out</name>:</label>

<expr_stmt><expr><name>current_ref_iter</name> <operator>=</operator> <name>old_ref_iter</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ok</name> <operator>==</operator> <name>ITER_ERROR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>retval</name></expr>;</return>

</block_content>}</block></function>

</unit>
