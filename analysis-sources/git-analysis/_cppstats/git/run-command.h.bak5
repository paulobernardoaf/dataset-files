


#include "thread-utils.h"

#include "argv-array.h"





































struct child_process {















const char **argv;

struct argv_array args;
struct argv_array env_array;
pid_t pid;

int trace2_child_id;
uint64_t trace2_child_us_start;
const char *trace2_child_class;
const char *trace2_hook_name;



















int in;
int out;
int err;





const char *dir;
















const char *const *env;

unsigned no_stdin:1;
unsigned no_stdout:1;
unsigned no_stderr:1;
unsigned git_cmd:1; 







unsigned silent_exec_failure:1;

unsigned stdout_to_stderr:1;
unsigned use_shell:1;
unsigned clean_on_exit:1;
unsigned wait_after_clean:1;
void (*clean_on_exit_handler)(struct child_process *process);
void *clean_on_exit_handler_cbdata;
};

#define CHILD_PROCESS_INIT { NULL, ARGV_ARRAY_INIT, ARGV_ARRAY_INIT }

























void child_process_init(struct child_process *);







void child_process_clear(struct child_process *);

int is_executable(const char *name);






int start_command(struct child_process *);





int finish_command(struct child_process *);

int finish_command_in_signal(struct child_process *);






int run_command(struct child_process *);






const char *find_hook(const char *name);














LAST_ARG_MUST_BE_NULL
int run_hook_le(const char *const *env, const char *name, ...);
int run_hook_ve(const char *const *env, const char *name, va_list args);

#define RUN_COMMAND_NO_STDIN 1
#define RUN_GIT_CMD 2 
#define RUN_COMMAND_STDOUT_TO_STDERR 4
#define RUN_SILENT_EXEC_FAILURE 8
#define RUN_USING_SHELL 16
#define RUN_CLEAN_ON_EXIT 32












int run_command_v_opt(const char **argv, int opt);
int run_command_v_opt_tr2(const char **argv, int opt, const char *tr2_class);




int run_command_v_opt_cd_env(const char **argv, int opt, const char *dir, const char *const *env);
int run_command_v_opt_cd_env_tr2(const char **argv, int opt, const char *dir,
const char *const *env, const char *tr2_class);















int pipe_command(struct child_process *cmd,
const char *in, size_t in_len,
struct strbuf *out, size_t out_hint,
struct strbuf *err, size_t err_hint);





static inline int capture_command(struct child_process *cmd,
struct strbuf *out,
size_t hint)
{
return pipe_command(cmd, NULL, 0, out, hint, NULL, 0);
}
































struct async {




















int (*proc)(int in, int out, void *data);

void *data;






























int in; 
int out; 
#if defined(NO_PTHREADS)
pid_t pid;
#else
pthread_t tid;
int proc_in;
int proc_out;
#endif
int isolate_sigpipe;
};






int start_async(struct async *async);





int finish_async(struct async *async);

int in_async(void);
int async_with_fork(void);
void check_pipe(int err);

















typedef int (*get_next_task_fn)(struct child_process *cp,
struct strbuf *out,
void *pp_cb,
void **pp_task_cb);
















typedef int (*start_failure_fn)(struct strbuf *out,
void *pp_cb,
void *pp_task_cb);















typedef int (*task_finished_fn)(int result,
struct strbuf *out,
void *pp_cb,
void *pp_task_cb);













int run_processes_parallel(int n,
get_next_task_fn,
start_failure_fn,
task_finished_fn,
void *pp_cb);
int run_processes_parallel_tr2(int n, get_next_task_fn, start_failure_fn,
task_finished_fn, void *pp_cb,
const char *tr2_category, const char *tr2_label);


