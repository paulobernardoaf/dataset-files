<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\ll-merge.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xdiff-interface.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"run-command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ll-merge.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"quote.h"</cpp:file></cpp:include>

<struct_decl>struct <name>ll_merge_driver</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ll_merge_fn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ll_merge_driver</name></name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_name</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ll_merge_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>marker_size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>ll_merge_driver</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll_merge_fn</name></type> <name>fn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>recursive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ll_merge_driver</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmdline</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>merge_attributes</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>load_merge_attributes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>merge_attributes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>merge_attributes</name> <operator>=</operator> <call><name>attr_check_initl</name><argument_list>(<argument><expr><literal type="string">"merge"</literal></expr></argument>, <argument><expr><literal type="string">"conflict-marker-size"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>merge_attributes</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset_merge_attributes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>attr_check_free</name><argument_list>(<argument><expr><name>merge_attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>merge_attributes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ll_binary_merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ll_merge_driver</name></name> <modifier>*</modifier></type><name>drv_unused</name></decl></parameter>,

<parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_name</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ll_merge_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>marker_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>stolen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>virtual_ancestor</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stolen</name> <operator>=</operator> <name>orig</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>variant</name></name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<expr_stmt><expr><call><name>warning</name><argument_list>(<argument><expr><literal type="string">"Cannot merge binary files: %s (%s vs. %s)"</literal></expr></argument>,

<argument><expr><name>path</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>, <argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>XDL_MERGE_FAVOR_OURS</name></expr>:</case>

<expr_stmt><expr><name>stolen</name> <operator>=</operator> <name>src1</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>XDL_MERGE_FAVOR_THEIRS</name></expr>:</case>

<expr_stmt><expr><name>stolen</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>stolen</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>stolen</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stolen</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><ternary><condition><expr><name><name>opts</name><operator>-&gt;</operator><name>variant</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ll_xdl_merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ll_merge_driver</name></name> <modifier>*</modifier></type><name>drv_unused</name></decl></parameter>,

<parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_name</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ll_merge_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>marker_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>xmparam_t</name></type> <name>xmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>orig</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>MAX_XDIFF_SIZE</name> <operator>||</operator>

<name><name>src1</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>MAX_XDIFF_SIZE</name> <operator>||</operator>

<name><name>src2</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name>MAX_XDIFF_SIZE</name> <operator>||</operator>

<call><name>buffer_is_binary</name><argument_list>(<argument><expr><name><name>orig</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>orig</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>buffer_is_binary</name><argument_list>(<argument><expr><name><name>src1</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>src1</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>buffer_is_binary</name><argument_list>(<argument><expr><name><name>src2</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>src2</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>ll_binary_merge</name><argument_list>(<argument><expr><name>drv_unused</name></expr></argument>, <argument><expr><name>result</name></expr></argument>,

<argument><expr><name>path</name></expr></argument>,

<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>orig_name</name></expr></argument>,

<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>,

<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>name2</name></expr></argument>,

<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>marker_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmp</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name>XDL_MERGE_ZEALOUS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmp</name><operator>.</operator><name>favor</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>variant</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmp</name><operator>.</operator><name>xpp</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name><name>opts</name><operator>-&gt;</operator><name>xdl_opts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>git_xmerge_style</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xmp</name><operator>.</operator><name>style</name></name> <operator>=</operator> <name>git_xmerge_style</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>marker_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>xmp</name><operator>.</operator><name>marker_size</name></name> <operator>=</operator> <name>marker_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>xmp</name><operator>.</operator><name>ancestor</name></name> <operator>=</operator> <name>orig_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmp</name><operator>.</operator><name>file1</name></name> <operator>=</operator> <name>name1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>xmp</name><operator>.</operator><name>file2</name></name> <operator>=</operator> <name>name2</name></expr>;</expr_stmt>

<return>return <expr><call><name>xdl_merge</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xmp</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ll_union_merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ll_merge_driver</name></name> <modifier>*</modifier></type><name>drv_unused</name></decl></parameter>,

<parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path_unused</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_name</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ll_merge_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>marker_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ll_merge_options</name></name></type> <name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <operator>*</operator><name>opts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>o</name><operator>.</operator><name>variant</name></name> <operator>=</operator> <name>XDL_MERGE_FAVOR_UNION</name></expr>;</expr_stmt>

<return>return <expr><call><name>ll_xdl_merge</name><argument_list>(<argument><expr><name>drv_unused</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>path_unused</name></expr></argument>,

<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><name>marker_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_BINARY_MERGE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_TEXT_MERGE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL_UNION_MERGE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ll_merge_driver</name></name></type> <name><name>ll_merge_drv</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"binary"</literal></expr>, <expr><literal type="string">"built-in binary merge"</literal></expr>, <expr><name>ll_binary_merge</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"text"</literal></expr>, <expr><literal type="string">"built-in 3-way text merge"</literal></expr>, <expr><name>ll_xdl_merge</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"union"</literal></expr>, <expr><literal type="string">"built-in union merge"</literal></expr>, <expr><name>ll_union_merge</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_temp</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">".merge_file_XXXXXX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>xmkstemp</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>write_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die_errno</name><argument_list>(<argument><expr><literal type="string">"unable to write temp-file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ll_ext_merge</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ll_merge_driver</name></name> <modifier>*</modifier></type><name>fn</name></decl></parameter>,

<parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_name</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ll_merge_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>marker_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>cmd</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf_expand_dict_entry</name></name></type> <name><name>dict</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>path_sq</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>args</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>fd</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sq_quote_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_sq</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>placeholder</name> <operator>=</operator> <literal type="string">"O"</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>placeholder</name> <operator>=</operator> <literal type="string">"A"</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>placeholder</name> <operator>=</operator> <literal type="string">"B"</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>placeholder</name> <operator>=</operator> <literal type="string">"L"</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>placeholder</name> <operator>=</operator> <literal type="string">"P"</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>path_sq</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>placeholder</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>dict</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fn</name><operator>-&gt;</operator><name>cmdline</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"custom merge driver %s lacks command line."</literal></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>create_temp</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>create_temp</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>create_temp</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xsnprintf</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>marker_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_expand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name><name>fn</name><operator>-&gt;</operator><name>cmdline</name></name></expr></argument>, <argument><expr><name>strbuf_expand_dict_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cmd</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>run_command_v_opt</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>RUN_USING_SHELL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>close_bad</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>st</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>xmallocz</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_in_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>result</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FREE_AND_NULL</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>close_bad</name>:</label>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>bad</name>:</label>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>unlink_or_warn</name><argument_list>(<argument><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strbuf_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path_sq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>status</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ll_merge_driver</name></name> <modifier>*</modifier></type><name>ll_user_merge</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>ll_user_merge_tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>default_ll_merge</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_merge_config</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ll_merge_driver</name></name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>namelen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"merge.default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>default_ll_merge</name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_config_key</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr><literal type="string">"merge"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>namelen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>fn</name> <operator>=</operator> <name>ll_user_merge</name></expr>;</init> <condition><expr><name>fn</name></expr>;</condition> <incr><expr><name>fn</name> <operator>=</operator> <name><name>fn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fn</name><operator>-&gt;</operator><name>name</name><index>[<expr><name>namelen</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fn</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>xcalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ll_merge_driver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>xmemdupz</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>fn</name></name> <operator>=</operator> <name>ll_ext_merge</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ll_user_merge_tail</name> <operator>=</operator> <name>fn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ll_user_merge_tail</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>fn</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fn</name><operator>-&gt;</operator><name>description</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"driver"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"%s: lacks value"</literal></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fn</name><operator>-&gt;</operator><name>cmdline</name></name> <operator>=</operator> <call><name>xstrdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"recursive"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>git_config_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fn</name><operator>-&gt;</operator><name>recursive</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initialize_ll_merge</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ll_user_merge_tail</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ll_user_merge_tail</name> <operator>=</operator> <operator>&amp;</operator><name>ll_user_merge</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>git_config</name><argument_list>(<argument><expr><name>read_merge_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ll_merge_driver</name></name> <modifier>*</modifier></type><name>find_ll_merge_driver</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>merge_attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>ll_merge_driver</name></name> <modifier>*</modifier></type><name>fn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>initialize_ll_merge</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ATTR_TRUE</name><argument_list>(<argument><expr><name>merge_attr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>ll_merge_drv</name><index>[<expr><name>LL_TEXT_MERGE</name></expr>]</index></name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ATTR_FALSE</name><argument_list>(<argument><expr><name>merge_attr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>ll_merge_drv</name><index>[<expr><name>LL_BINARY_MERGE</name></expr>]</index></name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>ATTR_UNSET</name><argument_list>(<argument><expr><name>merge_attr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>default_ll_merge</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>ll_merge_drv</name><index>[<expr><name>LL_TEXT_MERGE</name></expr>]</index></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>default_ll_merge</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name>merge_attr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>fn</name> <operator>=</operator> <name>ll_user_merge</name></expr>;</init> <condition><expr><name>fn</name></expr>;</condition> <incr><expr><name>fn</name> <operator>=</operator> <name><name>fn</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fn</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>fn</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>ll_merge_drv</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ll_merge_drv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>ll_merge_drv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>&amp;</operator><name><name>ll_merge_drv</name><index>[<expr><name>LL_TEXT_MERGE</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>normalize_file</name><parameter_list>(<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>mm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>strbuf</name> <init>= <expr><name>STRBUF_INIT</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>renormalize_buffer</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>mm</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>mm</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>strbuf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mm</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mm</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>strbuf</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mm</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>strbuf_detach</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strbuf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ll_merge</name><parameter_list>(<parameter><decl><type><name>mmbuffer_t</name> <modifier>*</modifier></type><name>result_buf</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>ancestor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ancestor_label</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>ours</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>our_label</name></decl></parameter>,

<parameter><decl><type><name>mmfile_t</name> <modifier>*</modifier></type><name>theirs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>their_label</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ll_merge_options</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name> <init>= <expr><call><name>load_merge_attributes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ll_merge_options</name></name></type> <name>default_opts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ll_driver_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>marker_size</name> <init>= <expr><name>DEFAULT_CONFLICT_MARKER_SIZE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ll_merge_driver</name></name> <modifier>*</modifier></type><name>driver</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opts</name> <operator>=</operator> <operator>&amp;</operator><name>default_opts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>renormalize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>normalize_file</name><argument_list>(<argument><expr><name>ancestor</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>normalize_file</name><argument_list>(<argument><expr><name>ours</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>normalize_file</name><argument_list>(<argument><expr><name>theirs</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>istate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>git_check_attr</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ll_driver_name</name> <operator>=</operator> <name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>marker_size</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>marker_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>marker_size</name> <operator>=</operator> <name>DEFAULT_CONFLICT_MARKER_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>driver</name> <operator>=</operator> <call><name>find_ll_merge_driver</name><argument_list>(<argument><expr><name>ll_driver_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>virtual_ancestor</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>recursive</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>driver</name> <operator>=</operator> <call><name>find_ll_merge_driver</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>recursive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opts</name><operator>-&gt;</operator><name>extra_marker_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>marker_size</name> <operator>+=</operator> <name><name>opts</name><operator>-&gt;</operator><name>extra_marker_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name><name>driver</name><operator>-&gt;</operator><name>fn</name></name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><name>result_buf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>ancestor</name></expr></argument>, <argument><expr><name>ancestor_label</name></expr></argument>,

<argument><expr><name>ours</name></expr></argument>, <argument><expr><name>our_label</name></expr></argument>, <argument><expr><name>theirs</name></expr></argument>, <argument><expr><name>their_label</name></expr></argument>,

<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>marker_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ll_merge_marker_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>attr_check</name></name> <modifier>*</modifier></type><name>check</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>marker_size</name> <init>= <expr><name>DEFAULT_CONFLICT_MARKER_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>check</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>attr_check_initl</name><argument_list>(<argument><expr><literal type="string">"conflict-marker-size"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>git_check_attr</name><argument_list>(<argument><expr><name>istate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>marker_size</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>check</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>marker_size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>marker_size</name> <operator>=</operator> <name>DEFAULT_CONFLICT_MARKER_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>marker_size</name></expr>;</return>

</block_content>}</block></function>

</unit>
