<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\lockfile.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tempfile.h"</cpp:file></cpp:include>

<struct>struct <name>lock_file</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>tempfile</name></name> <modifier>*</modifier></type><name>tempfile</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_INIT</name></cpp:macro> <cpp:value>{ NULL }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_SUFFIX</name></cpp:macro> <cpp:value>".lock"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_SUFFIX_LEN</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_DIE_ON_ERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_REPORT_ON_ERROR</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_NO_DEREF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>hold_lock_file_for_update_timeout</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeout_ms</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>hold_lock_file_for_update</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>hold_lock_file_for_update_timeout</name><argument_list>(<argument><expr><name>lk</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>is_lock_file_locked</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>is_tempfile_active</name><argument_list>(<argument><expr><name><name>lk</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>void</name></type> <name>unable_to_lock_message</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>NORETURN</name> <name>void</name></type> <name>unable_to_lock_die</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>FILE</name> <modifier>*</modifier></type><name>fdopen_lock_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>fdopen_tempfile</name><argument_list>(<argument><expr><name><name>lk</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_lock_file_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_tempfile_path</name><argument_list>(<argument><expr><name><name>lk</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_lock_file_fd</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_tempfile_fd</name><argument_list>(<argument><expr><name><name>lk</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>FILE</name> <modifier>*</modifier></type><name>get_lock_file_fp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_tempfile_fp</name><argument_list>(<argument><expr><name><name>lk</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>char</name> <modifier>*</modifier></type><name>get_locked_file_path</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>close_lock_file_gently</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>close_tempfile_gently</name><argument_list>(<argument><expr><name><name>lk</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>reopen_lock_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>reopen_tempfile</name><argument_list>(<argument><expr><name><name>lk</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>commit_lock_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>commit_lock_file_to</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rename_tempfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rollback_lock_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>lock_file</name></name> <modifier>*</modifier></type><name>lk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>delete_tempfile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lk</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
