<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\sequencer.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"strbuf.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wt-status.h"</cpp:file></cpp:include>

<struct_decl>struct <name>commit</name>;</struct_decl>

<struct_decl>struct <name>repository</name>;</struct_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>git_path_commit_editmsg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rebase_path_todo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rebase_path_todo_backup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rebase_path_dropped</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND_SIGNOFF_DEDUP</name></cpp:macro> <cpp:value>(1u &lt;&lt; 0)</cpp:value></cpp:define>

<enum>enum <name>replay_action</name> <block>{

<decl><name>REPLAY_REVERT</name></decl>,

<decl><name>REPLAY_PICK</name></decl>,

<decl><name>REPLAY_INTERACTIVE_REBASE</name></decl>

}</block>;</enum>

<enum>enum <name>commit_msg_cleanup_mode</name> <block>{

<decl><name>COMMIT_MSG_CLEANUP_SPACE</name></decl>,

<decl><name>COMMIT_MSG_CLEANUP_NONE</name></decl>,

<decl><name>COMMIT_MSG_CLEANUP_SCISSORS</name></decl>,

<decl><name>COMMIT_MSG_CLEANUP_ALL</name></decl>

}</block>;</enum>

<struct>struct <name>replay_opts</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>replay_action</name></name></type> <name>action</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>edit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>record_origin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no_commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>signoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allow_ff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allow_rerere_auto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allow_empty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>allow_empty_message</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>drop_redundant_commits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keep_redundant_commits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quiet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reschedule_failed_exec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mainline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>gpg_sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>commit_msg_cleanup_mode</name></name></type> <name>default_msg_cleanup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>explicit_cleanup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strategy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>xopts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>xopts_nr</name></decl>, <decl><type ref="prev"/><name>xopts_alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>current_fixups</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>current_fixup_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>object_id</name></name></type> <name>squash_onto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>have_squash_onto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>rev_info</name></name> <modifier>*</modifier></type><name>revs</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLAY_OPTS_INIT</name></cpp:macro> <cpp:value>{ .action = -1, .current_fixups = STRBUF_INIT }</cpp:value></cpp:define>

<enum>enum <name>todo_command</name> <block>{

<decl><name>TODO_PICK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>TODO_REVERT</name></decl>,

<decl><name>TODO_EDIT</name></decl>,

<decl><name>TODO_REWORD</name></decl>,

<decl><name>TODO_FIXUP</name></decl>,

<decl><name>TODO_SQUASH</name></decl>,

<decl><name>TODO_EXEC</name></decl>,

<decl><name>TODO_BREAK</name></decl>,

<decl><name>TODO_LABEL</name></decl>,

<decl><name>TODO_RESET</name></decl>,

<decl><name>TODO_MERGE</name></decl>,

<decl><name>TODO_NOOP</name></decl>,

<decl><name>TODO_DROP</name></decl>,

<decl><name>TODO_COMMENT</name></decl>

}</block>;</enum>

<struct>struct <name>todo_item</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>todo_command</name></name></type> <name>command</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>commit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>arg_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset_in_buf</name></decl>, <decl><type ref="prev"/><name>arg_offset</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>todo_list</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>strbuf</name></name></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>todo_item</name></name> <modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>alloc</name></decl>, <decl><type ref="prev"/><name>current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>done_nr</name></decl>, <decl><type ref="prev"/><name>total_nr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>stat_data</name></name></type> <name>stat</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_LIST_INIT</name></cpp:macro> <cpp:value>{ STRBUF_INIT }</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>todo_list_parse_insn_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>todo_list</name></name> <modifier>*</modifier></type><name>todo_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>todo_list_write_to_file</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>todo_list</name></name> <modifier>*</modifier></type><name>todo_list</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortrevisions</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortonto</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>todo_list_release</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>todo_list</name></name> <modifier>*</modifier></type><name>todo_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>todo_item_get_arg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>todo_list</name></name> <modifier>*</modifier></type><name>todo_list</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>todo_item</name></name> <modifier>*</modifier></type><name>item</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sequencer_init_config</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sequencer_pick_revisions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sequencer_continue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sequencer_rollback</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sequencer_skip</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sequencer_remove_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_LIST_SHORTEN_IDS</name></cpp:macro> <cpp:value>(1U &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_LIST_ABBREVIATE_CMDS</name></cpp:macro> <cpp:value>(1U &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_LIST_REBASE_MERGES</name></cpp:macro> <cpp:value>(1U &lt;&lt; 3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_LIST_REBASE_COUSINS</name></cpp:macro> <cpp:value>(1U &lt;&lt; 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_LIST_APPEND_TODO_HELP</name></cpp:macro> <cpp:value>(1U &lt;&lt; 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TODO_LIST_ROOT_WITH_ONTO</name></cpp:macro> <cpp:value>(1U &lt;&lt; 6)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>sequencer_make_script</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>todo_list_add_exec_commands</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>todo_list</name></name> <modifier>*</modifier></type><name>todo_list</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>complete_action</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shortrevisions</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>onto_name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>onto</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_head</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>string_list</name></name> <modifier>*</modifier></type><name>commands</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>autosquash</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>todo_list</name></name> <modifier>*</modifier></type><name>todo_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>todo_list_rearrange_squash</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>todo_list</name></name> <modifier>*</modifier></type><name>todo_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>append_signoff</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>msgbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>ignore_footer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>append_conflicts_hint</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>index_state</name></name> <modifier>*</modifier></type><name>istate</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>msgbuf</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>commit_msg_cleanup_mode</name></name></type> <name>cleanup_mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>commit_msg_cleanup_mode</name></name></type> <name>get_cleanup_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cleanup_arg</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>use_editor</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>cleanup_message</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>msgbuf</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>commit_msg_cleanup_mode</name></name></type> <name>cleanup_mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>message_is_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>commit_msg_cleanup_mode</name></name></type> <name>cleanup_mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>template_untouched</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>template_file</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>commit_msg_cleanup_mode</name></name></type> <name>cleanup_mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>update_head_with_reflog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>old_head</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_head</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>action</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>strbuf</name></name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>commit_post_rewrite</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>current_head</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>new_head</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUMMARY_INITIAL_COMMIT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUMMARY_SHOW_AUTHOR_DATE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>print_commit_summary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>repo</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>object_id</name></name> <modifier>*</modifier></type><name>oid</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>read_author_script</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>email</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>date</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>allow_missing</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>parse_strategy_opts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>raw_opts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>write_basic_state</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>replay_opts</name></name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>head_name</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>commit</name></name> <modifier>*</modifier></type><name>onto</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_head</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sequencer_post_commit_cleanup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verbose</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sequencer_get_last_command</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name><modifier>*</modifier></type> <name>r</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>replay_action</name></name> <modifier>*</modifier></type><name>action</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sequencer_determine_whence</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>repository</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>commit_whence</name></name> <modifier>*</modifier></type><name>whence</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
