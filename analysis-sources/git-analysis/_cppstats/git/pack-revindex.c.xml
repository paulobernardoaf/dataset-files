<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\git-analysis\_cppstats\git\pack-revindex.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pack-revindex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"object-store.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packfile.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sort_revindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>revindex_entry</name></name> <modifier>*</modifier></type><name>entries</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGIT_SIZE</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKETS</name></cpp:macro> <cpp:value>(1 &lt;&lt; DIGIT_SIZE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUCKET_FOR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)[(i)].offset &gt;&gt; (bits)) &amp; (BUCKETS-1))</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>struct</name> <name>revindex_entry</name></name> <modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>from</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>to</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>BUCKETS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>from</name> <operator>=</operator> <name>entries</name></expr>;</expr_stmt>

<expr_stmt><expr><name>to</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>max</name> <operator>&gt;&gt;</operator> <name>bits</name></expr>;</condition> <incr><expr><name>bits</name> <operator>+=</operator> <name>DIGIT_SIZE</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>BUCKETS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><index>[<expr><call><name>BUCKET_FOR</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BUCKETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>pos</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>UINT_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>to</name><index>[<expr><operator>--</operator><name><name>pos</name><index>[<expr><call><name>BUCKET_FOR</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>from</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>SWAP</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>from</name> <operator>!=</operator> <name>entries</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COPY_ARRAY</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUCKET_FOR</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUCKETS</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DIGIT_SIZE</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>create_pack_revindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>num_ent</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>num_objects</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>index</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>index_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hashsz</name> <init>= <expr><name><name>the_hash_algo</name><operator>-&gt;</operator><name>rawsz</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ALLOC_ARRAY</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>revindex</name></name></expr></argument>, <argument><expr><name>num_ent</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>index_version</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>off_32</name> <init>=

<expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>num_objects</name></name> <operator>*</operator> <operator>(</operator><name>hashsz</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>off_64</name> <init>= <expr><name>off_32</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>num_objects</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_ent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>off</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><operator>*</operator><name>off_32</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>off</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>revindex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>revindex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>get_be64</name><argument_list>(<argument><expr><name>off_64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>off_64</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>revindex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_ent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>hl</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>index</name> <operator>+</operator> <operator>(</operator><name>hashsz</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>revindex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>hl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>revindex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>revindex</name><index>[<expr><name>num_ent</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pack_size</name></name> <operator>-</operator> <name>hashsz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>revindex</name><index>[<expr><name>num_ent</name></expr>]</index></name><operator>.</operator><name>nr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sort_revindex</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>revindex</name></name></expr></argument>, <argument><expr><name>num_ent</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>load_pack_revindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>revindex</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>open_pack_index</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>create_pack_revindex</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>find_revindex_position</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>ofs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hi</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>num_objects</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>revindex_entry</name></name> <modifier>*</modifier></type><name>revindex</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>revindex</name></name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>mi</name> <init>= <expr><name>lo</name> <operator>+</operator> <operator>(</operator><name>hi</name> <operator>-</operator> <name>lo</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>revindex</name><index>[<expr><name>mi</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>==</operator> <name>ofs</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>mi</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ofs</name> <operator>&lt;</operator> <name><name>revindex</name><index>[<expr><name>mi</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hi</name> <operator>=</operator> <name>mi</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lo</name> <operator>=</operator> <name>mi</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>lo</name> <operator>&lt;</operator> <name>hi</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"bad offset for revindex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>struct</name> <name>revindex_entry</name></name> <modifier>*</modifier></type><name>find_pack_revindex</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>packed_git</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>ofs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>load_pack_revindex</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>find_revindex_position</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ofs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>revindex</name></name> <operator>+</operator> <name>pos</name></expr>;</return>

</block_content>}</block></function>

</unit>
