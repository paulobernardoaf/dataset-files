<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\notes\etc\whirlgen.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>E</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0xf</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>Ei</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>R</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xb</literal></expr>, <expr><literal type="number">0xd</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0xf</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0xa</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name><name>cir</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ 
<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt> 


<function><type><name>unsigned</name></type> <name>gf_mul</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>a</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><ternary><condition><expr><name>b</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> ?</condition><then> <expr><literal type="number">0x11d</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>sbox</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>E</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>Ei</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <name>a</name> <operator>^</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>R</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>E</name><index>[<expr><name>a</name> <operator>^</operator> <name>w</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>Ei</name><index>[<expr><name>b</name> <operator>^</operator> <name>w</name></expr>]</index></name></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Ei</name><index>[<expr><name><name>E</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></for>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>cir</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>cir</name><index>[<expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>









<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const ulong64 sbox%d[] = {\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CONST64(0x%02x%02x%02x%02x%02x%02x%02x%02x)"</literal></expr></argument>,
<argument><expr><call><name>gf_mul</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cir</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>gf_mul</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cir</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>gf_mul</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cir</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>gf_mul</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cir</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>gf_mul</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cir</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>gf_mul</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cir</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>gf_mul</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cir</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>gf_mul</name><argument_list>(<argument><expr><call><name>sbox</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>cir</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>++</operator><name>x</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const ulong64 cont[] = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CONST64(0x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><call><name>sbox</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">8</literal><operator>*</operator><name>y</name> <operator>+</operator> <name>x</name><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"),\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>






</unit>
