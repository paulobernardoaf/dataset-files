<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\tests\base64_test.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt_test.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BASE64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_BASE64_URL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<enum>enum <block>{ <decl><name>insane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>strict</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>relaxed</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><name>invalid</name> <init>= <expr><literal type="number">666</literal></expr></init></decl> }</block>;</enum>

<function><type><name>int</name></type> <name>base64_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>, <decl><type ref="prev"/><name>slen1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>special_case</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xf8</literal></expr>,
<expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xff</literal></expr>,
<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BASE64</name></expr></argument>)</argument_list></call></expr></cpp:if>








<struct><specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>b64</name></decl>;</decl_stmt>
}</block> <decl><name><name>cases</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"f"</literal></expr>, <expr><literal type="string">"Zg=="</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"fo"</literal></expr>, <expr><literal type="string">"Zm8="</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"Zm9v"</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"foob"</literal></expr>, <expr><literal type="string">"Zm9vYg=="</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"fooba"</literal></expr>, <expr><literal type="string">"Zm9vYmE="</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="string">"foobar"</literal></expr>, <expr><literal type="string">"Zm9vYmFy"</literal></expr>}</block></expr>,
<expr><block>{<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>special_case</name></expr>,<expr><literal type="string">"vuiSPKIl8PiR5O+rC4z9/xTQKZ0="</literal></expr>}</block></expr>
}</block></expr></init></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BASE64_URL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct><specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name></decl>;</decl_stmt>
}</block> <decl><name><name>url_cases</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><literal type="string">"vuiSPKIl8PiR5O-rC4z9_xTQKZ0"</literal></expr>, <expr><name>strict</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"vuiSPKIl8PiR5O-rC4z9_xTQKZ0="</literal></expr>, <expr><name>strict</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiS*PKIl8P*iR5O-rC4*z9_xTQKZ0"</literal></expr>, <expr><name>insane</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiS*PKIl8P*iR5O-rC4*z9_xTQKZ0="</literal></expr>, <expr><name>insane</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiS*PKIl8P*iR5O-rC4*z9_xTQKZ0=="</literal></expr>, <expr><name>insane</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiS*PKIl8P*iR5O-rC4*z9_xTQKZ0==="</literal></expr>, <expr><name>insane</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"vuiS*PKIl8P*iR5O-rC4*z9_xTQKZ0===="</literal></expr>, <expr><name>insane</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiS*=PKIl8P*iR5O-rC4*z9_xTQKZ0="</literal></expr>, <expr><name>insane</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiS*==PKIl8P*iR5O-rC4*z9_xTQKZ0="</literal></expr>, <expr><name>insane</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiS*==\xffPKIl8P*iR5O-rC4*z9_xTQKZ0="</literal></expr>, <expr><name>insane</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiS PKIl8P\niR5O-rC4\tz9_xTQKZ0"</literal></expr>, <expr><name>relaxed</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"vuiS PKIl8P\niR5O-rC4\tz9_xTQKZ0="</literal></expr>, <expr><name>relaxed</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiS PKIl8P\niR5O-rC4\tz9_xTQKZ0=="</literal></expr>, <expr><name>relaxed</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiS PKIl8P\niR5O-rC4\tz9_xTQKZ0==="</literal></expr>, <expr><name>relaxed</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiS PKIl8P\niR5O-rC4\tz9_xTQKZ0===="</literal></expr>, <expr><name>relaxed</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiS\rPKIl8P\niR5O-rC4\tz9_xTQKZ0="</literal></expr>, <expr><name>relaxed</name></expr>}</block></expr>, 
<expr><block>{<expr><literal type="string">"vuiS\rPKIl8P\niR5O-rC4\tz9_xTQKZ0= = =\x00"</literal></expr>, <expr><name>relaxed</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"\nvuiS\rPKIl8P\niR5O-rC4\tz9_xTQKZ0=\n"</literal></expr>, <expr><name>relaxed</name></expr>}</block></expr>,
<expr><block>{<expr><literal type="string">"vuiSPKIl8PiR5O-rC4z9_xTQK"</literal></expr>, <expr><name>invalid</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>url_cases</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>slen1</name> <operator>=</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l1</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>==</operator> <name>strict</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64url_strict_decode</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>special_case</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>special_case</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"base64url_strict_decode"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64url_sane_decode</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>special_case</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>special_case</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"base64url_sane_decode/strict"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64url_decode</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>special_case</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>special_case</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"base64url_decode/strict"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>==</operator> <name>relaxed</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>base64url_strict_decode</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_INVALID_PACKET</name></expr> ?</condition><then> <expr><name>CRYPT_OK</name></expr> </then><else>: <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64url_sane_decode</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>special_case</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>special_case</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"base64url_sane_decode/relaxed"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64url_decode</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>special_case</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>special_case</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"base64url_decode/relaxed"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if<condition>(<expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>flag</name> <operator>==</operator> <name>insane</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>base64url_strict_decode</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_INVALID_PACKET</name></expr> ?</condition><then> <expr><name>CRYPT_OK</name></expr> </then><else>: <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>base64url_sane_decode</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_INVALID_PACKET</name></expr> ?</condition><then> <expr><name>CRYPT_OK</name></expr> </then><else>: <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64url_decode</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>special_case</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>special_case</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"base64url_decode/insane"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content> 
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>base64url_strict_decode</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_INVALID_PACKET</name></expr> ?</condition><then> <expr><name>CRYPT_OK</name></expr> </then><else>: <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>base64url_sane_decode</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_INVALID_PACKET</name></expr> ?</condition><then> <expr><name>CRYPT_OK</name></expr> </then><else>: <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>base64url_decode</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_INVALID_PACKET</name></expr> ?</condition><then> <expr><name>CRYPT_OK</name></expr> </then><else>: <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64url_encode</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"base64url_encode"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64url_strict_encode</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>url_cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"base64url_strict_encode"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BASE64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>cases</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>cases</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slen1</name> <operator>=</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l1</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_encode</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name><name>cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>b64</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>b64</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"base64_encode"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_strict_decode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name><name>cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><literal type="string">"base64_strict_decode"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_sane_decode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name><name>cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><literal type="string">"base64_sane_decode"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_decode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name><name>cases</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>slen1</name></expr></argument>, <argument><expr><literal type="string">"base64_decode"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l1</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_encode</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_decode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="string">"random base64"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>l1</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l1</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_decode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><literal type="string">"insane base64 decoding (NUL)"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>base64_sane_decode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_INVALID_PACKET</name></expr> ?</condition><then> <expr><name>CRYPT_OK</name></expr> </then><else>: <expr><name>CRYPT_INVALID_PACKET</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>base64_strict_decode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_INVALID_PACKET</name></expr> ?</condition><then> <expr><name>CRYPT_OK</name></expr> </then><else>: <expr><name>CRYPT_INVALID_PACKET</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt> 
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_decode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><literal type="string">"insane base64 decoding (TAB)"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_sane_decode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><literal type="string">"relaxed base64 decoding (TAB)"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>base64_strict_decode</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_INVALID_PACKET</name></expr> ?</condition><then> <expr><name>CRYPT_OK</name></expr> </then><else>: <expr><name>CRYPT_INVALID_PACKET</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
