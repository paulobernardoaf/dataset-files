<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\tests\ssh_test.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_test.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
























<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>byte1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>byte2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x71</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>uint32</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xaa</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>uint64</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xa7</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>string</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x67</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>mpint1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>mpint2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xa7</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>mpint3</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>nlist1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>nlist2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x62</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>nlist3</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x65</literal></expr>}</block></expr></init></decl>;</decl_stmt>






<function><type><specifier>static</specifier> <name>int</name></type> <name>_ssh_encoding_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zero</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>


<expr_stmt><expr><name>buflen</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOULD_FAIL</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_UINT32</name></expr></argument>, <argument><expr><literal type="number">0x29b7f4aa</literal></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_BYTE</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>byte1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>byte1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-byte"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_BYTE</name></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>byte2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>byte2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-byte"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>XMEMCMP</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>byte2</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_BOOLEAN</name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>byte1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>byte1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-boolean"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_BOOLEAN</name></expr></argument>, <argument><expr><literal type="number">0x71</literal></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>byte1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>byte1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-boolean"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_UINT32</name></expr></argument>, <argument><expr><literal type="number">0x29b7f4aa</literal></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>uint32</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-uint32"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_UINT64</name></expr></argument>, <argument><expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x09a378f9b2e332a7</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>uint64</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-uint64"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"testing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_STRING</name></expr></argument>, <argument><expr><literal type="string">"testing"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-string"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>mp_set</name><argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_MPINT</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>mpint1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpint1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-mpint"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>mp_read_radix</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"9a378f9b2e332a7"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_MPINT</name></expr></argument>, <argument><expr><name>v</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>mpint2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpint2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-mpint"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>mp_set</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_MPINT</name></expr></argument>, <argument><expr><name>v</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>mpint3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpint3</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-mpint"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_NAMELIST</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>nlist1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nlist1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-nlist"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"zlib"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_NAMELIST</name></expr></argument>, <argument><expr><literal type="string">"zlib"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>nlist2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nlist2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-nlist"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"zlib,none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_encode_sequence_multi</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_NAMELIST</name></expr></argument>, <argument><expr><literal type="string">"zlib,none"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>COMPARE_TESTVECTOR</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>nlist3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nlist3</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"enc-nlist"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><specifier>static</specifier> <name>int</name></type> <name>_ssh_decoding_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>strbuf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>u</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>tmp32</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>tmp64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>tmp8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>strbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>strbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>strbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_BYTE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp8</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>tmp8</name> <operator>==</operator> <literal type="number">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>byte1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>byte1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_BYTE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp8</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>tmp8</name> <operator>==</operator> <literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>byte2</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>byte2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_BYTE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp8</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>tmp8</name> <operator>==</operator> <literal type="number">0x71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>byte1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>byte1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp8</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>tmp8</name> <operator>==</operator> <literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>byte2</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>byte2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp8</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>tmp8</name> <operator>==</operator> <literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>uint32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_UINT32</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp32</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>tmp32</name> <operator>==</operator> <literal type="number">0x29b7f4aa</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>uint64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_UINT64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp64</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmp64</name> <operator>!=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x09a378f9b2e332a7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_STRING</name></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"testing"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>XSTRCMP</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"testing"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"testing"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpint1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>mpint1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_MPINT</name></expr></argument>, <argument><expr><name>v</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>mp_cmp_d</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LTC_MP_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpint1</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpint2</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>mpint2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_MPINT</name></expr></argument>, <argument><expr><name>v</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>mp_read_radix</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="string">"9a378f9b2e332a7"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>mp_cmp</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LTC_MP_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpint2</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mpint3</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>mpint3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_MPINT</name></expr></argument>, <argument><expr><name>v</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>mp_cmp_d</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0x80</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LTC_MP_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mpint3</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nlist1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>nlist1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_NAMELIST</name></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>XSTRCMP</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nlist2</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>nlist2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_NAMELIST</name></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"zlib"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>XSTRCMP</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"zlib"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"zlib"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name>BUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nlist3</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>ssh_decode_sequence_multi</name><argument_list>(<argument><expr><name>nlist3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_NAMELIST</name></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>,
<argument><expr><name>LTC_SSHDATA_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"zlib,none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>XSTRCMP</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><literal type="string">"zlib,none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENSURE</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"zlib,none"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>==</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>ssh_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_NOP</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>_ssh_encoding_test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>_ssh_decoding_test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name></type> <name>ssh_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





</unit>
