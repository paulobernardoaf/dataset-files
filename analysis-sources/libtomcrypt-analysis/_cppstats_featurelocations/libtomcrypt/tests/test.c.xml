<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\tests\test.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt_test.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>GIT_VERSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GIT_VERSION</name></cpp:macro> <cpp:value>"Undefined version"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_TEST_FN</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ f, #f }</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>test_function</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>test_function</name></type> <name><name>test_functions</name><index>[]</index></name> <init>=
<expr><block>{
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>store_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>rotate_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>misc_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>mpi_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>cipher_hash_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>mac_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>modes_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>der_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>pkcs_1_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>pkcs_1_pss_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>pkcs_1_oaep_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>pkcs_1_emsa_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>pkcs_1_eme_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>rsa_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>dh_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>ecc_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>dsa_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>ed25519_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>x25519_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>file_test</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>multi_test</name></expr></argument>)</argument_list></call></expr>,




<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>prng_test</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>ulong64</name></type> <name>epoch_usec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_TEST_TIMING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>FILETIME</name></type> <name>CurrentTime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>cur_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>ul</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ul</name><operator>.</operator><name>LowPart</name></name> <operator>=</operator> <name><name>CurrentTime</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ul</name><operator>.</operator><name>HighPart</name></name> <operator>=</operator> <name><name>CurrentTime</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cur_time</name> <operator>=</operator> <name><name>ul</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt> 
<expr_stmt><expr><name>cur_time</name> <operator>-=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">116444736000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>cur_time</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 
<return>return <expr><name>cur_time</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLOCK_GETTIME</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</return> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator></expr>;</return> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PTHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct
<block>{
<decl_stmt><decl><type><name>pthread_t</name></type> <name>thread_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>test_function</name><modifier>*</modifier></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>delta</name></decl>;</decl_stmt>
}</block></struct></type> <name>thread_info</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>run</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>thread_info</name> <modifier>*</modifier></type><name>tinfo</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>epoch_usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tinfo</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name><name>tinfo</name><operator>-&gt;</operator><name>t</name><operator>-&gt;</operator><name>fn</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tinfo</name><operator>-&gt;</operator><name>delta</name></name> <operator>=</operator> <call><name>epoch_usec</name><argument_list>()</argument_list></call> <operator>-</operator> <name>ts</name></expr>;</expr_stmt>

<return>return <expr><name>arg</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><specifier>static</specifier> <name>void</name></type> <name>_unregister_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIJNDAEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENCRYPT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>



<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aes_enc_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>



<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aes_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLOWFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blowfish_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XTEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xtea_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc5_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc6_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFERP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>saferp_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>twofish_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>safer_k64_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>safer_sk64_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>safer_k128_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>safer_sk128_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc2_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des3_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAST5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cast5_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NOEKEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>noekeon_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SKIPJACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>skipjack_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KHAZAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>khazad_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ANUBIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>anubis_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KSEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kseed_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KASUMI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kasumi_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MULTI2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>multi2_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAMELLIA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>camellia_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_IDEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idea_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SERPENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>serpent_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiger_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md2_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md4_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha1_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA224</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha224_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha384_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha512_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512_224</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha512_224_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512_256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha512_256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha3_224_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha3_256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha3_384_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha3_512_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KECCAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keccak_224_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keccak_256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keccak_384_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keccak_512_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rmd128_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD160</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rmd160_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rmd256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD320</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rmd320_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_WHIRLPOOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>whirlpool_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2s_128_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2s_160_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2s_224_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2s_256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2B</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2b_160_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2b_256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2b_384_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2b_512_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHC_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chc_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>unregister_prng</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yarrow_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_prng</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fortuna_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_prng</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc4_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA20_PRNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_prng</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chacha20_prng_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOBER128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_prng</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sober128_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SPRNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>unregister_prng</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sprng_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_algs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>_unregister_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_YARROW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> This demo requires Yarrow.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>register_all_ciphers</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"register_all_ciphers err=%s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>register_all_hashes</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"register_all_hashes err=%s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>register_all_prngs</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"register_all_prngs err=%s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rng_make_prng</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rng_make_prng failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"CRYPT_OK"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PTHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>thread_info</name> <modifier>*</modifier></type><name>tinfo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>fn_len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>dots</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mpi_provider</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>single_test</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>ts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>delta</name></decl>, <decl><type ref="prev"/><name>dur</name></decl>, <decl><type ref="prev"/><name>real</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>register_algs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"LTC_VERSION = %s\n%s\n\n"</literal></expr></argument>, <argument><expr><name>GIT_VERSION</name></expr></argument>, <argument><expr><name>crypt_build_settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LTM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>mpi_provider</name> <operator>=</operator> <literal type="string">"ltm"</literal></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TFM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>mpi_provider</name> <operator>=</operator> <literal type="string">"tfm"</literal></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GMP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>mpi_provider</name> <operator>=</operator> <literal type="string">"gmp"</literal></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT_MATH_LIB</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>mpi_provider</name> <operator>=</operator> <literal type="string">"ext"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mpi_provider</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>crypt_mp_init</name><argument_list>(<argument><expr><name>mpi_provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"MP_PROVIDER = %s\n"</literal></expr></argument>, <argument><expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"MP_DIGIT_BIT = %d\n"</literal></expr></argument>, <argument><expr><name>MP_DIGIT_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sizeof(ltc_mp_digit) = %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ltc_mp_digit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO math provider selected, all tests requiring MPI will 'nop'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PTHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>tinfo</name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_functions</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>test_functions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>thread_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\nFAILURE: XCALLOC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fn_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test_functions</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>test_functions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>test_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>fn_len</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fn_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PTHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>test_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fn</name> <operator>==</operator> <name>prng_test</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>tinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name> <operator>=</operator> <operator>&amp;</operator><name><name>test_functions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>run</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tinfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\nFAILURE: pthread_create\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>

<expr_stmt><expr><name>fn_len</name> <operator>=</operator> <name>fn_len</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>fn_len</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>single_test</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dur</name> <operator>=</operator> <call><name>epoch_usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test_functions</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>test_functions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>single_test</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>test_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>single_test</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>dots</name> <operator>=</operator> <name>fn_len</name> <operator>-</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>test_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%s"</literal></expr></argument>, <argument><expr><name><name>test_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while<condition>(<expr><name>dots</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PTHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>(<expr><name><name>test_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fn</name> <operator>!=</operator> <name>prng_test</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>pthread_join</name><argument_list>(<argument><expr><name><name>tinfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread_id</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\nFAILURE: pthread_join\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>err</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>delta</name></name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>epoch_usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>test_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>fn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><call><name>epoch_usec</name><argument_list>()</argument_list></call> <operator>-</operator> <name>ts</name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>epoch_usec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>test_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>fn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><call><name>epoch_usec</name><argument_list>()</argument_list></call> <operator>-</operator> <name>ts</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>real</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"passed %10.3fms"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>delta</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pass</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>x</name> <operator>==</operator> <name>CRYPT_NOP</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"nop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nop</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed (%s) %10.3fms"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>delta</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fail</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>dur</name> <operator>=</operator> <call><name>epoch_usec</name><argument_list>()</argument_list></call> <operator>-</operator> <name>dur</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PTHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>fail</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fail</name><operator>+</operator><name>pass</name><operator>+</operator><name>nop</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>EXIT_FAILURE</name></expr> </then><else>: <expr><name>EXIT_SUCCESS</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\n%s: passed=%d failed=%d nop=%d duration=%.1fsec real=%.1fsec\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><literal type="string">"FAILURE"</literal></expr> </then><else>: <expr><literal type="string">"SUCCESS"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>, <argument><expr><name>nop</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>dur</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>real</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>




</unit>
