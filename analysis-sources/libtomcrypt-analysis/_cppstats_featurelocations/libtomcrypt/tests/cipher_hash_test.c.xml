<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\tests\cipher_hash_test.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt_test.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>cipher_hash_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>test</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>chacha_test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SALSA20</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>salsa20_test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XSALSA20</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>xsalsa20_test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOSEMANUK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>sosemanuk_test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RABBIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rabbit_test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC4_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rc4_stream_test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOBER128_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>sober128_stream_test</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hash_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><name><name>hash_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>test</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>hash_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>sha3_shake_test</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sha3_shake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




</unit>
