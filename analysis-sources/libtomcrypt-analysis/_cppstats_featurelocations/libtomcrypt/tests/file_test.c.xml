<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\tests\file_test.c">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt_test.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>file_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x1F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><literal type="string">"tests/test.key"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>isha256</name></decl>, <decl><type ref="prev"/><name>iaes</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>exp_sha256</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x73</literal></expr>,
<expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x5F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>isha256</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iaes</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><literal type="string">"aes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>in</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FILE_NOTFOUND</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>hash_filehandle</name><argument_list>(<argument><expr><name>isha256</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>exp_sha256</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"hash_filehandle"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>hash_file</name><argument_list>(<argument><expr><name>isha256</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>exp_sha256</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"hash_file"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>exp_hmacsha256</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0xBC</literal></expr>,
<expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xC0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>hmac_file</name><argument_list>(<argument><expr><name>isha256</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>exp_hmacsha256</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"hmac_file"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>exp_omacaes</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xD8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>omac_file</name><argument_list>(<argument><expr><name>iaes</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>exp_omacaes</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"omac_file"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>exp_pmacaes</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x1B</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>pmac_file</name><argument_list>(<argument><expr><name>iaes</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>exp_pmacaes</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"pmac_file"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XCBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>exp_xcbcaes</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xAB</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>xcbc_file</name><argument_list>(<argument><expr><name>iaes</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>exp_xcbcaes</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"xcbc_file"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F9_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>exp_f9aes</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x7A</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>f9_file</name><argument_list>(<argument><expr><name>iaes</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>exp_f9aes</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"f9_file"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_POLY1305</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>exp_poly1305</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>poly1305_file</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>exp_poly1305</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"poly1305_file"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2SMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>exp_blake2smac</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0xb3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>blake2smac_file</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>exp_blake2smac</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"exp_blake2smac_file"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2BMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>exp_blake2bmac</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x44</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>blake2bmac_file</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>exp_blake2bmac</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"exp_blake2bmac_file"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




</unit>
