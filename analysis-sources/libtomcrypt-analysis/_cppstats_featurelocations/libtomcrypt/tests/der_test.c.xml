<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\tests\der_test.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt_test.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>der_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LTC_TEST_DBG</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_DER_TESTS_PRINT_FLEXI</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_der_tests_stinky_root_cert</name><index>[]</index></name> <init>=
<expr><literal type="string">"MIIFETCCA/mgAwIBAgIQbv53JNmv518t5lkCHE272jANBgkqhkiG9w0BAQUFADCB"</literal>
<literal type="string">"lTELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2Ug"</literal>
<literal type="string">"Q2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExho"</literal>
<literal type="string">"dHRwOi8vd3d3LnVzZXJ0cnVzdC5jb20xHTAbBgNVBAMTFFVUTi1VU0VSRmlyc3Qt"</literal>
<literal type="string">"T2JqZWN0MB4XDTA4MDQyOTAwMDAwMFoXDTEwMDQyOTIzNTk1OVowgbUxCzAJBgNV"</literal>
<literal type="string">"BAYTAlVTMQ4wDAYDVQQRDAU0NDE0MzELMAkGA1UECAwCT0gxGTAXBgNVBAcMEE1h"</literal>
<literal type="string">"eWZpZWxkIFZpbGxhZ2UxEDAOBgNVBAkMB1N1aXRlIEExFDASBgNVBAkMCzc2NyBC"</literal>
<literal type="string">"ZXRhIERyMSIwIAYDVQQKDBlQcmVlbXB0aXZlIFNvbHV0aW9ucywgTExDMSIwIAYD"</literal>
<literal type="string">"VQQDDBlQcmVlbXB0aXZlIFNvbHV0aW9ucywgTExDMIIBIjANBgkqhkiG9w0BAQEF"</literal>
<literal type="string">"AAOCAQ8AMIIBCgKCAQEAzH7ZBkMcBuHx8d2f10RGTHAf7gzzVteGbOihJGH2BwlS"</literal>
<literal type="string">"ZvNp6WEE4DfL+s1vp0wzk1XeLN5tRjg2qum9YqyCk7okh7pXGy46f5mWbLQiefGA"</literal>
<literal type="string">"j5UXRcr6WJ3xeACdbXxKrYMV0REia+4Jb2UbFA8S81PjhRon6vcRz76ziUWwt8NC"</literal>
<literal type="string">"igX+4ZC0skhhKzKszel6KGL7bJCtLG7ukw9DZCrvPCRcKFeM/GwQ6ACMgP88CSCL"</literal>
<literal type="string">"t1fbIXDH1vd/x2XM3QlaSDN6hYDbef8m1T+9TCkXVKeqG1GYjSUrHzYnCZUmTRrR"</literal>
<literal type="string">"38jgC3qXxiIpDKW105uM0nlXe2XF9c+ot2MdWvV4TwIDAQABo4IBOTCCATUwHwYD"</literal>
<literal type="string">"VR0jBBgwFoAU2u1kdBScFDyr3ZmpvVsoTYs8ydgwHQYDVR0OBBYEFK+1HzZE4i28"</literal>
<literal type="string">"oLIzuqlFR9SspiCIMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMBMGA1Ud"</literal>
<literal type="string">"JQQMMAoGCCsGAQUFBwMDMBEGCWCGSAGG+EIBAQQEAwIEEDBGBgNVHSAEPzA9MDsG"</literal>
<literal type="string">"DCsGAQQBsjEBAgEDAjArMCkGCCsGAQUFBwIBFh1odHRwczovL3NlY3VyZS5jb21v"</literal>
<literal type="string">"ZG8ubmV0L0NQUzBCBgNVHR8EOzA5MDegNaAzhjFodHRwOi8vY3JsLnVzZXJ0cnVz"</literal>
<literal type="string">"dC5jb20vVVROLVVTRVJGaXJzdC1PYmplY3QuY3JsMCEGA1UdEQQaMBiBFnN1cHBv"</literal>
<literal type="string">"cnRAcHJlZW1wdGl2ZS5jb20wDQYJKoZIhvcNAQEFBQADggEBAC+JM26Dokvonudl"</literal>
<literal type="string">"JXe/Yun7IBhimkagZUjbk9l/GQWN6i+v1o95UJ1wGJtBdm2+MxbSaPoNTDZR4B+2"</literal>
<literal type="string">"lYL9MW57UVmePrnfUPXQKZZG+8gTRDz8+7ol/CEAKmS3MLKCRcH5oe+J5345sGxi"</literal>
<literal type="string">"FC/KWNKedTNraW95xlg8NTlL2yRP7TMsjvBxgLmkbaFUoXzPTbQWmtovIagIT8GC"</literal>
<literal type="string">"JeXwdFaRjbamiz3Irl+u7x/mhxdza6RvgBYylXRFMudANpeGsV7gDXlnfzpFDKHQ"</literal>
<literal type="string">"niVwB7P5sbPFIlmIc+4/xRItkLIRjCVXaepgN9KYu3VOgiSDI6wXiTwP44/LUXQM"</literal>
<literal type="string">"hetwa7s="</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>_der_tests_cacert_root_cert</name><index>[]</index></name> <init>=
<expr><literal type="string">"MIIHPTCCBSWgAwIBAgIBADANBgkqhkiG9w0BAQQFADB5MRAwDgYDVQQKEwdSb290"</literal>
<literal type="string">"IENBMR4wHAYDVQQLExVodHRwOi8vd3d3LmNhY2VydC5vcmcxIjAgBgNVBAMTGUNB"</literal>
<literal type="string">"IENlcnQgU2lnbmluZyBBdXRob3JpdHkxITAfBgkqhkiG9w0BCQEWEnN1cHBvcnRA"</literal>
<literal type="string">"Y2FjZXJ0Lm9yZzAeFw0wMzAzMzAxMjI5NDlaFw0zMzAzMjkxMjI5NDlaMHkxEDAO"</literal>
<literal type="string">"BgNVBAoTB1Jvb3QgQ0ExHjAcBgNVBAsTFWh0dHA6Ly93d3cuY2FjZXJ0Lm9yZzEi"</literal>
<literal type="string">"MCAGA1UEAxMZQ0EgQ2VydCBTaWduaW5nIEF1dGhvcml0eTEhMB8GCSqGSIb3DQEJ"</literal>
<literal type="string">"ARYSc3VwcG9ydEBjYWNlcnQub3JnMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIIC"</literal>
<literal type="string">"CgKCAgEAziLA4kZ97DYoB1CW8qAzQIxL8TtmPzHlawI229Z89vGIj053NgVBlfkJ"</literal>
<literal type="string">"8BLPRoZzYLdufujAWGSuzbCtRRcMY/pnCujW0r8+55jE8Ez64AO7NV1sId6eINm6"</literal>
<literal type="string">"zWYyN3L69wj1x81YyY7nDl7qPv4coRQKFWyGhFtkZip6qUtTefWIonvuLwphK42y"</literal>
<literal type="string">"fk1WpRPs6tqSnqxEQR5YYGUFZvjARL3LlPdCfgv3ZWiYUQXw8wWRBB0bF4LsyFe7"</literal>
<literal type="string">"w2t6iPGwcswlWyCR7BYCEo8y6RcYSNDHBS4CMEK4JZwFaz+qOqfrU0j36NK2B5jc"</literal>
<literal type="string">"G8Y0f3/JHIJ6BVgrCFvzOKKrF11myZjXnhCLotLddJr3cQxyYN/Nb5gznZY0dj4k"</literal>
<literal type="string">"epKwDpUeb+agRThHqtdB7Uq3EvbXG4OKDy7YCbZZ16oE/9KTfWgu3YtLq1i6L43q"</literal>
<literal type="string">"laegw1SJpfvbi1EinbLDvhG+LJGGi5Z4rSDTii8aP8bQUWWHIbEZAWV/RRyH9XzQ"</literal>
<literal type="string">"QUxPKZgh/TMfdQwEUfoZd9vUFBzugcMd9Zi3aQaRIt0AUMyBMawSB3s42mhb5ivU"</literal>
<literal type="string">"fslfrejrckzzAeVLIL+aplfKkQABi6F1ITe1Yw1nPkZPcCBnzsXWWdsC4PDSy826"</literal>
<literal type="string">"YreQQejdIOQpvGQpQsgi3Hia/0PsmBsJUUtaWsJx8cTLc6nloQsCAwEAAaOCAc4w"</literal>
<literal type="string">"ggHKMB0GA1UdDgQWBBQWtTIb1Mfz4OaO873SsDrusjkY0TCBowYDVR0jBIGbMIGY"</literal>
<literal type="string">"gBQWtTIb1Mfz4OaO873SsDrusjkY0aF9pHsweTEQMA4GA1UEChMHUm9vdCBDQTEe"</literal>
<literal type="string">"MBwGA1UECxMVaHR0cDovL3d3dy5jYWNlcnQub3JnMSIwIAYDVQQDExlDQSBDZXJ0"</literal>
<literal type="string">"IFNpZ25pbmcgQXV0aG9yaXR5MSEwHwYJKoZIhvcNAQkBFhJzdXBwb3J0QGNhY2Vy"</literal>
<literal type="string">"dC5vcmeCAQAwDwYDVR0TAQH/BAUwAwEB/zAyBgNVHR8EKzApMCegJaAjhiFodHRw"</literal>
<literal type="string">"czovL3d3dy5jYWNlcnQub3JnL3Jldm9rZS5jcmwwMAYJYIZIAYb4QgEEBCMWIWh0"</literal>
<literal type="string">"dHBzOi8vd3d3LmNhY2VydC5vcmcvcmV2b2tlLmNybDA0BglghkgBhvhCAQgEJxYl"</literal>
<literal type="string">"aHR0cDovL3d3dy5jYWNlcnQub3JnL2luZGV4LnBocD9pZD0xMDBWBglghkgBhvhC"</literal>
<literal type="string">"AQ0ESRZHVG8gZ2V0IHlvdXIgb3duIGNlcnRpZmljYXRlIGZvciBGUkVFIGhlYWQg"</literal>
<literal type="string">"b3ZlciB0byBodHRwOi8vd3d3LmNhY2VydC5vcmcwDQYJKoZIhvcNAQEEBQADggIB"</literal>
<literal type="string">"ACjH7pyCArpcgBLKNQodgW+JapnM8mgPf6fhjViVPr3yBsOQWqy1YPaZQwGjiHCc"</literal>
<literal type="string">"nWKdpIevZ1gNMDY75q1I08t0AoZxPuIrA2jxNGJARjtT6ij0rPtmlVOKTV39O9lg"</literal>
<literal type="string">"18p5aTuxZZKmxoGCXJzN600BiqXfEVWqFcofN8CCmHBh22p8lqOOLlQ+TyGpkO/c"</literal>
<literal type="string">"gr/c6EWtTZBzCDyUZbAEmXZ/4rzCahWqlwQ3JNgelE5tDlG+1sSPypZt90Pf6DBl"</literal>
<literal type="string">"Jzt7u0NDY8RD97LsaMzhGY4i+5jhe1o+ATc7iwiwovOVThrLm82asduycPAtStvY"</literal>
<literal type="string">"sONvRUgzEv/+PDIqVPfE94rwiCPCR/5kenHA0R6mY7AHfqQv0wGP3J8rtsYIqQ+T"</literal>
<literal type="string">"SCX8Ev2fQtzzxD72V7DX3WnRBnc0CkvSyqD/HMaMyRa+xMwyN2hzXwj7UfdJUzYF"</literal>
<literal type="string">"CpUCTPJ5GhD22Dp1nPMd8aINcGeGG7MW9S/lpOt5hvk9C8JzC6WZrG/8Z7jlLwum"</literal>
<literal type="string">"GCSNe9FINSkYQKyTYOGWhlC0elnYjyELn8+CkcY7v2vcB5G5l1YjqrZslMZIBjzk"</literal>
<literal type="string">"zk6q5PYvCdxTby78dOs6Y5nCpqyJvKeyRKANihDjbPIky/qbn3BHLt4Ui9SyIAmW"</literal>
<literal type="string">"omTxJBzcoTWcFbLUvFUufQb1nA5V9FrWk9p2rSVzTMVD"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>_der_tests_cacert_root_cert_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>_der_tests_cacert_root_cert</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>






















































































































<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ASN1_FMTSTRING_FMT</name></cpp:macro> <cpp:value>"line: %d, type=%d, size=%lu, data=%p, self=%p, next=%p, prev=%p, parent=%p, child=%p"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ASN1_FMTSTRING_VAL</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__LINE__, (l)-&gt;type, (l)-&gt;size, (l)-&gt;data, (l), (l)-&gt;next, (l)-&gt;prev, (l)-&gt;parent, (l)-&gt;child</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__ASN1_ERR</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, __ASN1_FMTSTRING_FMT "\n", __ASN1_FMTSTRING_VAL(l)); exit(EXIT_FAILURE)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CHECK_ASN1_HAS</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((l)-&gt;w == NULL) { __ASN1_ERR(l);} } while(0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__CHECK_ASN1_HAS_NO</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((l)-&gt;w != NULL) { __ASN1_ERR(l);} } while(0)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ASN1_TYPE</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if ((l)-&gt;type != (t)) { __ASN1_ERR(l);} } while(0)</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ASN1_HAS_CHILD</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__CHECK_ASN1_HAS(l, child)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ASN1_HAS_NO_CHILD</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__CHECK_ASN1_HAS_NO(l, child)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ASN1_HAS_NEXT</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__CHECK_ASN1_HAS(l, next)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ASN1_HAS_NO_NEXT</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__CHECK_ASN1_HAS_NO(l, next)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ASN1_HAS_DATA</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__CHECK_ASN1_HAS(l, data)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ASN1_HAS_NO_DATA</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__CHECK_ASN1_HAS_NO(l, data)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER_TESTS_PRINT_FLEXI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_der_tests_print_flexi</name><parameter_list>(<parameter><decl><type><name>ltc_asn1_list</name><modifier>*</modifier></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_asn1_list</name><modifier>*</modifier></type> <name>ostring</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
<block>{<block_content>
<case>case <expr><name>LTC_ASN1_EOL</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"EOL"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>__ASN1_FMTSTRING_FMT</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>__ASN1_FMTSTRING_VAL</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_BOOLEAN</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"BOOLEAN"</literal></expr>;</expr_stmt>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"true"</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">"false"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_INTEGER</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"INTEGER"</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp_toradix</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_SHORT_INTEGER</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"SHORT INTEGER"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_BIT_STRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"BIT STRING"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_OCTET_STRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"OCTET STRING"</literal></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ostring_l</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>



<if_stmt><if>if <condition>(<expr><call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ostring_l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ostring</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><index>[<expr><name>n</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>r</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s boom\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>-=</operator> <name>r</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_NULL</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"NULL"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"OBJECT IDENTIFIER"</literal></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>pk_oid_num_to_str</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s boom\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_IA5_STRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"IA5 STRING"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_PRINTABLE_STRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"PRINTABLE STRING"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_UTF8_STRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"UTF8 STRING"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_UTCTIME</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"UTCTIME"</literal></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>ltc_utctime</name><modifier>*</modifier></type> <name>ut</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%02d-%02d-%02d %02d:%02d:%02d %c%02d:%02d"</literal></expr></argument>,
<argument><expr><name><name>ut</name><operator>-&gt;</operator><name>YY</name></name></expr></argument>, <argument><expr><name><name>ut</name><operator>-&gt;</operator><name>MM</name></name></expr></argument>, <argument><expr><name><name>ut</name><operator>-&gt;</operator><name>DD</name></name></expr></argument>, <argument><expr><name><name>ut</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><name><name>ut</name><operator>-&gt;</operator><name>mm</name></name></expr></argument>, <argument><expr><name><name>ut</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>,
<argument><expr><ternary><condition><expr><name><name>ut</name><operator>-&gt;</operator><name>off_dir</name></name></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><literal type="char">'+'</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>ut</name><operator>-&gt;</operator><name>off_hh</name></name></expr></argument>, <argument><expr><name><name>ut</name><operator>-&gt;</operator><name>off_mm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_GENERALIZEDTIME</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"GENERALIZED TIME"</literal></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>ltc_generalizedtime</name><modifier>*</modifier></type> <name>gt</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><name><name>gt</name><operator>-&gt;</operator><name>fs</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%04d-%02d-%02d %02d:%02d:%02d.%02dZ"</literal></expr></argument>,
<argument><expr><name><name>gt</name><operator>-&gt;</operator><name>YYYY</name></name></expr></argument>, <argument><expr><name><name>gt</name><operator>-&gt;</operator><name>MM</name></name></expr></argument>, <argument><expr><name><name>gt</name><operator>-&gt;</operator><name>DD</name></name></expr></argument>, <argument><expr><name><name>gt</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><name><name>gt</name><operator>-&gt;</operator><name>mm</name></name></expr></argument>, <argument><expr><name><name>gt</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>, <argument><expr><name><name>gt</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%04d-%02d-%02d %02d:%02d:%02dZ"</literal></expr></argument>,
<argument><expr><name><name>gt</name><operator>-&gt;</operator><name>YYYY</name></name></expr></argument>, <argument><expr><name><name>gt</name><operator>-&gt;</operator><name>MM</name></name></expr></argument>, <argument><expr><name><name>gt</name><operator>-&gt;</operator><name>DD</name></name></expr></argument>, <argument><expr><name><name>gt</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>, <argument><expr><name><name>gt</name><operator>-&gt;</operator><name>mm</name></name></expr></argument>, <argument><expr><name><name>gt</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_CHOICE</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"CHOICE"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_SEQUENCE</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"SEQUENCE"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_SET</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"SET"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_SETOF</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"SETOF"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_RAW_BIT_STRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"RAW BIT STRING"</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_TELETEX_STRING</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"TELETEX STRING"</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>:</case>
<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"NON STANDARD"</literal></expr>;</expr_stmt>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><literal type="string">"[%s %s %llu]"</literal></expr></argument>, <argument><expr><name><name>der_asn1_class_to_string_map</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>klass</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>der_asn1_pc_to_string_map</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>pc</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>r</name> <operator>&gt;=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s boom\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>-=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>text</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
</block_content>}</block>
<break>break;</break>
</block_content>}</block></switch>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>level</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>text</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s &lt;missing decoding&gt;\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"WTF type=%i\n"</literal></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ostring</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_der_tests_print_flexi</name><argument_list>(<argument><expr><name>ostring</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>der_free_sequence_flexi</name><argument_list>(<argument><expr><name>ostring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_der_tests_print_flexi</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>_der_tests_print_flexi</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>der_cacert_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>_der_tests_cacert_root_cert</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len1</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>, <decl><type ref="prev"/><name>len2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>decoded_list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_decode</name><argument_list>(<argument><expr><name>_der_tests_stinky_root_cert</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_der_tests_stinky_root_cert</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <name>len1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>der_free_sequence_flexi</name><argument_list>(<argument><expr><name>decoded_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len1</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_decode</name><argument_list>(<argument><expr><name>_der_tests_cacert_root_cert</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_der_tests_cacert_root_cert</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <name>len1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>decoded_list</name></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_DATA</name><argument_list>(<argument><expr><name>decoded_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>der_sequence_shrink</name><argument_list>(<argument><expr><name>decoded_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>decoded_list</name></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_DATA</name><argument_list>(<argument><expr><name>decoded_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER_TESTS_PRINT_FLEXI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\n--- test print start ---\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_der_tests_print_flexi</name><argument_list>(<argument><expr><name>decoded_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\n--- test print end ---\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>decoded_list</name></expr>;</expr_stmt>






<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_CHILD</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_NEXT</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_CHILD</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NEXT</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>






<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_CHILD</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NEXT</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l2</name> <operator>=</operator> <name><name>l1</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>l2</name></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_CHILD</name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_NEXT</name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <name><name>l1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_CHILD</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NEXT</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <name><name>l1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>







<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_CHILD</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NEXT</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l2</name> <operator>=</operator> <name><name>l1</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>l2</name></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_CHILD</name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NEXT</name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l2</name> <operator>=</operator> <name><name>l2</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>l2</name></expr></argument>, <argument><expr><name>LTC_ASN1_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_CHILD</name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_NEXT</name><argument_list>(<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





















<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>







<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_CHILD</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NEXT</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_CHILD</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NEXT</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <name><name>l1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>LTC_ASN1_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_CHILD</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_NEXT</name><argument_list>(<argument><expr><name>l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>CHECK_ASN1_TYPE</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>LTC_ASN1_BIT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_CHILD</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CHECK_ASN1_HAS_NO_NEXT</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>der_free_sequence_flexi</name><argument_list>(<argument><expr><name>decoded_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>der_set_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>list</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>oct_str</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>bin_str</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>int_val</name> <init>= <expr><literal type="number">12345678UL</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>strs</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>outbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>outlen</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>oct_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oct_str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_BIT_STRING</name></expr></argument>, <argument><expr><name>bin_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bin_str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int_val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>outlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_set</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_BIT_STRING</name></expr></argument>, <argument><expr><name><name>strs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>strs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name><name>strs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>strs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_set</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>strs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>oct_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oct_str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error decoding set using der_decode_set (oct_str is wrong):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>strs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bin_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bin_str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error decoding set using der_decode_set (bin_str is wrong):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>int_val</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error decoding set using der_decode_set (int_val is wrong):\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"one2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"two"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"aaaa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"aab"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"aaab"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"bbb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"bbba"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"bbbb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>LTC_ASN1_PRINTABLE_STRING</name></expr></argument>, <argument><expr><name><name>strs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_setof</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>LTC_ASN1_PRINTABLE_STRING</name></expr></argument>, <argument><expr><name><name>strs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>strs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>strs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_set</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>strs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"error SET OF order at %lu is wrong\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

</block_content>}</block></function>



























<function><type><specifier>static</specifier> <name>void</name></type> <name>_der_oid_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>oid_x690_8_19_5_example</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x03</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name><name>oid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>decoded_list</name></decl>, <decl><type ref="prev"/><name><name>static_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>oid_x690_8_19_5_example</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>oid_x690_8_19_5_example</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>static_list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>decoded_list</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>decoded_list</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_object_identifier</name><argument_list>(<argument><expr><name><name>decoded_list</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>decoded_list</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>der_sequence_free</name><argument_list>(<argument><expr><name>decoded_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>oid_x690_8_19_5_example</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oid_x690_8_19_5_example</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"OID X6.90 Ch. 8.19.5 Example"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOULD_FAIL</name><argument_list>(<argument><expr><call><name>der_encode_object_identifier</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOULD_FAIL</name><argument_list>(<argument><expr><call><name>der_length_object_identifier</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>der_flexi_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>printable_str</name><index>[]</index></name> <init>= <expr><literal type="string">"printable"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>set1_str</name><index>[]</index></name> <init>= <expr><literal type="string">"333"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>set2_str</name><index>[]</index></name> <init>= <expr><literal type="string">"222"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ia5_str</name><index>[]</index></name> <init>= <expr><literal type="string">"ia5"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>int_val</name> <init>= <expr><literal type="number">12345678UL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ltc_utctime</name></type> <name>utctime</name> <init>= <expr><block>{ <expr><literal type="number">91</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ltc_generalizedtime</name></type> <name>gtime</name> <init>= <expr><block>{ <expr><literal type="number">2017</literal></expr>, <expr><literal type="number">03</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">421</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>oct_str</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>bit_str</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name><name>oid_str</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">840</literal></expr>, <expr><literal type="number">113549</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>encode_buf</name><index>[<expr><literal type="number">192</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>encode_buf_len</name></decl>, <decl><type ref="prev"/><name>decode_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>static_list</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>decoded_list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_PRINTABLE_STRING</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>printable_str</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name>printable_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_IA5_STRING</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>ia5_str</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name>ia5_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name><name>static_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>int_val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_UTCTIME</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>utctime</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LTC_ASN1_GENERALIZEDTIME</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gtime</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name><name>static_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>oct_str</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_BIT_STRING</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>bit_str</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name><name>static_list</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>,<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>oid_str</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SETOF</name></expr></argument>, <argument><expr><name><name>static_list</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_PRINTABLE_STRING</name></expr></argument>, <argument><expr><name>set1_str</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name>set1_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name><name>static_list</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_PRINTABLE_STRING</name></expr></argument>, <argument><expr><name>set2_str</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name>set2_str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>encode_buf_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>encode_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_sequence</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>static_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>encode_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encode_buf_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
{
FILE *f;
f = fopen("t.bin", "wb");
fwrite(encode_buf, 1, encode_buf_len, f);
fclose(f);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name>decode_len</name> <operator>=</operator> <name>encode_buf_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>encode_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decode_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>decode_len</name> <operator>!=</operator> <name>encode_buf_len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Decode len of %lu does not match encode len of %lu \n"</literal></expr></argument>, <argument><expr><name>decode_len</name></expr></argument>, <argument><expr><name>encode_buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name>decoded_list</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_PRINTABLE_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><name>printable_str</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>printable_str</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_IA5_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><name>ia5_str</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>ia5_str</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_INTEGER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mp_cmp_d</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">12345678UL</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_EQ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_UTCTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utctime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>utctime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_GENERALIZEDTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gtime</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gtime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_OCTET_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>oct_str</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>oct_str</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_BIT_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bit_str</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>bit_str</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>




<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>oid_str</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>oid_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>oid_str</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>oid_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_SET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_PRINTABLE_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><name>set2_str</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>set2_str</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_PRINTABLE_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><name>set1_str</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>set1_str</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"(%d), %d, %lu, next=%p, prev=%p, parent=%p, child=%p\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>der_sequence_free</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>der_choice_n_custom_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>types</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>host</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>custom</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>root</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>boolean</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bitbuf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>octetbuf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ia5buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>printbuf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>outbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>custbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>utf8buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>integer</name></decl>, <decl><type ref="prev"/><name><name>oidbuf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>outlen</name></decl>, <decl><type ref="prev"/><name>custlen</name></decl>, <decl><type ref="prev"/><name>inlen</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mpinteger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_utctime</name></type> <name>utctime</name> <init>= <expr><block>{ <expr><literal type="number">91</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_generalizedtime</name></type> <name>gtime</name> <init>= <expr><block>{ <expr><literal type="number">2038</literal></expr>, <expr><literal type="number">01</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bitbuf</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>bitbuf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>octetbuf</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>octetbuf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> </block_content>}</block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ia5buf</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>ia5buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt> </block_content>}</block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>printbuf</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>printbuf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt> </block_content>}</block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>utf8buf</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>utf8buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>utf8buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>L</name><literal type="char">'a'</literal></expr>;</expr_stmt> </block_content>}</block></for>
<expr_stmt><expr><name>integer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>boolean</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>oidbuf</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>oidbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><name><name>oidbuf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></for>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>mp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mpinteger</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>types</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_PRINTABLE_STRING</name></expr></argument>, <argument><expr><name>printbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>printbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_BIT_STRING</name></expr></argument>, <argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bitbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_RAW_BIT_STRING</name></expr></argument>, <argument><expr><name>bitbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bitbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>octetbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>octetbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_IA5_STRING</name></expr></argument>, <argument><expr><name>ia5buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ia5buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_BOOLEAN</name></expr></argument>, <argument><expr><name>boolean</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>boolean</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>boolean</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>integer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>mpinteger</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><name>oidbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oidbuf</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>oidbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_UTCTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utctime</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_GENERALIZEDTIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gtime</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>custom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1_CUSTOM_CONSTRUCTED</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_CL_CONTEXT_SPECIFIC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>custom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_UTF8_STRING</name></expr></argument>, <argument><expr><name>utf8buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>utf8buf</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>utf8buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_CHOICE</name></expr></argument>, <argument><expr><name>types</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt><expr><name>outlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_sequence</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>types</name><index>[<expr><name>x</name> <operator>%</operator> <name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>types</name><index>[<expr><name>x</name> <operator>%</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LTC_SET_ASN1_CUSTOM_CONSTRUCTED</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_CL_CONTEXT_SPECIFIC</name></expr></argument>, <argument><expr><literal type="number">1uLL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>n</name><operator>)</operator></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>LTC_SET_ASN1_CUSTOM_PRIMITIVE</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_CL_CONTEXT_SPECIFIC</name></expr></argument>, <argument><expr><literal type="number">1uLL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>n</name><operator>)</operator></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>child</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><name>custlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>custbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>LTC_ASN1_CUSTOM_TYPE</name> <operator>||</operator> <name><name>root</name><operator>-&gt;</operator><name>pc</name></name> <operator>!=</operator> <name>LTC_ASN1_PC_PRIMITIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_custom_type</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>custbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>custlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>inlen</name> <operator>=</operator> <name>outlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_sequence</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>types</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>used</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>!=</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>n</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"CHOICE, flag %u in trial %u was incorrectly set to one\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>types</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>used</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>n</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"CHOICE, flag %u in trial %u was incorrectly set to zero\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>LTC_ASN1_CUSTOM_TYPE</name> <operator>||</operator> <name><name>root</name><operator>-&gt;</operator><name>pc</name></name> <operator>!=</operator> <name>LTC_ASN1_PC_PRIMITIVE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_custom_type</name><argument_list>(<argument><expr><name>custbuf</name></expr></argument>, <argument><expr><name>custlen</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>mp_clear</name><argument_list>(<argument><expr><name>mpinteger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_der_decode_print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type> <name>plen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER_TESTS_PRINT_FLEXI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_der_tests_print_flexi</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>der_sequence_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>eckey_privc_der</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
<expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
<expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>,
<expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,
<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x30</literal></expr>,
<expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,
<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x3d</literal></expr>,
<expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
<expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
<expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x7d</literal></expr>,
<expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x8b</literal></expr>,
<expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,
<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
<expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x5c</literal></expr>,
<expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x79</literal></expr>,
<expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xf9</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>eckey_privs_der</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
<expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2b</literal></expr>,
<expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x10</literal></expr>,
<expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xd3</literal></expr>,
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x13</literal></expr>,
<expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xc3</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>der_custom_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>bool_ean</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>seq1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>custom</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>boolean</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>boolean</name> <operator>=</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>bool_ean</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>boolean</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>bool_ean</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1_CUSTOM_CONSTRUCTED</name><argument_list>(<argument><expr><name>custom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_CL_CONTEXT_SPECIFIC</name></expr></argument>, <argument><expr><literal type="number">0x1000</literal></expr></argument>, <argument><expr><name>seq1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_length_custom_type</name><argument_list>(<argument><expr><name>custom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_custom_type</name><argument_list>(<argument><expr><name>custom</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_der_decode_print</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>boolean</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_custom_type</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>custom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_length_sequence</name><argument_list>(<argument><expr><name>custom</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_sequence</name><argument_list>(<argument><expr><name>custom</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_der_decode_print</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>boolean</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_sequence</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>custom</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1_CUSTOM_PRIMITIVE</name><argument_list>(<argument><expr><name>bool_ean</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_CL_CONTEXT_SPECIFIC</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>, <argument><expr><name>LTC_ASN1_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>boolean</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_length_custom_type</name><argument_list>(<argument><expr><name>bool_ean</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_custom_type</name><argument_list>(<argument><expr><name>bool_ean</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_der_decode_print</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1_CUSTOM_PRIMITIVE</name><argument_list>(<argument><expr><name>bool_ean</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_CL_CONTEXT_SPECIFIC</name></expr></argument>, <argument><expr><literal type="number">0x8000</literal></expr></argument>, <argument><expr><name>LTC_ASN1_BOOLEAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>boolean</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_custom_type</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>bool_ean</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_der_decode_print</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_der_decode_print</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eckey_privc_der</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_der_decode_print</name><argument_list>(<argument><expr><name>eckey_privc_der</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>eckey_privs_der</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_der_decode_print</name><argument_list>(<argument><expr><name>eckey_privs_der</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>_der_Xcode</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>_der_Xcode</name></type> <name>encode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>_der_Xcode</name></type> <name>decode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>in_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>type_sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>what</name></decl>;</decl_stmt>
}</block></struct></type> <name>der_Xcode_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>der_Xcode_run</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>der_Xcode_t</name><modifier>*</modifier></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>l1</name></decl>, <decl><type ref="prev"/><name>l2</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>d1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>l1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>l1</name> <operator>*</operator> <name><name>x</name><operator>-&gt;</operator><name>type_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sz</name> <operator>=</operator> <operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>in_sz</name></name> <operator>*</operator> <name><name>x</name><operator>-&gt;</operator><name>factor</name></name><operator>)</operator><operator>/</operator><name><name>x</name><operator>-&gt;</operator><name>type_sz</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>x</name><operator>-&gt;</operator><name>encode</name></name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CRYPT_BUFFER_OVERFLOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>XREALLOC</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>l1</name> <operator>*</operator> <name><name>x</name><operator>-&gt;</operator><name>type_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name><name>x</name><operator>-&gt;</operator><name>encode</name></name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>l2</name> <operator>*</operator> <name><name>x</name><operator>-&gt;</operator><name>type_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>x</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CRYPT_BUFFER_OVERFLOW</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name>XREALLOC</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>l2</name> <operator>*</operator> <name><name>x</name><operator>-&gt;</operator><name>type_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name><name>x</name><operator>-&gt;</operator><name>decode</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><operator>(</operator><name>l2</name><operator>/</operator><name><name>x</name><operator>-&gt;</operator><name>factor</name></name><operator>)</operator> <operator>*</operator> <name><name>x</name><operator>-&gt;</operator><name>type_sz</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>in_sz</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>what</name></name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typeof</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DER_XCODE_X</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (_der_Xcode)der_encode_ ##n, (_der_Xcode)der_decode_ ##n, b, sizeof(b), x, sizeof(typeof(b[0])),#n }</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DER_XCODE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DER_XCODE_X(n, b, 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>der_Xcode_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>ttex_neg_int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>mpinteger</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name><name>oid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">42</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>bit_string</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x1</literal></expr>, <expr><literal type="number">0x1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>multi_buf</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>multi_string</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'l'</literal></expr>,<expr><literal type="char">'i'</literal></expr>,<expr><literal type="char">'b'</literal></expr>,<expr><literal type="char">'t'</literal></expr>,<expr><literal type="char">'o'</literal></expr>,<expr><literal type="char">'m'</literal></expr>,<expr><literal type="char">'c'</literal></expr>,<expr><literal type="char">'r'</literal></expr>,<expr><literal type="char">'y'</literal></expr>,<expr><literal type="char">'p'</literal></expr>,<expr><literal type="char">'t'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name></type> <name><name>wchar_string</name><index>[]</index></name> <init>= <expr><literal type="string">L"libtomcrypt"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>teletex_neg_int</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x74</literal></expr>,
<expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x19</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>der_Xcode_t</name></type> <name><name>xcode_tests</name><index>[]</index></name> <init>=
<expr><block>{
<expr><call><name>DER_XCODE</name><argument_list>(<argument><expr><name>bit_string</name></expr></argument>, <argument><expr><name>bit_string</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DER_XCODE_X</name><argument_list>(<argument><expr><name>raw_bit_string</name></expr></argument>, <argument><expr><name>multi_buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DER_XCODE</name><argument_list>(<argument><expr><name>octet_string</name></expr></argument>, <argument><expr><name>multi_buf</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DER_XCODE</name><argument_list>(<argument><expr><name>object_identifier</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DER_XCODE</name><argument_list>(<argument><expr><name>ia5_string</name></expr></argument>, <argument><expr><name>multi_string</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DER_XCODE</name><argument_list>(<argument><expr><name>printable_string</name></expr></argument>, <argument><expr><name>multi_string</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>DER_XCODE</name><argument_list>(<argument><expr><name>utf8_string</name></expr></argument>, <argument><expr><name>wchar_string</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xcode_tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>xcode_tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>der_Xcode_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xcode_tests</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>teletex_neg_int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>teletex_neg_int</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER_TESTS_PRINT_FLEXI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_der_tests_print_flexi</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>child</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>list</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ttex_neg_int</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>list</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_sequence</name><argument_list>(<argument><expr><name>ttex_neg_int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>der_sequence_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>mp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mpinteger</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>ttex_neg_int</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_TELETEX_STRING</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>ttex_neg_int</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>mpinteger</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_sequence</name><argument_list>(<argument><expr><name>teletex_neg_int</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>teletex_neg_int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ttex_neg_int</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp_clear</name><argument_list>(<argument><expr><name>mpinteger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_READDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_der_decode_sequence_flexi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ltc_asn1_list</name><modifier>*</modifier><modifier>*</modifier></type> <name>list</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inlen</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER_TESTS_PRINT_FLEXI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_der_tests_print_flexi</name><argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>der_sequence_free</name><argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>void</name></type> <name>_der_regression_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>_broken_sequence</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0x7f</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0x1e</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0xb4</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0xad</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x69</literal></expr>,
<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0xb9</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0xfe</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0xea</literal></expr>,<expr><literal type="number">0xdb</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0xb0</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xf3</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0xda</literal></expr>,<expr><literal type="number">0xb9</literal></expr>,
<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x3b</literal></expr>,<expr><literal type="number">0xb8</literal></expr>,<expr><literal type="number">0xc9</literal></expr>,<expr><literal type="number">0xcd</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x1d</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xad</literal></expr>,<expr><literal type="number">0xe6</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0xd2</literal></expr>,<expr><literal type="number">0x37</literal></expr>,
<expr><literal type="number">0xd3</literal></expr>,<expr><literal type="number">0x0f</literal></expr>,<expr><literal type="number">0x9e</literal></expr>,<expr><literal type="number">0xf4</literal></expr>,<expr><literal type="number">0x1d</literal></expr>,<expr><literal type="number">0xd4</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0xa4</literal></expr>,<expr><literal type="number">0xe1</literal></expr>,<expr><literal type="number">0xc8</literal></expr>,<expr><literal type="number">0xf1</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x67</literal></expr>,<expr><literal type="number">0xcf</literal></expr>,<expr><literal type="number">0x33</literal></expr>,
<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x3f</literal></expr>,<expr><literal type="number">0xe8</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0x36</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>_addtl_bytes</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xb7</literal></expr>,<expr><literal type="number">0xba</literal></expr>,<expr><literal type="number">0xba</literal></expr>,<expr><literal type="number">0xe9</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0xb8</literal></expr>,<expr><literal type="number">0xa3</literal></expr>,<expr><literal type="number">0xa0</literal></expr>,<expr><literal type="number">0x5b</literal></expr>,<expr><literal type="number">0x70</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x57</literal></expr>,
<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0xa8</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0xa1</literal></expr>,<expr><literal type="number">0xb2</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0xf7</literal></expr>,<expr><literal type="number">0xdb</literal></expr>,<expr><literal type="number">0x8a</literal></expr>,<expr><literal type="number">0x3d</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x1b</literal></expr>,<expr><literal type="number">0x39</literal></expr>,<expr><literal type="number">0xfd</literal></expr>,<expr><literal type="number">0x2c</literal></expr>,<expr><literal type="number">0x3f</literal></expr>,<expr><literal type="number">0x02</literal></expr>,
<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0xdd</literal></expr>,<expr><literal type="number">0x2f</literal></expr>,<expr><literal type="number">0x3f</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0xaf</literal></expr>,<expr><literal type="number">0x7a</literal></expr>,<expr><literal type="number">0xce</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0xea</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x1d</literal></expr>,<expr><literal type="number">0x6f</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0xe4</literal></expr>,
<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0xc1</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0xa6</literal></expr>,<expr><literal type="number">0xe7</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0xcd</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0xf4</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0xec</literal></expr>,<expr><literal type="number">0xce</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>issue_507</name><index>[]</index></name> <init>= <expr><literal type="string">"\x30\x04"</literal> 
<literal type="string">"\x0c\x02\xbf\xbf"</literal> 
<literal type="string">"\xaa"</literal> 
<literal type="string">"\x04\x82\xff\xff"</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>seq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOULD_FAIL</name><argument_list>(<argument><expr><call><name>der_decode_sequence</name><argument_list>(<argument><expr><name>_broken_sequence</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_broken_sequence</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp_cleanup_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_broken_sequence</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOULD_FAIL_WITH</name><argument_list>(<argument><expr><call><name>der_decode_sequence</name><argument_list>(<argument><expr><name>_addtl_bytes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>_addtl_bytes</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>seq</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CRYPT_INPUT_TOO_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp_cleanup_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>_addtl_bytes</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_der_decode_print</name><argument_list>(<argument><expr><name>_addtl_bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>issue_507</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOULD_FAIL</name><argument_list>(<argument><expr><call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>issue_507</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>der_toolong_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name><name>oid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf5</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf12</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>buf32</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>invalid1</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x19</literal></expr>, 
<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x0a</literal></expr>, 
<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x0e</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x1a</literal></expr>,
<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x00</literal></expr>, 
<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xf7</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0x9e</literal></expr>,<expr><literal type="number">0x8b</literal></expr>,<expr><literal type="number">0x7b</literal></expr>,<expr><literal type="number">0xb2</literal></expr>,<expr><literal type="number">0xe0</literal></expr>,<expr><literal type="number">0x9b</literal></expr>,<expr><literal type="number">0x70</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0x5a</literal></expr>,<expr><literal type="number">0x5d</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>invalid2</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x0d</literal></expr>, 
<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xb7</literal></expr>,<expr><literal type="number">0xba</literal></expr>,<expr><literal type="number">0xba</literal></expr>,<expr><literal type="number">0xe9</literal></expr>,
<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0xdd</literal></expr>,
<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>invalid3</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x0f</literal></expr>, 
<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xb7</literal></expr>,<expr><literal type="number">0xba</literal></expr>,<expr><literal type="number">0xba</literal></expr>,<expr><literal type="number">0xe9</literal></expr>,
<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0xdd</literal></expr>,
<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>invalid4</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x30</literal></expr>,
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0d</literal></expr>,
<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x2c</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x25</literal></expr>

}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>invalid5</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0e</literal></expr>,
<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x2c</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x3d</literal></expr>,<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,<expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x25</literal></expr>

}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>invalid6</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0c</literal></expr>,
<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x2c</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x3d</literal></expr>,<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,<expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x25</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>seqsub</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>seqoid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>seqmain</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>seqint</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>int1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>int2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seqsub</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>buf5</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seqsub</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seqmain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>seqsub</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seqmain</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>buf12</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_strict</name><argument_list>(<argument><expr><name>invalid1</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seqmain</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sequence invalid%d accepted by der_decode_sequence\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid1</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>invalid1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sequence invalid%d accepted by der_decode_sequence_flexi\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>der_sequence_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>int1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>int2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seqint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>int1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seqint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>int2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid2</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_strict</name><argument_list>(<argument><expr><name>invalid2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seqint</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sequence invalid%d accepted by der_decode_sequence\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid2</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>invalid2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name> <operator>||</operator> <name>len</name> <operator>!=</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"der_decode_sequence_flexi failed, err=%d (expected 0) len=%lu (expected 15)\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>der_sequence_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid3</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_strict</name><argument_list>(<argument><expr><name>invalid3</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seqint</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sequence invalid%d accepted by der_decode_sequence\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid3</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>invalid3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sequence invalid%d accepted by der_decode_sequence_flexi\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>der_sequence_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>int1</name></expr></argument>, <argument><expr><name>int2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seqoid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seqoid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seqmain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>seqoid</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seqmain</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>buf32</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid4</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_strict</name><argument_list>(<argument><expr><name>invalid4</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seqmain</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sequence invalid%d accepted by der_decode_sequence\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid4</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>invalid4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sequence invalid%d accepted by der_decode_sequence_flexi\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>der_sequence_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid5</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_strict</name><argument_list>(<argument><expr><name>invalid5</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seqmain</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sequence invalid%d accepted by der_decode_sequence\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid5</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>invalid5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sequence invalid%d accepted by der_decode_sequence_flexi\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>der_sequence_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_strict</name><argument_list>(<argument><expr><name>invalid6</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seqmain</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sequence invalid%d accepted by der_decode_sequence\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>invalid6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Sequence invalid%d accepted by der_decode_sequence_flexi\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>der_sequence_free</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_der_recursion_limit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>failed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>integer</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>seqs</name><index>[<expr><name>LTC_DER_MAX_RECURSION</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dummy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>flexi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>dummy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>integer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seqs</name></expr></argument>, <argument><expr><name>LTC_DER_MAX_RECURSION</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>LTC_DER_MAX_RECURSION</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seqs</name></expr></argument>, <argument><expr><name>LTC_DER_MAX_RECURSION</name> <operator>-</operator> <name>n</name></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>seqs</name><index>[<expr><name>LTC_DER_MAX_RECURSION</name> <operator>-</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>s</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_sequence</name><argument_list>(<argument><expr><name>seqs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_sequence</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>seqs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOULD_FAIL</name><argument_list>(<argument><expr><call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flexi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>der_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>zz</name></decl>, <decl><type ref="prev"/><name><name>oid</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>rsa_oid_der</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x0d</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name><name>rsa_oid</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">840</literal></expr>, <expr><literal type="number">113549</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>rsa_ia5</name><index>[]</index></name> <init>= <expr><literal type="string">"test1@rsa.com"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>rsa_ia5_der</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x6d</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>rsa_printable</name><index>[]</index></name> <init>= <expr><literal type="string">"Test User 1"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>rsa_printable_der</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x55</literal></expr>,
<expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x31</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ltc_utctime</name></type> <name>rsa_time1</name> <init>= <expr><block>{ <expr><literal type="number">91</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ltc_utctime</name></type> <name>rsa_time2</name> <init>= <expr><block>{ <expr><literal type="number">91</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_utctime</name></type> <name>tmp_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>rsa_time1_der</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x30</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>rsa_time2_der</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x5a</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>utf8_1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0041</literal></expr>, <expr><literal type="number">0x2262</literal></expr>, <expr><literal type="number">0x0391</literal></expr>, <expr><literal type="number">0x002E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>utf8_1_der</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x2E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>wchar_t</name></type> <name><name>utf8_2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD55C</literal></expr>, <expr><literal type="number">0xAD6D</literal></expr>, <expr><literal type="number">0xC5B4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>utf8_2_der</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xB4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>utf8_buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>utf8_out</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_READDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_NOP</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>_der_recursion_limit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>der_Xcode_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_READDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>test_process_dir</name><argument_list>(<argument><expr><literal type="string">"tests/asn1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><name>_der_decode_sequence_flexi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"DER ASN.1 special cases"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>der_custom_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_der_regression_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>der_toolong_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>der_cacert_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_der_oid_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0xffffff00</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ULONG_MAX</name> <operator>==</operator> <name>ULLONG_MAX</name></expr></cpp:if>
<expr_stmt><expr><name>y</name> <operator>&lt;&lt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><name>y</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>





<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_asn1_length</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_asn1_length</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>z</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to en- or decode length correctly! %lu != %lu\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>g</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>zz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TFM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>z</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to read %lu bytes from yarrow\n"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_integer</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_length_integer</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DER INTEGER size mismatch %lu != %lu\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>mp_set_int</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_integer</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>x</name> <operator>||</operator> <call><name>mp_cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_EQ</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%lu: %lu vs %lu\n"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>zz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>z</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to read %lu bytes from yarrow\n"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_integer</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>y</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_short_integer</name><argument_list>(<argument><expr><call><name>mp_get_int</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>y</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DER INTEGER short encoding failed, %lu, %lu, 0x%lX\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>mp_get_int</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>zz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>z</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>zz</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>y</name></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_short_integer</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <call><name>mp_get_int</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DER INTEGER short decoding failed, %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>mp_get_int</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>
<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>zz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <literal type="number">1536</literal></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>zz</name></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>z</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_bit_string</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zz</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_length_bit_string</name><argument_list>(<argument><expr><name>zz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nDER BIT STRING length of encoded not match expected : %lu, %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_bit_string</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>zz</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%lu, %lu, %d\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>zz</name></expr></argument>, <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>zz</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <literal type="number">1536</literal></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_octet_string</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zz</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_length_octet_string</name><argument_list>(<argument><expr><name>zz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nDER OCTET STRING length of encoded not match expected : %lu, %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_octet_string</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>zz</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%lu, %lu, %d\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>zz</name></expr></argument>, <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_object_identifier</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>*</operator><operator>)</operator><name>rsa_oid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rsa_oid</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>rsa_oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rsa_oid_der</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>rsa_oid_der</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_oid_der encode failed to match, %lu, "</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_object_identifier</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rsa_oid</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>rsa_oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>rsa_oid</name></expr></argument>, <argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rsa_oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_oid_der decode failed to match, %lu, "</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <name>y</name></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>zz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <literal type="number">5000</literal></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>z</name> <operator>%</operator> <operator>(</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>%</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>z</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_object_identifier</name><argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_length_object_identifier</name><argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Random OID %lu test failed, length mismatch: %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>z</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%lu\n"</literal></expr></argument>, <argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>y</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_object_identifier</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>oid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>z</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Random OID %lu test failed, decode length mismatch: %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>oid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>z</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Random OID %lu test failed, decoded values wrong\n"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>z</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%lu\n"</literal></expr></argument>, <argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n Got \n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>z</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%lu\n"</literal></expr></argument>, <argument><expr><name><name>oid</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_ia5_string</name><argument_list>(<argument><expr><name>rsa_ia5</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>rsa_ia5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rsa_ia5_der</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rsa_ia5_der</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IA5 encode failed: %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>rsa_ia5_der</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_length_ia5_string</name><argument_list>(<argument><expr><name>rsa_ia5</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>rsa_ia5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"IA5 length failed to match: %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_ia5_string</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>rsa_ia5</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rsa_ia5</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>rsa_ia5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DER IA5 failed test vector\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_printable_string</name><argument_list>(<argument><expr><name>rsa_printable</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>rsa_printable</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rsa_printable_der</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rsa_printable_der</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"PRINTABLE encode failed: %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>rsa_printable_der</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_length_printable_string</name><argument_list>(<argument><expr><name>rsa_printable</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>rsa_printable</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"printable length failed to match: %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_printable_string</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>rsa_printable</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rsa_printable</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>rsa_printable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DER printable failed test vector\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_utctime</name><argument_list>(<argument><expr><operator>(</operator><name>ltc_utctime</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rsa_time1</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rsa_time1_der</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rsa_time1_der</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"UTCTIME encode of rsa_time1 failed: %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>rsa_time1_der</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_length_utctime</name><argument_list>(<argument><expr><operator>(</operator><name>ltc_utctime</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rsa_time1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"UTCTIME length failed to match for rsa_time1: %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_utctime</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>x</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsa_time1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_time</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ltc_utctime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"UTCTIME decode failed for rsa_time1: %lu %lu\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n%u %u %u %u %u %u %u %u %u\n\n"</literal></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>YY</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>MM</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>DD</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>hh</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>mm</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>ss</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>off_dir</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>off_mm</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>off_hh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_utctime</name><argument_list>(<argument><expr><operator>(</operator><name>ltc_utctime</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rsa_time2</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rsa_time2_der</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rsa_time2_der</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"UTCTIME encode of rsa_time2 failed: %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>rsa_time1_der</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_length_utctime</name><argument_list>(<argument><expr><operator>(</operator><name>ltc_utctime</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rsa_time2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>x</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"UTCTIME length failed to match for rsa_time2: %lu, %lu\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_utctime</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <name>x</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsa_time2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_time</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ltc_utctime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"UTCTIME decode failed for rsa_time2: %lu %lu\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n%u %u %u %u %u %u %u %u %u\n\n"</literal></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>YY</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>MM</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>DD</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>hh</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>mm</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>ss</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>off_dir</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>off_mm</name></name></expr></argument>,
<argument><expr><name><name>tmp_time</name><operator>.</operator><name>off_hh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>utf8_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_utf8_string</name><argument_list>(<argument><expr><name>utf8_1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>utf8_1</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>utf8_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>utf8_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_length_utf8_string</name><argument_list>(<argument><expr><name>utf8_1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>utf8_1</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>utf8_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>utf8_1_der</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>utf8_buf</name></expr></argument>, <argument><expr><name>utf8_1_der</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>x</name> <operator>!=</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DER UTF8_1 encoded to %lu bytes\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>utf8_buf</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>utf8_out</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>utf8_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_utf8_string</name><argument_list>(<argument><expr><name>utf8_buf</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>utf8_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>utf8_1</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>utf8_1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>utf8_1</name></expr></argument>, <argument><expr><name>utf8_out</name></expr></argument>, <argument><expr><name>y</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DER UTF8_1 decoded to %lu wchar_t\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%04lx "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>utf8_out</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>utf8_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_encode_utf8_string</name><argument_list>(<argument><expr><name>utf8_2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>utf8_2</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>utf8_2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>utf8_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>utf8_2_der</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>utf8_buf</name></expr></argument>, <argument><expr><name>utf8_2_der</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DER UTF8_2 encoded to %lu bytes\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>utf8_buf</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>utf8_out</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>utf8_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>der_decode_utf8_string</name><argument_list>(<argument><expr><name>utf8_buf</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>utf8_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>!=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>utf8_2</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>utf8_2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>utf8_2</name></expr></argument>, <argument><expr><name>utf8_out</name></expr></argument>, <argument><expr><name>y</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DER UTF8_2 decoded to %lu wchar_t\n"</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%04lx "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>utf8_out</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>der_set_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>der_flexi_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>der_choice_n_custom_test</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></for></block_content></block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
