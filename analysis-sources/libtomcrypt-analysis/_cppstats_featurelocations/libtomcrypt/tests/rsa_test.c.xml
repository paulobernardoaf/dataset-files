<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\tests\rsa_test.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt_test.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MRSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LTC_TEST_DBG</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg_malloc_stats</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do{ malloc_stats(); }while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg_malloc_stats</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do{ }while(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>openssl_private_rsa</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x8a</literal></expr>,
<expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xb7</literal></expr>,
<expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xe5</literal></expr>,
<expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x8a</literal></expr>,
<expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x12</literal></expr>,
<expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x61</literal></expr>,
<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
<expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x3f</literal></expr>,
<expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x97</literal></expr>,
<expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x65</literal></expr>,
<expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
<expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x0d</literal></expr>,
<expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xad</literal></expr>,
<expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xa8</literal></expr>,
<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x2c</literal></expr>,
<expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x7b</literal></expr>,
<expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x8b</literal></expr>,
<expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x7a</literal></expr>,
<expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x42</literal></expr>,
<expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x9b</literal></expr>,
<expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x0b</literal></expr>,
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x1e</literal></expr>,
<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x7a</literal></expr>,
<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xbc</literal></expr>,
<expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x2d</literal></expr>,
<expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xcf</literal></expr>,
<expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x2a</literal></expr>,
<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x23</literal></expr>,
<expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xab</literal></expr>,
<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xfe</literal></expr>,
<expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x54</literal></expr>,
<expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x35</literal></expr>,
<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
<expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x60</literal></expr>,
<expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x2c</literal></expr>,
<expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x8f</literal></expr>,
<expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>x509_public_rsa</name><index>[]</index></name> <init>=
<expr><literal type="string">"MIICdTCCAd4CCQCYjCwz0l9JpjANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJD\
WjEPMA0GA1UECAwGTW9yYXZhMQ0wCwYDVQQHDARCcm5vMRAwDgYDVQQKDAdMVEMg\
THRkMQ8wDQYDVQQLDAZDcnlwdG8xEjAQBgNVBAMMCVRlc3QgQ2VydDEYMBYGCSqG\
SIb3DQEJARYJdGVzdEBjZXJ0MCAXDTE3MDMwOTIzNDMzOVoYDzIyOTAxMjIyMjM0\
MzM5WjB+MQswCQYDVQQGEwJDWjEPMA0GA1UECAwGTW9yYXZhMQ0wCwYDVQQHDARC\
cm5vMRAwDgYDVQQKDAdMVEMgTHRkMQ8wDQYDVQQLDAZDcnlwdG8xEjAQBgNVBAMM\
CVRlc3QgQ2VydDEYMBYGCSqGSIb3DQEJARYJdGVzdEBjZXJ0MIGfMA0GCSqGSIb3\
DQEBAQUAA4GNADCBiQKBgQDPmt5kitrIMyCp14MxGVSymoWnobd1M7aprIQks97b\
fYUtlmXlP3KVJJ8oaMpP20QcPmASit0mpev/C17UiDhJKm5bvxI3R70Fa7zb8+7k\
EY5BaHxhE9dCyIC+No/cCItPrKTidgzJY2xJWJPtzKrcJTsKYD+LVDrDTTHnlKRE\
/QIDAQABMA0GCSqGSIb3DQEBCwUAA4GBAApwWqupmmLGHeKOLFLcthQpAXXYep6T\
3S3e8X7fIG6TGhfvn5DHn+/V/C4184oOCwImI+VYRokdXdQ1AMGfVUomHJxsFPia\
bv5Aw3hiKsIG3jigKHwmMScgkl3yn+8hLkx6thNbqQoa6Yyo20RqaEFBwlZ5G8lF\
rZsdeO84SeCH"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>pkcs8_private_rsa</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xf7</literal></expr>,
<expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd7</literal></expr>,
<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0b</literal></expr>,
<expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xbc</literal></expr>,
<expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xbe</literal></expr>,
<expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x58</literal></expr>,
<expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
<expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x0a</literal></expr>,
<expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xb6</literal></expr>,
<expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x2f</literal></expr>,
<expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xac</literal></expr>,
<expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xf4</literal></expr>,
<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x95</literal></expr>,
<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x8b</literal></expr>,
<expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x41</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xcb</literal></expr>,
<expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x3f</literal></expr>,
<expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x05</literal></expr>,
<expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xdc</literal></expr>,
<expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xf0</literal></expr>,
<expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x5c</literal></expr>,
<expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xed</literal></expr>,
<expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xd8</literal></expr>,
<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x27</literal></expr>,
<expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x63</literal></expr>,
<expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xb8</literal></expr>,
<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x29</literal></expr>,
<expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x22</literal></expr>,
<expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xc6</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x0c</literal></expr>,
<expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xc8</literal></expr>,
<expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xb7</literal></expr>,
<expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x39</literal></expr>,
<expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x2e</literal></expr>,
<expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x9f</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<enum>enum <block>{
<decl><name>pk_d</name></decl> ,
<decl><name>pk_dP</name></decl>,
<decl><name>pk_dQ</name></decl>,
<decl><name>pk_e</name></decl> ,
<decl><name>pk_N</name></decl> ,
<decl><name>pk_p</name></decl> ,
<decl><name>pk_q</name></decl> ,
<decl><name>pk_qP</name></decl>,
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>hex_key</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="string">"C862B9EADE44531D5697D9979E1ACF301E0A8845862930A34D9F616573E0D6878FB6F306A382DC7CACFE9B289AAEFDFBFE2F0ED89704E3BB1FD1EC0DBAA3497F47AC8A44047E86B739423FAD1EB70EA551F440631EFDBDEA9F419FA8901D6F0A5A9513110D80AF5F64988A2C786865B02B8BA25387CAF16404ABF27BDB83C881"</literal></expr>,
<expr><literal type="string">"6DEBC32D2EF05EA488310529008AD195299B83CF75DB31E37A27DE3A74300C764CD4502A402D39D99963A95D80AE53CA943F05231EF80504E1B835F217B3A089"</literal></expr>,
<expr><literal type="string">"AB9088FA600829509A438BA050CCD85AFE976463717422A320025ACFEBC6169554D1CBAB8D1AC600FA08929C71D552523596714B8B920CD0E9BFAD630BA5E9B1"</literal></expr>,
<expr><literal type="string">"010001"</literal></expr>,
<expr><literal type="string">"CF9ADE648ADAC83320A9D783311954B29A85A7A1B77533B6A9AC8424B3DEDB7D852D9665E53F7295249F2868CA4FDB441C3E60128ADD26A5EBFF0B5ED48838492A6E5BBF123747BD056BBCDBF3EEE4118E41687C6113D742C880BE368FDC088B4FACA4E2760CC9636C495893EDCCAADC253B0A603F8B543AC34D31E794A444FD"</literal></expr>,
<expr><literal type="string">"F7BE5E23C3323FBF8B8E3AEEFCFCCBE5F7F10BBC4282AED57A3ECAF7D5693F6425A21FB77575059242EBB8F1F30A05E394D1557835A036A09B7C92846CDDDC4D"</literal></expr>,
<expr><literal type="string">"D6860E85420B0408842160F00E0D88FD1E3610654F1E53B40872805C3F596617E698F2E96C7A064CAC763DED8CA1CEAD1BBDB47D28BCE30E388D99D805B5A371"</literal></expr>,
<expr><literal type="string">"DCCC27C8E4DC6248D59BAFF5AB60F621FD53E2B75D09C91AA104A9FC612C5D04583A5A39F14A215667FDCC20A38F78185A793D2E8E7E860AE6A833C104174A9F"</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>openssl_public_rsa</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xde</literal></expr>,
<expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xa7</literal></expr>,
<expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x96</literal></expr>,
<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x60</literal></expr>,
<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x5b</literal></expr>,
<expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x68</literal></expr>,
<expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xa4</literal></expr>,
<expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x0a</literal></expr>,
<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>openssl_public_rsa_stripped</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xde</literal></expr>,
<expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xa7</literal></expr>,
<expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x96</literal></expr>,
<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x60</literal></expr>,
<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x5b</literal></expr>,
<expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x68</literal></expr>,
<expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xa4</literal></expr>,
<expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x0a</literal></expr>,
<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, }</block></expr></init></decl>;</decl_stmt>





<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>openssl_rsautl_pkcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x6f</literal></expr>,
<expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x21</literal></expr>,
<expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x86</literal></expr>,
<expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x4a</literal></expr>,
<expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xad</literal></expr>,
<expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xbc</literal></expr>,
<expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x7e</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_der_tests_cacert_root_cert</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>_der_tests_cacert_root_cert_size</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rsa_compat_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rsa_key</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>pubkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stat</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>key_parts</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name><name>key_lens</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import</name><argument_list>(<argument><expr><name>openssl_private_rsa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_private_rsa</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import</name><argument_list>(<argument><expr><name>openssl_public_rsa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_public_rsa</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_sign_hash_ex</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>LTC_PKCS_1_V1_5_NA1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>openssl_rsautl_pkcs</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>openssl_rsautl_pkcs</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"RSA rsa_sign_hash_ex + LTC_PKCS_1_V1_5_NA1 failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>stat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash_ex</name><argument_list>(<argument><expr><name>openssl_rsautl_pkcs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_rsautl_pkcs</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>LTC_PKCS_1_V1_5_NA1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stat</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"RSA rsa_verify_hash_ex + LTC_PKCS_1_V1_5_NA1 failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>PK_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>openssl_private_rsa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_private_rsa</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RSA private export (from OpenSSL)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>openssl_public_rsa_stripped</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_public_rsa_stripped</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RSA public export (from OpenSSL private key)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import</name><argument_list>(<argument><expr><name>openssl_public_rsa_stripped</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_public_rsa_stripped</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>openssl_public_rsa_stripped</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_public_rsa_stripped</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RSA public export (from stripped OpenSSL)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import</name><argument_list>(<argument><expr><name>openssl_public_rsa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_public_rsa</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>openssl_public_rsa_stripped</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_public_rsa_stripped</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RSA public export (from OpenSSL)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import_pkcs8</name><argument_list>(<argument><expr><name>pkcs8_private_rsa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pkcs8_private_rsa</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>PK_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>openssl_private_rsa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_private_rsa</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RSA private export (from PKCS#8)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>key_lens</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>key_parts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>radix_to_bin</name><argument_list>(<argument><expr><name><name>hex_key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>key_parts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key_lens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_set_key</name><argument_list>(<argument><expr><name><name>key_parts</name><index>[<expr><name>pk_N</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_lens</name><index>[<expr><name>pk_N</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_parts</name><index>[<expr><name>pk_e</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_lens</name><index>[<expr><name>pk_e</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_parts</name><index>[<expr><name>pk_d</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_lens</name><index>[<expr><name>pk_d</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_set_factors</name><argument_list>(<argument><expr><name><name>key_parts</name><index>[<expr><name>pk_p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_lens</name><index>[<expr><name>pk_p</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_parts</name><index>[<expr><name>pk_q</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_lens</name><index>[<expr><name>pk_q</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_set_crt_params</name><argument_list>(<argument><expr><name><name>key_parts</name><index>[<expr><name>pk_dP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_lens</name><index>[<expr><name>pk_dP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_parts</name><index>[<expr><name>pk_dQ</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_lens</name><index>[<expr><name>pk_dQ</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_parts</name><index>[<expr><name>pk_qP</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_lens</name><index>[<expr><name>pk_qP</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>PK_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>openssl_private_rsa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_private_rsa</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RSA private export (from hex)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_set_key</name><argument_list>(<argument><expr><name><name>key_parts</name><index>[<expr><name>pk_N</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_lens</name><index>[<expr><name>pk_N</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_parts</name><index>[<expr><name>pk_e</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_lens</name><index>[<expr><name>pk_e</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>do_compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>openssl_public_rsa_stripped</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_public_rsa_stripped</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RSA public export (from hex)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import</name><argument_list>(<argument><expr><name>openssl_public_rsa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_public_rsa</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name> <operator>|</operator> <name>PK_STD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>openssl_public_rsa</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>openssl_public_rsa</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"RSA(public) SSL public X.509 export failed to match OpenSSL output\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"should"</literal></expr></argument>, <argument><expr><name>openssl_public_rsa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>openssl_public_rsa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"is"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_rsa_key_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>should_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rsa_key</name> <modifier>*</modifier></type><name>should</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rsa_key</name> <modifier>*</modifier></type><name>is</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if<condition>(<expr><name>should_type</name> <operator>!=</operator> <name><name>is</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>should_type</name> <operator>==</operator> <name>PK_PRIVATE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>mp_cmp</name><argument_list>(<argument><expr><name><name>should</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_EQ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>mp_cmp</name><argument_list>(<argument><expr><name><name>should</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_EQ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>mp_cmp</name><argument_list>(<argument><expr><name><name>should</name><operator>-&gt;</operator><name>qP</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>qP</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_EQ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>mp_cmp</name><argument_list>(<argument><expr><name><name>should</name><operator>-&gt;</operator><name>dP</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>dP</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_EQ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>mp_cmp</name><argument_list>(<argument><expr><name><name>should</name><operator>-&gt;</operator><name>dQ</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>dQ</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_EQ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>mp_cmp</name><argument_list>(<argument><expr><name><name>should</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>d</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_EQ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>mp_cmp</name><argument_list>(<argument><expr><name><name>should</name><operator>-&gt;</operator><name>N</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>N</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_EQ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>mp_cmp</name><argument_list>(<argument><expr><name><name>should</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name><name>is</name><operator>-&gt;</operator><name>e</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_EQ</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_rsa_issue_301</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prng_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rsa_key</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>key_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_make_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><name>prng_idx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof><operator>/</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">65537</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>PK_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>_rsa_key_cmp</name><argument_list>(<argument><expr><name>PK_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>_rsa_key_cmp</name><argument_list>(<argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name> <operator>|</operator> <name>PK_STD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>_rsa_key_cmp</name><argument_list>(<argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_READDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_rsa_import_x509</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"TomsFastMath"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>inlen</name> <operator>&gt;</operator> <literal type="number">2048</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LTC_TEST_DBG</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Skipping testcase because of TomsFastMath\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>rsa_import_x509</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD5</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_rsa_import_pkcs8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rsa_import_pkcs8</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><literal type="string">"secret"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>rsa_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>out</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">3072</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rsa_key</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>privKey</name></decl>, <decl><type ref="prev"/><name>pubKey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash_idx</name></decl>, <decl><type ref="prev"/><name>prng_idx</name></decl>, <decl><type ref="prev"/><name>stat</name></decl>, <decl><type ref="prev"/><name>stat2</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>rsa_msgsize</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>len2</name></decl>, <decl><type ref="prev"/><name>len3</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>cnt2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>lparam</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>dP</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>p3</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_NOP</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rsa_compat_test</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prng_idx</name> <operator>=</operator> <call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hash_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>prng_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_test requires LTC_SHA1 and yarrow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_READDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>test_process_dir</name><argument_list>(<argument><expr><literal type="string">"tests/rsa"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>_rsa_import_x509</name></expr></argument>, <argument><expr><operator>(</operator><name>dir_cleanup_cb</name><operator>)</operator><name>rsa_free</name></expr></argument>, <argument><expr><literal type="string">"rsa_test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD5</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>test_process_dir</name><argument_list>(<argument><expr><literal type="string">"tests/rsa-pkcs8"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>_rsa_import_pkcs8</name></expr></argument>, <argument><expr><operator>(</operator><name>dir_cleanup_cb</name><operator>)</operator><name>rsa_free</name></expr></argument>, <argument><expr><literal type="string">"rsa_pkcs8_test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>_rsa_issue_301</name><argument_list>(<argument><expr><name>prng_idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_make_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><name>prng_idx</name></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>/</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">65537</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mp_count_bits</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>N</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_1024 key modulus has %d bits\n"</literal></expr></argument>, <argument><expr><call><name>mp_count_bits</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>N</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>N</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp_to_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>N</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"N"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp_to_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"p"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp_to_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>q</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"q"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>!=</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>rsa_msgsize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>rsa_msgsize</name> <operator>&lt;=</operator> <literal type="number">86</literal></expr>;</condition> <incr><expr><name>rsa_msgsize</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <name>rsa_msgsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_encrypt_key</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><name>prng_idx</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOULD_FAIL</name><argument_list>(<argument><expr><call><name>rsa_decrypt_key</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>!=</operator> <name>rsa_msgsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n%i:rsa_decrypt_key mismatch len %lu (first decrypt)"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len2</name> <operator>=</operator> <name>rsa_msgsize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_decrypt_key</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>stat</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>stat2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_decrypt_key (without lparam) failed (rsa_msgsize = %lu)"</literal></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n stat: %i stat2: %i"</literal></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>stat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>!=</operator> <name>rsa_msgsize</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nrsa_decrypt_key mismatch, len %lu (second decrypt)\n"</literal></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"Original"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"Output"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>rsa_msgsize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>rsa_msgsize</name> <operator>&lt;=</operator> <literal type="number">86</literal></expr>;</condition> <incr><expr><name>rsa_msgsize</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <name>rsa_msgsize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_encrypt_key</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>lparam</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lparam</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><name>prng_idx</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHOULD_FAIL</name><argument_list>(<argument><expr><call><name>rsa_decrypt_key</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><name>lparam</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lparam</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>!=</operator> <name>rsa_msgsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n%i:rsa_decrypt_key mismatch len %lu (first decrypt)"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len2</name> <operator>=</operator> <name>rsa_msgsize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_decrypt_key</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><name>lparam</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lparam</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>stat</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>stat2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_decrypt_key (with lparam) failed (rsa_msgsize = %lu)"</literal></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>!=</operator> <name>rsa_msgsize</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_decrypt_key mismatch len %lu"</literal></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"Original"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"Output"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>rsa_msgsize</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>rsa_msgsize</name> <operator>&lt;=</operator> <literal type="number">117</literal></expr>;</condition> <incr><expr><name>rsa_msgsize</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <name>rsa_msgsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_encrypt_key_ex</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><name>prng_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_PKCS_1_V1_5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len2</name> <operator>=</operator> <name>rsa_msgsize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_decrypt_key_ex</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_PKCS_1_V1_5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>stat</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_decrypt_key_ex failed, %d, %d"</literal></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>stat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len2</name> <operator>!=</operator> <name>rsa_msgsize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_decrypt_key_ex mismatch len %lu"</literal></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_decrypt_key_ex mismatch data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"Original"</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"Output"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>rsa_msgsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_sign_hash</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><name>prng_idx</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len2</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><name>PK_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dbg_malloc_stats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_shrink_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbg_malloc_stats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_shrink_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbg_malloc_stats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_shrink_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dbg_malloc_stats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>stat</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>stat2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_verify_hash (unsalted, origKey) failed, %d, %d"</literal></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>stat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>stat</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>stat2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_verify_hash (unsalted, privKey) failed, %d, %d"</literal></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>stat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><name>dP</name> <operator>=</operator> <name><name>privKey</name><operator>.</operator><name>dP</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>privKey</name><operator>.</operator><name>dP</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>stat</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>stat2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_verify_hash (unsalted, privKey) failed, %d, %d"</literal></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>stat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>privKey</name><operator>.</operator><name>dP</name></name> <operator>=</operator> <name>dP</name></expr>;</expr_stmt>



<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>stat</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>stat2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_verify_hash (unsalted, pubkey) failed, %d, %d"</literal></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>stat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_sign_hash</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><name>prng_idx</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>stat</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>stat2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_verify_hash (salted) failed, %d, %d"</literal></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>stat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_sign_hash_ex</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>LTC_PKCS_1_V1_5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><name>prng_idx</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash_ex</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>LTC_PKCS_1_V1_5</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_verify_hash_ex</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>LTC_PKCS_1_V1_5</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>stat</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>stat2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rsa_verify_hash_ex failed, %d, %d"</literal></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>stat2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

















<expr_stmt><expr><name>p</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p3</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_sign_hash_ex</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><name>LTC_PKCS_1_V1_5</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><name>prng_idx</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><call><name>rsa_verify_hash_ex</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>LTC_PKCS_1_V1_5</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"should succeed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><ternary><condition><expr><name>stat</name> <operator>==</operator> <literal type="number">1</literal></expr>?</condition><then><expr><name>CRYPT_OK</name></expr></then><else>:<expr><name>CRYPT_FAIL_TESTVECTOR</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"should succeed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len3</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name><name>ltc_mp</name><operator>.</operator><name>rsa_me</name></name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len3</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LTC_TEST_DBG</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"Original signature"</literal></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>len3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name>len3</name></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p3</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>cnt2</name> <operator>=</operator> <name>cnt</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>cnt2</name> <operator>&lt;</operator> <name>len3</name></expr>;</condition> <incr><expr><operator>++</operator><name>cnt2</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>p3</name><index>[<expr><name>cnt2</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
<break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p3</name><index>[<expr><name>cnt</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p3</name><index>[<expr><name>cnt2</name></expr>]</index></name></expr></argument>, <argument><expr><name>len3</name><operator>-</operator><name>cnt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cnt</name> <operator>=</operator> <name>cnt</name> <operator>+</operator> <name>len3</name><operator>-</operator><name>cnt2</name><operator>+</operator><name>i</name></expr>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>cnt</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>p3</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LTC_TEST_DBG</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
<expr_stmt><expr><call><name>print_hex</name><argument_list>(<argument><expr><literal type="string">"Forged signature"</literal></expr></argument>, <argument><expr><name>p3</name></expr></argument>, <argument><expr><name>len3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>len2</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name><name>ltc_mp</name><operator>.</operator><name>rsa_me</name></name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>len3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len2</name></expr></argument>, <argument><expr><name>PK_PRIVATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len3</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SHOULD_FAIL</name><argument_list>(<argument><expr><call><name>rsa_verify_hash_ex</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><name>len2</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>LTC_PKCS_1_V1_5</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DOX</name><argument_list>(<argument><expr><ternary><condition><expr><name>stat</name> <operator>==</operator> <literal type="number">0</literal></expr>?</condition><then><expr><name>CRYPT_OK</name></expr></then><else>:<expr><name>CRYPT_FAIL_TESTVECTOR</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"should fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>len3</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_decode</name><argument_list>(<argument><expr><name>x509_public_rsa</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x509_public_rsa</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import_x509</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_export</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>openssl_public_rsa_stripped</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>openssl_public_rsa_stripped</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"RSA public export failed to match rsa_import_x509\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len3</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>base64_decode</name><argument_list>(<argument><expr><name>_der_tests_cacert_root_cert</name></expr></argument>, <argument><expr><name>_der_tests_cacert_root_cert_size</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DO</name><argument_list>(<argument><expr><call><name>rsa_import_x509</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>privKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>int</name></type> <name>rsa_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
