<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\headers\tomcrypt_cipher.h">













<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLOWFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>blowfish_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>K</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>rc5_key</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rounds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>K</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>rc6_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>K</name><index>[<expr><literal type="number">44</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFERP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>saferp_key</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>K</name><index>[<expr><literal type="number">33</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>rounds</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIJNDAEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>rijndael_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>eK</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dK</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Nr</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KSEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>kseed_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>K</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dK</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KASUMI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>kasumi_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>KLi1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>KLi2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>,
<decl><type ref="prev"/><name><name>KOi1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>KOi2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>KOi3</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>,
<decl><type ref="prev"/><name><name>KIi1</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>KIi2</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>KIi3</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XTEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>xtea_key</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>A</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>B</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>twofish_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>K</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct>struct <name>twofish_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>K</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>S</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>start</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_SAFER_K64_DEFAULT_NOF_ROUNDS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_SAFER_K128_DEFAULT_NOF_ROUNDS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_SAFER_SK64_DEFAULT_NOF_ROUNDS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_SAFER_SK128_DEFAULT_NOF_ROUNDS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_SAFER_MAX_NOF_ROUNDS</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_SAFER_BLOCK_LEN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_SAFER_KEY_LEN</name></cpp:macro> <cpp:value>(1 + LTC_SAFER_BLOCK_LEN * (1 + 2 * LTC_SAFER_MAX_NOF_ROUNDS))</cpp:value></cpp:define>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name><name>safer_block_t</name><index>[<expr><name>LTC_SAFER_BLOCK_LEN</name></expr>]</index></name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name><name>safer_key_t</name><index>[<expr><name>LTC_SAFER_KEY_LEN</name></expr>]</index></name>;</typedef>
<struct>struct <name>safer_key</name> <block>{ <decl_stmt><decl><type><name>safer_key_t</name></type> <name>key</name></decl>;</decl_stmt> }</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>rc2_key</name> <block>{ <decl_stmt><decl><type><name>unsigned</name></type> <name><name>xkey</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> }</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>des_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>ek</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dk</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>des3_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>ek</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dk</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAST5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>cast5_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>K</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>keylen</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NOEKEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>noekeon_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>K</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dK</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SKIPJACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>skipjack_key</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KHAZAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>khazad_key</name> <block>{
<decl_stmt><decl><type><name>ulong64</name></type> <name><name>roundKeyEnc</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name><name>roundKeyDec</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ANUBIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>anubis_key</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>keyBits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>roundKeyEnc</name><index>[<expr><literal type="number">18</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>roundKeyDec</name><index>[<expr><literal type="number">18</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MULTI2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>multi2_key</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>uk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAMELLIA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>camellia_key</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name><name>kw</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>k</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>kl</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_IDEA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_IDEA_ROUNDS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_IDEA_KEYLEN</name></cpp:macro> <cpp:value>6*LTC_IDEA_ROUNDS+4</cpp:value></cpp:define>
<struct>struct <name>idea_key</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>int</name></type> <name><name>ek</name><index>[<expr><name>LTC_IDEA_KEYLEN</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <name>int</name></type> <name><name>dk</name><index>[<expr><name>LTC_IDEA_KEYLEN</name></expr>]</index></name></decl>;</decl_stmt> 
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SERPENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>serpent_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>k</name><index>[<expr><literal type="number">33</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<struct>struct <name>tea_key</name> <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>k</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><union>union <name>Symmetric_key</name> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>des_key</name></name></type> <name>des</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>des3_key</name></name></type> <name>des3</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>rc2_key</name></name></type> <name>rc2</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>safer_key</name></name></type> <name>safer</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>twofish_key</name></name></type> <name>twofish</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLOWFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>blowfish_key</name></name></type> <name>blowfish</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>rc5_key</name></name></type> <name>rc5</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>rc6_key</name></name></type> <name>rc6</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFERP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>saferp_key</name></name></type> <name>saferp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIJNDAEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>rijndael_key</name></name></type> <name>rijndael</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XTEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>xtea_key</name></name></type> <name>xtea</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAST5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>cast5_key</name></name></type> <name>cast5</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NOEKEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>noekeon_key</name></name></type> <name>noekeon</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SKIPJACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>skipjack_key</name></name></type> <name>skipjack</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KHAZAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>khazad_key</name></name></type> <name>khazad</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ANUBIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>anubis_key</name></name></type> <name>anubis</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KSEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>kseed_key</name></name></type> <name>kseed</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KASUMI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>kasumi_key</name></name></type> <name>kasumi</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MULTI2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>multi2_key</name></name></type> <name>multi2</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAMELLIA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>camellia_key</name></name></type> <name>camellia</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_IDEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>idea_key</name></name></type> <name>idea</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SERPENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>serpent_key</name></name></type> <name>serpent</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name><name>struct</name> <name>tea_key</name></name></type> <name>tea</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block></union></type> <name>symmetric_key</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cipher</name></decl>,

<name>blocklen</name>;</decl_stmt>

<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>
}</block></struct></type> <name>symmetric_ECB</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CFB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cipher</name></decl>,

<name>blocklen</name>,

<name>padlen</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>IV</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>,

<name><name>pad</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>
}</block></struct></type> <name>symmetric_CFB</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OFB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cipher</name></decl>,

<name>blocklen</name>,

<name>padlen</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>IV</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>
}</block></struct></type> <name>symmetric_OFB</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CBC_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cipher</name></decl>,

<name>blocklen</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>IV</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>
}</block></struct></type> <name>symmetric_CBC</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CTR_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cipher</name></decl>,

<name>blocklen</name>,

<name>padlen</name>,

<name>mode</name>,

<name>ctrlen</name>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ctr</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>,

<name><name>pad</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>
}</block></struct></type> <name>symmetric_CTR</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_LRW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cipher</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>IV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>,


<name><name>tweak</name><index>[<expr><literal type="number">16</literal></expr>]</index></name>,


<name><name>pad</name><index>[<expr><literal type="number">16</literal></expr>]</index></name>;</decl_stmt>


<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_LRW_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>PC</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>symmetric_LRW</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F8_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cipher</name></decl>,

<name>blocklen</name>,

<name>padlen</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>IV</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>,
<name><name>MIV</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>ulong32</name></type> <name>blockcnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>
}</block></struct></type> <name>symmetric_F8</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<struct><specifier>extern</specifier> struct <name>ltc_cipher_descriptor</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_key_length</name></decl>,

<decl><type ref="prev"/><name>max_key_length</name></decl>,

<decl><type ref="prev"/><name>block_length</name></decl>,

<decl><type ref="prev"/><name>default_rounds</name></decl>;</decl_stmt>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>setup</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ecb_encrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ecb_decrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>



<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>test</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>




<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>done</name>)<parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>keysize</name>)<parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accel_ecb_encrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accel_ecb_decrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accel_cbc_encrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accel_cbc_decrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accel_ctr_encrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accel_lrw_encrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tweak</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accel_lrw_decrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tweak</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>

















<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accel_ccm_memory</name>)<parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>uskey</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>noncelen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>headerlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ptlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>taglen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>
















<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accel_gcm_memory</name>)<parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>IVlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>adata</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>adatalen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ptlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>taglen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>omac_memory</name>)<parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xcbc_memory</name>)<parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f9_memory</name>)<parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accel_xts_encrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tweak</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey2</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>accel_xts_decrypt</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tweak</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey2</name></decl></parameter>)</parameter_list>;</function_decl>
}</block> <decl><name><name>cipher_descriptor</name><index>[]</index></name></decl>;</struct>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLOWFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>blowfish_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blowfish_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blowfish_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blowfish_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>blowfish_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>blowfish_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>blowfish_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>rc5_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc5_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc5_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc5_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rc5_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc5_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>rc5_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>rc6_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc6_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc6_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc6_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rc6_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc6_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>rc6_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>rc2_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc2_setup_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc2_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc2_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc2_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rc2_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc2_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>rc2_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFERP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>saferp_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>saferp_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>saferp_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>saferp_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>saferp_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>saferp_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>saferp_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>safer_k64_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>safer_sk64_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>safer_k128_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>safer_sk128_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>safer_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>safer_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>safer_k64_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>safer_sk64_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>safer_sk128_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>safer_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>safer_64_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>safer_128_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>safer_k64_desc</name></decl>, <decl><type ref="prev"/><name>safer_k128_desc</name></decl>, <decl><type ref="prev"/><name>safer_sk64_desc</name></decl>, <decl><type ref="prev"/><name>safer_sk128_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIJNDAEL</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aes_setup</name></cpp:macro> <cpp:value>rijndael_setup</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aes_ecb_encrypt</name></cpp:macro> <cpp:value>rijndael_ecb_encrypt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aes_ecb_decrypt</name></cpp:macro> <cpp:value>rijndael_ecb_decrypt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aes_test</name></cpp:macro> <cpp:value>rijndael_test</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aes_done</name></cpp:macro> <cpp:value>rijndael_done</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aes_keysize</name></cpp:macro> <cpp:value>rijndael_keysize</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aes_enc_setup</name></cpp:macro> <cpp:value>rijndael_enc_setup</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aes_enc_ecb_encrypt</name></cpp:macro> <cpp:value>rijndael_enc_ecb_encrypt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>aes_enc_keysize</name></cpp:macro> <cpp:value>rijndael_enc_keysize</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>rijndael_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rijndael_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rijndael_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rijndael_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rijndael_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rijndael_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rijndael_enc_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rijndael_enc_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>rijndael_enc_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rijndael_enc_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>rijndael_desc</name></decl>, <decl><type ref="prev"/><name>aes_desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>rijndael_enc_desc</name></decl>, <decl><type ref="prev"/><name>aes_enc_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XTEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>xtea_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>xtea_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>xtea_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>xtea_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xtea_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>xtea_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>xtea_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>twofish_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>twofish_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>twofish_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>twofish_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>twofish_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>twofish_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>twofish_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>des_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>des_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>des_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>des_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>des_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>des_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>des3_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>des3_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>des3_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>des3_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>des3_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>des3_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>des_desc</name></decl>, <decl><type ref="prev"/><name>des3_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAST5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>cast5_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cast5_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cast5_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cast5_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>cast5_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cast5_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>cast5_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NOEKEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>noekeon_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>noekeon_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>noekeon_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>noekeon_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>noekeon_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>noekeon_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>noekeon_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SKIPJACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>skipjack_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>skipjack_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>skipjack_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>skipjack_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>skipjack_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>skipjack_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>skipjack_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KHAZAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>khazad_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>khazad_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>khazad_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>khazad_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>khazad_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>khazad_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>khazad_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ANUBIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>anubis_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>anubis_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>anubis_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>anubis_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>anubis_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>anubis_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>anubis_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KSEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>kseed_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kseed_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kseed_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kseed_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>kseed_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kseed_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>kseed_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KASUMI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>kasumi_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kasumi_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kasumi_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kasumi_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>kasumi_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>kasumi_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>kasumi_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MULTI2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>multi2_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>multi2_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>multi2_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>multi2_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>multi2_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>multi2_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>multi2_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAMELLIA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>camellia_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>camellia_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>camellia_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>camellia_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>camellia_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>camellia_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>camellia_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_IDEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>idea_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>idea_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>idea_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>idea_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>idea_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>idea_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>idea_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SERPENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>serpent_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>serpent_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>serpent_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>serpent_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>serpent_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>serpent_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>serpent_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>tea_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tea_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tea_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tea_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>tea_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>tea_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>tea_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>ecb_start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_ECB</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_ECB</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_ECB</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ecb_done</name><parameter_list>(<parameter><decl><type><name>symmetric_ECB</name> <modifier>*</modifier></type><name>ecb</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CFB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>cfb_start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_CFB</name> <modifier>*</modifier></type><name>cfb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cfb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_CFB</name> <modifier>*</modifier></type><name>cfb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cfb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_CFB</name> <modifier>*</modifier></type><name>cfb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cfb_getiv</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_CFB</name> <modifier>*</modifier></type><name>cfb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cfb_setiv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_CFB</name> <modifier>*</modifier></type><name>cfb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cfb_done</name><parameter_list>(<parameter><decl><type><name>symmetric_CFB</name> <modifier>*</modifier></type><name>cfb</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OFB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>ofb_start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_OFB</name> <modifier>*</modifier></type><name>ofb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ofb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_OFB</name> <modifier>*</modifier></type><name>ofb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ofb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_OFB</name> <modifier>*</modifier></type><name>ofb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ofb_getiv</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_OFB</name> <modifier>*</modifier></type><name>ofb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ofb_setiv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_OFB</name> <modifier>*</modifier></type><name>ofb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ofb_done</name><parameter_list>(<parameter><decl><type><name>symmetric_OFB</name> <modifier>*</modifier></type><name>ofb</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CBC_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>cbc_start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_CBC</name> <modifier>*</modifier></type><name>cbc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cbc_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_CBC</name> <modifier>*</modifier></type><name>cbc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cbc_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_CBC</name> <modifier>*</modifier></type><name>cbc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cbc_getiv</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_CBC</name> <modifier>*</modifier></type><name>cbc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cbc_setiv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_CBC</name> <modifier>*</modifier></type><name>cbc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cbc_done</name><parameter_list>(<parameter><decl><type><name>symmetric_CBC</name> <modifier>*</modifier></type><name>cbc</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CTR_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTR_COUNTER_LITTLE_ENDIAN</name></cpp:macro> <cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CTR_COUNTER_BIG_ENDIAN</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_CTR_RFC3686</name></cpp:macro> <cpp:value>0x2000</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>ctr_start</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctr_mode</name></decl></parameter>,
<parameter><decl><type><name>symmetric_CTR</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ctr_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_CTR</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ctr_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_CTR</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ctr_getiv</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_CTR</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ctr_setiv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_CTR</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ctr_done</name><parameter_list>(<parameter><decl><type><name>symmetric_CTR</name> <modifier>*</modifier></type><name>ctr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>ctr_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_LRW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LRW_ENCRYPT</name></cpp:macro> <cpp:value>LTC_ENCRYPT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LRW_DECRYPT</name></cpp:macro> <cpp:value>LTC_DECRYPT</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>lrw_start</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tweak</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>,
<parameter><decl><type><name>symmetric_LRW</name> <modifier>*</modifier></type><name>lrw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>lrw_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_LRW</name> <modifier>*</modifier></type><name>lrw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>lrw_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_LRW</name> <modifier>*</modifier></type><name>lrw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>lrw_getiv</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_LRW</name> <modifier>*</modifier></type><name>lrw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>lrw_setiv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_LRW</name> <modifier>*</modifier></type><name>lrw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>lrw_done</name><parameter_list>(<parameter><decl><type><name>symmetric_LRW</name> <modifier>*</modifier></type><name>lrw</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>lrw_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><name>int</name></type> <name>lrw_process</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>symmetric_LRW</name> <modifier>*</modifier></type><name>lrw</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F8_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>f8_start</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skeylen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_F8</name> <modifier>*</modifier></type><name>f8</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>f8_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_F8</name> <modifier>*</modifier></type><name>f8</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>f8_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_F8</name> <modifier>*</modifier></type><name>f8</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>f8_getiv</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_F8</name> <modifier>*</modifier></type><name>f8</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>f8_setiv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_F8</name> <modifier>*</modifier></type><name>f8</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>f8_done</name><parameter_list>(<parameter><decl><type><name>symmetric_F8</name> <modifier>*</modifier></type><name>f8</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>f8_test_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XTS_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key1</name></decl>, <name>key2</name>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cipher</name></decl>;</decl_stmt>
}</block></struct></type> <name>symmetric_xts</name>;</typedef>

<function_decl><type><name>int</name></type> <name>xts_start</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>,
<parameter><decl><type><name>symmetric_xts</name> <modifier>*</modifier></type><name>xts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>xts_encrypt</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ptlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tweak</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>symmetric_xts</name> <modifier>*</modifier></type><name>xts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>xts_decrypt</name><parameter_list>(
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ptlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tweak</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>symmetric_xts</name> <modifier>*</modifier></type><name>xts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>xts_done</name><parameter_list>(<parameter><decl><type><name>symmetric_xts</name> <modifier>*</modifier></type><name>xts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>xts_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>xts_mult_x</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>I</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>find_cipher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>find_cipher_any</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocklen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>find_cipher_id</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>ID</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>register_cipher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name> <modifier>*</modifier></type><name>cipher</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>unregister_cipher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name> <modifier>*</modifier></type><name>cipher</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>register_all_ciphers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>cipher_is_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>LTC_MUTEX_PROTO</name><argument_list>(<argument>ltc_cipher_mutex</argument>)</argument_list></macro>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>input</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kstream</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ksleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rounds</name></decl>;</decl_stmt>
}</block></struct></type> <name>chacha_state</name>;</typedef>

<function_decl><type><name>int</name></type> <name>chacha_setup</name><parameter_list>(<parameter><decl><type><name>chacha_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>chacha_ivctr32</name><parameter_list>(<parameter><decl><type><name>chacha_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl></parameter>, <parameter><decl><type><name>ulong32</name></type> <name>counter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>chacha_ivctr64</name><parameter_list>(<parameter><decl><type><name>chacha_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl></parameter>, <parameter><decl><type><name>ulong64</name></type> <name>counter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>chacha_crypt</name><parameter_list>(<parameter><decl><type><name>chacha_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>chacha_keystream</name><parameter_list>(<parameter><decl><type><name>chacha_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>chacha_done</name><parameter_list>(<parameter><decl><type><name>chacha_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>chacha_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>chacha_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>rounds</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl></parameter>, <parameter><decl><type><name>ulong64</name></type> <name>counter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>datain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dataout</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SALSA20</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>input</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kstream</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ksleft</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rounds</name></decl>;</decl_stmt>
}</block></struct></type> <name>salsa20_state</name>;</typedef>

<function_decl><type><name>int</name></type> <name>salsa20_setup</name><parameter_list>(<parameter><decl><type><name>salsa20_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>salsa20_ivctr64</name><parameter_list>(<parameter><decl><type><name>salsa20_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl></parameter>, <parameter><decl><type><name>ulong64</name></type> <name>counter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>salsa20_crypt</name><parameter_list>(<parameter><decl><type><name>salsa20_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>salsa20_keystream</name><parameter_list>(<parameter><decl><type><name>salsa20_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>salsa20_done</name><parameter_list>(<parameter><decl><type><name>salsa20_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>salsa20_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>salsa20_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>rounds</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl></parameter>, <parameter><decl><type><name>ulong64</name></type> <name>counter</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>datain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dataout</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XSALSA20</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>int</name></type> <name>xsalsa20_setup</name><parameter_list>(<parameter><decl><type><name>salsa20_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>noncelen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>rounds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>xsalsa20_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>xsalsa20_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>rounds</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>noncelen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>datain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dataout</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOSEMANUK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>kc</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ulong32</name></type> <name>s00</name></decl>, <name>s01</name>, <name>s02</name>, <name>s03</name>, <name>s04</name>, <name>s05</name>, <name>s06</name>, <name>s07</name>, <name>s08</name>, <name>s09</name>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>r1</name></decl>, <name>r2</name>;</decl_stmt>





<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>ptr</name></decl>;</decl_stmt>
}</block></struct></type> <name>sosemanuk_state</name>;</typedef>

<function_decl><type><name>int</name></type> <name>sosemanuk_setup</name><parameter_list>(<parameter><decl><type><name>sosemanuk_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sosemanuk_setiv</name><parameter_list>(<parameter><decl><type><name>sosemanuk_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sosemanuk_crypt</name><parameter_list>(<parameter><decl><type><name>sosemanuk_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sosemanuk_keystream</name><parameter_list>(<parameter><decl><type><name>sosemanuk_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sosemanuk_done</name><parameter_list>(<parameter><decl><type><name>sosemanuk_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sosemanuk_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sosemanuk_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>datain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>datalen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dataout</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RABBIT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>x</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>carry</name></decl>;</decl_stmt>
}</block></struct></type> <name>rabbit_ctx</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>rabbit_ctx</name></type> <name>master_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rabbit_ctx</name></type> <name>work_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ulong32</name></type> <name>unused</name></decl>;</decl_stmt> 
}</block></struct></type> <name>rabbit_state</name>;</typedef>

<function_decl><type><name>int</name></type> <name>rabbit_setup</name><parameter_list>(<parameter><decl><type><name>rabbit_state</name><modifier>*</modifier></type> <name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rabbit_setiv</name><parameter_list>(<parameter><decl><type><name>rabbit_state</name><modifier>*</modifier></type> <name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rabbit_crypt</name><parameter_list>(<parameter><decl><type><name>rabbit_state</name><modifier>*</modifier></type> <name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rabbit_keystream</name><parameter_list>(<parameter><decl><type><name>rabbit_state</name><modifier>*</modifier></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rabbit_done</name><parameter_list>(<parameter><decl><type><name>rabbit_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rabbit_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rabbit_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>datain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>datalen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dataout</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC4_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <name>y</name>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>rc4_state</name>;</typedef>

<function_decl><type><name>int</name></type> <name>rc4_stream_setup</name><parameter_list>(<parameter><decl><type><name>rc4_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc4_stream_crypt</name><parameter_list>(<parameter><decl><type><name>rc4_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc4_stream_keystream</name><parameter_list>(<parameter><decl><type><name>rc4_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc4_stream_done</name><parameter_list>(<parameter><decl><type><name>rc4_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc4_stream_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>rc4_stream_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>datain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>datalen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dataout</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOBER128_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>R</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>, 
<name><name>initR</name><index>[<expr><literal type="number">17</literal></expr>]</index></name>, 
<name>konst</name>, 
<name>sbuf</name>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nbuf</name></decl>;</decl_stmt> 
}</block></struct></type> <name>sober128_state</name>;</typedef>

<function_decl><type><name>int</name></type> <name>sober128_stream_setup</name><parameter_list>(<parameter><decl><type><name>sober128_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sober128_stream_setiv</name><parameter_list>(<parameter><decl><type><name>sober128_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sober128_stream_crypt</name><parameter_list>(<parameter><decl><type><name>sober128_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sober128_stream_keystream</name><parameter_list>(<parameter><decl><type><name>sober128_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sober128_stream_done</name><parameter_list>(<parameter><decl><type><name>sober128_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sober128_stream_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sober128_stream_memory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>datain</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>datalen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dataout</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




</unit>
