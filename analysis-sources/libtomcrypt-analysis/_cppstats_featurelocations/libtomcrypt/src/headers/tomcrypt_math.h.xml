<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\headers\tomcrypt_math.h">










<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_MP_LT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_MP_EQ</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_MP_GT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_MP_NO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_MP_YES</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>void</name></type> <name>ecc_point</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MRSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>void</name></type> <name>rsa_key</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MILLER_RABIN_REPS</name></expr></argument>)</argument_list></call></expr></cpp:if>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_MILLER_RABIN_REPS</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>radix_to_bin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>;</function_decl>


<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>bits_per_digit</name></decl>;</decl_stmt>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>init_copy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>deinit</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>neg</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>copy</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>set_int</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>unsigned</name> <name>long</name></type> (<modifier>*</modifier><name>get_int</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>ltc_mp_digit</name></type> (<modifier>*</modifier><name>get_digit</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>get_digit_count</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compare</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>compare_d</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>count_bits</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>a</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>count_lsb_bits</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>twoexpt</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>read_radix</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>write_radix</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>unsigned</name> <name>long</name></type> (<modifier>*</modifier><name>unsigned_size</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>unsigned_write</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>unsigned_read</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>add</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>addi</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sub</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>subi</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mul</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>muli</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sqr</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sqrtmod_prime</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mpdiv</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>div_2</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>modi</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>gcd</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>lcm</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mulmod</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sqrmod</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>invmod</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>montgomery_setup</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>






<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>montgomery_normalization</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>montgomery_reduce</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>





<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>montgomery_deinit</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>exptmod</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>







<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>isprime</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>;</function_decl>













<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ecc_ptmul</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>k</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>G</name></decl></parameter>,
<parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>map</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ecc_ptadd</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>P</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>Q</name></decl></parameter>,
<parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ma</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>;</function_decl>









<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ecc_ptdbl</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>P</name></decl></parameter>,
<parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>R</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ma</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ecc_map</name>)<parameter_list>(<parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ecc_mul2add</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kA</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kB</name></decl></parameter>,
<parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>C</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ma</name></decl></parameter>,
<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>)</parameter_list>;</function_decl>












<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rsa_keygen</name>)<parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>,
<parameter><decl><type><name>long</name></type> <name>e</name></decl></parameter>,
<parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>











<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rsa_me</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>










<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>addmod</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>submod</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>;</function_decl>








<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>rand</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>ltc_math_descriptor</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ltc_math_descriptor</name></type> <name>ltc_mp</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>ltc_init_multi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ltc_deinit_multi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ltc_cleanup_multi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>ltc_math_descriptor</name></type> <name>ltm_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TFM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>ltc_math_descriptor</name></type> <name>tfm_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GMP_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>ltc_math_descriptor</name></type> <name>gmp_desc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
