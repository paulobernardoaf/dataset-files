<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\ciphers\serpent.c">
















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SERPENT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>serpent_desc</name> <init>= <expr><block>{
<expr><literal type="string">"serpent"</literal></expr>,
<expr><literal type="number">25</literal></expr>, 
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, 
<expr><operator>&amp;</operator><name>serpent_setup</name></expr>,
<expr><operator>&amp;</operator><name>serpent_ecb_encrypt</name></expr>,
<expr><operator>&amp;</operator><name>serpent_ecb_decrypt</name></expr>,
<expr><operator>&amp;</operator><name>serpent_test</name></expr>,
<expr><operator>&amp;</operator><name>serpent_done</name></expr>,
<expr><operator>&amp;</operator><name>serpent_keysize</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LT</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ a = ROLc(a, 13); c = ROLc(c, 3); d = ROLc(d ^ c ^ (a &lt;&lt; 3), 7); b = ROLc(b ^ a ^ c, 1); a = ROLc(a ^ b ^ d, 5); c = ROLc(c ^ d ^ (b &lt;&lt; 7), 22); }</cpp:value></cpp:define>









<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_ILT</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ c = RORc(c, 22); a = RORc(a, 5); c ^= d ^ (b &lt;&lt; 7); a ^= b ^ d; b = RORc(b, 1); d = RORc(d, 7) ^ c ^ (a &lt;&lt; 3); b ^= a ^ c; c = RORc(c, 3); a = RORc(a, 13); }</cpp:value></cpp:define>












<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_beforeS0</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(0,a,b,c,d,e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterS0</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(1,b,e,c,a,d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterS1</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(2,c,b,a,e,d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterS2</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(3,a,e,b,d,c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterS3</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(4,e,b,d,c,a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterS4</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(5,b,a,e,c,d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterS5</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(6,a,c,b,e,d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterS6</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(7,a,c,d,b,e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterS7</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(8,d,e,b,a,c)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_beforeI7</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(8,a,b,c,d,e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterI7</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(7,d,a,b,e,c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterI6</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(6,a,b,c,e,d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterI5</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(5,b,d,e,c,a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterI4</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(4,b,c,e,a,d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterI3</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(3,a,b,e,c,d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterI2</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(2,b,d,e,c,a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterI1</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(1,a,b,c,e,d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_afterI0</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>f(0,a,d,b,e,c)</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r3 ^= r0; r4 = r1; r1 &amp;= r3; r4 ^= r2; r1 ^= r0; r0 |= r3; r0 ^= r4; r4 ^= r3; r3 ^= r2; r2 |= r1; r2 ^= r4; r4 = ~r4; r4 |= r1; r1 ^= r3; r1 ^= r4; r3 |= r0; r1 ^= r3; r4 ^= r3; }</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_I0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r2 = ~r2; r4 = r1; r1 |= r0; r4 = ~r4; r1 ^= r2; r2 |= r4; r1 ^= r3; r0 ^= r4; r2 ^= r0; r0 &amp;= r3; r4 ^= r0; r0 |= r1; r0 ^= r2; r3 ^= r4; r2 ^= r1; r3 ^= r0; r3 ^= r1; r2 &amp;= r3; r4 ^= r2; }</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r0 = ~r0; r2 = ~r2; r4 = r0; r0 &amp;= r1; r2 ^= r0; r0 |= r3; r3 ^= r2; r1 ^= r0; r0 ^= r4; r4 |= r1; r1 ^= r3; r2 |= r0; r2 &amp;= r4; r0 ^= r1; r1 &amp;= r2; r1 ^= r0; r0 &amp;= r2; r0 ^= r4; }</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_I1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r4 = r1; r1 ^= r3; r3 &amp;= r1; r4 ^= r2; r3 ^= r0; r0 |= r1; r2 ^= r3; r0 ^= r4; r0 |= r2; r1 ^= r3; r0 ^= r1; r1 |= r3; r1 ^= r0; r4 = ~r4; r4 ^= r1; r1 |= r0; r1 ^= r0; r1 |= r4; r3 ^= r1; }</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r4 = r0; r0 &amp;= r2; r0 ^= r3; r2 ^= r1; r2 ^= r0; r3 |= r4; r3 ^= r1; r4 ^= r2; r1 = r3; r3 |= r4; r3 ^= r0; r0 &amp;= r1; r4 ^= r0; r1 ^= r3; r1 ^= r4; r4 = ~r4; }</cpp:value></cpp:define>


















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_I2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r2 ^= r3; r3 ^= r0; r4 = r3; r3 &amp;= r2; r3 ^= r1; r1 |= r2; r1 ^= r4; r4 &amp;= r3; r2 ^= r3; r4 &amp;= r0; r4 ^= r2; r2 &amp;= r1; r2 |= r0; r3 = ~r3; r2 ^= r3; r0 ^= r3; r0 &amp;= r1; r3 ^= r4; r3 ^= r0; }</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S3</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r4 = r0; r0 |= r3; r3 ^= r1; r1 &amp;= r4; r4 ^= r2; r2 ^= r3; r3 &amp;= r0; r4 |= r1; r3 ^= r4; r0 ^= r1; r4 &amp;= r0; r1 ^= r3; r4 ^= r2; r1 |= r0; r1 ^= r2; r0 ^= r3; r2 = r1; r1 |= r3; r1 ^= r0; }</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_I3</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r4 = r2; r2 ^= r1; r1 &amp;= r2; r1 ^= r0; r0 &amp;= r4; r4 ^= r3; r3 |= r1; r3 ^= r2; r0 ^= r4; r2 ^= r0; r0 |= r3; r0 ^= r1; r4 ^= r2; r2 &amp;= r3; r1 |= r3; r1 ^= r2; r4 ^= r0; r2 ^= r4; }</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S4</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r1 ^= r3; r3 = ~r3; r2 ^= r3; r3 ^= r0; r4 = r1; r1 &amp;= r3; r1 ^= r2; r4 ^= r3; r0 ^= r4; r2 &amp;= r4; r2 ^= r0; r0 &amp;= r1; r3 ^= r0; r4 |= r1; r4 ^= r0; r0 |= r3; r0 ^= r2; r2 &amp;= r3; r0 = ~r0; r4 ^= r2; }</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_I4</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r4 = r2; r2 &amp;= r3; r2 ^= r1; r1 |= r3; r1 &amp;= r0; r4 ^= r2; r4 ^= r1; r1 &amp;= r2; r0 = ~r0; r3 ^= r4; r1 ^= r3; r3 &amp;= r0; r3 ^= r2; r0 ^= r1; r2 &amp;= r0; r3 ^= r0; r2 ^= r4; r2 |= r3; r3 ^= r0; r2 ^= r1; }</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S5</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r0 ^= r1; r1 ^= r3; r3 = ~r3; r4 = r1; r1 &amp;= r0; r2 ^= r3; r1 ^= r2; r2 |= r4; r4 ^= r3; r3 &amp;= r1; r3 ^= r0; r4 ^= r1; r4 ^= r2; r2 ^= r0; r0 &amp;= r3; r2 = ~r2; r0 ^= r4; r4 |= r3; r2 ^= r4; }</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_I5</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r1 = ~r1; r4 = r3; r2 ^= r1; r3 |= r0; r3 ^= r2; r2 |= r1; r2 &amp;= r0; r4 ^= r3; r2 ^= r4; r4 |= r0; r4 ^= r1; r1 &amp;= r2; r1 ^= r3; r4 ^= r2; r3 &amp;= r4; r4 ^= r1; r3 ^= r0; r3 ^= r4; r4 = ~r4; }</cpp:value></cpp:define>





















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S6</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r2 = ~r2; r4 = r3; r3 &amp;= r0; r0 ^= r4; r3 ^= r2; r2 |= r4; r1 ^= r3; r2 ^= r0; r0 |= r1; r2 ^= r1; r4 ^= r0; r0 |= r3; r0 ^= r2; r4 ^= r3; r4 ^= r0; r3 = ~r3; r2 &amp;= r4; r2 ^= r3; }</cpp:value></cpp:define>




















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_I6</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r0 ^= r2; r4 = r2; r2 &amp;= r0; r4 ^= r3; r2 = ~r2; r3 ^= r1; r2 ^= r3; r4 |= r0; r0 ^= r2; r3 ^= r4; r4 ^= r1; r1 &amp;= r3; r1 ^= r0; r0 ^= r3; r0 |= r2; r3 ^= r1; r4 ^= r0; }</cpp:value></cpp:define>



















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_S7</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r4 = r2; r2 &amp;= r1; r2 ^= r3; r3 &amp;= r1; r4 ^= r2; r2 ^= r1; r1 ^= r0; r0 |= r4; r0 ^= r2; r3 ^= r1; r2 ^= r3; r3 &amp;= r0; r3 ^= r4; r4 ^= r2; r2 &amp;= r0; r4 = ~r4; r2 ^= r4; r4 &amp;= r0; r1 ^= r3; r4 ^= r1; }</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_I7</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r0</name></type></parameter>, <parameter><type><name>r1</name></type></parameter>, <parameter><type><name>r2</name></type></parameter>, <parameter><type><name>r3</name></type></parameter>, <parameter><type><name>r4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ r4 = r2; r2 ^= r0; r0 &amp;= r3; r2 = ~r2; r4 |= r3; r3 ^= r1; r1 |= r0; r0 ^= r2; r2 &amp;= r4; r1 ^= r2; r2 ^= r0; r0 |= r2; r3 &amp;= r4; r0 ^= r3; r4 ^= r1; r3 ^= r4; r4 |= r0; r3 ^= r2; r4 ^= r2; }</cpp:value></cpp:define>






















<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_KX</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ a ^= k[4 * r + 0]; b ^= k[4 * r + 1]; c ^= k[4 * r + 2]; d ^= k[4 * r + 3]; }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LK</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ a = k[(8-r)*4 + 0]; b = k[(8-r)*4 + 1]; c = k[(8-r)*4 + 2]; d = k[(8-r)*4 + 3]; }</cpp:value></cpp:define>






<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SK</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ k[(8-r)*4 + 4] = a; k[(8-r)*4 + 5] = b; k[(8-r)*4 + 6] = c; k[(8-r)*4 + 7] = d; }</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>int</name></type> <name>_setup_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounds</name></decl></parameter>, <parameter><decl><type><name>ulong32</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>k0</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ulong32</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>keylen</name><operator>/</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>k0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>k0</name><index>[<expr><name>keylen</name><operator>/</operator><literal type="number">4</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>keylen</name><operator>%</operator><literal type="number">4</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>k0</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>k0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>k0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>k0</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>%</operator><literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name><name>k0</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">5</literal><operator>)</operator><operator>%</operator><literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name>t</name> <operator>^</operator> <literal type="number">0x9e3779b9</literal> <operator>^</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><name>rounds</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>k</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name><name>k</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>k</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name>t</name> <operator>^</operator> <literal type="number">0x9e3779b9</literal> <operator>^</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name><operator>/</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>_afterS2</name><argument_list>(<argument><expr><name>_LK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS2</name><argument_list>(<argument><expr><name>_S3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS3</name><argument_list>(<argument><expr><name>_SK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS1</name><argument_list>(<argument><expr><name>_LK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS1</name><argument_list>(<argument><expr><name>_S2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS2</name><argument_list>(<argument><expr><name>_SK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS0</name><argument_list>(<argument><expr><name>_LK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS0</name><argument_list>(<argument><expr><name>_S1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS1</name><argument_list>(<argument><expr><name>_SK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_beforeS0</name><argument_list>(<argument><expr><name>_LK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_beforeS0</name><argument_list>(<argument><expr><name>_S0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS0</name><argument_list>(<argument><expr><name>_SK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">8</literal><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS6</name><argument_list>(<argument><expr><name>_LK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS6</name><argument_list>(<argument><expr><name>_S7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS7</name><argument_list>(<argument><expr><name>_SK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS5</name><argument_list>(<argument><expr><name>_LK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS5</name><argument_list>(<argument><expr><name>_S6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS6</name><argument_list>(<argument><expr><name>_SK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS4</name><argument_list>(<argument><expr><name>_LK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS4</name><argument_list>(<argument><expr><name>_S5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS5</name><argument_list>(<argument><expr><name>_SK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS3</name><argument_list>(<argument><expr><name>_LK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS3</name><argument_list>(<argument><expr><name>_S4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS4</name><argument_list>(<argument><expr><name>_SK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>_afterS2</name><argument_list>(<argument><expr><name>_LK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS2</name><argument_list>(<argument><expr><name>_S3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS3</name><argument_list>(<argument><expr><name>_SK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_enc_block</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>
<expr_stmt><expr><call><name>_beforeS0</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_beforeS0</name><argument_list>(<argument><expr><name>_S0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS0</name><argument_list>(<argument><expr><name>_LT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS0</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS0</name><argument_list>(<argument><expr><name>_S1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS1</name><argument_list>(<argument><expr><name>_LT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS1</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS1</name><argument_list>(<argument><expr><name>_S2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS2</name><argument_list>(<argument><expr><name>_LT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS2</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS2</name><argument_list>(<argument><expr><name>_S3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS3</name><argument_list>(<argument><expr><name>_LT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS3</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS3</name><argument_list>(<argument><expr><name>_S4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS4</name><argument_list>(<argument><expr><name>_LT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS4</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS4</name><argument_list>(<argument><expr><name>_S5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS5</name><argument_list>(<argument><expr><name>_LT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS5</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS5</name><argument_list>(<argument><expr><name>_S6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS6</name><argument_list>(<argument><expr><name>_LT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterS6</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterS6</name><argument_list>(<argument><expr><name>_S7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_beforeS0</name><argument_list>(<argument><expr><name>_LT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>_afterS7</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_dec_block</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">96</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_beforeI7</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>start</name>;</goto>

<do>do <block>{<block_content>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_beforeI7</name><argument_list>(<argument><expr><name>_ILT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>start</name>:</label>
<expr_stmt><expr><call><name>_beforeI7</name><argument_list>(<argument><expr><name>_I7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI7</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterI7</name><argument_list>(<argument><expr><name>_ILT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI7</name><argument_list>(<argument><expr><name>_I6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI6</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterI6</name><argument_list>(<argument><expr><name>_ILT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI6</name><argument_list>(<argument><expr><name>_I5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI5</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterI5</name><argument_list>(<argument><expr><name>_ILT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI5</name><argument_list>(<argument><expr><name>_I4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI4</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterI4</name><argument_list>(<argument><expr><name>_ILT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI4</name><argument_list>(<argument><expr><name>_I3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI3</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterI3</name><argument_list>(<argument><expr><name>_ILT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI3</name><argument_list>(<argument><expr><name>_I2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI2</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterI2</name><argument_list>(<argument><expr><name>_ILT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI2</name><argument_list>(<argument><expr><name>_I1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI1</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_afterI1</name><argument_list>(<argument><expr><name>_ILT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI1</name><argument_list>(<argument><expr><name>_I0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>_afterI0</name><argument_list>(<argument><expr><name>_KX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>--</operator><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>serpent_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num_rounds</name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>!=</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>_setup_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>serpent</name><operator>.</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">14</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>serpent_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_enc_block</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>serpent</name><operator>.</operator><name>k</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>serpent_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_dec_block</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>serpent</name><operator>.</operator><name>k</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>serpent_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>serpent_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keysize</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt> </block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> </block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> </block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return></block_content></block></else></if_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>serpent_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pt</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ct</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><block>{<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><literal type="number">32</literal></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xA2</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0xAA</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0xE3</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0xBD</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0xC0</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><literal type="number">32</literal></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xEA</literal></expr>,<expr><literal type="number">0xE1</literal></expr>,<expr><literal type="number">0xD4</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0xDF</literal></expr>,<expr><literal type="number">0x7D</literal></expr>,<expr><literal type="number">0xF2</literal></expr>,<expr><literal type="number">0xF9</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0x59</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><literal type="number">32</literal></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0x1D</literal></expr>,<expr><literal type="number">0xC8</literal></expr>,<expr><literal type="number">0xA3</literal></expr>,<expr><literal type="number">0x0F</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0xB4</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x99</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><literal type="number">24</literal></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x9E</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0xAD</literal></expr>,<expr><literal type="number">0x9B</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0x7B</literal></expr>,<expr><literal type="number">0xB2</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0xFC</literal></expr>,<expr><literal type="number">0xFC</literal></expr>,<expr><literal type="number">0xA5</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x89</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><literal type="number">24</literal></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0xFC</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0xE4</literal></expr>,<expr><literal type="number">0x6A</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x1B</literal></expr>,<expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0xE7</literal></expr>,<expr><literal type="number">0xB3</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0x82</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><literal type="number">24</literal></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x5E</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0xA3</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0xC4</literal></expr>,<expr><literal type="number">0x6A</literal></expr>,<expr><literal type="number">0xD4</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0xDE</literal></expr>,<expr><literal type="number">0xA2</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0xC6</literal></expr>,<expr><literal type="number">0xF5</literal></expr>,<expr><literal type="number">0x7D</literal></expr>,<expr><literal type="number">0x70</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0xEF</literal></expr>,<expr><literal type="number">0xF4</literal></expr>,<expr><literal type="number">0x2A</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0xAB</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0xBF</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0x3D</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0x1B</literal></expr>,<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0xC7</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0xC8</literal></expr>,<expr><literal type="number">0x35</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x24</literal></expr>}</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xE0</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0xF9</literal></expr>,<expr><literal type="number">0xE9</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0x7D</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0xDF</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0xB9</literal></expr>,<expr><literal type="number">0x8D</literal></expr>,<expr><literal type="number">0x56</literal></expr>}</block></expr>
}</block></expr>
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>serpent_setup</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>serpent_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>ct</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"SERPENT Encrypt"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>serpent_ecb_decrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>ct</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"SERPENT Decrypt"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
