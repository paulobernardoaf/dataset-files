<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\ciphers\aes\aes.c">





























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIJNDAEL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENCRYPT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name></cpp:macro> <cpp:value>rijndael_setup</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECB_ENC</name></cpp:macro> <cpp:value>rijndael_ecb_encrypt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECB_DEC</name></cpp:macro> <cpp:value>rijndael_ecb_decrypt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECB_DONE</name></cpp:macro> <cpp:value>rijndael_done</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECB_TEST</name></cpp:macro> <cpp:value>rijndael_test</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECB_KS</name></cpp:macro> <cpp:value>rijndael_keysize</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>rijndael_desc</name> <init>=
<expr><block>{
<expr><literal type="string">"rijndael"</literal></expr>,
<expr><literal type="number">6</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><name>SETUP</name></expr>, <expr><name>ECB_ENC</name></expr>, <expr><name>ECB_DEC</name></expr>, <expr><name>ECB_TEST</name></expr>, <expr><name>ECB_DONE</name></expr>, <expr><name>ECB_KS</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>aes_desc</name> <init>=
<expr><block>{
<expr><literal type="string">"aes"</literal></expr>,
<expr><literal type="number">6</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><name>SETUP</name></expr>, <expr><name>ECB_ENC</name></expr>, <expr><name>ECB_DEC</name></expr>, <expr><name>ECB_TEST</name></expr>, <expr><name>ECB_DONE</name></expr>, <expr><name>ECB_KS</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SETUP</name></cpp:macro> <cpp:value>rijndael_enc_setup</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECB_ENC</name></cpp:macro> <cpp:value>rijndael_enc_ecb_encrypt</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECB_KS</name></cpp:macro> <cpp:value>rijndael_enc_keysize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECB_DONE</name></cpp:macro> <cpp:value>rijndael_enc_done</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>rijndael_enc_desc</name> <init>=
<expr><block>{
<expr><literal type="string">"rijndael"</literal></expr>,
<expr><literal type="number">6</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><name>SETUP</name></expr>, <expr><name>ECB_ENC</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>ECB_DONE</name></expr>, <expr><name>ECB_KS</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>aes_enc_desc</name> <init>=
<expr><block>{
<expr><literal type="string">"aes"</literal></expr>,
<expr><literal type="number">6</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">10</literal></expr>,
<expr><name>SETUP</name></expr>, <expr><name>ECB_ENC</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>ECB_DONE</name></expr>, <expr><name>ECB_KS</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LTC_AES_TAB_C__</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aes_tab.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>ulong32</name></type> <name>setup_mix</name><parameter_list>(<parameter><decl><type><name>ulong32</name></type> <name>temp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><operator>(</operator><name><name>Te4_3</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_2</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_1</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_0</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENCRYPT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SMALL_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>ulong32</name></type> <name>setup_mix2</name><parameter_list>(<parameter><decl><type><name>ulong32</name></type> <name>temp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>Td0</name><argument_list>(<argument><expr><literal type="number">255</literal> <operator>&amp;</operator> <name><name>Te4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><literal type="number">255</literal> <operator>&amp;</operator> <name><name>Te4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><literal type="number">255</literal> <operator>&amp;</operator> <name><name>Te4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><literal type="number">255</literal> <operator>&amp;</operator> <name><name>Te4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>









<function><type><name>int</name></type> <name>SETUP</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>temp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rk</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENCRYPT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ulong32</name> <modifier>*</modifier></type><name>rrk</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>!=</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name>keylen</name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num_rounds</name> <operator>!=</operator> <operator>(</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>keylen</name><operator>/</operator><literal type="number">8</literal><operator>)</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>Nr</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>keylen</name><operator>/</operator><literal type="number">8</literal><operator>)</operator><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rk</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>eK</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>rk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>rk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>rk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <call><name>setup_mix</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>rcon</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>rk</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>keylen</name> <operator>==</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>rk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>rk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>eK</name><index>[<expr><name>rk</name> <operator>-</operator> <name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>eK</name></name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>rk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>rk</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <call><name>setup_mix</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>rcon</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rk</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>keylen</name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>rk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>rk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>rk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>rk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>eK</name><index>[<expr><name>rk</name> <operator>-</operator> <name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>eK</name></name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>rk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>rk</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <call><name>setup_mix</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>rcon</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>rk</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <call><name>setup_mix</name><argument_list>(<argument><expr><call><name>RORc</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>rk</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <name><name>rk</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rk</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>


<return>return <expr><name>CRYPT_ERROR</name></expr>;</return>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENCRYPT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>rk</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>dK</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rrk</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>eK</name></name> <operator>+</operator> <operator>(</operator><literal type="number">28</literal> <operator>+</operator> <name>keylen</name><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>



<expr_stmt><expr><operator>*</operator><name>rk</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>rrk</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rk</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>rrk</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rk</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>rrk</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rk</name> <operator>=</operator> <operator>*</operator><name>rrk</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rk</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name>rrk</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>Nr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rrk</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rk</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SMALL_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>rrk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>setup_mix2</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>rrk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>setup_mix2</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>rrk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>setup_mix2</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>rrk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>setup_mix2</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>rrk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>
<name><name>Tks0</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator>
<name><name>Tks1</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator>
<name><name>Tks2</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator>
<name><name>Tks3</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>rrk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>
<name><name>Tks0</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator>
<name><name>Tks1</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator>
<name><name>Tks2</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator>
<name><name>Tks3</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>rrk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>
<name><name>Tks0</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator>
<name><name>Tks1</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator>
<name><name>Tks2</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator>
<name><name>Tks3</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>rrk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>
<name><name>Tks0</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator>
<name><name>Tks1</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator>
<name><name>Tks2</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator>
<name><name>Tks3</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>


<expr_stmt><expr><name>rrk</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>rk</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rk</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>rrk</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rk</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>rrk</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rk</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>rrk</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>rk</name> <operator>=</operator> <operator>*</operator><name>rrk</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_rijndael_ecb_encrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>ECB_ENC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>rk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Nr</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Nr</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>Nr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Nr</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>Nr</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rk</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>eK</name></name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>pt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>s0</name> <operator>^=</operator> <name><name>rk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>pt</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>s1</name> <operator>^=</operator> <name><name>rk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>pt</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>^=</operator> <name><name>rk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>pt</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>s3</name> <operator>^=</operator> <name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SMALL_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rk</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>Nr</name><operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt> <expr_stmt><expr><name>s1</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name>s3</name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>rk</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<expr_stmt><expr><name>r</name> <operator>=</operator> <name>Nr</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>t0</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rk</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s0</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name>s0</name> <operator>=</operator>
<operator>(</operator><name><name>Te4_3</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_2</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_1</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_0</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator>
<operator>(</operator><name><name>Te4_3</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_2</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_1</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_0</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>ct</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator>
<operator>(</operator><name><name>Te4_3</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_2</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_1</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_0</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>ct</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator>
<operator>(</operator><name><name>Te4_3</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_2</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_1</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Te4_0</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>ct</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>ECB_ENC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_rijndael_ecb_encrypt</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">8</literal> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>*</operator><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ENCRYPT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_rijndael_ecb_decrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>ECB_DEC</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>rk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>Nr</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Nr</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>Nr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>Nr</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>Nr</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rk</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rijndael</name><operator>.</operator><name>dK</name></name></expr>;</expr_stmt>





<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>ct</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>s0</name> <operator>^=</operator> <name><name>rk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>ct</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>s1</name> <operator>^=</operator> <name><name>rk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>ct</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>^=</operator> <name><name>rk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>ct</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>s3</name> <operator>^=</operator> <name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SMALL_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>rk</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator>
<call><name>Td0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator>
<call><name>Td0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator>
<call><name>Td0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator>
<call><name>Td0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>Nr</name><operator>-</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt> <expr_stmt><expr><name>s1</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name>s3</name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>rk</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<expr_stmt><expr><name>r</name> <operator>=</operator> <name>Nr</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>t0</name> <operator>=</operator>
<call><name>Td0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator>
<call><name>Td0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator>
<call><name>Td0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator>
<call><name>Td0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rk</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>--</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<break>break;</break>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>s0</name> <operator>=</operator>
<call><name>Td0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator>
<call><name>Td0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator>
<call><name>Td0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator>
<call><name>Td0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Td3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<expr_stmt><expr><name>s0</name> <operator>=</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>pt</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name>pt</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal><operator>)</operator> <operator>^</operator>
<operator>(</operator><name><name>Td4</name><index>[<expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal><operator>)</operator> <operator>^</operator>
<name><name>rk</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>pt</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>ECB_DEC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_rijndael_ecb_decrypt</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>*</operator><literal type="number">8</literal> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>*</operator><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type> <name>ECB_TEST</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ct</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">16</literal></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
<expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x30</literal></expr>,
<expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x5a</literal></expr> }</block></expr>
}</block></expr>, <expr><block>{
<expr><literal type="number">24</literal></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
<expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xe0</literal></expr>,
<expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x91</literal></expr> }</block></expr>
}</block></expr>, <expr><block>{
<expr><literal type="number">32</literal></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x77</literal></expr>,
<expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xff</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xbf</literal></expr>,
<expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x89</literal></expr> }</block></expr>
}</block></expr>
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rijndael_setup</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rijndael_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rijndael_ecb_decrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ct</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"AES Encrypt"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"AES Decrypt"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rijndael_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rijndael_ecb_decrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 





<function><type><name>void</name></type> <name>ECB_DONE</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>ECB_KS</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keysize</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





</unit>
