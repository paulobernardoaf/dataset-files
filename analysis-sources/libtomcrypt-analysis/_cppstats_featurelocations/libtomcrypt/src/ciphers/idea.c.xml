<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\ciphers\idea.c">























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_IDEA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>idea_desc</name> <init>= <expr><block>{
<expr><literal type="string">"idea"</literal></expr>,
<expr><literal type="number">24</literal></expr>, 
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, 
<expr><operator>&amp;</operator><name>idea_setup</name></expr>,
<expr><operator>&amp;</operator><name>idea_ecb_encrypt</name></expr>,
<expr><operator>&amp;</operator><name>idea_ecb_decrypt</name></expr>,
<expr><operator>&amp;</operator><name>idea_test</name></expr>,
<expr><operator>&amp;</operator><name>idea_done</name></expr>,
<expr><operator>&amp;</operator><name>idea_keysize</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name>unsigned</name> <name>short</name> <name>int</name></type> <name>ushort16</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LOW16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&amp;0xffff)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_HIGH16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&gt;&gt;16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MUL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ulong32 p = (ulong32)_LOW16(a) * b; if (p) { p = _LOW16(p) - _HIGH16(p); a = (ushort16)p - (ushort16)_HIGH16(p); } else a = 1 - a - b; }</cpp:value></cpp:define>








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_STORE16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ (y)[0] = (unsigned char)(((x)&gt;&gt;8)&amp;255); (y)[1] = (unsigned char)((x)&amp;255); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LOAD16</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ x = ((ushort16)((y)[0] &amp; 255)&lt;&lt;8) | ((ushort16)((y)[1] &amp; 255)); }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>ushort16</name></type> <name>_mul_inv</name><parameter_list>(<parameter><decl><type><name>ushort16</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ushort16</name></type> <name>y</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>_MUL</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>_LOW16</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_MUL</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><call><name>_LOW16</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ushort16</name></type> <name>_add_inv</name><parameter_list>(<parameter><decl><type><name>ushort16</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>_LOW16</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_setup_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort16</name> <modifier>*</modifier></type><name>e_key</name> <init>= <expr><name><name>skey</name><operator>-&gt;</operator><name>idea</name><operator>.</operator><name>ek</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort16</name> <modifier>*</modifier></type><name>d_key</name> <init>= <expr><name><name>skey</name><operator>-&gt;</operator><name>idea</name><operator>.</operator><name>dk</name></name></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>_LOAD16</name><argument_list>(<argument><expr><name><name>e_key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LTC_IDEA_KEYLEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>i</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e_key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>_LOW16</name><argument_list>(<argument><expr><operator>(</operator><name><name>e_key</name><index>[<expr><name>j</name><operator>+</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>e_key</name><index>[<expr><name>j</name><operator>+</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><literal type="number">8</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LTC_IDEA_ROUNDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>d_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>_mul_inv</name><argument_list>(<argument><expr><name><name>e_key</name><index>[<expr><operator>(</operator><name>LTC_IDEA_ROUNDS</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>_add_inv</name><argument_list>(<argument><expr><name><name>e_key</name><index>[<expr><operator>(</operator><name>LTC_IDEA_ROUNDS</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><operator>(</operator><ternary><condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>_add_inv</name><argument_list>(<argument><expr><name><name>e_key</name><index>[<expr><operator>(</operator><name>LTC_IDEA_ROUNDS</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">2</literal><operator>-</operator><operator>(</operator><ternary><condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>_mul_inv</name><argument_list>(<argument><expr><name><name>e_key</name><index>[<expr><operator>(</operator><name>LTC_IDEA_ROUNDS</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>e_key</name><index>[<expr><operator>(</operator><name>LTC_IDEA_ROUNDS</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>e_key</name><index>[<expr><operator>(</operator><name>LTC_IDEA_ROUNDS</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>d_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>_mul_inv</name><argument_list>(<argument><expr><name><name>e_key</name><index>[<expr><operator>(</operator><name>LTC_IDEA_ROUNDS</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>_add_inv</name><argument_list>(<argument><expr><name><name>e_key</name><index>[<expr><operator>(</operator><name>LTC_IDEA_ROUNDS</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>_add_inv</name><argument_list>(<argument><expr><name><name>e_key</name><index>[<expr><operator>(</operator><name>LTC_IDEA_ROUNDS</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>_mul_inv</name><argument_list>(<argument><expr><name><name>e_key</name><index>[<expr><operator>(</operator><name>LTC_IDEA_ROUNDS</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_process_block</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ushort16</name> <modifier>*</modifier></type><name>m_key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ushort16</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>_LOAD16</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LOAD16</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LOAD16</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_LOAD16</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LTC_IDEA_ROUNDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>_MUL</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>m_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> <operator>+=</operator> <name><name>m_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>+=</operator> <name><name>m_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_MUL</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>m_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <name>x0</name><operator>^</operator><name>x2</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_MUL</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name><name>m_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>t0</name> <operator>+</operator> <operator>(</operator><name>x1</name><operator>^</operator><name>x3</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_MUL</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name><name>m_key</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x0</name> <operator>^=</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x3</name> <operator>^=</operator> <name>t0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t0</name> <operator>^=</operator> <name>x1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x2</name><operator>^</operator><name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>_MUL</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>m_key</name><index>[<expr><name>LTC_IDEA_ROUNDS</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x2</name> <operator>+=</operator> <name><name>m_key</name><index>[<expr><name>LTC_IDEA_ROUNDS</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>x1</name> <operator>+=</operator> <name><name>m_key</name><index>[<expr><name>LTC_IDEA_ROUNDS</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_MUL</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name><name>m_key</name><index>[<expr><name>LTC_IDEA_ROUNDS</name><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_STORE16</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_STORE16</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_STORE16</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_STORE16</name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>idea_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num_rounds</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>_setup_key</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>idea_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_process_block</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>idea</name><operator>.</operator><name>ek</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ushort16</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>idea_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_process_block</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>idea</name><operator>.</operator><name>dk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ushort16</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>idea_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>idea_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keysize</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>idea_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ct</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x0F</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x26</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><block>{ <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x1C</literal></expr> }</block></expr>
}</block></expr>,
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>ushort16</name></expr></argument>)</argument_list></sizeof> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>idea_setup</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>idea_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>ct</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"IDEA Encrypt"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>idea_ecb_decrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>ct</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"IDEA Decrypt"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
