<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\ciphers\skipjack.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SKIPJACK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>skipjack_desc</name> <init>=
<expr><block>{
<expr><literal type="string">"skipjack"</literal></expr>,
<expr><literal type="number">17</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">32</literal></expr>,
<expr><operator>&amp;</operator><name>skipjack_setup</name></expr>,
<expr><operator>&amp;</operator><name>skipjack_ecb_encrypt</name></expr>,
<expr><operator>&amp;</operator><name>skipjack_ecb_decrypt</name></expr>,
<expr><operator>&amp;</operator><name>skipjack_test</name></expr>,
<expr><operator>&amp;</operator><name>skipjack_done</name></expr>,
<expr><operator>&amp;</operator><name>skipjack_keysize</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sbox</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xa3</literal></expr>,<expr><literal type="number">0xd7</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0xf8</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xf6</literal></expr>,<expr><literal type="number">0xf4</literal></expr>,<expr><literal type="number">0xb3</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0xb1</literal></expr>,<expr><literal type="number">0xaf</literal></expr>,<expr><literal type="number">0xf9</literal></expr>,
<expr><literal type="number">0xe7</literal></expr>,<expr><literal type="number">0x2d</literal></expr>,<expr><literal type="number">0x4d</literal></expr>,<expr><literal type="number">0x8a</literal></expr>,<expr><literal type="number">0xce</literal></expr>,<expr><literal type="number">0x4c</literal></expr>,<expr><literal type="number">0xca</literal></expr>,<expr><literal type="number">0x2e</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0xd9</literal></expr>,<expr><literal type="number">0x1e</literal></expr>,<expr><literal type="number">0x4e</literal></expr>,<expr><literal type="number">0x38</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x28</literal></expr>,
<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0xdf</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0xa0</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0xf1</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0xb7</literal></expr>,<expr><literal type="number">0x7a</literal></expr>,<expr><literal type="number">0xc3</literal></expr>,<expr><literal type="number">0xe9</literal></expr>,<expr><literal type="number">0xfa</literal></expr>,<expr><literal type="number">0x3d</literal></expr>,<expr><literal type="number">0x53</literal></expr>,
<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0x6b</literal></expr>,<expr><literal type="number">0xba</literal></expr>,<expr><literal type="number">0xf2</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x9a</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x7c</literal></expr>,<expr><literal type="number">0xae</literal></expr>,<expr><literal type="number">0xe5</literal></expr>,<expr><literal type="number">0xf5</literal></expr>,<expr><literal type="number">0xf7</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x6a</literal></expr>,<expr><literal type="number">0xa2</literal></expr>,
<expr><literal type="number">0x39</literal></expr>,<expr><literal type="number">0xb6</literal></expr>,<expr><literal type="number">0x7b</literal></expr>,<expr><literal type="number">0x0f</literal></expr>,<expr><literal type="number">0xc1</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x1b</literal></expr>,<expr><literal type="number">0xee</literal></expr>,<expr><literal type="number">0xb4</literal></expr>,<expr><literal type="number">0x1a</literal></expr>,<expr><literal type="number">0xea</literal></expr>,<expr><literal type="number">0xd0</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0x2f</literal></expr>,<expr><literal type="number">0xb8</literal></expr>,
<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0xb9</literal></expr>,<expr><literal type="number">0xda</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x3f</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0xbf</literal></expr>,<expr><literal type="number">0xe0</literal></expr>,<expr><literal type="number">0x5a</literal></expr>,<expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x5f</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x0b</literal></expr>,<expr><literal type="number">0xd8</literal></expr>,<expr><literal type="number">0x90</literal></expr>,
<expr><literal type="number">0x35</literal></expr>,<expr><literal type="number">0xd5</literal></expr>,<expr><literal type="number">0xc0</literal></expr>,<expr><literal type="number">0xa7</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x6d</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x9b</literal></expr>,<expr><literal type="number">0x76</literal></expr>,
<expr><literal type="number">0x97</literal></expr>,<expr><literal type="number">0xfc</literal></expr>,<expr><literal type="number">0xb2</literal></expr>,<expr><literal type="number">0xc2</literal></expr>,<expr><literal type="number">0xb0</literal></expr>,<expr><literal type="number">0xfe</literal></expr>,<expr><literal type="number">0xdb</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0xe1</literal></expr>,<expr><literal type="number">0xeb</literal></expr>,<expr><literal type="number">0xd6</literal></expr>,<expr><literal type="number">0xe4</literal></expr>,<expr><literal type="number">0xdd</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0x4a</literal></expr>,<expr><literal type="number">0x1d</literal></expr>,
<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0xed</literal></expr>,<expr><literal type="number">0x9e</literal></expr>,<expr><literal type="number">0x6e</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x3c</literal></expr>,<expr><literal type="number">0xcd</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0xd2</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0xd4</literal></expr>,<expr><literal type="number">0xde</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x67</literal></expr>,<expr><literal type="number">0x18</literal></expr>,
<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0xcb</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x1f</literal></expr>,<expr><literal type="number">0x8d</literal></expr>,<expr><literal type="number">0xc6</literal></expr>,<expr><literal type="number">0x8f</literal></expr>,<expr><literal type="number">0xaa</literal></expr>,<expr><literal type="number">0xc8</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0xdc</literal></expr>,<expr><literal type="number">0xc9</literal></expr>,<expr><literal type="number">0x5d</literal></expr>,<expr><literal type="number">0x5c</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0xa4</literal></expr>,
<expr><literal type="number">0x70</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x2c</literal></expr>,<expr><literal type="number">0x9f</literal></expr>,<expr><literal type="number">0x0d</literal></expr>,<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x7d</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x40</literal></expr>,
<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x4b</literal></expr>,<expr><literal type="number">0x1c</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0xd1</literal></expr>,<expr><literal type="number">0xc4</literal></expr>,<expr><literal type="number">0xfd</literal></expr>,<expr><literal type="number">0x3b</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xfb</literal></expr>,<expr><literal type="number">0x7f</literal></expr>,<expr><literal type="number">0xab</literal></expr>,<expr><literal type="number">0xe6</literal></expr>,<expr><literal type="number">0x3e</literal></expr>,<expr><literal type="number">0x5b</literal></expr>,<expr><literal type="number">0xa5</literal></expr>,
<expr><literal type="number">0xad</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0x9c</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0xf0</literal></expr>,<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x7e</literal></expr>,<expr><literal type="number">0xff</literal></expr>,<expr><literal type="number">0x8c</literal></expr>,<expr><literal type="number">0x0e</literal></expr>,<expr><literal type="number">0xe2</literal></expr>,
<expr><literal type="number">0x0c</literal></expr>,<expr><literal type="number">0xef</literal></expr>,<expr><literal type="number">0xbc</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0x6f</literal></expr>,<expr><literal type="number">0x37</literal></expr>,<expr><literal type="number">0xa1</literal></expr>,<expr><literal type="number">0xec</literal></expr>,<expr><literal type="number">0xd3</literal></expr>,<expr><literal type="number">0x8e</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0x8b</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0xe8</literal></expr>,
<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0xbe</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0x4f</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0xc5</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x9d</literal></expr>,<expr><literal type="number">0xcf</literal></expr>,<expr><literal type="number">0xf3</literal></expr>,<expr><literal type="number">0xa6</literal></expr>,<expr><literal type="number">0xbb</literal></expr>,<expr><literal type="number">0xac</literal></expr>,
<expr><literal type="number">0x5e</literal></expr>,<expr><literal type="number">0x6c</literal></expr>,<expr><literal type="number">0xa9</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0xb5</literal></expr>,<expr><literal type="number">0xe3</literal></expr>,<expr><literal type="number">0xbd</literal></expr>,<expr><literal type="number">0xa8</literal></expr>,<expr><literal type="number">0x3a</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x2a</literal></expr>,<expr><literal type="number">0x46</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>keystep</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ikeystep</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>









<function><type><name>int</name></type> <name>skipjack_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>skipjack</name><operator>.</operator><name>key</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>key</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RULE_A</name></cpp:macro> <cpp:value>tmp = g_func(w1, &amp;kp, skey-&gt;skipjack.key); w1 = tmp ^ w4 ^ x; w4 = w3; w3 = w2; w2 = tmp;</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RULE_B</name></cpp:macro> <cpp:value>tmp = g_func(w1, &amp;kp, skey-&gt;skipjack.key); tmp1 = w4; w4 = w3; w3 = w1 ^ w2 ^ x; w1 = tmp1; w2 = tmp;</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RULE_A1</name></cpp:macro> <cpp:value>tmp = w1 ^ w2 ^ x; w1 = ig_func(w2, &amp;kp, skey-&gt;skipjack.key); w2 = w3; w3 = w4; w4 = tmp;</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RULE_B1</name></cpp:macro> <cpp:value>tmp = ig_func(w2, &amp;kp, skey-&gt;skipjack.key); w2 = tmp ^ w3 ^ x; w3 = w4; w4 = w1; w1 = tmp;</cpp:value></cpp:define>




<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>g_func</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>g1</name></decl>,<decl><type ref="prev"/><name>g2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt> <expr_stmt><expr><name>g2</name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g1</name> <operator>^=</operator> <name><name>sbox</name><index>[<expr><name>g2</name><operator>^</operator><name><name>key</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>kp</name> <operator>=</operator> <name><name>keystep</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g2</name> <operator>^=</operator> <name><name>sbox</name><index>[<expr><name>g1</name><operator>^</operator><name><name>key</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>kp</name> <operator>=</operator> <name><name>keystep</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g1</name> <operator>^=</operator> <name><name>sbox</name><index>[<expr><name>g2</name><operator>^</operator><name><name>key</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>kp</name> <operator>=</operator> <name><name>keystep</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>g2</name> <operator>^=</operator> <name><name>sbox</name><index>[<expr><name>g1</name><operator>^</operator><name><name>key</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>kp</name> <operator>=</operator> <name><name>keystep</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>g1</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>g2</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>ig_func</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>kp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>g1</name></decl>,<decl><type ref="prev"/><name>g2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>g1</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt> <expr_stmt><expr><name>g2</name> <operator>=</operator> <name>w</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>kp</name> <operator>=</operator> <name><name>ikeystep</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>g2</name> <operator>^=</operator> <name><name>sbox</name><index>[<expr><name>g1</name><operator>^</operator><name><name>key</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>kp</name> <operator>=</operator> <name><name>ikeystep</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>g1</name> <operator>^=</operator> <name><name>sbox</name><index>[<expr><name>g2</name><operator>^</operator><name><name>key</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>kp</name> <operator>=</operator> <name><name>ikeystep</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>g2</name> <operator>^=</operator> <name><name>sbox</name><index>[<expr><name>g1</name><operator>^</operator><name><name>key</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>kp</name> <operator>=</operator> <name><name>ikeystep</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>g1</name> <operator>^=</operator> <name><name>sbox</name><index>[<expr><name>g2</name><operator>^</operator><name><name>key</name><index>[<expr><operator>*</operator><name>kp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>g1</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>g2</name></expr>;</return>
</block_content>}</block></function>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_skipjack_ecb_encrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>skipjack_ecb_encrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>w1</name></decl>,<decl><type ref="prev"/><name>w2</name></decl>,<decl><type ref="prev"/><name>w3</name></decl>,<decl><type ref="prev"/><name>w4</name></decl>,<decl><type ref="prev"/><name>tmp</name></decl>,<decl><type ref="prev"/><name>tmp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>kp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>w1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>pt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>pt</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w4</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pt</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>pt</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>kp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>RULE_A</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">17</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>RULE_B</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">25</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>RULE_A</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">33</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>RULE_B</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>w1</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>w1</name><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>w2</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>w2</name><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>w3</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>w3</name><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>w4</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>w4</name><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>skipjack_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_skipjack_ecb_encrypt</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_skipjack_ecb_decrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>skipjack_ecb_decrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name></type> <name>w1</name></decl>,<decl><type ref="prev"/><name>w2</name></decl>,<decl><type ref="prev"/><name>w3</name></decl>,<decl><type ref="prev"/><name>w4</name></decl>,<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>kp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>w1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>ct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>ct</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>ct</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>w4</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ct</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>|</operator><name><name>ct</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>





<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">32</literal></expr><operator>,</operator> <expr><name>kp</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>RULE_B1</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>RULE_A1</name></expr>;</expr_stmt>
</block_content>}</block></for>



<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>RULE_B1</name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>RULE_A1</name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>w1</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>w1</name><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>w2</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>w2</name><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>w3</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>w3</name><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>w4</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>w4</name><operator>&amp;</operator><literal type="number">255</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>skipjack_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_skipjack_ecb_decrypt</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">7</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type> <name>skipjack_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ct</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x11</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xaa</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>
}</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>skipjack_setup</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>skipjack_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>skipjack_ecb_decrypt</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>ct</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Skipjack Encrypt"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Skipjack Decrypt"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>skipjack_ecb_encrypt</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>skipjack_ecb_decrypt</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>skipjack_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>skipjack_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keysize</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
