<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\ciphers\noekeon.c">











<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NOEKEON</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>noekeon_desc</name> <init>=
<expr><block>{
<expr><literal type="string">"noekeon"</literal></expr>,
<expr><literal type="number">16</literal></expr>,
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>,
<expr><operator>&amp;</operator><name>noekeon_setup</name></expr>,
<expr><operator>&amp;</operator><name>noekeon_ecb_encrypt</name></expr>,
<expr><operator>&amp;</operator><name>noekeon_ecb_decrypt</name></expr>,
<expr><operator>&amp;</operator><name>noekeon_test</name></expr>,
<expr><operator>&amp;</operator><name>noekeon_done</name></expr>,
<expr><operator>&amp;</operator><name>noekeon_keysize</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ulong32</name></type> <name><name>RC</name><index>[]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00000080UL</literal></expr>, <expr><literal type="number">0x0000001bUL</literal></expr>, <expr><literal type="number">0x00000036UL</literal></expr>, <expr><literal type="number">0x0000006cUL</literal></expr>,
<expr><literal type="number">0x000000d8UL</literal></expr>, <expr><literal type="number">0x000000abUL</literal></expr>, <expr><literal type="number">0x0000004dUL</literal></expr>, <expr><literal type="number">0x0000009aUL</literal></expr>,
<expr><literal type="number">0x0000002fUL</literal></expr>, <expr><literal type="number">0x0000005eUL</literal></expr>, <expr><literal type="number">0x000000bcUL</literal></expr>, <expr><literal type="number">0x00000063UL</literal></expr>,
<expr><literal type="number">0x000000c6UL</literal></expr>, <expr><literal type="number">0x00000097UL</literal></expr>, <expr><literal type="number">0x00000035UL</literal></expr>, <expr><literal type="number">0x0000006aUL</literal></expr>,
<expr><literal type="number">0x000000d4UL</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kTHETA</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>temp = a^c; temp = temp ^ ROLc(temp, 8) ^ RORc(temp, 8); b ^= temp; d ^= temp; temp = b^d; temp = temp ^ ROLc(temp, 8) ^ RORc(temp, 8); a ^= temp; c ^= temp;</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THETA</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>temp = a^c; temp = temp ^ ROLc(temp, 8) ^ RORc(temp, 8); b ^= temp ^ k[1]; d ^= temp ^ k[3]; temp = b^d; temp = temp ^ ROLc(temp, 8) ^ RORc(temp, 8); a ^= temp ^ k[0]; c ^= temp ^ k[2];</cpp:value></cpp:define>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAMMA</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>b ^= ~(d|c); a ^= c&amp;b; temp = d; d = a; a = temp;c ^= a ^ b ^ d; b ^= ~(d|c); a ^= c&amp;b;</cpp:value></cpp:define>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>b = ROLc(b, 1); c = ROLc(c, 5); d = ROLc(d, 2);</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>b = RORc(b, 1); c = RORc(c, 5); d = RORc(d, 2);</cpp:value></cpp:define>










<function><type><name>int</name></type> <name>noekeon_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>dK</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>dK</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>dK</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>dK</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>key</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>kTHETA</name><argument_list>(<argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>dK</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>dK</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>dK</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>dK</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_noekeon_ecb_encrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>noekeon_ecb_encrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a ^= RC[i]; THETA(skey-&gt;noekeon.K, a,b,c,d); PI1(a,b,c,d); GAMMA(a,b,c,d); PI2(a,b,c,d);</cpp:value></cpp:define>






<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ROUND</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ROUND</name></cpp:undef>

<expr_stmt><expr><name>a</name> <operator>^=</operator> <name><name>RC</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>THETA</name><argument_list>(<argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>K</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>noekeon_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_noekeon_ecb_encrypt</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>








<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_noekeon_ecb_decrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>noekeon_ecb_decrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>THETA(skey-&gt;noekeon.dK, a,b,c,d); a ^= RC[i]; PI1(a,b,c,d); GAMMA(a,b,c,d); PI2(a,b,c,d);</cpp:value></cpp:define>






<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>r</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ROUND</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ROUND</name></cpp:undef>

<expr_stmt><expr><call><name>THETA</name><argument_list>(<argument><expr><name><name>skey</name><operator>-&gt;</operator><name>noekeon</name><operator>.</operator><name>dK</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>^=</operator> <name><name>RC</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>noekeon_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_noekeon_ecb_decrypt</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type> <name>noekeon_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ct</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><literal type="number">16</literal></expr>,
<expr><block>{ <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x90</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x16</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0xC3</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">16</literal></expr>,
<expr><block>{ <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xD3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0xD3</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xA0</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">16</literal></expr>,
<expr><block>{ <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xA8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x8F</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x3D</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">16</literal></expr>,
<expr><block>{ <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x4E</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xEE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xCF</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">16</literal></expr>,
<expr><block>{ <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x4B</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xBE</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x18</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">16</literal></expr>,
<expr><block>{ <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xEF</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x23</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x19</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">16</literal></expr>,
<expr><block>{ <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xE8</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x19</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">16</literal></expr>,
<expr><block>{ <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x0D</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x32</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x2F</literal></expr> }</block></expr>
}</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>noekeon_setup</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>noekeon_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>noekeon_ecb_decrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ct</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"Noekeon Encrypt"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"Noekeon Decrypt"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>noekeon_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>noekeon_ecb_decrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>noekeon_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>noekeon_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keysize</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





</unit>
