<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\ciphers\safer\safer.c">



























<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LTC_SAFER_TAB_C__</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safer_tab.c"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>safer_k64_desc</name> <init>= <expr><block>{
<expr><literal type="string">"safer-k64"</literal></expr>,
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>LTC_SAFER_K64_DEFAULT_NOF_ROUNDS</name></expr>,
<expr><operator>&amp;</operator><name>safer_k64_setup</name></expr>,
<expr><operator>&amp;</operator><name>safer_ecb_encrypt</name></expr>,
<expr><operator>&amp;</operator><name>safer_ecb_decrypt</name></expr>,
<expr><operator>&amp;</operator><name>safer_k64_test</name></expr>,
<expr><operator>&amp;</operator><name>safer_done</name></expr>,
<expr><operator>&amp;</operator><name>safer_64_keysize</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>,

<decl><type ref="prev"/><name>safer_sk64_desc</name> <init>= <expr><block>{
<expr><literal type="string">"safer-sk64"</literal></expr>,
<expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>LTC_SAFER_SK64_DEFAULT_NOF_ROUNDS</name></expr>,
<expr><operator>&amp;</operator><name>safer_sk64_setup</name></expr>,
<expr><operator>&amp;</operator><name>safer_ecb_encrypt</name></expr>,
<expr><operator>&amp;</operator><name>safer_ecb_decrypt</name></expr>,
<expr><operator>&amp;</operator><name>safer_sk64_test</name></expr>,
<expr><operator>&amp;</operator><name>safer_done</name></expr>,
<expr><operator>&amp;</operator><name>safer_64_keysize</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>,

<decl><type ref="prev"/><name>safer_k128_desc</name> <init>= <expr><block>{
<expr><literal type="string">"safer-k128"</literal></expr>,
<expr><literal type="number">10</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>LTC_SAFER_K128_DEFAULT_NOF_ROUNDS</name></expr>,
<expr><operator>&amp;</operator><name>safer_k128_setup</name></expr>,
<expr><operator>&amp;</operator><name>safer_ecb_encrypt</name></expr>,
<expr><operator>&amp;</operator><name>safer_ecb_decrypt</name></expr>,
<expr><operator>&amp;</operator><name>safer_sk128_test</name></expr>,
<expr><operator>&amp;</operator><name>safer_done</name></expr>,
<expr><operator>&amp;</operator><name>safer_128_keysize</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>,

<decl><type ref="prev"/><name>safer_sk128_desc</name> <init>= <expr><block>{
<expr><literal type="string">"safer-sk128"</literal></expr>,
<expr><literal type="number">11</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>LTC_SAFER_SK128_DEFAULT_NOF_ROUNDS</name></expr>,
<expr><operator>&amp;</operator><name>safer_sk128_setup</name></expr>,
<expr><operator>&amp;</operator><name>safer_ecb_encrypt</name></expr>,
<expr><operator>&amp;</operator><name>safer_ecb_decrypt</name></expr>,
<expr><operator>&amp;</operator><name>safer_sk128_test</name></expr>,
<expr><operator>&amp;</operator><name>safer_done</name></expr>,
<expr><operator>&amp;</operator><name>safer_128_keysize</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>







<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROL8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char)((unsigned int)(x) &lt;&lt; (n)|(unsigned int)((x) &amp; 0xFF) &gt;&gt; (8 - (n))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>safer_ebox[(x) &amp; 0xFF]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>safer_lbox[(x) &amp; 0xFF]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PHT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ y += x; x += y; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IPHT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ x -= y; y -= x; }</cpp:value></cpp:define>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>_Safer_Expand_Userkey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>userkey_1</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>userkey_2</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>int</name> <name>nof_rounds</name></expr></argument>,
<argument><expr><name>int</name> <name>strengthened</name></expr></argument>,
<argument><expr><name>safer_key_t</name> <name>key</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <name>void</name> <name>Safer_Expand_Userkey</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>userkey_1</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>userkey_2</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>int</name> <name>nof_rounds</name></expr></argument>,
<argument><expr><name>int</name> <name>strengthened</name></expr></argument>,
<argument><expr><name>safer_key_t</name> <name>key</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content> <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ka</name><index>[<expr><name>LTC_SAFER_BLOCK_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>kb</name><index>[<expr><name>LTC_SAFER_BLOCK_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>LTC_SAFER_MAX_NOF_ROUNDS</name> <operator>&lt;</operator> <name>nof_rounds</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>nof_rounds</name> <operator>=</operator> <name>LTC_SAFER_MAX_NOF_ROUNDS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>key</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>nof_rounds</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ka</name><index>[<expr><name>LTC_SAFER_BLOCK_LEN</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kb</name><index>[<expr><name>LTC_SAFER_BLOCK_LEN</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LTC_SAFER_BLOCK_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ka</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>ROL8</name><argument_list>(<argument><expr><name><name>userkey_1</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ka</name><index>[<expr><name>LTC_SAFER_BLOCK_LEN</name></expr>]</index></name> <operator>^=</operator> <name><name>ka</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kb</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>key</name><operator>++</operator> <operator>=</operator> <name><name>userkey_2</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kb</name><index>[<expr><name>LTC_SAFER_BLOCK_LEN</name></expr>]</index></name> <operator>^=</operator> <name><name>kb</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nof_rounds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LTC_SAFER_BLOCK_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ka</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>ROL8</name><argument_list>(<argument><expr><name><name>ka</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>kb</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>ROL8</name><argument_list>(<argument><expr><name><name>kb</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>strengthened</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name>LTC_SAFER_BLOCK_LEN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>LTC_SAFER_BLOCK_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LTC_SAFER_BLOCK_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>strengthened</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>key</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>ka</name><index>[<expr><name>k</name></expr>]</index></name>
<operator>+</operator> <name><name>safer_ebox</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>safer_ebox</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">18</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>k</name> <operator>==</operator> <operator>(</operator><name>LTC_SAFER_BLOCK_LEN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>key</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>ka</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>safer_ebox</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>safer_ebox</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">18</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>strengthened</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name>LTC_SAFER_BLOCK_LEN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>LTC_SAFER_BLOCK_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>LTC_SAFER_BLOCK_LEN</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>strengthened</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>key</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>kb</name><index>[<expr><name>k</name></expr>]</index></name>
<operator>+</operator> <name><name>safer_ebox</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>safer_ebox</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">18</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>k</name> <operator>==</operator> <operator>(</operator><name>LTC_SAFER_BLOCK_LEN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>key</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>kb</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>safer_ebox</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>safer_ebox</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">18</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>ka</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ka</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>kb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>kb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>Safer_Expand_Userkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>userkey_1</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>userkey_2</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nof_rounds</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>strengthened</name></decl></parameter>,
<parameter><decl><type><name>safer_key_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>_Safer_Expand_Userkey</name><argument_list>(<argument><expr><name>userkey_1</name></expr></argument>, <argument><expr><name>userkey_2</name></expr></argument>, <argument><expr><name>nof_rounds</name></expr></argument>, <argument><expr><name>strengthened</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>LTC_SAFER_BLOCK_LEN</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>safer_k64_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>num_rounds</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">6</literal> <operator>||</operator> <name>num_rounds</name></expr></argument> &gt;</argument_list></name> <name>LTC_SAFER_MAX_NOF_ROUNDS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Safer_Expand_Userkey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then><expr><name>num_rounds</name></expr></then><else>:<expr><name>LTC_SAFER_K64_DEFAULT_NOF_ROUNDS</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>safer</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>safer_sk64_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>num_rounds</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">6</literal> <operator>||</operator> <name>num_rounds</name></expr></argument> &gt;</argument_list></name> <name>LTC_SAFER_MAX_NOF_ROUNDS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Safer_Expand_Userkey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then><expr><name>num_rounds</name></expr></then><else>:<expr><name>LTC_SAFER_SK64_DEFAULT_NOF_ROUNDS</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>safer</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>safer_k128_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>num_rounds</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">6</literal> <operator>||</operator> <name>num_rounds</name></expr></argument> &gt;</argument_list></name> <name>LTC_SAFER_MAX_NOF_ROUNDS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Safer_Expand_Userkey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then><expr><name>num_rounds</name></expr></then><else>:<expr><name>LTC_SAFER_K128_DEFAULT_NOF_ROUNDS</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>safer</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>safer_sk128_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>num_rounds</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">6</literal> <operator>||</operator> <name>num_rounds</name></expr></argument> &gt;</argument_list></name> <name>LTC_SAFER_MAX_NOF_ROUNDS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Safer_Expand_Userkey</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>key</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal></expr>?</condition><then><expr><name>num_rounds</name></expr></then><else>:<expr><name>LTC_SAFER_SK128_DEFAULT_NOF_ROUNDS</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>safer</name><operator>.</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_safer_ecb_encrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>safer_ecb_encrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content> <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>safer</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>pt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>pt</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>pt</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>pt</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>LTC_SAFER_MAX_NOF_ROUNDS</name> <operator>&lt;</operator> <operator>(</operator><name>round</name> <operator>=</operator> <operator>*</operator><name>key</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>round</name> <operator>=</operator> <name>LTC_SAFER_MAX_NOF_ROUNDS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<while>while<condition>(<expr><name>round</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>a</name> <operator>^=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>^=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>^=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>+=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>+=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>EXP</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>LOG</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>LOG</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>EXP</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>EXP</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>LOG</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>LOG</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>EXP</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PHT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PHT</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PHT</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PHT</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PHT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PHT</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PHT</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PHT</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PHT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PHT</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PHT</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>PHT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name>a</name> <operator>^=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>+=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>^=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>^=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>+=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>+=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>*</operator><operator>++</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>f</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>g</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ct</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>safer_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_safer_ecb_encrypt</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_safer_ecb_decrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>safer_ecb_decrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>,
<argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>,
<argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content> <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>round</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>safer</name><operator>.</operator><name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>ct</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>ct</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>ct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>ct</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>ct</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>ct</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>LTC_SAFER_MAX_NOF_ROUNDS</name> <operator>&lt;</operator> <operator>(</operator><name>round</name> <operator>=</operator> <operator>*</operator><name>key</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>round</name> <operator>=</operator> <name>LTC_SAFER_MAX_NOF_ROUNDS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>key</name> <operator>+=</operator> <name>LTC_SAFER_BLOCK_LEN</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>round</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>^=</operator> <operator>*</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>-=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>-=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>^=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>^=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>-=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>-=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>^=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>round</name><operator>--</operator></expr>)</condition>
<block>{<block_content>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IPHT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>IPHT</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>IPHT</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>IPHT</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IPHT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>IPHT</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>IPHT</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>IPHT</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>IPHT</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>IPHT</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>IPHT</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>IPHT</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>-=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>^=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>^=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>-=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>-=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>^=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>^=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>-=</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>LOG</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>EXP</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>EXP</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <call><name>LOG</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>LOG</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>EXP</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>EXP</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>LOG</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>^</operator> <operator>*</operator><operator>--</operator><name>key</name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>e</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>f</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>g</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pt</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>h</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>safer_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_safer_ecb_decrypt</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <operator>+</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>safer_64_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keysize</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>safer_128_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keysize</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>safer_k64_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>k64_pt</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name><name>k64_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name><name>k64_ct</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">200</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">221</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">217</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>symmetric_key</name></type> <name>skey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>safer_k64_setup</name><argument_list>(<argument><expr><name>k64_key</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>safer_ecb_encrypt</name><argument_list>(<argument><expr><name>k64_pt</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>safer_ecb_decrypt</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>k64_ct</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Safer K64 Encrypt"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>k64_pt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Safer K64 Decrypt"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>safer_sk64_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sk64_pt</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name><name>sk64_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name><name>sk64_ct</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">95</literal></expr>, <expr><literal type="number">206</literal></expr>, <expr><literal type="number">155</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">199</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>symmetric_key</name></type> <name>skey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>safer_sk64_setup</name><argument_list>(<argument><expr><name>sk64_key</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>safer_ecb_encrypt</name><argument_list>(<argument><expr><name>sk64_pt</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>safer_ecb_decrypt</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sk64_ct</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Safer SK64 Encrypt"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sk64_pt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Safer SK64 Decrypt"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>safer_ecb_encrypt</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>safer_ecb_decrypt</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>safer_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>safer_sk128_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sk128_pt</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name><name>sk128_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>,
<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>,
<decl><type ref="prev"/><name><name>sk128_ct</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">255</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">228</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">113</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>symmetric_key</name></type> <name>skey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>safer_sk128_setup</name><argument_list>(<argument><expr><name>sk128_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>safer_ecb_encrypt</name><argument_list>(<argument><expr><name>sk128_pt</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>safer_ecb_decrypt</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sk128_ct</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Safer SK128 Encrypt"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
<call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sk128_pt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Safer SK128 Decrypt"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>safer_ecb_encrypt</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>safer_ecb_decrypt</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







</unit>
