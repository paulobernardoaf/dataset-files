<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\ciphers\rc6.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC6</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>rc6_desc</name> <init>=
<expr><block>{
<expr><literal type="string">"rc6"</literal></expr>,
<expr><literal type="number">3</literal></expr>,
<expr><literal type="number">8</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>,
<expr><operator>&amp;</operator><name>rc6_setup</name></expr>,
<expr><operator>&amp;</operator><name>rc6_ecb_encrypt</name></expr>,
<expr><operator>&amp;</operator><name>rc6_ecb_decrypt</name></expr>,
<expr><operator>&amp;</operator><name>rc6_test</name></expr>,
<expr><operator>&amp;</operator><name>rc6_done</name></expr>,
<expr><operator>&amp;</operator><name>rc6_keysize</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ulong32</name></type> <name><name>stab</name><index>[<expr><literal type="number">44</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xb7e15163UL</literal></expr>, <expr><literal type="number">0x5618cb1cUL</literal></expr>, <expr><literal type="number">0xf45044d5UL</literal></expr>, <expr><literal type="number">0x9287be8eUL</literal></expr>, <expr><literal type="number">0x30bf3847UL</literal></expr>, <expr><literal type="number">0xcef6b200UL</literal></expr>, <expr><literal type="number">0x6d2e2bb9UL</literal></expr>, <expr><literal type="number">0x0b65a572UL</literal></expr>,
<expr><literal type="number">0xa99d1f2bUL</literal></expr>, <expr><literal type="number">0x47d498e4UL</literal></expr>, <expr><literal type="number">0xe60c129dUL</literal></expr>, <expr><literal type="number">0x84438c56UL</literal></expr>, <expr><literal type="number">0x227b060fUL</literal></expr>, <expr><literal type="number">0xc0b27fc8UL</literal></expr>, <expr><literal type="number">0x5ee9f981UL</literal></expr>, <expr><literal type="number">0xfd21733aUL</literal></expr>,
<expr><literal type="number">0x9b58ecf3UL</literal></expr>, <expr><literal type="number">0x399066acUL</literal></expr>, <expr><literal type="number">0xd7c7e065UL</literal></expr>, <expr><literal type="number">0x75ff5a1eUL</literal></expr>, <expr><literal type="number">0x1436d3d7UL</literal></expr>, <expr><literal type="number">0xb26e4d90UL</literal></expr>, <expr><literal type="number">0x50a5c749UL</literal></expr>, <expr><literal type="number">0xeedd4102UL</literal></expr>,
<expr><literal type="number">0x8d14babbUL</literal></expr>, <expr><literal type="number">0x2b4c3474UL</literal></expr>, <expr><literal type="number">0xc983ae2dUL</literal></expr>, <expr><literal type="number">0x67bb27e6UL</literal></expr>, <expr><literal type="number">0x05f2a19fUL</literal></expr>, <expr><literal type="number">0xa42a1b58UL</literal></expr>, <expr><literal type="number">0x42619511UL</literal></expr>, <expr><literal type="number">0xe0990ecaUL</literal></expr>,
<expr><literal type="number">0x7ed08883UL</literal></expr>, <expr><literal type="number">0x1d08023cUL</literal></expr>, <expr><literal type="number">0xbb3f7bf5UL</literal></expr>, <expr><literal type="number">0x5976f5aeUL</literal></expr>, <expr><literal type="number">0xf7ae6f67UL</literal></expr>, <expr><literal type="number">0x95e5e920UL</literal></expr>, <expr><literal type="number">0x341d62d9UL</literal></expr>, <expr><literal type="number">0xd254dc92UL</literal></expr>,
<expr><literal type="number">0x708c564bUL</literal></expr>, <expr><literal type="number">0x0ec3d004UL</literal></expr>, <expr><literal type="number">0xacfb49bdUL</literal></expr>, <expr><literal type="number">0x4b32c376UL</literal></expr> }</block></expr></init></decl>;</decl_stmt>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_rc6_setup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <name>keylen</name></expr></argument>, <argument><expr><name>int</name> <name>num_rounds</name></expr></argument>, <argument><expr><name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>rc6_setup</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>key</name></expr></argument>, <argument><expr><name>int</name> <name>keylen</name></expr></argument>, <argument><expr><name>int</name> <name>num_rounds</name></expr></argument>, <argument><expr><name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>L</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>S</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>num_rounds</name> <operator>!=</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ROUNDS</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>keylen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>keylen</name></expr></argument> &gt;</argument_list></name> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>A</name> <operator>=</operator> <name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><name>keylen</name></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>key</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>BSWAP</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>A</name> <operator>&lt;&lt;=</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>keylen</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>L</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>BSWAP</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>stab</name></expr></argument>, <argument><expr><literal type="number">44</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>A</name> <operator>=</operator> <name>B</name> <operator>=</operator> <name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <name>s</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>A</name> <operator>+</operator> <name>B</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <name><name>L</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>ROL</name><argument_list>(<argument><expr><name><name>L</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>A</name> <operator>+</operator> <name>B</name></expr></argument>, <argument><expr><operator>(</operator><name>A</name><operator>+</operator><name>B</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <literal type="number">44</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>++</operator><name>j</name> <operator>==</operator> <name>l</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">44</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>rc6</name><operator>.</operator><name>K</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>rc6_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_rc6_setup</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>num_rounds</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">122</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_rc6_ecb_encrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>rc6_ecb_encrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>K</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rc6</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>+=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rc6</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t = (b * (b + b + 1)); t = ROLc(t, 5); u = (d * (d + d + 1)); u = ROLc(u, 5); a = ROL(a^t,u) + K[0]; c = ROL(c^u,t) + K[1]; K += 2;</cpp:value></cpp:define>





<expr_stmt><expr><name>K</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rc6</name><operator>.</operator><name>K</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>r</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RND</name></cpp:undef>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rc6</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rc6</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">43</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>rc6_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_rc6_ecb_encrypt</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_rc6_ecb_decrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<name>int</name> <name>rc6_ecb_decrypt</name><argument_list>(<argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>ct</name></expr></argument>, <argument><expr><name>unsigned</name> <name>char</name> <operator>*</operator><name>pt</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>symmetric_key</name> <operator>*</operator><name>skey</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>K</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> <operator>-=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rc6</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>-=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rc6</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">43</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t = (b * (b + b + 1)); t = ROLc(t, 5); u = (d * (d + d + 1)); u = ROLc(u, 5); c = ROR(c - K[1], t) ^ u; a = ROR(a - K[0], u) ^ t; K -= 2;</cpp:value></cpp:define>





<expr_stmt><expr><name>K</name> <operator>=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rc6</name><operator>.</operator><name>K</name></name> <operator>+</operator> <literal type="number">40</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>r</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RND</name></cpp:undef>

<expr_stmt><expr><name>b</name> <operator>-=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rc6</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>-=</operator> <name><name>skey</name><operator>-&gt;</operator><name>rc6</name><operator>.</operator><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>rc6_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>_rc6_ecb_decrypt</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





<function><type><name>int</name></type> <name>rc6_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>keylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ct</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><literal type="number">16</literal></expr>,
<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x79</literal></expr>,
<expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xf1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x23</literal></expr>,
<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x18</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">24</literal></expr>,
<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
<expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xf0</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x79</literal></expr>,
<expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xf1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x04</literal></expr>,
<expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xd4</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">32</literal></expr>,
<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>,
<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
<expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xf0</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xfe</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x79</literal></expr>,
<expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xf1</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x89</literal></expr>,
<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0x48</literal></expr> }</block></expr>
}</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_key</name></type> <name>key</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rc6_setup</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>rc6_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rc6_ecb_decrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>ct</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"RC6 Encrypt"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>||</operator>
<call><name>compare_testvector</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"RC6 Decrypt"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rc6_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>rc6_ecb_decrypt</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></for>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>rc6_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>rc6_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keysize</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 






</unit>
