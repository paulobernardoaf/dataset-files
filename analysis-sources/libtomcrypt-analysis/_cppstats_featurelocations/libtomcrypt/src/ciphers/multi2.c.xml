<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\ciphers\multi2.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MULTI2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pi1</name><parameter_list>(<parameter><decl><type><name>ulong32</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pi2</name><parameter_list>(<parameter><decl><type><name>ulong32</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><call><name>ROL</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>t</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><call><name>ROL</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>^</operator> <name>t</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pi3</name><parameter_list>(<parameter><decl><type><name>ulong32</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><call><name>ROL</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><call><name>ROL</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>^</operator> <name>t</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>+</operator> <name><name>k</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><call><name>ROL</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ROL</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>^</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name>t</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pi4</name><parameter_list>(<parameter><decl><type><name>ulong32</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><call><name>ROL</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFFFFFFFFUL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>dk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>ulong32</name> <modifier>*</modifier></type><name>uk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pi1</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pi2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uk</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pi3</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uk</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pi4</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uk</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pi1</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uk</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pi2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name><operator>+</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uk</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pi3</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name><operator>+</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uk</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pi4</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>k</name><operator>+</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uk</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pi1</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>uk</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encrypt</name><parameter_list>(<parameter><decl><type><name>ulong32</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>uk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>pi1</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>++</operator><name>n</name> <operator>==</operator> <name>N</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pi2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>uk</name><operator>+</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>++</operator><name>n</name> <operator>==</operator> <name>N</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pi3</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>uk</name><operator>+</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>++</operator><name>n</name> <operator>==</operator> <name>N</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>pi4</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>uk</name><operator>+</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if_stmt><if>if <condition>(<expr><operator>++</operator><name>n</name> <operator>==</operator> <name>N</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>t</name> <operator>^=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decrypt</name><parameter_list>(<parameter><decl><type><name>ulong32</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ulong32</name> <modifier>*</modifier></type><name>uk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">4</literal><operator>*</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr><operator>,</operator> <expr><name>n</name> <operator>=</operator> <name>N</name></expr>;</init> <condition>;</condition> <incr/>)</control> <block>{<block_content>
<switch>switch <condition>(<expr><ternary><condition><expr><name>n</name><operator>&lt;=</operator><literal type="number">4</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>pi4</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>uk</name><operator>+</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt> 
<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><call><name>pi3</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>uk</name><operator>+</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt> 
<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>pi2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>uk</name><operator>+</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt> 
<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>pi1</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>n</name></expr>;</expr_stmt> <break>break;</break>
<case>case <expr><literal type="number">0</literal></expr>:</case> <return>return;</return>
</block_content>}</block></switch>
<expr_stmt><expr><name>t</name> <operator>^=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_cipher_descriptor</name></name></type> <name>multi2_desc</name> <init>= <expr><block>{
<expr><literal type="string">"multi2"</literal></expr>,
<expr><literal type="number">22</literal></expr>,
<expr><literal type="number">40</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">128</literal></expr>,
<expr><operator>&amp;</operator><name>multi2_setup</name></expr>,
<expr><operator>&amp;</operator><name>multi2_ecb_encrypt</name></expr>,
<expr><operator>&amp;</operator><name>multi2_ecb_decrypt</name></expr>,
<expr><operator>&amp;</operator><name>multi2_test</name></expr>,
<expr><operator>&amp;</operator><name>multi2_done</name></expr>,
<expr><operator>&amp;</operator><name>multi2_keysize</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>multi2_setup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>sk</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dk</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>!=</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>num_rounds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>num_rounds</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>multi2</name><operator>.</operator><name>N</name></name> <operator>=</operator> <name>num_rounds</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>sk</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <name>x</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>dk</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>dk</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setup</name><argument_list>(<argument><expr><name>dk</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>multi2</name><operator>.</operator><name>uk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>dk</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>multi2_ecb_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pt</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encrypt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>multi2</name><operator>.</operator><name>N</name></name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>multi2</name><operator>.</operator><name>uk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ct</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>multi2_ecb_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ct</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decrypt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>multi2</name><operator>.</operator><name>N</name></name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>multi2</name><operator>.</operator><name>uk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pt</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>multi2_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ct</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rounds</name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>,
<expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xEF</literal></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x84</literal></expr>,
<expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x89</literal></expr>
}</block></expr>,
<expr><literal type="number">128</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><block>{
<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x96</literal></expr>,
<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xce</literal></expr>,
<expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x3c</literal></expr>,
<expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x59</literal></expr>,
<expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x4e</literal></expr>,
<expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xed</literal></expr>,
<expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xd6</literal></expr>,
<expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x67</literal></expr>,

<expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0x06</literal></expr>,
<expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x38</literal></expr>,
}</block></expr>,
<expr><block>{
<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x60</literal></expr>,
<expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xa5</literal></expr>
}</block></expr>,
<expr><block>{
<expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x34</literal></expr>,
<expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xe5</literal></expr>
}</block></expr>,
<expr><literal type="number">216</literal></expr>,
}</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_key</name></type> <name>skey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>multi2_setup</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>rounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>multi2_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>ct</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Multi2 Encrypt"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>multi2_ecb_decrypt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Multi2 Decrypt"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">128</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ct</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>multi2_setup</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>multi2_ecb_encrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>multi2_ecb_decrypt</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"Multi2 Rounds"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>multi2_done</name><parameter_list>(<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>multi2_keysize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keysize</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>keysize</name> <operator>&gt;=</operator> <literal type="number">40</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>keysize</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
