<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\asn1\der\set\der_encode_setof.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct>struct <name>edge</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_qsort_helper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>struct</name> <name>edge</name></name> <modifier>*</modifier></type><name>A</name> <init>= <expr><operator>(</operator>struct <name>edge</name> <operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>B</name> <init>= <expr><operator>(</operator>struct <name>edge</name> <operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt>


<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>XMEMCMP</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name><name>B</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>B</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>size</name></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>size</name></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>B</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>B</name><operator>-&gt;</operator><name>start</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>der_encode_setof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>hdrlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>edge</name></name> <modifier>*</modifier></type><name>edges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>inlen</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>list</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name><name>list</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>*</operator><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_MEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_encode_sequence_ex</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>LTC_ASN1_SETOF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>edges</name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><name>inlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>edges</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>edges</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_MEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>hdrlen</name> <operator>=</operator> <name>ptr</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt>



<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <operator>(</operator><name>buf</name> <operator>+</operator> <operator>*</operator><name>outlen</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>edges</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>


<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>edges</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>&amp;=</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>edges</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>y</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>edges</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name><name>edges</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>ptr</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>edges</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>+=</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>edges</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>x</name></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>XQSORT</name><argument_list>(<argument><expr><name>edges</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>edges</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>_qsort_helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>hdrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>hdrlen</name></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>inlen</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><name>y</name></expr></argument>, <argument><expr><name><name>edges</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>start</name></expr></argument>, <argument><expr><name><name>edges</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>+=</operator> <name><name>edges</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
