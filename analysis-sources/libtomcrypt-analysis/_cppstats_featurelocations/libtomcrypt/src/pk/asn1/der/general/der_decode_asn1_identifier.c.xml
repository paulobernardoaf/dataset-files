<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\asn1\der\general\der_decode_asn1_identifier.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>tag_constructed_map</name><index>[]</index></name> <init>=
<expr><block>{

<expr><literal type="number">255</literal></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,

<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,

<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,

<expr><literal type="number">255</literal></expr>,
<expr><name>LTC_ASN1_PC_CONSTRUCTED</name></expr>,
<expr><name>LTC_ASN1_PC_CONSTRUCTED</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,

<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,

<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
<expr><name>LTC_ASN1_PC_PRIMITIVE</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>tag_constructed_map_sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>tag_constructed_map</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tag_constructed_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>








<function><type><name>int</name></type> <name>der_decode_asn1_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>inlen</name></decl></parameter>, <parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong64</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tag_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>inlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>inlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tag_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>klass</name></name> <operator>=</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <literal type="number">0x1f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>inlen</name> <operator>&lt;</operator> <name>tag_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>&lt;&lt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>|=</operator> <name><name>in</name><index>[<expr><name>tag_len</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>tag_len</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tag_len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><operator>(</operator><name>tmp</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tag_len</name> <operator>&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_BUFFER_OVERFLOW</name></expr>;</expr_stmt>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>&lt;</operator> <literal type="number">0x1f</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>klass</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>inlen</name> <operator>=</operator> <name>tag_len</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>klass</name></name> <operator>==</operator> <name>LTC_ASN1_CL_UNIVERSAL</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>&lt;</operator> <name>der_asn1_tag_to_type_map_sz</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>&lt;</operator> <name>tag_constructed_map_sz</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>pc</name></name> <operator>==</operator> <name><name>tag_constructed_map</name><index>[<expr><name><name>id</name><operator>-&gt;</operator><name>tag</name></name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>der_asn1_tag_to_type_map</name><index>[<expr><name><name>id</name><operator>-&gt;</operator><name>tag</name></name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>klass</name></name> <operator>==</operator> <name>LTC_ASN1_CL_UNIVERSAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>LTC_ASN1_EOL</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>LTC_ASN1_CUSTOM_TYPE</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
