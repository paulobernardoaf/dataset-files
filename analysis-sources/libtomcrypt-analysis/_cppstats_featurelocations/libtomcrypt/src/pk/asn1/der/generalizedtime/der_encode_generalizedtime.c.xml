<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\asn1\der\generalizedtime\der_encode_generalizedtime.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>baseten</name> <init>= <expr><literal type="string">"0123456789"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE_V</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {out[x++] = der_ia5_char_encode(baseten[(y/10) % 10]); out[x++] = der_ia5_char_encode(baseten[y % 10]); } while(0)</cpp:value></cpp:define>




<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE_V4</name><parameter_list>(<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {out[x++] = der_ia5_char_encode(baseten[(y/1000) % 10]); out[x++] = der_ia5_char_encode(baseten[(y/100) % 10]); out[x++] = der_ia5_char_encode(baseten[(y/10) % 10]); out[x++] = der_ia5_char_encode(baseten[y % 10]); } while(0)</cpp:value></cpp:define>













<function><type><name>int</name></type> <name>der_encode_generalizedtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_generalizedtime</name> <modifier>*</modifier></type><name>gtime</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>tmplen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>gtime</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_generalizedtime</name><argument_list>(<argument><expr><name>gtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmplen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmplen</name> <operator>&gt;</operator> <operator>*</operator><name>outlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>tmplen</name></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x18</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE_V4</name><argument_list>(<argument><expr><name><name>gtime</name><operator>-&gt;</operator><name>YYYY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE_V</name><argument_list>(<argument><expr><name><name>gtime</name><operator>-&gt;</operator><name>MM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE_V</name><argument_list>(<argument><expr><name><name>gtime</name><operator>-&gt;</operator><name>DD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE_V</name><argument_list>(<argument><expr><name><name>gtime</name><operator>-&gt;</operator><name>hh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE_V</name><argument_list>(<argument><expr><name><name>gtime</name><operator>-&gt;</operator><name>mm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE_V</name><argument_list>(<argument><expr><name><name>gtime</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gtime</name><operator>-&gt;</operator><name>fs</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>divisor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>fs</name> <init>= <expr><name><name>gtime</name><operator>-&gt;</operator><name>fs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>der_ia5_char_encode</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>divisor</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<do>do <block>{<block_content>
<expr_stmt><expr><name>fs</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>divisor</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>fs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>divisor</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>der_ia5_char_encode</name><argument_list>(<argument><expr><name><name>baseten</name><index>[<expr><operator>(</operator><name><name>gtime</name><operator>-&gt;</operator><name>fs</name></name><operator>/</operator><name>divisor</name><operator>)</operator> <operator>%</operator> <literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>der_ia5_char_encode</name><argument_list>(<argument><expr><name><name>baseten</name><index>[<expr><name><name>gtime</name><operator>-&gt;</operator><name>fs</name></name> <operator>%</operator> <literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>gtime</name><operator>-&gt;</operator><name>off_mm</name></name> <operator>||</operator> <name><name>gtime</name><operator>-&gt;</operator><name>off_hh</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>der_ia5_char_encode</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>gtime</name><operator>-&gt;</operator><name>off_dir</name></name></expr> ?</condition><then> <expr><literal type="char">'-'</literal></expr> </then><else>: <expr><literal type="char">'+'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE_V</name><argument_list>(<argument><expr><name><name>gtime</name><operator>-&gt;</operator><name>off_hh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE_V</name><argument_list>(<argument><expr><name><name>gtime</name><operator>-&gt;</operator><name>off_mm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>der_ia5_char_encode</name><argument_list>(<argument><expr><literal type="char">'Z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
