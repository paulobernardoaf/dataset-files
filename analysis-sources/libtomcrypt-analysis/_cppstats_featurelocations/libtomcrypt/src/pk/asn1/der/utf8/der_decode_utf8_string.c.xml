<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\asn1\der\utf8\der_decode_utf8_string.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>









<function><type><name>int</name></type> <name>der_decode_utf8_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>wchar_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x0C</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>y</name> <operator>=</operator> <name>inlen</name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_asn1_length</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><name>inlen</name> <operator>-</operator> <name>x</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>inlen</name></expr>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>z</name> <operator>&lt;=</operator> <literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr><operator>,</operator> <expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>z</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>z</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>z</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>inlen</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>tmp</name> <operator>&gt;&gt;=</operator> <name>z</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>z</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>--</operator><name>z</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<while>while <condition>(<expr><name>z</name><operator>--</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>in</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>wchar_t</name><operator>)</operator><name><name>in</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <operator>*</operator><name>outlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <operator>*</operator><name>outlen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_BUFFER_OVERFLOW</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
