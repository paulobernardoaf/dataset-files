<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\asn1\der\sequence\der_decode_sequence_flexi.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_new_element</name><parameter_list>(<parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier><modifier>*</modifier></type><name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>l</name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ltc_asn1_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>l</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_MEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>l</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ltc_asn1_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>l</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_MEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>l</name><operator>)</operator><operator>-&gt;</operator><name><name>next</name><operator>-&gt;</operator><name>prev</name></name></name> <operator>=</operator> <operator>*</operator><name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>l</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>l</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>der_decode_sequence_flexi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>inlen</name></decl></parameter>, <parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>l</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>identifier</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>totlen</name></decl>, <decl><type ref="prev"/><name>data_offset</name></decl>, <decl><type ref="prev"/><name>id_len</name></decl>, <decl><type ref="prev"/><name>len_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>realloc_tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>inlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>totlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>inlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>_new_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><operator>*</operator><name>inlen</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>_new_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>id_len</name> <operator>=</operator> <operator>*</operator><name>inlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_asn1_identifier</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id_len</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>identifier</name> <operator>=</operator> <operator>*</operator><name>in</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_EOL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len_len</name> <operator>=</operator> <operator>*</operator><name>inlen</name> <operator>-</operator> <name>id_len</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>data_offset</name> <operator>=</operator> <literal type="number">666</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_asn1_length</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>id_len</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"E1 %02lx: hl=%4lu l=%4lu - %s (%s)\n"</literal></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>data_offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>der_asn1_tag_to_string_map</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>tag</name></name></expr>]</index></name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>(</operator><operator>*</operator><name>inlen</name> <operator>-</operator> <name>id_len</name> <operator>-</operator> <name>len_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"E2 %02lx: hl=%4lu l=%4lu - %s (%s)\n"</literal></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>data_offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>der_asn1_tag_to_string_map</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>tag</name></name></expr>]</index></name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>data_offset</name> <operator>=</operator> <name>id_len</name> <operator>+</operator> <name>len_len</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LTC_TEST_DBG</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LTC_ASN1_CUSTOM_TYPE</name> <operator>&amp;&amp;</operator> <name><name>l</name><operator>-&gt;</operator><name>klass</name></name> <operator>==</operator> <name>LTC_ASN1_CL_CONTEXT_SPECIFIC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"OK %02lx: hl=%4lu l=%4lu - Context Specific[%s %llu]\n"</literal></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>data_offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>der_asn1_pc_to_string_map</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>pc</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"OK %02lx: hl=%4lu l=%4lu - %s\n"</literal></expr></argument>, <argument><expr><name>identifier</name></expr></argument>, <argument><expr><name>data_offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>der_asn1_tag_to_string_map</name><index>[<expr><name><name>l</name><operator>-&gt;</operator><name>tag</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <name>data_offset</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LTC_ASN1_CUSTOM_TYPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>used</name></name> <operator>=</operator> <name>identifier</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>pc</name></name> <operator>==</operator> <name>LTC_ASN1_PC_CONSTRUCTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>identifier</name> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>identifier</name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>





<expr_stmt><expr><name>data_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<switch>switch <condition>(<expr><name>identifier</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">0x01</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_BOOLEAN</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_boolean</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>*</operator><name>inlen</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_boolean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x02</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_INTEGER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_integer</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>*</operator><name>inlen</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_integer</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x03</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_BIT_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_bit_string</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>*</operator><name>inlen</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_bit_string</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x04</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_OCTET_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_octet_string</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>*</operator><name>inlen</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_octet_string</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x05</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x05</literal> <operator>||</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x06</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_object_identifier</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>*</operator><name>inlen</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_object_identifier</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>realloc_tmp</name> <operator>=</operator> <call><name>XREALLOC</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>realloc_tmp</name></expr>;</expr_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x0C</literal></expr>:</case> 


<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_UTF8_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_utf8_string</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>*</operator><name>inlen</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_utf8_string</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x13</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_PRINTABLE_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_printable_string</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>*</operator><name>inlen</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_printable_string</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x14</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_TELETEX_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_teletex_string</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>*</operator><name>inlen</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_teletex_string</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x16</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_IA5_STRING</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_ia5_string</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>*</operator><name>inlen</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_ia5_string</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x17</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_UTCTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ltc_utctime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>inlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_utctime</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_utctime</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><literal type="number">0x18</literal></expr>:</case>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_GENERALIZEDTIME</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ltc_generalizedtime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_generalizedtime</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_generalizedtime</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x20</literal></expr>:</case> 
<case>case <expr><literal type="number">0x30</literal></expr>:</case> 
<case>case <expr><literal type="number">0x31</literal></expr>:</case> 


<if_stmt><if>if <condition>(<expr><name>identifier</name> <operator>==</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_CUSTOM_TYPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>identifier</name> <operator>==</operator> <literal type="number">0x30</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_SEQUENCE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_SET</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>



<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>data_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>inlen</name> <operator>-=</operator> <name>data_offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>data_offset</name></expr>;</expr_stmt>


<expr_stmt><expr><name>len_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>child</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>len_len</name> <operator>!=</operator> <name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <name>data_offset</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while<condition>(<expr><operator>(</operator><name>t</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>child</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>len_len</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>len_len</name> <operator>&gt;</operator> <name>LTC_DER_MAX_RECURSION</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x80</literal></expr>:</case> 
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_CUSTOM_TYPE</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_ASN1_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>data_offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>data_offset</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>data_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <name>data_offset</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>


<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<goto>goto <name>outside</name>;</goto>
</block_content>}</block></switch>


<expr_stmt><expr><name>totlen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>inlen</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>

<label><name>outside</name>:</label>


<if_stmt><if>if <condition>(<expr><name>totlen</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>prev</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>l</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>parent</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>inlen</name> <operator>=</operator> <name>totlen</name></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>der_sequence_free</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





</unit>
