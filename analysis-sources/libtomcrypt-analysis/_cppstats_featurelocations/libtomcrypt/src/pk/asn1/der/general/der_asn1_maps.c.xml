<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\asn1\der\general\der_asn1_maps.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>




<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>der_asn1_type_to_identifier_map</name><index>[]</index></name> <init>=
<expr><block>{

<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><literal type="number">1</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">2</literal></expr>, 
<expr><literal type="number">3</literal></expr>, 

<expr><literal type="number">4</literal></expr>, 
<expr><literal type="number">5</literal></expr>, 
<expr><literal type="number">6</literal></expr>, 
<expr><literal type="number">22</literal></expr>, 
<expr><literal type="number">19</literal></expr>, 

<expr><literal type="number">12</literal></expr>, 
<expr><literal type="number">23</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>, 
<expr><literal type="number">48</literal></expr>, 
<expr><literal type="number">49</literal></expr>, 

<expr><literal type="number">49</literal></expr>, 
<expr><literal type="number">3</literal></expr>, 
<expr><literal type="number">20</literal></expr>, 
<expr><literal type="number">24</literal></expr>, 
<expr><operator>-</operator><literal type="number">1</literal></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>der_asn1_type_to_identifier_map_sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>der_asn1_type_to_identifier_map</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>der_asn1_type_to_identifier_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>der_asn1_class_to_string_map</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"UNIVERSAL"</literal></expr>,
<expr><literal type="string">"APPLICATION"</literal></expr>,
<expr><literal type="string">"CONTEXT-SPECIFIC"</literal></expr>,
<expr><literal type="string">"PRIVATE"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>der_asn1_class_to_string_map_sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>der_asn1_class_to_string_map</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>der_asn1_class_to_string_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>der_asn1_pc_to_string_map</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"PRIMITIVE"</literal></expr>,
<expr><literal type="string">"CONSTRUCTED"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>der_asn1_pc_to_string_map_sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>der_asn1_pc_to_string_map</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>der_asn1_pc_to_string_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>der_asn1_tag_to_string_map</name><index>[]</index></name> <init>=
<expr><block>{
<expr><literal type="string">"Reserved for use by the encoding rules"</literal></expr>,
<expr><literal type="string">"Boolean type"</literal></expr>,
<expr><literal type="string">"Integer type"</literal></expr>,
<expr><literal type="string">"Bitstring type"</literal></expr>,
<expr><literal type="string">"Octetstring type"</literal></expr>,
<expr><literal type="string">"Null type"</literal></expr>,
<expr><literal type="string">"Object identifier type"</literal></expr>,
<expr><literal type="string">"Object descriptor type"</literal></expr>,
<expr><literal type="string">"External type and Instance-of type"</literal></expr>,
<expr><literal type="string">"Real type"</literal></expr>,
<expr><literal type="string">"Enumerated type"</literal></expr>,
<expr><literal type="string">"Embedded-pdv type"</literal></expr>,
<expr><literal type="string">"UTF8String type"</literal></expr>,
<expr><literal type="string">"Relative object identifier type"</literal></expr>,
<expr><literal type="string">"The time type"</literal></expr>,
<expr><literal type="string">"Reserved for future editions of this Recommendation | International Standard"</literal></expr>,
<expr><literal type="string">"Sequence and Sequence-of types"</literal></expr>,
<expr><literal type="string">"Set and Set-of types"</literal></expr>,
<expr><literal type="string">"NumericString type"</literal></expr>,
<expr><literal type="string">"PrintableString type"</literal></expr>,
<expr><literal type="string">"TeletexString (T61String) type"</literal></expr>,
<expr><literal type="string">"VideotexString type"</literal></expr>,
<expr><literal type="string">"IA5String type"</literal></expr>,
<expr><literal type="string">"UTCTime type"</literal></expr>,
<expr><literal type="string">"GeneralizedTime type"</literal></expr>,
<expr><literal type="string">"GraphicString type"</literal></expr>,
<expr><literal type="string">"VisibleString (ISO646String) type"</literal></expr>,
<expr><literal type="string">"GeneralString type"</literal></expr>,
<expr><literal type="string">"UniversalString type"</literal></expr>,
<expr><literal type="string">"UnrestrictedCharacterString type"</literal></expr>,
<expr><literal type="string">"BMPString type"</literal></expr>,
<expr><literal type="string">"Date type"</literal></expr>,
<expr><literal type="string">"TimeOfDay type"</literal></expr>,
<expr><literal type="string">"DateTime type"</literal></expr>,
<expr><literal type="string">"Duration type"</literal></expr>,
<expr><literal type="string">"OID internationalized resource identifier type"</literal></expr>,
<expr><literal type="string">"Relative OID internationalized resource identifier type"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>der_asn1_tag_to_string_map_sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>der_asn1_tag_to_string_map</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>der_asn1_tag_to_string_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>




<decl_stmt><decl><type><specifier>const</specifier> <name>ltc_asn1_type</name></type> <name><name>der_asn1_tag_to_type_map</name><index>[]</index></name> <init>=
<expr><block>{

<expr><name>LTC_ASN1_EOL</name></expr>, 
<expr><name>LTC_ASN1_BOOLEAN</name></expr>, 
<expr><name>LTC_ASN1_INTEGER</name></expr>, 
<expr><name>LTC_ASN1_BIT_STRING</name></expr>, 
<expr><name>LTC_ASN1_OCTET_STRING</name></expr>, 

<expr><name>LTC_ASN1_NULL</name></expr>, 
<expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr>, 
<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 
<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 
<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 

<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 
<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 
<expr><name>LTC_ASN1_UTF8_STRING</name></expr>, 
<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 
<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 

<expr><name>LTC_ASN1_EOL</name></expr>, 
<expr><name>LTC_ASN1_SEQUENCE</name></expr>, 
<expr><name>LTC_ASN1_SET</name></expr>, 
<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 
<expr><name>LTC_ASN1_PRINTABLE_STRING</name></expr>, 

<expr><name>LTC_ASN1_TELETEX_STRING</name></expr>, 
<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 
<expr><name>LTC_ASN1_IA5_STRING</name></expr>, 
<expr><name>LTC_ASN1_UTCTIME</name></expr>, 
<expr><name>LTC_ASN1_GENERALIZEDTIME</name></expr>, 

<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 
<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 
<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 
<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 
<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 

<expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>, 
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>der_asn1_tag_to_type_map_sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>der_asn1_tag_to_type_map</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>der_asn1_tag_to_type_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
