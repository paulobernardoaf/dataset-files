<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\asn1\pkcs8\pkcs8_decode_flexi.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_8</name></expr></argument>)</argument_list></call></expr></cpp:if>











<function><type><name>int</name></type> <name>pkcs8_decode_flexi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>pwdlen</name></decl></parameter>,
<parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier><modifier>*</modifier></type><name>decoded_list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name> <init>= <expr><name>inlen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dec_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dec_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>decoded_list</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>decoded_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>









<if_stmt><if>if <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LTC_ASN1_SEQUENCE</name> <operator>&amp;&amp;</operator>
<call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>child</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
<call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>lalgoid</name> <init>= <expr><name><name>l</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>child</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pbes_arg</name></type> <name>pbes</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pbes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>pbes1_extract</name><argument_list>(<argument><expr><name>lalgoid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pbes</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>pbes2_extract</name><argument_list>(<argument><expr><name>lalgoid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pbes</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>
<goto>goto <name>LBL_DONE</name>;</goto>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pbes</name><operator>.</operator><name>enc_data</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pbes</name><operator>.</operator><name>pwd</name></name> <operator>=</operator> <name>pwd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pbes</name><operator>.</operator><name>pwdlen</name></name> <operator>=</operator> <name>pwdlen</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dec_size</name> <operator>=</operator> <name><name>pbes</name><operator>.</operator><name>enc_data</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dec_data</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>dec_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>LBL_DONE</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pbes_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbes</name></expr></argument>, <argument><expr><name>dec_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dec_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_DONE</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>der_free_sequence_flexi</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>dec_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dec_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_DONE</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>decoded_list</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>decoded_list</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<label><name>LBL_DONE</name>:</label>
<if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>der_free_sequence_flexi</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>dec_data</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>dec_data</name></expr></argument>, <argument><expr><name>dec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>dec_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
