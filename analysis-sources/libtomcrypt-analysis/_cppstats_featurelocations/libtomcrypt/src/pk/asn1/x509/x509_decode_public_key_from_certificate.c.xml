<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\asn1\x509\x509_decode_public_key_from_certificate.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOOKS_LIKE_SPKI</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((l) != NULL) &amp;&amp; ((l)-&gt;type == LTC_ASN1_SEQUENCE) &amp;&amp; ((l)-&gt;child != NULL) &amp;&amp; ((l)-&gt;child-&gt;type == LTC_ASN1_OBJECT_IDENTIFIER) &amp;&amp; ((l)-&gt;next != NULL) &amp;&amp; ((l)-&gt;next-&gt;type == LTC_ASN1_BIT_STRING)</cpp:value></cpp:define>


















<function><type><name>int</name></type> <name>x509_decode_public_key_from_certificate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><name><name>enum</name> <name>ltc_oid_id</name></name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><name>ltc_asn1_type</name></type> <name>param_type</name></decl></parameter>,
<parameter><decl><type><name>ltc_asn1_list</name><modifier>*</modifier></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>parameters_len</name></decl></parameter>,
<parameter><decl><type><name>public_key_decode_cb</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmpbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tmpbuf_len</name></decl>, <decl><type ref="prev"/><name>tmp_inlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>decoded_list</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>inlen</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpbuf_len</name> <operator>=</operator> <name>inlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmpbuf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>
<goto>goto <name>LBL_OUT</name>;</goto>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmp_inlen</name> <operator>=</operator> <name>inlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_inlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded_list</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>decoded_list</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_NOP</name></expr>;</expr_stmt>






<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LTC_ASN1_SEQUENCE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LTC_ASN1_SEQUENCE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>child</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>









<do>do <block>{<block_content>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LTC_ASN1_SEQUENCE</name><operator>)</operator>
<operator>&amp;&amp;</operator> <operator>(</operator><name><name>l</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator>
<operator>&amp;&amp;</operator> <call><name>LOOKS_LIKE_SPKI</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>algorithm</name> <operator>==</operator> <name>PKA_EC</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ecc_import_subject_public_key_info</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>x509_decode_subject_public_key_info</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
<argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmpbuf_len</name></expr></argument>,
<argument><expr><name>param_type</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>parameters_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>callback</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name>tmpbuf_len</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>LBL_OUT</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
</block_content>}</block> while<condition>(<expr><name>l</name></expr>)</condition>;</do>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<label><name>LBL_OUT</name>:</label>
<if_stmt><if>if <condition>(<expr><name>decoded_list</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>der_free_sequence_flexi</name><argument_list>(<argument><expr><name>decoded_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>tmpbuf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
