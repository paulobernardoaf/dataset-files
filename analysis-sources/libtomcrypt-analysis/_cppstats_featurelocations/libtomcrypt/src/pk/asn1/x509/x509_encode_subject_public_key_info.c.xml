<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\asn1\x509\x509_encode_subject_public_key_info.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>























<function><type><name>int</name></type> <name>x509_encode_subject_public_key_info</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>public_key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>public_key_len</name></decl></parameter>,
<parameter><decl><type><name>ltc_asn1_type</name></type> <name>parameters_type</name></decl></parameter>, <parameter><decl><type><name>ltc_asn1_list</name><modifier>*</modifier></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>parameters_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>alg_id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>OID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>oid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>oidlen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pk_get_oid</name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>OID</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>oidlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pk_oid_str_to_num</name><argument_list>(<argument><expr><name>OID</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oidlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>alg_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oidlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>alg_id</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>parameters_type</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>parameters_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>der_encode_sequence_multi</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>,
<argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>alg_id</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>alg_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alg_id</name></expr></argument>,
<argument><expr><name>LTC_ASN1_RAW_BIT_STRING</name></expr></argument>, <argument><expr><name>public_key_len</name><operator>*</operator><literal type="number">8U</literal></expr></argument>, <argument><expr><name>public_key</name></expr></argument>,
<argument><expr><name>LTC_ASN1_EOL</name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





</unit>
