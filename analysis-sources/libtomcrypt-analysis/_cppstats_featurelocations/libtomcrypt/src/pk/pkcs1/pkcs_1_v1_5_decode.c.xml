<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\pkcs1\pkcs_1_v1_5_decode.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_1</name></expr></argument>)</argument_list></call></expr></cpp:if>













<function><type><name>int</name></type> <name>pkcs_1_v1_5_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>msglen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>block_type</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>modulus_bitlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,
<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_valid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>modulus_len</name></decl>, <decl><type ref="prev"/><name>ps_len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>


<expr_stmt><expr><operator>*</operator><name>is_valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>modulus_len</name> <operator>=</operator> <operator>(</operator><name>modulus_bitlen</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>modulus_bitlen</name> <operator>&amp;</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>msglen</name> <operator>&gt;</operator> <name>modulus_len</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>modulus_len</name> <operator>&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_PK_INVALID_SIZE</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>msg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>msg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>block_type</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>block_type</name> <operator>==</operator> <name>LTC_PKCS_1_EME</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>modulus_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>ps_len</name> <operator>=</operator> <name>i</name><operator>++</operator> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>modulus_len</name></expr>)</condition> <block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>modulus_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xFF</literal></expr>)</condition> <block>{<block_content> <break>break;</break> </block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><name><name>msg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ps_len</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ps_len</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition>
<block>{<block_content>


<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outlen</name> <operator>&lt;</operator> <operator>(</operator><name>msglen</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>ps_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>result</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <operator>(</operator><name>msglen</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <name>ps_len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>msg</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>ps_len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><operator>*</operator><name>is_valid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 




</unit>
