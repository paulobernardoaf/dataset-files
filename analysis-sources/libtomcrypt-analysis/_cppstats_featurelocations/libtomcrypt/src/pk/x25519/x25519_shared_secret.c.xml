<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\x25519\x25519_shared_secret.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CURVE25519</name></expr></argument>)</argument_list></call></expr></cpp:if>









<function><type><name>int</name></type> <name>x25519_shared_secret</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>curve25519_key</name> <modifier>*</modifier></type><name>private_key</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>curve25519_key</name> <modifier>*</modifier></type><name>public_key</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>private_key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>public_key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>private_key</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PK_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_PK_INVALID_TYPE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>outlen</name> <operator>&lt;</operator> <literal type="number">32uL</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <literal type="number">32uL</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>tweetnacl_crypto_scalarmult</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>private_key</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><name><name>public_key</name><operator>-&gt;</operator><name>pub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <literal type="number">32uL</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
