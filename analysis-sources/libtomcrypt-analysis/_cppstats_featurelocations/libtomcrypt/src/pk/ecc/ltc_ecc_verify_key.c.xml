<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\ecc\ltc_ecc_verify_key.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>







<function><type><name>int</name></type> <name>ltc_ecc_verify_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>inf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>point</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>prime</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>prime</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>order</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>order</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>A</name></name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><call><name><name>ltc_mp</name><operator>.</operator><name>compare_d</name></name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LTC_MP_EQ</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name><name>ltc_mp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>prime</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_LT</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name><name>ltc_mp</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>prime</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_LT</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name><name>ltc_mp</name><operator>.</operator><name>compare_d</name></name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LTC_MP_LT</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name><name>ltc_mp</name><operator>.</operator><name>compare_d</name></name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LTC_MP_LT</name><operator>)</operator> <operator>||</operator>
<operator>(</operator><call><name>mp_iszero</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>mp_iszero</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>
)</condition>
<block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>
<goto>goto <name>done2</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ltc_ecc_is_point</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>dp</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>done2</name>;</goto> </block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>point</name> <operator>=</operator> <call><name>ltc_ecc_new_point</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ltc_ecc_mulmod</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>pubkey</name></name><operator>)</operator></expr></argument>, <argument><expr><name>point</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>prime</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>done1</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ltc_ecc_is_point_at_infinity</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>prime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name> <operator>||</operator> <name>inf</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<label><name>done1</name>:</label>
<expr_stmt><expr><call><name>ltc_ecc_del_point</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done2</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
