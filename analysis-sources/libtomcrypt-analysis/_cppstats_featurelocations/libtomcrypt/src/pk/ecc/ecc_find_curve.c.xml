<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\ecc\ecc_find_curve.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>OID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>names</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>_curve_names</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP112R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.6"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP112R1"</literal></expr>, <expr><literal type="string">"ECC-112"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP112R2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.7"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP112R2"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP128R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.28"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP128R1"</literal></expr>, <expr><literal type="string">"ECC-128"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP128R2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.29"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP128R2"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP160R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.8"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP160R1"</literal></expr>, <expr><literal type="string">"ECC-160"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP160R2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.30"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP160R2"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP160K1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.9"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP160K1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP192R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.2.840.10045.3.1.1"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP192R1"</literal></expr>, <expr><literal type="string">"NISTP192"</literal></expr>, <expr><literal type="string">"PRIME192V1"</literal></expr>, <expr><literal type="string">"ECC-192"</literal></expr>, <expr><literal type="string">"P-192"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_PRIME192V2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.2.840.10045.3.1.2"</literal></expr>, <expr><block>{ <expr><literal type="string">"PRIME192V2"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_PRIME192V3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.2.840.10045.3.1.3"</literal></expr>, <expr><block>{ <expr><literal type="string">"PRIME192V3"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP192K1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.31"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP192K1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP224R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.33"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP224R1"</literal></expr>, <expr><literal type="string">"NISTP224"</literal></expr>, <expr><literal type="string">"ECC-224"</literal></expr>, <expr><literal type="string">"P-224"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP224K1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.32"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP224K1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP256R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.2.840.10045.3.1.7"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP256R1"</literal></expr>, <expr><literal type="string">"NISTP256"</literal></expr>, <expr><literal type="string">"PRIME256V1"</literal></expr>, <expr><literal type="string">"ECC-256"</literal></expr>, <expr><literal type="string">"P-256"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP256K1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.10"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP256K1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP384R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.34"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP384R1"</literal></expr>, <expr><literal type="string">"NISTP384"</literal></expr>, <expr><literal type="string">"ECC-384"</literal></expr>, <expr><literal type="string">"P-384"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP521R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.132.0.35"</literal></expr>, <expr><block>{ <expr><literal type="string">"SECP521R1"</literal></expr>, <expr><literal type="string">"NISTP521"</literal></expr>, <expr><literal type="string">"ECC-521"</literal></expr>, <expr><literal type="string">"P-521"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_PRIME239V1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.2.840.10045.3.1.4"</literal></expr>, <expr><block>{ <expr><literal type="string">"PRIME239V1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_PRIME239V2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.2.840.10045.3.1.5"</literal></expr>, <expr><block>{ <expr><literal type="string">"PRIME239V2"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_PRIME239V3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.2.840.10045.3.1.6"</literal></expr>, <expr><block>{ <expr><literal type="string">"PRIME239V3"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP160R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.1"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP160R1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP192R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.3"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP192R1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP224R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.5"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP224R1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP256R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.7"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP256R1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP320R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.9"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP320R1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP384R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.11"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP384R1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP512R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.13"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP512R1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP160T1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.2"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP160T1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP192T1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.4"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP192T1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP224T1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.6"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP224T1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP256T1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.8"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP256T1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP320T1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.10"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP320T1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP384T1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.12"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP384T1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_BRAINPOOLP512T1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{
<expr><literal type="string">"1.3.36.3.3.2.8.1.1.14"</literal></expr>, <expr><block>{ <expr><literal type="string">"BRAINPOOLP512T1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{
<expr><name>NULL</name></expr>, <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr>
}</block></expr></init></decl>;</struct>


<function><type><specifier>static</specifier> <name>int</name></type> <name>_name_match</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>left</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>right</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>char</name></type> <name>lc_r</name></decl>, <decl><type ref="prev"/><name>lc_l</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>left</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>right</name> <operator>!=</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>left</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>left</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>left</name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>left</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>right</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>right</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>right</name> <operator>==</operator> <literal type="char">'_'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>right</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>left</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>right</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
<expr_stmt><expr><name>lc_r</name> <operator>=</operator> <operator>*</operator><name>right</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lc_l</name> <operator>=</operator> <operator>*</operator><name>left</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lc_r</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>lc_r</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lc_r</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lc_l</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>lc_l</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lc_l</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>lc_l</name> <operator>!=</operator> <name>lc_r</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>left</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>right</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>left</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>right</name> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ecc_find_curve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_or_oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ltc_ecc_curve</name> <modifier>*</modifier><modifier>*</modifier></type><name>cu</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>OID</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>name_or_oid</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cu</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>_curve_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>OID</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>OID</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XSTRCMP</name><argument_list>(<argument><expr><name><name>_curve_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>OID</name></expr></argument>, <argument><expr><name>name_or_oid</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>OID</name> <operator>=</operator> <name><name>_curve_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>OID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>_curve_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>OID</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>_name_match</name><argument_list>(<argument><expr><name><name>_curve_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>name_or_oid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>OID</name> <operator>=</operator> <name><name>_curve_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>OID</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>OID</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ltc_ecc_curves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prime</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XSTRCMP</name><argument_list>(<argument><expr><name><name>ltc_ecc_curves</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>OID</name></expr></argument>, <argument><expr><name>OID</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>cu</name> <operator>=</operator> <operator>&amp;</operator><name><name>ltc_ecc_curves</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return> 
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
