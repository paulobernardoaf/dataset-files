<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\ecc\ecc_set_curve.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>ecc_set_curve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_ecc_curve</name> <modifier>*</modifier></type><name>cu</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>cu</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>prime</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>order</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>A</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>B</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>base</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>base</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>base</name><operator>.</operator><name>z</name></name></expr></argument>,
<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>k</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_radix</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>prime</name></name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>prime</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_radix</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>order</name></name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_radix</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>A</name></name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>A</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_radix</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>B</name></name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>B</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_radix</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>base</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>Gx</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_radix</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>base</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>cu</name><operator>-&gt;</operator><name>Gy</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_set</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>base</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>cofactor</name></name> <operator>=</operator> <name><name>cu</name><operator>-&gt;</operator><name>cofactor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>prime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>oidlen</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pk_oid_str_to_num</name><argument_list>(<argument><expr><name><name>cu</name><operator>-&gt;</operator><name>OID</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>oidlen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>ecc_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ecc_set_curve_by_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>ltc_ecc_curve</name> <modifier>*</modifier></type><name>cu</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>CRYPT_ERROR</name></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ecc_find_curve</name><argument_list>(<argument><expr><literal type="string">"SECP112R1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ecc_find_curve</name><argument_list>(<argument><expr><literal type="string">"SECP128R1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ecc_find_curve</name><argument_list>(<argument><expr><literal type="string">"SECP160R1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">24</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ecc_find_curve</name><argument_list>(<argument><expr><literal type="string">"SECP192R1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">28</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ecc_find_curve</name><argument_list>(<argument><expr><literal type="string">"SECP224R1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ecc_find_curve</name><argument_list>(<argument><expr><literal type="string">"SECP256R1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">48</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ecc_find_curve</name><argument_list>(<argument><expr><literal type="string">"SECP384R1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">66</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ecc_find_curve</name><argument_list>(<argument><expr><literal type="string">"SECP521R1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name> <operator>&amp;&amp;</operator> <name>cu</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ecc_set_curve</name><argument_list>(<argument><expr><name>cu</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
