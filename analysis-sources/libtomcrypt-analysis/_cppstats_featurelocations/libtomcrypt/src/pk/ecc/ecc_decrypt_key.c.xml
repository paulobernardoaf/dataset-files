<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\ecc\ecc_decrypt_key.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>










<function><type><name>int</name></type> <name>ecc_decrypt_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ecc_shared</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>skey</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pub_expt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>hashOID</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ecc_key</name></type> <name>pubkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>decode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PK_PRIVATE</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_PK_NOT_PRIVATE</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>decode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><name>hashOID</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hashOID</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>hashOID</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name> <operator>&amp;&amp;</operator> <name>err</name> <operator>!=</operator> <name>CRYPT_INPUT_TOO_LONG</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>find_hash_oid</name><argument_list>(<argument><expr><name>hashOID</name></expr></argument>, <argument><expr><name><name>decode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>hash_is_valid</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return>
</block_content>}</block></if></if_stmt>




<expr_stmt><expr><name>pub_expt</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>ECC_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ecc_shared</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>ECC_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skey</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>MAXBLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pub_expt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>ecc_shared</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>skey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>pub_expt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>pub_expt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>ecc_shared</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>ecc_shared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skey</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CRYPT_MEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>decode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>pub_expt</name></expr></argument>, <argument><expr><name>ECC_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>decode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>, <argument><expr><name>MAXBLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_sequence</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>LBL_ERR</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_copy_curve</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>LBL_ERR</name>;</goto> </block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_set_key</name><argument_list>(<argument><expr><name><name>decode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>decode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>LBL_ERR</name>;</goto> </block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <name>ECC_BUF_SIZE</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_shared_secret</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>, <argument><expr><name>ecc_shared</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ecc_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>LBL_ERR</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ecc_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pubkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>ECC_BUF_SIZE</name></expr></argument>, <argument><expr><name>MAXBLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hash_memory</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>ecc_shared</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>ecc_shared</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>LBL_ERR</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>decode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <name>y</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>
<goto>goto <name>LBL_ERR</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outlen</name> <operator>&lt;</operator> <name><name>decode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name><name>decode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_BUFFER_OVERFLOW</name></expr>;</expr_stmt>
<goto>goto <name>LBL_ERR</name>;</goto>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>decode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>skey</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^</operator> <name><name>ecc_shared</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>
<label><name>LBL_ERR</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>pub_expt</name></expr></argument>, <argument><expr><name>ECC_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>ecc_shared</name></expr></argument>, <argument><expr><name>ECC_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><name>MAXBLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>pub_expt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>ecc_shared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





</unit>
