<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\ec25519\ec25519_export.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CURVE25519</name></expr></argument>)</argument_list></call></expr></cpp:if>









<function><type><name>int</name></type> <name>ec25519_export</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>std</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>OID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>oid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>oidlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>alg_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>private_key</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>version</name></decl>, <decl><type ref="prev"/><name>private_key_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>private_key</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name> <operator>=</operator> <name>which</name> <operator>&amp;</operator> <name>PK_STD</name></expr>;</expr_stmt>
<expr_stmt><expr><name>which</name> <operator>&amp;=</operator> <operator>~</operator><name>PK_STD</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>which</name> <operator>==</operator> <name>PK_PRIVATE</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PK_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_PK_INVALID_TYPE</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>std</name> <operator>==</operator> <name>PK_STD</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pk_get_oid</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>algo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>OID</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>oidlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pk_oid_str_to_num</name><argument_list>(<argument><expr><name>OID</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oidlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>alg_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oidlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_encode_octet_string</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><literal type="number">32uL</literal></expr></argument>, <argument><expr><name>private_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>private_key_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_encode_sequence_multi</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>,
<argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1uL</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>,
<argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><literal type="number">1uL</literal></expr></argument>, <argument><expr><name>alg_id</name></expr></argument>,
<argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>private_key_len</name></expr></argument>, <argument><expr><name>private_key</name></expr></argument>,
<argument><expr><name>LTC_ASN1_EOL</name></expr></argument>, <argument><expr><literal type="number">0uL</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outlen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_BUFFER_OVERFLOW</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>std</name> <operator>==</operator> <name>PK_STD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>x509_encode_subject_public_key_info</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>algo</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>pub</name></name></expr></argument>, <argument><expr><literal type="number">32uL</literal></expr></argument>, <argument><expr><name>LTC_ASN1_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outlen</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pub</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_BUFFER_OVERFLOW</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>pub</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pub</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pub</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
