<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\pk\ec25519\tweetnacl.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (i = 0;i &lt; n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sv</name></cpp:macro> <cpp:value>static void</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>u8</name>;</typedef>
<typedef>typedef <type><name>ulong32</name></type> <name>u32</name>;</typedef>
<typedef>typedef <type><name>ulong64</name></type> <name>u64</name>;</typedef>
<typedef>typedef <type><name>long64</name></type> <name>i64</name>;</typedef>
<typedef>typedef <type><name>i64</name></type> <name><name>gf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u8</name></type>
<name><name>_9</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">9</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>gf</name></type>
<name>gf0</name></decl>,
<decl><type ref="prev"/><name>gf1</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>,
<decl><type ref="prev"/><name>_121665</name> <init>= <expr><block>{<expr><literal type="number">0xDB41</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>,
<decl><type ref="prev"/><name>D</name> <init>= <expr><block>{<expr><literal type="number">0x78a3</literal></expr>, <expr><literal type="number">0x1359</literal></expr>, <expr><literal type="number">0x4dca</literal></expr>, <expr><literal type="number">0x75eb</literal></expr>, <expr><literal type="number">0xd8ab</literal></expr>, <expr><literal type="number">0x4141</literal></expr>, <expr><literal type="number">0x0a4d</literal></expr>, <expr><literal type="number">0x0070</literal></expr>, <expr><literal type="number">0xe898</literal></expr>, <expr><literal type="number">0x7779</literal></expr>, <expr><literal type="number">0x4079</literal></expr>, <expr><literal type="number">0x8cc7</literal></expr>, <expr><literal type="number">0xfe73</literal></expr>, <expr><literal type="number">0x2b6f</literal></expr>, <expr><literal type="number">0x6cee</literal></expr>, <expr><literal type="number">0x5203</literal></expr>}</block></expr></init></decl>,
<decl><type ref="prev"/><name>D2</name> <init>= <expr><block>{<expr><literal type="number">0xf159</literal></expr>, <expr><literal type="number">0x26b2</literal></expr>, <expr><literal type="number">0x9b94</literal></expr>, <expr><literal type="number">0xebd6</literal></expr>, <expr><literal type="number">0xb156</literal></expr>, <expr><literal type="number">0x8283</literal></expr>, <expr><literal type="number">0x149a</literal></expr>, <expr><literal type="number">0x00e0</literal></expr>, <expr><literal type="number">0xd130</literal></expr>, <expr><literal type="number">0xeef3</literal></expr>, <expr><literal type="number">0x80f2</literal></expr>, <expr><literal type="number">0x198e</literal></expr>, <expr><literal type="number">0xfce7</literal></expr>, <expr><literal type="number">0x56df</literal></expr>, <expr><literal type="number">0xd9dc</literal></expr>, <expr><literal type="number">0x2406</literal></expr>}</block></expr></init></decl>,
<decl><type ref="prev"/><name>X</name> <init>= <expr><block>{<expr><literal type="number">0xd51a</literal></expr>, <expr><literal type="number">0x8f25</literal></expr>, <expr><literal type="number">0x2d60</literal></expr>, <expr><literal type="number">0xc956</literal></expr>, <expr><literal type="number">0xa7b2</literal></expr>, <expr><literal type="number">0x9525</literal></expr>, <expr><literal type="number">0xc760</literal></expr>, <expr><literal type="number">0x692c</literal></expr>, <expr><literal type="number">0xdc5c</literal></expr>, <expr><literal type="number">0xfdd6</literal></expr>, <expr><literal type="number">0xe231</literal></expr>, <expr><literal type="number">0xc0a4</literal></expr>, <expr><literal type="number">0x53fe</literal></expr>, <expr><literal type="number">0xcd6e</literal></expr>, <expr><literal type="number">0x36d3</literal></expr>, <expr><literal type="number">0x2169</literal></expr>}</block></expr></init></decl>,
<decl><type ref="prev"/><name>Y</name> <init>= <expr><block>{<expr><literal type="number">0x6658</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>, <expr><literal type="number">0x6666</literal></expr>}</block></expr></init></decl>,
<decl><type ref="prev"/><name>I</name> <init>= <expr><block>{<expr><literal type="number">0xa0b0</literal></expr>, <expr><literal type="number">0x4a0e</literal></expr>, <expr><literal type="number">0x1b27</literal></expr>, <expr><literal type="number">0xc4ee</literal></expr>, <expr><literal type="number">0xe478</literal></expr>, <expr><literal type="number">0xad2f</literal></expr>, <expr><literal type="number">0x1806</literal></expr>, <expr><literal type="number">0x2f43</literal></expr>, <expr><literal type="number">0xd7a7</literal></expr>, <expr><literal type="number">0x3dfb</literal></expr>, <expr><literal type="number">0x0099</literal></expr>, <expr><literal type="number">0x2b4d</literal></expr>, <expr><literal type="number">0xdf0b</literal></expr>, <expr><literal type="number">0x4fc1</literal></expr>, <expr><literal type="number">0x2480</literal></expr>, <expr><literal type="number">0x2b83</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u32</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>d</name> <operator>|=</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>^</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><literal type="number">1</literal> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>d</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tweetnacl_crypto_verify_32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>vn</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>set25519</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>car25519</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name>o</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>i64</name></type> <name>c</name></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name><operator>=</operator><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>&lt;</operator><literal type="number">15</literal><operator>)</operator></expr>]</index></name><operator>+=</operator><name>c</name><operator>-</operator><literal type="number">1</literal><operator>+</operator><literal type="number">37</literal><operator>*</operator><operator>(</operator><name>c</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>i</name><operator>==</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name><operator>-=</operator><name>c</name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>sel25519</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>gf</name></type> <name>q</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>i64</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>c</name><init>=<expr><operator>~</operator><operator>(</operator><name>b</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name>t</name><operator>=</operator> <name>c</name><operator>&amp;</operator><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>^</operator><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>^=</operator><name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>^=</operator><name>t</name></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>pack25519</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>o</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gf</name></type> <name>m</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>car25519</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>car25519</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>car25519</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><literal type="number">0xffed</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">15</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>m</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">0xffff</literal><operator>-</operator><operator>(</operator><operator>(</operator><name><name>m</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&amp;=</operator><literal type="number">0xffff</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>-</operator><literal type="number">0x7fff</literal><operator>-</operator><operator>(</operator><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name><operator>=</operator><operator>(</operator><name><name>m</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>&amp;=</operator><literal type="number">0xffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sel25519</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><literal type="number">1</literal><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>neq25519</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name><name>c</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>d</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pack25519</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack25519</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>tweetnacl_crypto_verify_32</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u8</name></type> <name>par25519</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name><name>d</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>pack25519</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>unpack25519</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>n</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>+</operator><operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><name><name>n</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>o</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>&amp;=</operator><literal type="number">0x7fff</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>A</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name>o</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>Z</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name>o</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>M</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name>o</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>i64</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name><name>t</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">31</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name><operator>+=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">15</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><literal type="number">38</literal><operator>*</operator><name><name>t</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>o</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>car25519</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>car25519</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>S</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name>o</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>inv25519</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name>o</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gf</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>a</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>c</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>i</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>a</name><operator>=</operator><literal type="number">253</literal></expr>;</init><condition><expr><name>a</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>a</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>a</name><operator>!=</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>a</name><operator>!=</operator><literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<macro><name>FOR</name><argument_list>(<argument>a</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>o</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>pow2523</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name>o</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>gf</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gf</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>a</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>c</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>i</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>a</name><operator>=</operator><literal type="number">250</literal></expr>;</init><condition><expr><name>a</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>a</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>a</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<macro><name>FOR</name><argument_list>(<argument>a</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>o</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tweetnacl_crypto_scalarmult</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>n</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name><name>z</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>i64</name></type> <name><name>x</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gf</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">31</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>n</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>n</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">127</literal><operator>)</operator><operator>|</operator><literal type="number">64</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;=</operator><literal type="number">248</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unpack25519</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">254</literal></expr>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>r</name><operator>=</operator><operator>(</operator><name><name>z</name><index>[<expr><name>i</name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>]</index></name><operator>&gt;&gt;</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sel25519</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sel25519</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Z</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Z</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Z</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Z</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>_121665</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sel25519</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sel25519</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">16</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">32</literal></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">48</literal></expr>]</index></name><operator>=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">64</literal></expr>]</index></name><operator>=</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block>
<expr_stmt><expr><call><name>inv25519</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">32</literal></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">16</literal></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">16</literal></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack25519</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tweetnacl_crypto_scalarmult_base</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>tweetnacl_crypto_scalarmult</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>_9</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tweetnacl_crypto_hash</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,<parameter><decl><type><name>u64</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>hash_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>ULONG_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OVERFLOW</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha512"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hash_memory</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,<parameter><decl><type><name>gf</name></type> <name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gf</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name>f</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Z</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Z</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>D2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Z</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Z</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>cswap</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,<parameter><decl><type><name>gf</name></type> <name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,<parameter><decl><type><name>u8</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro>
<expr_stmt><expr><call><name>sel25519</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>pack</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>r</name></decl></parameter>,<parameter><decl><type><name>gf</name></type> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gf</name></type> <name>tx</name></decl>, <decl><type ref="prev"/><name>ty</name></decl>, <decl><type ref="prev"/><name>zi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>inv25519</name><argument_list>(<argument><expr><name>zi</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>ty</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack25519</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>^=</operator> <call><name>par25519</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>scalarmult</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,<parameter><decl><type><name>gf</name></type> <name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set25519</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>gf0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set25519</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>gf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set25519</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>gf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set25519</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name>gf0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">255</literal></expr>;</init><condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name>b</name> <init>= <expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cswap</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>q</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cswap</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>q</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>scalarbase</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gf</name></type> <name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set25519</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set25519</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set25519</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>gf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scalarmult</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>q</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tweetnacl_crypto_sk_to_pk</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name><name>d</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gf</name></type> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>tweetnacl_crypto_hash</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">248</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scalarbase</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack</name><argument_list>(<argument><expr><name>pk</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tweetnacl_crypto_sign_keypair</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>prng_is_valid</name><argument_list>(<argument><expr><name>wprng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prng_descriptor</name><index>[<expr><name>wprng</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>sk</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>prng</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_ERROR_READPRNG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tweetnacl_crypto_sk_to_pk</name><argument_list>(<argument><expr><name>pk</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name><name>L</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>sv</name></type> <name>modL</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>r</name></decl></parameter>,<parameter><decl><type><name>i64</name></type> <name><name>x</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>i64</name></type> <name>carry</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">63</literal></expr>;</init><condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">32</literal></expr>;</init><condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name> <operator>-</operator> <literal type="number">12</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>carry</name> <operator>-</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>L</name><index>[<expr><name>j</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">32</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <operator>(</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-=</operator> <name>carry</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>carry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">32</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>carry</name> <operator>-</operator> <operator>(</operator><name><name>x</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>L</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>carry</name> <operator>=</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block>
<macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">32</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-=</operator> <name>carry</name> <operator>*</operator> <name><name>L</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">32</literal></argument>)</argument_list></macro> <block>{<block_content>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block>
</block_content>}</block></function>

<function><type><name>sv</name></type> <name>reduce</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>i64</name></type> <name><name>x</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">64</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u64</name><operator>)</operator> <name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">64</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>modL</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tweetnacl_crypto_sign</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>sm</name></decl></parameter>,<parameter><decl><type><name>u64</name> <modifier>*</modifier></type><name>smlen</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,<parameter><decl><type><name>u64</name></type> <name>mlen</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u8</name></type> <name><name>d</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>h</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>r</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>i64</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gf</name></type> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tweetnacl_crypto_hash</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">248</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>smlen</name> <operator>=</operator> <name>mlen</name><operator>+</operator><literal type="number">64</literal></expr>;</expr_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>(i64)mlen</argument>)</argument_list></macro> <expr_stmt><expr><name><name>sm</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>m</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">32</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>sm</name><index>[<expr><literal type="number">32</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><literal type="number">32</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tweetnacl_crypto_hash</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sm</name><operator>+</operator><literal type="number">32</literal></expr></argument>, <argument><expr><name>mlen</name><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reduce</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scalarbase</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack</name><argument_list>(<argument><expr><name>sm</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">32</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>sm</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <name><name>pk</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tweetnacl_crypto_hash</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>sm</name></expr></argument>,<argument><expr><name>mlen</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reduce</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">64</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">32</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u64</name><operator>)</operator> <name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">32</literal></argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">32</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>u64</name><operator>)</operator> <name><name>d</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>modL</name><argument_list>(<argument><expr><name>sm</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>unpackneg</name><parameter_list>(<parameter><decl><type><name>gf</name></type> <name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name></type> <name><name>p</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>gf</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>chk</name></decl>, <decl><type ref="prev"/><name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>, <decl><type ref="prev"/><name>den2</name></decl>, <decl><type ref="prev"/><name>den4</name></decl>, <decl><type ref="prev"/><name>den6</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>set25519</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>gf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unpack25519</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>num</name></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>den</name></expr></argument>,<argument><expr><name>num</name></expr></argument>,<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Z</name><argument_list>(<argument><expr><name>num</name></expr></argument>,<argument><expr><name>num</name></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>den</name></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>den2</name></expr></argument>,<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>den4</name></expr></argument>,<argument><expr><name>den2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>den6</name></expr></argument>,<argument><expr><name>den4</name></expr></argument>,<argument><expr><name>den2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>den6</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pow2523</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>chk</name></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>chk</name></expr></argument>,<argument><expr><name>chk</name></expr></argument>,<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>neq25519</name><argument_list>(<argument><expr><name>chk</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>S</name><argument_list>(<argument><expr><name>chk</name></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name>chk</name></expr></argument>,<argument><expr><name>chk</name></expr></argument>,<argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>neq25519</name><argument_list>(<argument><expr><name>chk</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>par25519</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Z</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>gf0</name></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>M</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tweetnacl_crypto_sign_open</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,<parameter><decl><type><name>u64</name> <modifier>*</modifier></type><name>mlen</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>sm</name></decl></parameter>,<parameter><decl><type><name>u64</name></type> <name>smlen</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>u64</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>u8</name></type> <name><name>s</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>t</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>h</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gf</name></type> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>q</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>stat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>mlen</name> <operator>&lt;</operator> <name>smlen</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>mlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>smlen</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unpackneg</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name>pk</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XMEMMOVE</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>sm</name></expr></argument>,<argument><expr><name>smlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XMEMMOVE</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>m</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XMEMMOVE</name><argument_list>(<argument><expr><name>m</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>,<argument><expr><name>pk</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tweetnacl_crypto_hash</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>smlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>reduce</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>scalarmult</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>q</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>scalarbase</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pack</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>smlen</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>tweetnacl_crypto_verify_32</name><argument_list>(<argument><expr><name>sm</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>smlen</argument>)</argument_list></macro> <expr_stmt><expr><name><name>m</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>smlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>stat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XMEMMOVE</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>m</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>,<argument><expr><name>smlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>mlen</name> <operator>=</operator> <name>smlen</name></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>




</unit>
