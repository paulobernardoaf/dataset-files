<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\mac\pelican\pelican.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PELICAN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LTC_AES_TAB_C__</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCRYPT_ONLY</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PELI_TAB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../ciphers/aes/aes_tab.c"</cpp:file></cpp:include>








<function><type><name>int</name></type> <name>pelican_init</name><parameter_list>(<parameter><decl><type><name>pelican_state</name> <modifier>*</modifier></type><name>pelmac</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pelmac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><literal type="number">16</literal> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LTC_FAST_TYPE</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>aes_setup</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pelmac</name><operator>-&gt;</operator><name>K</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aes_ecb_encrypt</name><argument_list>(<argument><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pelmac</name><operator>-&gt;</operator><name>K</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pelmac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_four_rounds</name><parameter_list>(<parameter><decl><type><name>pelican_state</name> <modifier>*</modifier></type><name>pelmac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t0</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t3</name> <operator>=</operator>
<call><name>Te0</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te1</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te2</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>^</operator>
<call><name>Te3</name><argument_list>(<argument><expr><call><name>LTC_BYTE</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s0</name> <operator>=</operator> <name>t0</name></expr>;</expr_stmt> <expr_stmt><expr><name>s1</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt> <expr_stmt><expr><name>s2</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt> <expr_stmt><expr><name>s3</name> <operator>=</operator> <name>t3</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>s0</name></expr></argument>, <argument><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>s2</name></expr></argument>, <argument><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>pelican_process</name><parameter_list>(<parameter><decl><type><name>pelican_state</name> <modifier>*</modifier></type><name>pelmac</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pelmac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pelmac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pelmac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&gt;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>pelmac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>inlen</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LTC_FAST_TYPE</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>^=</operator> <operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>in</name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>_four_rounds</name><argument_list>(<argument><expr><name>pelmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>inlen</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name><index>[<expr><name><name>pelmac</name><operator>-&gt;</operator><name>buflen</name></name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>pelmac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_four_rounds</name><argument_list>(<argument><expr><name>pelmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pelmac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></while>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><name>int</name></type> <name>pelican_done</name><parameter_list>(<parameter><decl><type><name>pelican_state</name> <modifier>*</modifier></type><name>pelmac</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pelmac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>pelmac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pelmac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pelmac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>_four_rounds</name><argument_list>(<argument><expr><name>pelmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pelmac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name><index>[<expr><name><name>pelmac</name><operator>-&gt;</operator><name>buflen</name></name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aes_ecb_encrypt</name><argument_list>(<argument><expr><name><name>pelmac</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pelmac</name><operator>-&gt;</operator><name>K</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>aes_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pelmac</name><operator>-&gt;</operator><name>K</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
