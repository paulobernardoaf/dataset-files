<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\mac\pmac\pmac_shift_xor.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>





<function><type><name>void</name></type> <name>pmac_shift_xor</name><parameter_list>(<parameter><decl><type><name>pmac_state</name> <modifier>*</modifier></type><name>pmac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>pmac_ntz</name><argument_list>(<argument><expr><name><name>pmac</name><operator>-&gt;</operator><name>block_index</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>pmac</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LTC_FAST_TYPE</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pmac</name><operator>-&gt;</operator><name>Li</name></name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>^=</operator>
<operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pmac</name><operator>-&gt;</operator><name>Ls</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>pmac</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pmac</name><operator>-&gt;</operator><name>Li</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>pmac</name><operator>-&gt;</operator><name>Ls</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
