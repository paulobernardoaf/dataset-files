<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\mac\f9\f9_test.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F9_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>




<function><type><name>int</name></type> <name>f9_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>msglen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>K</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>M</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>T</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><literal type="number">20</literal></expr>,
<expr><block>{ <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x48</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x40</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x4B</literal></expr> }</block></expr>
}</block></expr>,

<expr><block>{
<expr><literal type="number">105</literal></expr>,
<expr><block>{ <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x35</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xD2</literal></expr>,
<expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x39</literal></expr>,
<expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
<expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x7A</literal></expr>,
<expr><literal type="number">0x40</literal><operator>|</operator><literal type="number">0x80</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xBA</literal></expr> }</block></expr>,
}</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>T</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>taglen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><literal type="string">"kasumi"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>taglen</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>f9_memory</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>K</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>M</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>msglen</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taglen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>taglen</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>T</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"F9"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





</unit>
