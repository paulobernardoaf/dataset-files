<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\mac\poly1305\poly1305.c">













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_POLY1305</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function><type><specifier>static</specifier> <name>void</name></type> <name>_poly1305_block</name><parameter_list>(<parameter><decl><type><name>poly1305_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>hibit</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>final</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ulong32</name></type> <name>r0</name></decl>,<decl><type ref="prev"/><name>r1</name></decl>,<decl><type ref="prev"/><name>r2</name></decl>,<decl><type ref="prev"/><name>r3</name></decl>,<decl><type ref="prev"/><name>r4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>,<decl><type ref="prev"/><name>s3</name></decl>,<decl><type ref="prev"/><name>s4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>h0</name></decl>,<decl><type ref="prev"/><name>h1</name></decl>,<decl><type ref="prev"/><name>h2</name></decl>,<decl><type ref="prev"/><name>h3</name></decl>,<decl><type ref="prev"/><name>h4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>d0</name></decl>,<decl><type ref="prev"/><name>d1</name></decl>,<decl><type ref="prev"/><name>d2</name></decl>,<decl><type ref="prev"/><name>d3</name></decl>,<decl><type ref="prev"/><name>d4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r0</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r3</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>r4</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name>r1</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name>r2</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s3</name> <operator>=</operator> <name>r3</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>s4</name> <operator>=</operator> <name>r4</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h0</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h1</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h3</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h4</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>inlen</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>in</name><operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>h0</name> <operator>+=</operator> <operator>(</operator><name>tmp</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>in</name><operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>+=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>in</name><operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>h2</name> <operator>+=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>in</name><operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>h3</name> <operator>+=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>in</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>h4</name> <operator>+=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>hibit</name></expr>;</expr_stmt>


<expr_stmt><expr><name>d0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h0</name> <operator>*</operator> <name>r0</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h1</name> <operator>*</operator> <name>s4</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h2</name> <operator>*</operator> <name>s3</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h3</name> <operator>*</operator> <name>s2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h4</name> <operator>*</operator> <name>s1</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h0</name> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h1</name> <operator>*</operator> <name>r0</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h2</name> <operator>*</operator> <name>s4</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h3</name> <operator>*</operator> <name>s3</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h4</name> <operator>*</operator> <name>s2</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h0</name> <operator>*</operator> <name>r2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h1</name> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h2</name> <operator>*</operator> <name>r0</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h3</name> <operator>*</operator> <name>s4</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h4</name> <operator>*</operator> <name>s3</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h0</name> <operator>*</operator> <name>r3</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h1</name> <operator>*</operator> <name>r2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h2</name> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h3</name> <operator>*</operator> <name>r0</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h4</name> <operator>*</operator> <name>s4</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>d4</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h0</name> <operator>*</operator> <name>r4</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h1</name> <operator>*</operator> <name>r3</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h2</name> <operator>*</operator> <name>r2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h3</name> <operator>*</operator> <name>r1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>h4</name> <operator>*</operator> <name>r0</name><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name>d0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>h0</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><name>d0</name> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d1</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name>d1</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><name>d1</name> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d2</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name>d2</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>h2</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><name>d2</name> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d3</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name>d3</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>h3</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><name>d3</name> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>d4</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name>d4</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>h4</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><name>d4</name> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h0</name> <operator>+=</operator> <name>c</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>h0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>h0</name> <operator>=</operator> <name>h0</name> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>h0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>h1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>h2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>h3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>h4</name></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>poly1305_init</name><parameter_list>(<parameter><decl><type><name>poly1305_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keylen</name> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ffff03</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ffc0ff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f03fff</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00fffff</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>leftover</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>final</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>poly1305_process</name><parameter_list>(<parameter><decl><type><name>poly1305_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>leftover</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>want</name> <init>= <expr><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name><name>st</name><operator>-&gt;</operator><name>leftover</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>want</name> <operator>&gt;</operator> <name>inlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>want</name> <operator>=</operator> <name>inlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>want</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>leftover</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>want</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>want</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>leftover</name></name> <operator>+=</operator> <name>want</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>leftover</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>_poly1305_block</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>leftover</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>want</name> <init>= <expr><operator>(</operator><name>inlen</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>_poly1305_block</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>want</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>want</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>inlen</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>inlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>st</name><operator>-&gt;</operator><name>leftover</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>leftover</name></name> <operator>+=</operator> <name>inlen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>poly1305_done</name><parameter_list>(<parameter><decl><type><name>poly1305_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>maclen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>h0</name></decl>,<decl><type ref="prev"/><name>h1</name></decl>,<decl><type ref="prev"/><name>h2</name></decl>,<decl><type ref="prev"/><name>h3</name></decl>,<decl><type ref="prev"/><name>h4</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>g0</name></decl>,<decl><type ref="prev"/><name>g1</name></decl>,<decl><type ref="prev"/><name>g2</name></decl>,<decl><type ref="prev"/><name>g3</name></decl>,<decl><type ref="prev"/><name>g4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>mask</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>mac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>maclen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><operator>*</operator><name>maclen</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>leftover</name></name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>leftover</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>final</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_poly1305_block</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>h0</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h1</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h3</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h4</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>h1</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>=</operator> <name>h1</name> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>h2</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>h2</name> <operator>=</operator> <name>h2</name> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h3</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>h3</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>h3</name> <operator>=</operator> <name>h3</name> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h4</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>h4</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>h4</name> <operator>=</operator> <name>h4</name> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h0</name> <operator>+=</operator> <name>c</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>h0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>h0</name> <operator>=</operator> <name>h0</name> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>


<expr_stmt><expr><name>g0</name> <operator>=</operator> <name>h0</name> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>g0</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>g0</name> <operator>&amp;=</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g1</name> <operator>=</operator> <name>h1</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>g1</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>g1</name> <operator>&amp;=</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g2</name> <operator>=</operator> <name>h2</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>g2</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>g2</name> <operator>&amp;=</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g3</name> <operator>=</operator> <name>h3</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>g3</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal></expr>;</expr_stmt> <expr_stmt><expr><name>g3</name> <operator>&amp;=</operator> <literal type="number">0x3ffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g4</name> <operator>=</operator> <name>h4</name> <operator>+</operator> <name>c</name> <operator>-</operator> <operator>(</operator><literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><name>g4</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>g0</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g1</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g2</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g3</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g4</name> <operator>&amp;=</operator> <name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h0</name> <operator>=</operator> <operator>(</operator><name>h0</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>|</operator> <name>g0</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h1</name> <operator>=</operator> <operator>(</operator><name>h1</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>|</operator> <name>g1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>=</operator> <operator>(</operator><name>h2</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>|</operator> <name>g2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h3</name> <operator>=</operator> <operator>(</operator><name>h3</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>|</operator> <name>g3</name></expr>;</expr_stmt>
<expr_stmt><expr><name>h4</name> <operator>=</operator> <operator>(</operator><name>h4</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>|</operator> <name>g4</name></expr>;</expr_stmt>


<expr_stmt><expr><name>h0</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>h0</name> <operator>)</operator> <operator>|</operator> <operator>(</operator><name>h1</name> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>h1</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>h2</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>h2</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>h3</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>h3</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>h3</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>h4</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><name>h0</name> <operator>+</operator> <name><name>st</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt> <expr_stmt><expr><name>h0</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><name>h1</name> <operator>+</operator> <name><name>st</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>f</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>h1</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><name>h2</name> <operator>+</operator> <name><name>st</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>f</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>h2</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><name>h3</name> <operator>+</operator> <name><name>st</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>f</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>h3</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>h0</name></expr></argument>, <argument><expr><name>mac</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><name>mac</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>h2</name></expr></argument>, <argument><expr><name>mac</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name>h3</name></expr></argument>, <argument><expr><name>mac</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>h</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pad</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>maclen</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
