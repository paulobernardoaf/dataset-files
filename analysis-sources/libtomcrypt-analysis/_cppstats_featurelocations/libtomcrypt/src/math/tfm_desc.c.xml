<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\math\tfm_desc.c">








<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESC_DEF_ONLY</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TFM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tfm.h&gt;</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>tfm_code</name></decl>, <decl><type ref="prev"/><name>ltc_code</name></decl>;</decl_stmt>
}</block> <decl><name><name>tfm_to_ltc_codes</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>FP_OKAY</name></expr> , <expr><name>CRYPT_OK</name></expr>}</block></expr>,
<expr><block>{ <expr><name>FP_MEM</name></expr> , <expr><name>CRYPT_MEM</name></expr>}</block></expr>,
<expr><block>{ <expr><name>FP_VAL</name></expr> , <expr><name>CRYPT_INVALID_ARG</name></expr>}</block></expr>,
}</block></expr></init></decl>;</struct>






<function><type><specifier>static</specifier> <name>int</name></type> <name>tfm_to_ltc_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tfm_to_ltc_codes</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tfm_to_ltc_codes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name><name>tfm_to_ltc_codes</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>tfm_code</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>tfm_to_ltc_codes</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>ltc_code</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fp_int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>a</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_MEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fp_init</name><argument_list>(<argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deinit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHKVD</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>neg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_neg</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>fp_int</name><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>fp_int</name><operator>*</operator><operator>)</operator><name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_copy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_copy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>init</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_MEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><call><name>copy</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>*</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>set_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_set</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>get_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fp_int</name> <modifier>*</modifier></type><name>A</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>used</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>A</name><operator>-&gt;</operator><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ltc_mp_digit</name></type> <name>get_digit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fp_int</name> <modifier>*</modifier></type><name>A</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&gt;=</operator> <name><name>A</name><operator>-&gt;</operator><name>used</name></name> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>A</name><operator>-&gt;</operator><name>dp</name><index>[<expr><name>n</name></expr>]</index></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_digit_count</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fp_int</name> <modifier>*</modifier></type><name>A</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<return>return <expr><name><name>A</name><operator>-&gt;</operator><name>used</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fp_cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FP_LT</name></expr>:</case> <return>return <expr><name>LTC_MP_LT</name></expr>;</return>
<case>case <expr><name>FP_EQ</name></expr>:</case> <return>return <expr><name>LTC_MP_EQ</name></expr>;</return>
<case>case <expr><name>FP_GT</name></expr>:</case> <return>return <expr><name>LTC_MP_GT</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_d</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fp_cmp_d</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>FP_LT</name></expr>:</case> <return>return <expr><name>LTC_MP_LT</name></expr>;</return>
<case>case <expr><name>FP_EQ</name></expr>:</case> <return>return <expr><name>LTC_MP_EQ</name></expr>;</return>
<case>case <expr><name>FP_GT</name></expr>:</case> <return>return <expr><name>LTC_MP_GT</name></expr>;</return>
</block_content>}</block></switch>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>count_bits</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>fp_count_bits</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>count_lsb_bits</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>fp_cnt_lsb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>twoexpt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_2expt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>read_radix</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>tfm_to_ltc_error</name><argument_list>(<argument><expr><call><name>fp_read_radix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>b</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>write_radix</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>tfm_to_ltc_error</name><argument_list>(<argument><expr><call><name>fp_toradix</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>radix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>unsigned_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>fp_unsigned_bin_size</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>unsigned_write</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_to_unsigned_bin</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>unsigned_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_read_unsigned_bin</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>addi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_add_d</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>subi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_sub_d</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>muli</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_mul_d</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>sqr</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_sqr</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>int</name></type> <name>divide</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>tfm_to_ltc_error</name><argument_list>(<argument><expr><call><name>fp_div</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>div_2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_div_2</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>modi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fp_digit</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tfm_to_ltc_error</name><argument_list>(<argument><expr><call><name>fp_mod_d</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_lcm</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>addmod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>tfm_to_ltc_error</name><argument_list>(<argument><expr><call><name>fp_addmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>submod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>tfm_to_ltc_error</name><argument_list>(<argument><expr><call><name>fp_submod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mulmod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>tfm_to_ltc_error</name><argument_list>(<argument><expr><call><name>fp_mulmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqrmod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>tfm_to_ltc_error</name><argument_list>(<argument><expr><call><name>fp_sqrmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>invmod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>tfm_to_ltc_error</name><argument_list>(<argument><expr><call><name>fp_invmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>montgomery_setup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fp_digit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>b</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_MEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tfm_to_ltc_error</name><argument_list>(<argument><expr><call><name>fp_montgomery_setup</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>fp_digit</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>montgomery_normalization</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_calc_normalization</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>montgomery_reduce</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>fp_digit</name> <operator>*</operator><operator>)</operator><name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>montgomery_deinit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>exptmod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>tfm_to_ltc_error</name><argument_list>(<argument><expr><call><name>fp_exptmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>isprime</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>LTC_MILLER_RABIN_REPS</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt> 
<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>fp_isprime_ex</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_YES</name><operator>)</operator></expr> ?</condition><then> <expr><name>LTC_MP_YES</name></expr> </then><else>: <expr><name>LTC_MP_NO</name></expr></else></ternary></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tfm_ecc_projective_dbl_point</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ma</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Mp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fp_int</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fp_digit</name></type> <name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>inf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>P</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>R</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>modulus</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>Mp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>fp_digit</name><operator>*</operator><operator>)</operator><name>Mp</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>P</name> <operator>!=</operator> <name>R</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_copy</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_copy</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_copy</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ltc_ecc_is_point_at_infinity</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ltc_mp</name><operator>.</operator><name>set_int</name></name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ltc_mp</name><operator>.</operator><name>set_int</name></name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ltc_mp</name><operator>.</operator><name>set_int</name></name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>fp_sqr</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ma</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp_d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LTC_MP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>

<expr_stmt><expr><call><name>fp_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>ma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_sqr</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_sqr</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_sqr</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fp_isodd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fp_div_2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fp_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp_d</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp_d</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp_d</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp_d</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>int</name></type> <name>tfm_ecc_projective_add_point</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>Q</name></decl></parameter>, <parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ma</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Mp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>fp_int</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fp_digit</name></type> <name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>inf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>P</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>Q</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>R</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>modulus</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>Mp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>fp_digit</name><operator>*</operator><operator>)</operator><name>Mp</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ltc_ecc_is_point_at_infinity</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ltc_mp</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ltc_mp</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ltc_mp</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ltc_ecc_is_point_at_infinity</name><argument_list>(<argument><expr><name>Q</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>inf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ltc_mp</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ltc_mp</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>ltc_mp</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>( <expr><operator>(</operator><call><name>fp_cmp</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_EQ</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><name><name>Q</name><operator>-&gt;</operator><name>z</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>fp_cmp</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_EQ</name><operator>)</operator> <operator>&amp;&amp;</operator>
<operator>(</operator><call><name>fp_cmp</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_EQ</name> <operator>||</operator> <call><name>fp_cmp</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_EQ</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<return>return <expr><call><name>tfm_ecc_projective_dbl_point</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>ma</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_copy</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_copy</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_copy</name><argument_list>(<argument><expr><name><name>P</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>Q</name><operator>-&gt;</operator><name>z</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fp_sqr</name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>fp_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><name><name>Q</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp_d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp_d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>Q</name><operator>-&gt;</operator><name>z</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name><name>Q</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>fp_sqr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp_d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp_d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp_d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fp_mul</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_montgomery_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>fp_cmp_d</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FP_LT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fp_isodd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fp_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>fp_div_2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fp_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name><name>R</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_rand</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fp_rand</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ltc_math_descriptor</name></type> <name>tfm_desc</name> <init>= <expr><block>{

<expr><literal type="string">"TomsFastMath"</literal></expr>,
<expr><operator>(</operator><name>int</name><operator>)</operator><name>DIGIT_BIT</name></expr>,

<expr><operator>&amp;</operator><name>init</name></expr>,
<expr><operator>&amp;</operator><name>init_copy</name></expr>,
<expr><operator>&amp;</operator><name>deinit</name></expr>,

<expr><operator>&amp;</operator><name>neg</name></expr>,
<expr><operator>&amp;</operator><name>copy</name></expr>,

<expr><operator>&amp;</operator><name>set_int</name></expr>,
<expr><operator>&amp;</operator><name>get_int</name></expr>,
<expr><operator>&amp;</operator><name>get_digit</name></expr>,
<expr><operator>&amp;</operator><name>get_digit_count</name></expr>,
<expr><operator>&amp;</operator><name>compare</name></expr>,
<expr><operator>&amp;</operator><name>compare_d</name></expr>,
<expr><operator>&amp;</operator><name>count_bits</name></expr>,
<expr><operator>&amp;</operator><name>count_lsb_bits</name></expr>,
<expr><operator>&amp;</operator><name>twoexpt</name></expr>,

<expr><operator>&amp;</operator><name>read_radix</name></expr>,
<expr><operator>&amp;</operator><name>write_radix</name></expr>,
<expr><operator>&amp;</operator><name>unsigned_size</name></expr>,
<expr><operator>&amp;</operator><name>unsigned_write</name></expr>,
<expr><operator>&amp;</operator><name>unsigned_read</name></expr>,

<expr><operator>&amp;</operator><name>add</name></expr>,
<expr><operator>&amp;</operator><name>addi</name></expr>,
<expr><operator>&amp;</operator><name>sub</name></expr>,
<expr><operator>&amp;</operator><name>subi</name></expr>,
<expr><operator>&amp;</operator><name>mul</name></expr>,
<expr><operator>&amp;</operator><name>muli</name></expr>,
<expr><operator>&amp;</operator><name>sqr</name></expr>,
<expr><name>NULL</name></expr>, 
<expr><operator>&amp;</operator><name>divide</name></expr>,
<expr><operator>&amp;</operator><name>div_2</name></expr>,
<expr><operator>&amp;</operator><name>modi</name></expr>,
<expr><operator>&amp;</operator><name>gcd</name></expr>,
<expr><operator>&amp;</operator><name>lcm</name></expr>,

<expr><operator>&amp;</operator><name>mulmod</name></expr>,
<expr><operator>&amp;</operator><name>sqrmod</name></expr>,
<expr><operator>&amp;</operator><name>invmod</name></expr>,

<expr><operator>&amp;</operator><name>montgomery_setup</name></expr>,
<expr><operator>&amp;</operator><name>montgomery_normalization</name></expr>,
<expr><operator>&amp;</operator><name>montgomery_reduce</name></expr>,
<expr><operator>&amp;</operator><name>montgomery_deinit</name></expr>,

<expr><operator>&amp;</operator><name>exptmod</name></expr>,
<expr><operator>&amp;</operator><name>isprime</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>ltc_ecc_fp_mulmod</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;</operator><name>ltc_ecc_mulmod</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>tfm_ecc_projective_add_point</name></expr>,
<expr><operator>&amp;</operator><name>tfm_ecc_projective_dbl_point</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;</operator><name>ltc_ecc_projective_add_point</name></expr>,
<expr><operator>&amp;</operator><name>ltc_ecc_projective_dbl_point</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<expr><operator>&amp;</operator><name>ltc_ecc_map</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SHAMIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>ltc_ecc_fp_mul2add</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><operator>&amp;</operator><name>ltc_ecc_mul2add</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MRSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><operator>&amp;</operator><name>rsa_make_key</name></expr>,
<expr><operator>&amp;</operator><name>rsa_exptmod</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><operator>&amp;</operator><name>addmod</name></expr>,
<expr><operator>&amp;</operator><name>submod</name></expr>,

<expr><name>set_rand</name></expr>,

}</block></expr></init></decl>;</decl_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
