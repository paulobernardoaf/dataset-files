<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\misc\adler32.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ADLER32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>_adler32_base</name> <init>= <expr><literal type="number">65521</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>adler32_init</name><parameter_list>(<parameter><decl><type><name>adler32_state</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHKVD</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>adler32_update</name><parameter_list>(<parameter><decl><type><name>adler32_state</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHKVD</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHKVD</name><argument_list>(<argument><expr><name>input</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>%</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<do>do <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <operator>*</operator><name>input</name><operator>++</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block> while <condition>(<expr><name>length</name> <operator>%</operator> <literal type="number">8</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>&gt;=</operator> <name>_adler32_base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>-=</operator> <name>_adler32_base</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s2</name> <operator>%=</operator> <name>_adler32_base</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>input</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>input</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>input</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>input</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name><name>input</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s2</name> <operator>+=</operator> <name>s1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>s1</name> <operator>&gt;=</operator> <name>_adler32_base</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>s1</name> <operator>-=</operator> <name>_adler32_base</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>s2</name> <operator>%=</operator> <name>_adler32_base</name></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><call><name>LTC_ARGCHKVD</name><argument_list>(<argument><expr><name>s1</name> <operator>&lt;</operator> <name>_adler32_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHKVD</name><argument_list>(<argument><expr><name>s2</name> <operator>&lt;</operator> <name>_adler32_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>s1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name>s2</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>adler32_finish</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>adler32_state</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHKVD</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHKVD</name><argument_list>(<argument><expr><name>hash</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>hash</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>
<default>default:</default>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0ff</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0ff</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0ff</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>
<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0ff</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case>
<empty_stmt>;</empty_stmt>
</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>adler32_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>in</name> <init>= <expr><literal type="string">"libtomcrypt"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>adler32</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xba</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>adler32_state</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>adler32_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>adler32_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>adler32_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>adler32</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"adler32"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
