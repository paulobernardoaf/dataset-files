<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\misc\padding\padding_depad.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PADDING</name></expr></argument>)</argument_list></call></expr></cpp:if>











<function><type><name>int</name></type> <name>padding_depad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>length</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>padded_length</name></decl>, <decl><type ref="prev"/><name>unpadded_length</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>pad</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>enum</name> <name>padding_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>length</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>padded_length</name> <operator>=</operator> <operator>*</operator><name>length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>mode</name> <operator>&amp;</operator> <name>LTC_PAD_MASK</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <name>LTC_PAD_ONE_AND_ZERO</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <name><name>data</name><index>[<expr><name>padded_length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pad</name> <operator>&gt;</operator> <name>padded_length</name> <operator>||</operator> <name>pad</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>unpadded_length</name> <operator>=</operator> <name>padded_length</name> <operator>-</operator> <name>pad</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>unpadded_length</name> <operator>=</operator> <name>padded_length</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LTC_PAD_ANSI_X923</name></expr>:</case>
<expr_stmt><expr><name>pad</name> <operator>=</operator> <literal type="number">0x0</literal></expr>;</expr_stmt>

<case>case <expr><name>LTC_PAD_PKCS7</name></expr>:</case>
<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>unpadded_length</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>padded_length</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <name>pad</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></for>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RNG_GET_BYTES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>LTC_PAD_ISO_10126</name></expr>:</case>

<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<case>case <expr><name>LTC_PAD_ONE_AND_ZERO</name></expr>:</case>
<while>while <condition>(<expr><name>unpadded_length</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><name>unpadded_length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>unpadded_length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>unpadded_length</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>unpadded_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>unpadded_length</name><operator>--</operator></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>unpadded_length</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return></block_content></block></if></if_stmt>
<break>break;</break>
<case>case <expr><name>LTC_PAD_ZERO</name></expr>:</case>
<case>case <expr><name>LTC_PAD_ZERO_ALWAYS</name></expr>:</case>
<while>while <condition>(<expr><name>unpadded_length</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>data</name><index>[<expr><name>unpadded_length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>unpadded_length</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>LTC_PAD_ZERO_ALWAYS</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>unpadded_length</name> <operator>==</operator> <name>padded_length</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>unpadded_length</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<break>break;</break>
<default>default:</default>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name>unpadded_length</name></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
