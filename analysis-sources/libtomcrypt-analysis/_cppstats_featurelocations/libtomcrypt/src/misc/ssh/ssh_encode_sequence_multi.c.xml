<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\misc\ssh\ssh_encode_sequence_multi.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>








<function><type><name>int</name></type> <name>ssh_encode_sequence_multi</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssh_data_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>vdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong32</name></type> <name>u32data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>u64data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>ssh_data_type</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>LTC_SSHDATA_EOL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LTC_SSHDATA_BYTE</name></expr>:</case>
<case>case <expr><name>LTC_SSHDATA_BOOLEAN</name></expr>:</case> 
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>( <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_SSHDATA_UINT32</name></expr>:</case>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>( <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>ulong32</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_SSHDATA_UINT64</name></expr>:</case>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>( <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>ulong64</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_SSHDATA_STRING</name></expr>:</case>
<case>case <expr><name>LTC_SSHDATA_NAMELIST</name></expr>:</case>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>( <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <macro><name>va_arg</name><argument_list>(<argument>args</argument>, <argument>unsigned long</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_SSHDATA_MPINT</name></expr>:</case>
<expr_stmt><expr><name>vdata</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mp_iszero</name><argument_list>(<argument><expr><name>vdata</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_YES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name>vdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>mp_count_bits</name><argument_list>(<argument><expr><name>vdata</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
</block_content>}</block></if></if_stmt>
<break>break;</break>

<case>case <expr><name>LTC_SSHDATA_EOL</name></expr>:</case> 
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_ARG</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outlen</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_BUFFER_OVERFLOW</name></expr>;</expr_stmt>
<goto>goto <name>errornoargs</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><operator>(</operator><name>type</name> <operator>=</operator> <operator>(</operator><name>ssh_data_type</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>LTC_SSHDATA_EOL</name></expr>)</condition> <block>{<block_content>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
<case>case <expr><name>LTC_SSHDATA_BYTE</name></expr>:</case>
<expr_stmt><expr><name>idata</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>idata</name> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_SSHDATA_BOOLEAN</name></expr>:</case>
<expr_stmt><expr><name>idata</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>idata</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_SSHDATA_UINT32</name></expr>:</case>
<expr_stmt><expr><name>u32data</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>ulong32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>u32data</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_SSHDATA_UINT64</name></expr>:</case>
<expr_stmt><expr><name>u64data</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>ulong64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE64H</name><argument_list>(<argument><expr><name>u64data</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_SSHDATA_STRING</name></expr>:</case>
<case>case <expr><name>LTC_SSHDATA_NAMELIST</name></expr>:</case>
<expr_stmt><expr><name>sdata</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>args</argument>, <argument>unsigned long</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>sdata</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
<break>break;</break>
<case>case <expr><name>LTC_SSHDATA_MPINT</name></expr>:</case>
<expr_stmt><expr><name>vdata</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>mp_iszero</name><argument_list>(<argument><expr><name>vdata</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LTC_MP_YES</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name>vdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>mp_count_bits</name><argument_list>(<argument><expr><name>vdata</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>size</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_to_unsigned_bin</name><argument_list>(<argument><expr><name>vdata</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<break>break;</break>

<case>case <expr><name>LTC_SSHDATA_EOL</name></expr>:</case> 
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_ARG</name></expr>;</expr_stmt>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></switch>
</block_content>}</block></while>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>

<label><name>error</name>:</label>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>errornoargs</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
