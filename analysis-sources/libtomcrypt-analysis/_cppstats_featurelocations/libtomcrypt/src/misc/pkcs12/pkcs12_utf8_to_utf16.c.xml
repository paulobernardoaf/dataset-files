<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\misc\pkcs12\pkcs12_utf8_to_utf16.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_12</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>pkcs12_utf8_to_utf16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>in_end</name> <init>= <expr><name>in</name> <operator>+</operator> <name>inlen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ulong32</name></type> <name><name>offset</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00000000UL</literal></expr>, <expr><literal type="number">0x00003080UL</literal></expr>, <expr><literal type="number">0x000E2080UL</literal></expr>,
<expr><literal type="number">0x03C82080UL</literal></expr>, <expr><literal type="number">0xFA082080UL</literal></expr>, <expr><literal type="number">0x82082080UL</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>CRYPT_ERROR</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>in</name> <operator>&lt;</operator> <name>in_end</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>&gt;=</operator> <literal type="number">192</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>extra</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>&gt;=</operator> <literal type="number">224</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>extra</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>&gt;=</operator> <literal type="number">240</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>extra</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>&gt;=</operator> <literal type="number">248</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>extra</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>in</name> <operator>&gt;=</operator> <literal type="number">252</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>extra</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 
<if_stmt><if>if <condition>(<expr><name>in</name> <operator>+</operator> <name>extra</name> <operator>&gt;=</operator> <name>in_end</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ERROR</name>;</goto></block_content></block></if></if_stmt>
<switch>switch <condition>(<expr><name>extra</name></expr>)</condition> <block>{<block_content>
<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>+=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>+=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>+=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>+=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>+=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>ch</name> <operator>+=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></switch>
<expr_stmt><expr><name>ch</name> <operator>-=</operator> <name><name>offset</name><index>[<expr><name>extra</name></expr>]</index></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>ERROR</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outlen</name> <operator>&gt;=</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ch</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>err</name> <operator>=</operator> <ternary><condition><expr><name>len</name> <operator>&gt;</operator> <operator>*</operator><name>outlen</name></expr> ?</condition><then> <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr> </then><else>: <expr><name>CRYPT_OK</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
<label><name>ERROR</name>:</label>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
