<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\misc\crypt\crypt.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>





<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_VALUE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#s"="NAME(s)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#s</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>crypt_build_settings</name> <init>=
<expr><literal type="string">"LibTomCrypt "</literal> <name>SCRYPT</name> <literal type="string">" (www.libtom.net)\n"</literal>
<literal type="string">"LibTomCrypt is public domain software.\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_BUILD_DATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"Built on "</literal> <name>__DATE__</name> <literal type="string">" at "</literal> <name>__TIME__</name> <literal type="string">"\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"\n\nEndianness: "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDIAN_NEUTRAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"neutral/"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDIAN_LITTLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"little"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDIAN_BIG</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">"big"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDIAN_32BITWORD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" (32-bit words)\n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDIAN_64BITWORD</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">" (64-bit words)\n"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">" (no wordsize defined)\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"Clean stack: "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"enabled\n"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"disabled\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"\nCiphers built-in:\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLOWFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Blowfish\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" RC2\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" RC5\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" RC6\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFERP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Safer+\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Safer\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIJNDAEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Rijndael\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XTEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" XTEA\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Twofish "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_TABLES</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_ALL_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"(small, tables, all_tables)\n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">"(small, tables)\n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_ALL_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">"(small, all_tables)\n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_TABLES</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_ALL_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">"(tables, all_tables)\n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_SMALL</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">"(small)\n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">"(tables)\n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH_ALL_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">"(all_tables)\n"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" DES\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAST5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" CAST5\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NOEKEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Noekeon\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SKIPJACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Skipjack\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KHAZAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Khazad\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ANUBIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Anubis "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ANUBIS_TWEAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" (tweaked)"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KSEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" KSEED\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KASUMI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" KASUMI\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MULTI2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" MULTI2\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAMELLIA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Camellia\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_IDEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" IDEA\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SERPENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Serpent\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" TEA\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"Stream ciphers built-in:\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" ChaCha\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SALSA20</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Salsa20\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XSALSA20</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" XSalsa20\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOSEMANUK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Sosemanuk\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RABBIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Rabbit\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC4_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" RC4\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOBER128_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" SOBER128\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\nHashes built-in:\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" SHA3\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KECCAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" KECCAK\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" SHA-512\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" SHA-384\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512_256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" SHA-512/256\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" SHA-256\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512_224</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" SHA-512/224\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA224</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" SHA-224\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" TIGER\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" SHA1\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" MD5\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" MD4\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" MD2\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" RIPEMD128\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD160</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" RIPEMD160\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" RIPEMD256\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD320</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" RIPEMD320\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_WHIRLPOOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" WHIRLPOOL\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" BLAKE2S\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2B</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" BLAKE2B\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHC_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" CHC_HASH\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\nBlock Chaining Modes:\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CFB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" CFB\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OFB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" OFB\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" ECB\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CBC_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" CBC\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CTR_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" CTR\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_LRW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LRW"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_LRW_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" (tables) "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F8_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" F8\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XTS_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" XTS\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\nMACs:\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" HMAC\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" OMAC\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" PMAC\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PELICAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" PELICAN\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XCBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" XCBC\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F9_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" F9\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_POLY1305</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" POLY1305\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2SMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" BLAKE2S MAC\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2BMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" BLAKE2B MAC\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\nENC + AUTH modes:\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_EAX_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" EAX\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OCB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" OCB\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OCB3_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" OCB3\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CCM_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" CCM\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" GCM"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" (tables) "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_TABLES_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" (SSE2) "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA20POLY1305_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" CHACHA20POLY1305\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\nPRNG:\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_YARROW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Yarrow ("</literal><call><name>NAME_VALUE</name><argument_list>(<argument><expr><name>LTC_YARROW_AES</name></expr></argument>)</argument_list></call><literal type="string">")\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SPRNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" SPRNG\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" RC4\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA20_PRNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" ChaCha20\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Fortuna ("</literal> <call><name>NAME_VALUE</name><argument_list>(<argument><expr><name>LTC_FORTUNA_POOLS</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA_RESEED_RATELIMIT_TIMED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"LTC_FORTUNA_RESEED_RATELIMIT_TIMED, "</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<literal type="string">"LTC_FORTUNA_RESEED_RATELIMIT_STATIC, "</literal> <call><name>NAME_VALUE</name><argument_list>(<argument><expr><name>LTC_FORTUNA_WD</name></expr></argument>)</argument_list></call>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">")\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOBER128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" SOBER128\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\nPK Crypto:\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MRSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" RSA"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RSA_BLINDING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_RSA_CRT_HARDENING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" (with blinding and CRT hardening)"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RSA_BLINDING</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">" (with blinding)"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RSA_CRT_HARDENING</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">" (with CRT hardening)"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" DH\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" ECC"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_TIMING_RESISTANT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" (with blinding)"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" DSA\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CURVE25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CURVE25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Ed25519\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CURVE25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" X25519\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PK_MAX_RETRIES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" "</literal><call><name>NAME_VALUE</name><argument_list>(<argument><expr><name>LTC_PK_MAX_RETRIES</name></expr></argument>)</argument_list></call><literal type="string">"\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\nMPI (Math):\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_MPI\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTM_DESC\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TFM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" TFM_DESC\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GMP_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" GMP_DESC\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MILLER_RABIN_REPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" "</literal><call><name>NAME_VALUE</name><argument_list>(<argument><expr><name>LTC_MILLER_RABIN_REPS</name></expr></argument>)</argument_list></call><literal type="string">"\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\nCompiler:\n"</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" WIN64 platform detected.\n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">" WIN32 platform detected.\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" CYGWIN Detected.\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__DJGPP__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" DJGPP Detected.\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" MSVC compiler detected.\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__clang_version__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" Clang compiler "</literal> <name>__clang_version__</name> <literal type="string">".\n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INTEL_CC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">" Intel C Compiler "</literal> <name>__VERSION__</name> <literal type="string">".\n"</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
<literal type="string">" GCC compiler "</literal> <name>__VERSION__</name> <literal type="string">".\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" x86-64 detected.\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PPC32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" PPC32 detected.\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<literal type="string">"\nVarious others: "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ARGTYPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" "</literal> <call><name>NAME_VALUE</name><argument_list>(<argument><expr><name>ARGTYPE</name></expr></argument>)</argument_list></call> <literal type="string">" "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ADLER32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" ADLER32 "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BASE64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" BASE64 "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BASE64_URL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" BASE64-URL-SAFE "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BASE32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" BASE32 "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BASE16</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" BASE16 "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BCRYPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" BCRYPT "</literal>
<literal type="string">" "</literal> <call><name>NAME_VALUE</name><argument_list>(<argument><expr><name>LTC_BCRYPT_DEFAULT_ROUNDS</name></expr></argument>)</argument_list></call> <literal type="string">" "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CRC32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" CRC32 "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" DER "</literal>
<literal type="string">" "</literal> <call><name>NAME_VALUE</name><argument_list>(<argument><expr><name>LTC_DER_MAX_RECURSION</name></expr></argument>)</argument_list></call> <literal type="string">" "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" PKCS#1 "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" PKCS#5 "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" PKCS#8 "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_12</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" PKCS#12 "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PADDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" PADDING "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_HKDF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" HKDF "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PBES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" PBES1 "</literal>
<literal type="string">" PBES2 "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" SSH "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DEVRANDOM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_DEVRANDOM "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TRY_URANDOM_FIRST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_TRY_URANDOM_FIRST "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RNG_GET_BYTES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_RNG_GET_BYTES "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RNG_MAKE_PRNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_RNG_MAKE_PRNG "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PRNG_ENABLE_LTC_RNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_PRNG_ENABLE_LTC_RNG "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_HASH_HELPERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_HASH_HELPERS "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_VALGRIND</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_VALGRIND "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_TEST "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" "</literal> <call><name>NAME_VALUE</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call> <literal type="string">" "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_TEST_EXT "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SMALL_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_SMALL_CODE "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_NO_FILE "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FILE_READ_BUFSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" "</literal> <call><name>NAME_VALUE</name><argument_list>(<argument><expr><name>LTC_FILE_READ_BUFSIZE</name></expr></argument>)</argument_list></call> <literal type="string">" "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_FAST "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_NO_FAST "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_BSWAP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_NO_BSWAP "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_NO_ASM "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ROx_BUILTIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_ROx_BUILTIN "</literal>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ROx_ASM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<literal type="string">" LTC_ROx_ASM "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_ROLC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_NO_ROLC "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_NO_TEST "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_TABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_NO_TABLES "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PTHREAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_PTHREAD "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_EASY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_EASY "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC_ACCEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_MECC_ACCEL "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_MECC_FP "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SHAMIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_ECC_SHAMIR "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLOCK_GETTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">" LTC_CLOCK_GETTIME "</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<literal type="string">"\n"</literal></expr></init></decl>
;</decl_stmt>





</unit>
