<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\misc\crypt\crypt_constants.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>











<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>crypt_constant</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_C_STRINGIFY</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #s, s }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>crypt_constant</name></type> <name><name>_crypt_constants</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_ERROR</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_NOP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_INVALID_KEYSIZE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_INVALID_ROUNDS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_FAIL_TESTVECTOR</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_BUFFER_OVERFLOW</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_INVALID_PACKET</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_INVALID_PRNGSIZE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_ERROR_READPRNG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_INVALID_CIPHER</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_INVALID_HASH</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_INVALID_PRNG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_MEM</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_PK_TYPE_MISMATCH</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_PK_NOT_PRIVATE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_INVALID_ARG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_FILE_NOTFOUND</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_PK_INVALID_TYPE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_OVERFLOW</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_PK_ASN1_ERROR</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_INPUT_TOO_LONG</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_PK_INVALID_SIZE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_INVALID_PRIME_SIZE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_PK_INVALID_PADDING</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CRYPT_HASH_OVERFLOW</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>PK_PUBLIC</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>PK_PRIVATE</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ENCRYPT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_DECRYPT</name></expr></argument>)</argument_list></call></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"LTC_PKCS_1"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_PKCS_1_EMSA</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_PKCS_1_EME</name></expr></argument>)</argument_list></call></expr>,


<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_PKCS_1_V1_5</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_PKCS_1_OAEP</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_PKCS_1_PSS</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_PKCS_1_V1_5_NA1</name></expr></argument>)</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"LTC_PKCS_1"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PADDING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"LTC_PADDING"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_PAD_PKCS7</name></expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RNG_GET_BYTES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_PAD_ISO_10126</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_PAD_ANSI_X923</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_PAD_ONE_AND_ZERO</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_PAD_ZERO</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_PAD_ZERO_ALWAYS</name></expr></argument>)</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"LTC_PADDING"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MRSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"LTC_MRSA"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"LTC_MRSA"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"LTC_MECC"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>ECC_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>ECC_MAXSIZE</name></expr></argument>)</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"LTC_MECC"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"LTC_MDSA"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_MDSA_DELTA</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_MDSA_MAX_GROUP</name></expr></argument>)</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"LTC_MDSA"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MILLER_RABIN_REPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_MILLER_RABIN_REPS</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{<expr><literal type="string">"LTC_DER"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_EOL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_BOOLEAN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_BIT_STRING</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_NULL</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_IA5_STRING</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_PRINTABLE_STRING</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_UTF8_STRING</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_UTCTIME</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_CHOICE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_SET</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_SETOF</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_RAW_BIT_STRING</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_TELETEX_STRING</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_GENERALIZEDTIME</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_DER_MAX_RECURSION</name></expr></argument>)</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"LTC_DER"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CTR_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"LTC_CTR_MODE"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CTR_COUNTER_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>CTR_COUNTER_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_CTR_RFC3686</name></expr></argument>)</argument_list></call></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"LTC_CTR_MODE"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_GCM_MODE_IV</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_GCM_MODE_AAD</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_GCM_MODE_TEXT</name></expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_MP_LT</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_MP_EQ</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_MP_GT</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_MP_NO</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>LTC_MP_YES</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>MAXBLOCKSIZE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>TAB_SIZE</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>_C_STRINGIFY</name><argument_list>(<argument><expr><name>ARGTYPE</name></expr></argument>)</argument_list></call></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"LTM_DESC"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"LTM_DESC"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TFM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"TFM_DESC"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"TFM_DESC"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GMP_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"GMP_DESC"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"GMP_DESC"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"LTC_FAST"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"LTC_FAST"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"LTC_NO_FILE"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"LTC_NO_FILE"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDIAN_LITTLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ENDIAN_LITTLE"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"ENDIAN_LITTLE"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDIAN_BIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ENDIAN_BIG"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"ENDIAN_BIG"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDIAN_32BITWORD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ENDIAN_32BITWORD"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"ENDIAN_32BITWORD"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDIAN_64BITWORD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ENDIAN_64BITWORD"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"ENDIAN_64BITWORD"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDIAN_NEUTRAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{<expr><literal type="string">"ENDIAN_NEUTRAL"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><block>{<expr><literal type="string">"ENDIAN_NEUTRAL"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>






<function><type><name>int</name></type> <name>crypt_get_constant</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>namein</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>valueout</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_crypt_constants_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>_crypt_constants</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>_crypt_constants</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>_crypt_constants_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><call><name>XSTRCMP</name><argument_list>(<argument><expr><name><name>_crypt_constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>namein</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>valueout</name> <operator>=</operator> <name><name>_crypt_constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>











<function><type><name>int</name></type> <name>crypt_list_all_constants</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>names_list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>names_list_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>number_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>_crypt_constants</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>_crypt_constants</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>number_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s,%d\n"</literal></expr></argument>, <argument><expr><name><name>_crypt_constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>_crypt_constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>number_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>total_len</name> <operator>+=</operator> <name>number_len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>names_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>names_list_size</name> <operator>=</operator> <name>total_len</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>total_len</name> <operator>&gt;</operator> <operator>*</operator><name>names_list_size</name></expr>)</condition> <block>{<block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>names_list</name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>number_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>total_len</name></expr></argument>, <argument><expr><literal type="string">"%s,%d\n"</literal></expr></argument>, <argument><expr><name><name>_crypt_constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>_crypt_constants</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>number_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>number_len</name> <operator>&gt;</operator> <name>total_len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>total_len</name> <operator>-=</operator> <name>number_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>number_len</name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name>ptr</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





</unit>
