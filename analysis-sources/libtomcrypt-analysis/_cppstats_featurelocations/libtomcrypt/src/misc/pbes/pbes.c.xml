<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\misc\pbes\pbes.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PBES</name></expr></argument>)</argument_list></call></expr></cpp:if>









<function><type><name>int</name></type> <name>pbes_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pbes_arg</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dec_data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>dec_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>hid</name></decl>, <decl><type ref="prev"/><name>cid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>k</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>klen</name></decl>, <decl><type ref="prev"/><name>keylen</name></decl>, <decl><type ref="prev"/><name>dlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_CBC</name></type> <name>cbc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>arg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>kdf</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>dec_data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>dec_size</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hid</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>hid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_HASH</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>cid</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cid</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_CIPHER</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>klen</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>keylen</name></name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>key_bits</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>arg</name><operator>-&gt;</operator><name>key_bits</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_KEYSIZE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>klen</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>key_bits</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>keylen</name> <operator>=</operator> <name>klen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>iv</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>iv</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>iv</name> <operator>=</operator> <name>k</name> <operator>+</operator> <name>klen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>klen</name> <operator>+=</operator> <name><name>arg</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>blocklen</name></name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>arg</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>kdf</name></name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>pwd</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>pwdlen</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>salt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>salt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>iterations</name></name></expr></argument>, <argument><expr><name>hid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>klen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_ERROR</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cbc_start</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_ERROR</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cbc_decrypt</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>enc_data</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>dec_data</name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>enc_data</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_ERROR</name>;</goto></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cbc_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_ERROR</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>dlen</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>enc_data</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>padding_depad</name><argument_list>(<argument><expr><name>dec_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dlen</name></expr></argument>, <argument><expr><name>LTC_PAD_PKCS7</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_ERROR</name>;</goto></block_content></block></if></if_stmt>
<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><name><name>arg</name><operator>-&gt;</operator><name>enc_data</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><name>long</name><operator>)</operator><name>dlen</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>diff</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>diff</name> <operator>&gt;</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cid</name></expr>]</index></name><operator>.</operator><name>block_length</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_INVALID_PADDING</name></expr>;</expr_stmt>
<goto>goto <name>LBL_ERROR</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>dec_size</name> <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<label><name>LBL_ERROR</name>:</label>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>dec_data</name></expr></argument>, <argument><expr><operator>*</operator><name>dec_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
