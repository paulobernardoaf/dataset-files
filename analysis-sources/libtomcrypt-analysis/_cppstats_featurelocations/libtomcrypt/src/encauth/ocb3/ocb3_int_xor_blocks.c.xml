<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\encauth\ocb3\ocb3_int_xor_blocks.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OCB3_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>








<function><type><name>void</name></type> <name>ocb3_int_xor_blocks</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>block_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>block_b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>block_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <name>block_a</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>block_len</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>block_b</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></if>
<else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>block_len</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>block_a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^</operator> <name><name>block_b</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
