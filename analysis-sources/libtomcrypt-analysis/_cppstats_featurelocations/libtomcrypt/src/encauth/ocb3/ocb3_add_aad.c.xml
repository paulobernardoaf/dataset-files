<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\encauth\ocb3\ocb3_add_aad.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OCB3_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>







<function><type><specifier>static</specifier> <name>int</name></type> <name>_ocb3_int_aad_add_block</name><parameter_list>(<parameter><decl><type><name>ocb3_state</name> <modifier>*</modifier></type><name>ocb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aad_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>ocb3_int_xor_blocks</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aOffset_current</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aOffset_current</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>L_</name><index>[<expr><call><name>ocb3_int_ntz</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>ablock_index</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>ocb3_int_xor_blocks</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>aad_block</name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aOffset_current</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name><name>ocb</name><operator>-&gt;</operator><name>cipher</name></name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ocb</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ocb3_int_xor_blocks</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aSum_current</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aSum_current</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ocb</name><operator>-&gt;</operator><name>ablock_index</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>ocb3_add_aad</name><parameter_list>(<parameter><decl><type><name>ocb3_state</name> <modifier>*</modifier></type><name>ocb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aad</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>aadlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>full_blocks</name></decl>, <decl><type ref="prev"/><name>full_blocks_len</name></decl>, <decl><type ref="prev"/><name>last_block_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>datalen</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ocb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>aadlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>aad</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer_bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name> <operator>-</operator> <name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer_bytes</name></name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>aadlen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>l</name> <operator>=</operator> <name>aadlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer</name></name><operator>+</operator><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer_bytes</name></name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer_bytes</name></name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer_bytes</name></name> <operator>==</operator> <name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>_ocb3_int_aad_add_block</name><argument_list>(<argument><expr><name>ocb</name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>aad</name> <operator>+</operator> <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>datalen</name> <operator>=</operator> <name>aadlen</name> <operator>-</operator> <name>l</name></expr>;</expr_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>aad</name></expr>;</expr_stmt>
<expr_stmt><expr><name>datalen</name> <operator>=</operator> <name>aadlen</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>datalen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>full_blocks</name> <operator>=</operator> <name>datalen</name><operator>/</operator><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>full_blocks_len</name> <operator>=</operator> <name>full_blocks</name> <operator>*</operator> <name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_block_len</name> <operator>=</operator> <name>datalen</name> <operator>-</operator> <name>full_blocks_len</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>full_blocks</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>_ocb3_int_aad_add_block</name><argument_list>(<argument><expr><name>ocb</name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>x</name><operator>*</operator><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last_block_len</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer</name></name></expr></argument>, <argument><expr><name>data</name><operator>+</operator><name>full_blocks_len</name></expr></argument>, <argument><expr><name>last_block_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer_bytes</name></name> <operator>=</operator> <name>last_block_len</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
