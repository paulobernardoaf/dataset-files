<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\encauth\chachapoly\chacha20poly1305_test.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA20POLY1305_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>chacha20poly1305_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>chacha20poly1305_state</name></type> <name>st1</name></decl>, <decl><type ref="prev"/><name>st2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>k</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x9f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>i12</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x47</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>i8</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x43</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>aad</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xc7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>enc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xC2</literal></expr>,
<expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xD6</literal></expr>,
<expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x8B</literal></expr>,
<expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x36</literal></expr>,
<expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x58</literal></expr>,
<expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xBC</literal></expr>,
<expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0x4B</literal></expr>,
<expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x16</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tag</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x91</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>m</name><index>[]</index></name> <init>= <expr><literal type="string">"Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it."</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>mlen</name> <init>= <expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rfc7905_pt</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rfc7905_enc</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x1E</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rfc7905_tag</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xE4</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ct</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>emac</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dmac</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>i12</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i12</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_add_aad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>m</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>m</name> <operator>+</operator> <literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>ct</name> <operator>+</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>m</name> <operator>+</operator> <literal type="number">35</literal></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><name>ct</name> <operator>+</operator> <literal type="number">35</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>m</name> <operator>+</operator> <literal type="number">70</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ct</name> <operator>+</operator> <literal type="number">70</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>m</name> <operator>+</operator> <literal type="number">75</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ct</name> <operator>+</operator> <literal type="number">75</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>m</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><name>mlen</name> <operator>-</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><name>ct</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>emac</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ENC-CT"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>emac</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ENC-TAG"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st2</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st2</name></expr></argument>, <argument><expr><name>i12</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i12</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_add_aad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st2</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st2</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st2</name></expr></argument>, <argument><expr><name>ct</name> <operator>+</operator> <literal type="number">21</literal></expr></argument>, <argument><expr><name>mlen</name> <operator>-</operator> <literal type="number">21</literal></expr></argument>, <argument><expr><name>pt</name> <operator>+</operator> <literal type="number">21</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dmac</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st2</name></expr></argument>, <argument><expr><name>dmac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><literal type="string">"DEC-PT"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>dmac</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"DEC-TAG"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>emac</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_memory</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>i12</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i12</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aad</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>m</name></expr></argument>,
<argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>CHACHA20POLY1305_ENCRYPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ENC-CT2"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>emac</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"ENC-TAG2"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dmac</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>dmac</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_memory</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>i12</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i12</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aad</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>dmac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>CHACHA20POLY1305_DECRYPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><literal type="string">"DEC-PT2"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_setiv_rfc7905</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>i12</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i12</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x1122334455667788</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_add_aad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>rfc7905_pt</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>emac</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>rfc7905_enc</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"ENC-CT3"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>emac</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rfc7905_tag</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"ENC-TAG3"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_setiv_rfc7905</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>i12</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i12</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x1122334455667788</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_add_aad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dmac</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>dmac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>rfc7905_pt</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"DEC-CT3"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>dmac</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>rfc7905_tag</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"DEC-TAG3"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>i8</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_add_aad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_encrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>m</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>emac</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st1</name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st2</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st2</name></expr></argument>, <argument><expr><name>i8</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_add_aad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st2</name></expr></argument>, <argument><expr><name>aad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_decrypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st2</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dmac</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st2</name></expr></argument>, <argument><expr><name>dmac</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><literal type="string">"DEC-PT4"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>dmac</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>emac</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"DEC-TAG4"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>


<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0xaa</literal></expr>,<expr><literal type="number">0xbb</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xdd</literal></expr>,<expr><literal type="number">0xee</literal></expr>,<expr><literal type="number">0xff</literal></expr>,
<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0xaa</literal></expr>,<expr><literal type="number">0xbb</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xdd</literal></expr>,<expr><literal type="number">0xee</literal></expr>,<expr><literal type="number">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x0a</literal></expr>,<expr><literal type="number">0x0b</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>valid_tag</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xa3</literal></expr>,<expr><literal type="number">0xe3</literal></expr>,<expr><literal type="number">0xfd</literal></expr>,<expr><literal type="number">0xf9</literal></expr>,<expr><literal type="number">0xfb</literal></expr>,<expr><literal type="number">0xa6</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x1b</literal></expr>,<expr><literal type="number">0x5a</literal></expr>,<expr><literal type="number">0xd2</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x7f</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0xb7</literal></expr>,<expr><literal type="number">0xf4</literal></expr>,<expr><literal type="number">0x47</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>invalid_tag</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xa2</literal></expr>,<expr><literal type="number">0xe3</literal></expr>,<expr><literal type="number">0xfd</literal></expr>,<expr><literal type="number">0xf9</literal></expr>,<expr><literal type="number">0xfb</literal></expr>,<expr><literal type="number">0xa6</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x1b</literal></expr>,<expr><literal type="number">0x5a</literal></expr>,<expr><literal type="number">0xd2</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x7f</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0xb7</literal></expr>,<expr><literal type="number">0xf4</literal></expr>,<expr><literal type="number">0x47</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>waad</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x64</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>wct</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>wpt</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>wtag</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>taglen</name></decl>;</decl_stmt>


<expr_stmt><expr><name>taglen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>wtag</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_memory</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>waad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>waad</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>wpt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wct</name></expr></argument>, <argument><expr><name>wtag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taglen</name></expr></argument>, <argument><expr><name>CHACHA20POLY1305_ENCRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>wtag</name></expr></argument>, <argument><expr><name>taglen</name></expr></argument>, <argument><expr><name>valid_tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>valid_tag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"WYCH"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>taglen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>valid_tag</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_memory</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>waad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>waad</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>wpt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wct</name></expr></argument>, <argument><expr><name>valid_tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taglen</name></expr></argument>, <argument><expr><name>CHACHA20POLY1305_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>taglen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>invalid_tag</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>chacha20poly1305_memory</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>waad</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>waad</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>wpt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>wct</name></expr></argument>, <argument><expr><name>invalid_tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taglen</name></expr></argument>, <argument><expr><name>CHACHA20POLY1305_DECRYPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return> 
</block_content>}</block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
