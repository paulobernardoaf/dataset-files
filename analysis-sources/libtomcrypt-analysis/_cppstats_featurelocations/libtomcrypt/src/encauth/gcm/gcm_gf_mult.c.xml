<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\encauth\gcm\gcm_gf_mult.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_TABLES</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_LRW_TABLES</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_MODE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_FAST</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>



<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>gcm_shift_table</name><index>[<expr><literal type="number">256</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x4e</literal></expr>,
<expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x5e</literal></expr>,
<expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x6e</literal></expr>,
<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x7e</literal></expr>,
<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>,
<expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x1e</literal></expr>,
<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x2e</literal></expr>,
<expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x3e</literal></expr>,
<expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xce</literal></expr>,
<expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x7b</literal></expr>, <expr><literal type="number">0xde</literal></expr>,
<expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xee</literal></expr>,
<expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xfe</literal></expr>,
<expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x8e</literal></expr>,
<expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x9e</literal></expr>,
<expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xae</literal></expr>,
<expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xbe</literal></expr>,
<expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x4e</literal></expr>,
<expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x5e</literal></expr>,
<expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x6e</literal></expr>,
<expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x7e</literal></expr>,
<expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x0e</literal></expr>,
<expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x1e</literal></expr>,
<expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x2e</literal></expr>,
<expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x3e</literal></expr>,
<expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xce</literal></expr>,
<expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xde</literal></expr>,
<expr><literal type="number">0x8d</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xee</literal></expr>,
<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xfe</literal></expr>,
<expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x8e</literal></expr>,
<expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x9e</literal></expr>,
<expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xae</literal></expr>,
<expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xbe</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_MODE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LRW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_gcm_rightshift</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>mask</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>poly</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xE1</literal></expr> }</block></expr></init></decl>;</decl_stmt>








<function><type><name>void</name></type> <name>gcm_gf_mult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>Z</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>V</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>b</name><index>[<expr><name>x</name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>mask</name><index>[<expr><name>x</name><operator>&amp;</operator><literal type="number">7</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>Z</name><index>[<expr><name>y</name></expr>]</index></name> <operator>^=</operator> <name><name>V</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name><name>V</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_gcm_rightshift</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>V</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>poly</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((x&amp;8)&gt;&gt;3) | ((x&amp;4)&gt;&gt;1) | ((x&amp;2)&lt;&lt;1) | ((x&amp;1)&lt;&lt;3) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BPD</name></cpp:macro> <cpp:value>(sizeof(LTC_FAST_TYPE) * 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WPV</name></cpp:macro> <cpp:value>(1 + (16 / sizeof(LTC_FAST_TYPE)))</cpp:value></cpp:define>







<function><type><name>void</name></type> <name>gcm_gf_mult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LTC_FAST_TYPE</name></type> <name><name>B</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><name>WPV</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><literal type="number">32</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LTC_FAST_TYPE</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pB</name><index>[<expr><literal type="number">16</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LTC_FAST_TYPE</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>, <decl><type ref="prev"/><name>zz</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pTmp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDIAN_32BITWORD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>pB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LOAD64H</name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD64L</name><argument_list>(<argument><expr><name><name>pB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>WPV</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>BPD</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>BPD</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>BPD</name><operator>-</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>WPV</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>


<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>B</name><index>[<expr><call><name>M</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>BPD</name><operator>/</operator><literal type="number">4</literal><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>WPV</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><name><name>pB</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><name>i</name><operator>^</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>WPV</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>k</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>B</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">32</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LTC_FAST_TYPE</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>zz</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><name>BPD</name><operator>-</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>z</name></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <name>zz</name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENDIAN_32BITWORD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pTmp</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STORE64H</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pTmp</name> <operator>+</operator> <operator>(</operator><name>i</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">31</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>pTmp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">16</literal></expr>]</index></name> <operator>^=</operator> <name><name>gcm_shift_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pTmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pTmp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">15</literal></expr>]</index></name> <operator>^=</operator> <name><name>gcm_shift_table</name><index>[<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>pTmp</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pTmp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





</unit>
