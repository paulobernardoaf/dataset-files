<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\encauth\gcm\gcm_memory.c">












<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>


















<function><type><name>int</name></type> <name>gcm_memory</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>IVlen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>adata</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>adatalen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ptlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>taglen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gcm_state</name> <modifier>*</modifier></type><name>gcm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cipher_is_valid</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><name>accel_gcm_memory</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>accel_gcm_memory</name>
<argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>,
<argument><expr><name>IV</name></expr></argument>, <argument><expr><name>IVlen</name></expr></argument>,
<argument><expr><name>adata</name></expr></argument>, <argument><expr><name>adatalen</name></expr></argument>,
<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>,
<argument><expr><name>ct</name></expr></argument>,
<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>taglen</name></expr></argument>,
<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_TABLES_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>orig</name> <operator>=</operator> <name>gcm</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>gcm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>orig</name> <operator>=</operator> <name>gcm</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>gcm</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>gcm</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_MEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>





<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_TABLES_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>gcm</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>gcm</name> <operator>=</operator> <operator>(</operator><name>gcm_state</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>gcm</name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>gcm</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_init</name><argument_list>(<argument><expr><name>gcm</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>LTC_ERR</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_add_iv</name><argument_list>(<argument><expr><name>gcm</name></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><name>IVlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>LTC_ERR</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_add_aad</name><argument_list>(<argument><expr><name>gcm</name></expr></argument>, <argument><expr><name>adata</name></expr></argument>, <argument><expr><name>adatalen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>LTC_ERR</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_process</name><argument_list>(<argument><expr><name>gcm</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>LTC_ERR</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>GCM_ENCRYPT</name></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_done</name><argument_list>(<argument><expr><name>gcm</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>taglen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>LTC_ERR</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>direction</name> <operator>==</operator> <name>GCM_DECRYPT</name></expr>)</condition> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>buflen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_done</name><argument_list>(<argument><expr><name>gcm</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>LTC_ERR</name>;</goto>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>!=</operator> <operator>*</operator><name>taglen</name> <operator>||</operator> <call><name>XMEM_NEQ</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_ERROR</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if>
<else>else <block>{<block_content>
<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_ARG</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>
<label><name>LTC_ERR</name>:</label>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





</unit>
