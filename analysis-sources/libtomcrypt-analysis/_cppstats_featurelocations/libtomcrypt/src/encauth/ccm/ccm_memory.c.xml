<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\encauth\ccm\ccm_memory.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CCM_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>






















<function><type><name>int</name></type> <name>ccm_memory</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>uskey</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>noncelen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>headerlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ptlen</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>,
<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>taglen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>PAD</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ctr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>CTRPAD</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ptTag</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pt_real</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt_work</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>L</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>CTRlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uskey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>nonce</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>headerlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>header</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>tag</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>taglen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pt_real</name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><literal type="number">16</literal> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LTC_FAST_TYPE</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cipher_is_valid</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><name>block_length</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_CIPHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>taglen</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator> <operator>*</operator><name>taglen</name></expr></argument> &gt;</argument_list></name> <literal type="number">16</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>taglen</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><name>accel_ccm_memory</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>accel_ccm_memory</name><argument_list>(
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>,
<argument><expr><name>uskey</name></expr></argument>,
<argument><expr><name>nonce</name></expr></argument>, <argument><expr><name>noncelen</name></expr></argument>,
<argument><expr><name>header</name></expr></argument>, <argument><expr><name>headerlen</name></expr></argument>,
<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>,
<argument><expr><name>ct</name></expr></argument>,
<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>taglen</name></expr></argument>,
<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ptlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>L</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>++</operator><name>L</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>noncelen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>noncelen</name> <operator>&gt;</operator> <literal type="number">13</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">13</literal></expr> </then><else>: <expr><name>noncelen</name></expr></else></ternary></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">15</literal> <operator>-</operator> <name>noncelen</name><operator>)</operator> <operator>&gt;</operator> <name>L</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>L</name> <operator>=</operator> <literal type="number">15</literal> <operator>-</operator> <name>noncelen</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>uskey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>skey</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>skey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>skey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_MEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>setup</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>skey</name> <operator>=</operator> <name>uskey</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>CCM_DECRYPT</name> <operator>&amp;&amp;</operator> <name>ptlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>pt_work</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>ptlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pt_work</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>pt</name> <operator>=</operator> <name>pt_work</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>headerlen</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
<operator>(</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>taglen</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator>
<operator>(</operator><name>L</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <operator>(</operator><name>L</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>nonce</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ptlen</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>L</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>L</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>L</name><operator>-</operator><name>y</name><operator>)</operator><operator>&gt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>L</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>headerlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>headerlen</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1UL</literal><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>headerlen</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <name>headerlen</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <literal type="number">0xFE</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>headerlen</name><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>headerlen</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <operator>(</operator><name>headerlen</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <name>headerlen</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>headerlen</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <name><name>header</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>ctr</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>L</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <operator>(</operator><name>L</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctr</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>nonce</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>ctr</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>CTRlen</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ptlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>ptlen</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>CCM_ENCRYPT</name></expr>)</condition> <block>{<block_content>
<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><name>ptlen</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal><operator>)</operator></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>z</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>-</operator><name>L</name></expr>;</condition> <incr><expr><name>z</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctr</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ctr</name><index>[<expr><name>z</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctr</name><index>[<expr><name>z</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>CTRPAD</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>z</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LTC_FAST_TYPE</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PAD</name><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>^=</operator> <operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><name>y</name><operator>+</operator><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><name>y</name><operator>+</operator><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><name>y</name><operator>+</operator><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>^</operator> <operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CTRPAD</name><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content> 
<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <operator>(</operator><name>ptlen</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal><operator>)</operator></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>z</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>-</operator><name>L</name></expr>;</condition> <incr><expr><name>z</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctr</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ctr</name><index>[<expr><name>z</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctr</name><index>[<expr><name>z</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>CTRPAD</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>z</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LTC_FAST_TYPE</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><name>y</name><operator>+</operator><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><name>y</name><operator>+</operator><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>^</operator> <operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>CTRPAD</name><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>PAD</name><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>^=</operator> <operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><name>y</name><operator>+</operator><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>ptlen</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>CTRlen</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>z</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>-</operator><name>L</name></expr>;</condition> <incr><expr><name>z</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctr</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ctr</name><index>[<expr><name>z</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>ctr</name><index>[<expr><name>z</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>CTRPAD</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>CTRlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>CCM_ENCRYPT</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pt</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ct</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>^</operator> <name><name>CTRPAD</name><index>[<expr><name>CTRlen</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>ct</name><index>[<expr><name>y</name></expr>]</index></name> <operator>^</operator> <name><name>CTRPAD</name><index>[<expr><name>CTRlen</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pt</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>PAD</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt>
</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>PAD</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>y</name> <operator>&gt;</operator> <literal type="number">15</literal> <operator>-</operator> <name>L</name></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ctr</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>ctr</name></expr></argument>, <argument><expr><name>CTRPAD</name></expr></argument>, <argument><expr><name>skey</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<goto>goto <name>error</name>;</goto>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skey</name> <operator>!=</operator> <name>uskey</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>done</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>skey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>skey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>CCM_ENCRYPT</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <operator>*</operator><name>taglen</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tag</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>PAD</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^</operator> <name><name>CTRPAD</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>taglen</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></if> <else>else <block>{<block_content> 

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <operator>*</operator><name>taglen</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>ptTag</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>tag</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^</operator> <name><name>CTRPAD</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><operator>*</operator><name>taglen</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>






<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>XMEM_NEQ</name><argument_list>(<argument><expr><name>ptTag</name></expr></argument>, <argument><expr><name>PAD</name></expr></argument>, <argument><expr><operator>*</operator><name>taglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>ptlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>copy_or_zeromem</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>pt_real</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>PAD</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PAD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>CTRPAD</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CTRPAD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>pt_work</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>pt_work</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>error</name>:</label>
<if_stmt><if>if <condition>(<expr><name>pt_work</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>pt_work</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>skey</name> <operator>!=</operator> <name>uskey</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
