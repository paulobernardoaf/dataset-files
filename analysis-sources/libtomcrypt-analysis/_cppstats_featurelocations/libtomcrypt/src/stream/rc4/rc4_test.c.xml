<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\stream\rc4\rc4_test.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC4_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>rc4_stream_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>rc4_state</name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>pt</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ct</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x96</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rc4_stream_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rc4_stream_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RC4-TV1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rc4_stream_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rc4_stream_memory</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RC4-TV2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
