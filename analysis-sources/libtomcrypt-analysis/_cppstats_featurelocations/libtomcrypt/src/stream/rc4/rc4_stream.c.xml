<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\stream\rc4\rc4_stream.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC4_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>








<function><type><name>int</name></type> <name>rc4_stream_setup</name><parameter_list>(<parameter><decl><type><name>rc4_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keylen</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>x</name> <operator>=</operator> <name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>key</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>keylen</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>rc4_stream_crypt</name><parameter_list>(<parameter><decl><type><name>rc4_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>s</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>inlen</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><index>[<expr><name>y</name></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>in</name><operator>++</operator> <operator>^</operator> <name><name>s</name><index>[<expr><name>tmp</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>rc4_stream_keystream</name><parameter_list>(<parameter><decl><type><name>rc4_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>outlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if></if_stmt> 
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rc4_stream_crypt</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>rc4_stream_done</name><parameter_list>(<parameter><decl><type><name>rc4_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rc4_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
