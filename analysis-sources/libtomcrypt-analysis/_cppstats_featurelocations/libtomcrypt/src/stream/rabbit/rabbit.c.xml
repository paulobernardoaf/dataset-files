<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\stream\rabbit\rabbit.c">































































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RABBIT</name></expr></argument>)</argument_list></call></expr></cpp:if>


<function_decl><type><specifier>static</specifier> <name>LTC_INLINE</name> <name>ulong32</name></type> <name>_rabbit_g_func</name><parameter_list>(<parameter><decl><type><name>ulong32</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>LTC_INLINE</name> <name>void</name></type> <name>_rabbit_next_state</name><parameter_list>(<parameter><decl><type><name>rabbit_ctx</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>LTC_INLINE</name> <name>void</name></type> <name>_rabbit_gen_1_block</name><parameter_list>(<parameter><decl><type><name>rabbit_state</name><modifier>*</modifier></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>





<function><type><specifier>static</specifier> <name>LTC_INLINE</name> <name>ulong32</name></type> <name>_rabbit_g_func</name><parameter_list>(<parameter><decl><type><name>ulong32</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>


<expr_stmt><expr><name>a</name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>


<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">17</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name>a</name><operator>*</operator><name>b</name><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">15</literal><operator>)</operator> <operator>+</operator> <name>b</name><operator>*</operator><name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>x</name></expr>;</expr_stmt>


<return>return <expr><operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name>h</name><operator>^</operator><name>l</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>




<function><type><specifier>static</specifier> <name>LTC_INLINE</name> <name>void</name></type> <name>_rabbit_next_state</name><parameter_list>(<parameter><decl><type><name>rabbit_ctx</name> <modifier>*</modifier></type><name>p_instance</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>g</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c_old</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>c_old</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x4D34D34D</literal> <operator>+</operator> <name><name>p_instance</name><operator>-&gt;</operator><name>carry</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xD34D34D3</literal> <operator>+</operator> <operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>c_old</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x34D34D34</literal> <operator>+</operator> <operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>c_old</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x4D34D34D</literal> <operator>+</operator> <operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>c_old</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xD34D34D3</literal> <operator>+</operator> <operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>c_old</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x34D34D34</literal> <operator>+</operator> <operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>c_old</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0x4D34D34D</literal> <operator>+</operator> <operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>c_old</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0xD34D34D3</literal> <operator>+</operator> <operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>c_old</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>carry</name></name> <operator>=</operator> <operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>c_old</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>_rabbit_g_func</name><argument_list>(<argument><expr><operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>p_instance</name><operator>-&gt;</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>p_instance</name><operator>-&gt;</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>g</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>g</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>g</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>g</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>g</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>g</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>g</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_instance</name><operator>-&gt;</operator><name>x</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>g</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>g</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>LTC_INLINE</name> <name>void</name></type> <name>_rabbit_gen_1_block</name><parameter_list>(<parameter><decl><type><name>rabbit_state</name><modifier>*</modifier></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>_rabbit_next_state</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>out</name><operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>out</name><operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>out</name><operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>out</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>rabbit_setup</name><parameter_list>(<parameter><decl><type><name>rabbit_state</name><modifier>*</modifier></type> <name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>k0</name></decl>, <decl><type ref="prev"/><name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>, <decl><type ref="prev"/><name>k3</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmpkey</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keylen</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rabbit_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>tmpkey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>k0</name></expr></argument>, <argument><expr><name>tmpkey</name><operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>tmpkey</name><operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><name>tmpkey</name><operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>k3</name></expr></argument>, <argument><expr><name>tmpkey</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tmpkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>k0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>k1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>k2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>k3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name>k3</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>k2</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name>k0</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>k3</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name>k1</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>k0</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>x</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ulong32</name><operator>)</operator><operator>(</operator><name>k2</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>k1</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name>k3</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name>k0</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>ROLc</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k0</name><operator>&amp;</operator><literal type="number">0xFFFF0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>k1</name><operator>&amp;</operator><literal type="number">0xFFFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k1</name><operator>&amp;</operator><literal type="number">0xFFFF0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>k2</name><operator>&amp;</operator><literal type="number">0xFFFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k2</name><operator>&amp;</operator><literal type="number">0xFFFF0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>k3</name><operator>&amp;</operator><literal type="number">0xFFFF</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>k3</name><operator>&amp;</operator><literal type="number">0xFFFF0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>k0</name><operator>&amp;</operator><literal type="number">0xFFFF</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>carry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>_rabbit_next_state</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>x</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x7</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>carry</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>carry</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>block</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>unused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>rabbit_setiv</name><parameter_list>(<parameter><decl><type><name>rabbit_state</name><modifier>*</modifier></type> <name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ivlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>i0</name></decl>, <decl><type ref="prev"/><name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>, <decl><type ref="prev"/><name>i3</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmpiv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>iv</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>ivlen</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ivlen</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>iv</name> <operator>&amp;&amp;</operator> <name>ivlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>tmpiv</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>i0</name></expr></argument>, <argument><expr><name>tmpiv</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name>i2</name></expr></argument>, <argument><expr><name>tmpiv</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i1</name> <operator>=</operator> <operator>(</operator><name>i0</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>i2</name><operator>&amp;</operator><literal type="number">0xFFFF0000</literal><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>i3</name> <operator>=</operator> <operator>(</operator><name>i2</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>i0</name><operator>&amp;</operator><literal type="number">0x0000FFFF</literal><operator>)</operator></expr>;</expr_stmt>


<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name>i0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>i1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name>i2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name>i3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <name>i0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name>i1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name>i2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <name>i3</name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name><operator>.</operator><name>carry</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>master_ctx</name><operator>.</operator><name>carry</name></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>_rabbit_next_state</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>work_ctx</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>st</name><operator>-&gt;</operator><name>block</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>unused</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>




<function><type><name>int</name></type> <name>rabbit_crypt</name><parameter_list>(<parameter><decl><type><name>rabbit_state</name><modifier>*</modifier></type> <name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>unused</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>unused</name></name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name><name>st</name><operator>-&gt;</operator><name>unused</name></name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>st</name><operator>-&gt;</operator><name>block</name><index>[<expr><literal type="number">16</literal> <operator>-</operator> <name><name>st</name><operator>-&gt;</operator><name>unused</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>j</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>_rabbit_gen_1_block</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>inlen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>unused</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <name>inlen</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>inlen</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>rabbit_keystream</name><parameter_list>(<parameter><decl><type><name>rabbit_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>outlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_OK</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rabbit_crypt</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>rabbit_done</name><parameter_list>(<parameter><decl><type><name>rabbit_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rabbit_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>int</name></type> <name>rabbit_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>rabbit_state</name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<block>{<block_content>






<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>k</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x54</literal></expr>,
<expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xEC</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xF9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pt</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ct</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xCA</literal></expr>,
<expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
<expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xF5</literal></expr>,
<expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x7C</literal></expr>,
<expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x39</literal></expr>,
<expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x9D</literal></expr>,
<expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x6F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ptlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><literal type="string">"RABBIT-TV1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>



<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>k</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x54</literal></expr>,
<expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xEC</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xF9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pt</name><index>[<expr><literal type="number">39</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ct</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xCA</literal></expr>,
<expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x78</literal></expr>,
<expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x40</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xF5</literal></expr>,
<expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x8D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ptlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><literal type="string">"RABBIT-TV2"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>



<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>k</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x54</literal></expr>,
<expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xEC</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iv</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xF9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pt</name><index>[]</index></name> <init>= <expr><literal type="string">"Kilroy was here, there, and everywhere!"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ct</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xbd</literal></expr>,
<expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x54</literal></expr>,
<expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x60</literal></expr>,
<expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x87</literal></expr>,
<expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xac</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ptlen</name> <init>= <expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out2</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>nulls</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">34</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">34</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><literal type="string">"RABBIT-TV3"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_memory</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><literal type="string">"RABBIT-TV4"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>





<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><name>out2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out2</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlen</name></expr></argument>, <argument><expr><literal type="string">"RABBIT-TV5"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rabbit_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RABBIT-TV6"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
