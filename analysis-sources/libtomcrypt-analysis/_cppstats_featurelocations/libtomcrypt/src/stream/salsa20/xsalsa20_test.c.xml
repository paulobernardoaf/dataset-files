<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\stream\salsa20\xsalsa20_test.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XSALSA20</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA256</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_sha256</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>datalen</name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha256_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>xsalsa20_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>




<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x1b</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0xe9</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0xd4</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0xcd</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x7a</literal></expr>,<expr><literal type="number">0x9a</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x9e</literal></expr>,<expr><literal type="number">0xac</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0xf2</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0xc4</literal></expr>,<expr><literal type="number">0xee</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0xf6</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x89</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>nonce</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x6e</literal></expr>,<expr><literal type="number">0xe9</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0xb6</literal></expr>,<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0xcd</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0xbd</literal></expr>,<expr><literal type="number">0xa8</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0xfc</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0xd6</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0xe0</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x6b</literal></expr>,<expr><literal type="number">0x7a</literal></expr>,<expr><literal type="number">0x0b</literal></expr>,<expr><literal type="number">0x37</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><literal type="string">"Kilroy was here!"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>msglen</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>rounds</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ciphertext</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>msg2</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>salsa20_state</name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>xsalsa20_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>rounds</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>salsa20_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><name>ciphertext</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>salsa20_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>xsalsa20_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>rounds</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>salsa20_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>ciphertext</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><name>msg2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>salsa20_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><name>msg2</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="string">"XSALSA20-TV1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>



<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>xsalsa20_memory</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nonce</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><name>ciphertext</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>xsalsa20_memory</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nonce</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ciphertext</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><name>msg2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><name>msg2</name></expr></argument>, <argument><expr><name>msglen</name></expr></argument>, <argument><expr><literal type="string">"XSALSA20-TV2"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>



<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x1b</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0xe9</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0xd4</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0xcd</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x7a</literal></expr>,<expr><literal type="number">0x9a</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0xc7</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x9e</literal></expr>,<expr><literal type="number">0xac</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0xf2</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0xc4</literal></expr>,<expr><literal type="number">0xee</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0xf6</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x89</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>nonce</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x6e</literal></expr>,<expr><literal type="number">0xe9</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0xb6</literal></expr>,<expr><literal type="number">0x2b</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0xcd</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0xbd</literal></expr>,<expr><literal type="number">0xa8</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0xfc</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0xd6</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0xe0</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x6b</literal></expr>,<expr><literal type="number">0x7a</literal></expr>,<expr><literal type="number">0x0b</literal></expr>,<expr><literal type="number">0x37</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>expecthash</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x6a</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0xe0</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x6d</literal></expr>,<expr><literal type="number">0xb0</literal></expr>,<expr><literal type="number">0xda</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0xf6</literal></expr>,<expr><literal type="number">0xd0</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x39</literal></expr>,<expr><literal type="number">0xf4</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0xdf</literal></expr>,<expr><literal type="number">0xd9</literal></expr>,<expr><literal type="number">0x5a</literal></expr>,<expr><literal type="number">0x6f</literal></expr>,<expr><literal type="number">0x3f</literal></expr>,<expr><literal type="number">0xbe</literal></expr>,<expr><literal type="number">0xb7</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rounds</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>keystream</name><index>[<expr><literal type="number">91101</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>keystreamlen</name> <init>= <expr><literal type="number">91101</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>salsa20_state</name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>xsalsa20_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>rounds</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>salsa20_keystream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>keystream</name></expr></argument>, <argument><expr><name>keystreamlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>salsa20_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>_sha256</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>keystream</name></expr></argument>, <argument><expr><name>keystreamlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>expecthash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expecthash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"XSALSA20-TV3"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
