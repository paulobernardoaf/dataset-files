<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\stream\salsa20\xsalsa20_setup.c">















<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XSALSA20</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>constants</name> <init>= <expr><literal type="string">"expand 32-byte k"</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUARTERROUND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x[b] ^= (ROL((x[a] + x[d]), 7)); x[c] ^= (ROL((x[b] + x[a]), 9)); x[d] ^= (ROL((x[c] + x[b]), 13)); x[a] ^= (ROL((x[d] + x[c]), 18));</cpp:value></cpp:define>






<function><type><specifier>static</specifier> <name>void</name></type> <name>_xsalsa20_doubleround</name><parameter_list>(<parameter><decl><type><name>ulong32</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>rounds</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<macro><name>QUARTERROUND</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>,<argument><literal type="number">12</literal></argument>)</argument_list></macro>
<macro><name>QUARTERROUND</name><argument_list>( <argument><literal type="number">5</literal></argument>, <argument><literal type="number">9</literal></argument>,<argument><literal type="number">13</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>QUARTERROUND</name><argument_list>(<argument><literal type="number">10</literal></argument>,<argument><literal type="number">14</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
<macro><name>QUARTERROUND</name><argument_list>(<argument><literal type="number">15</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">7</literal></argument>,<argument><literal type="number">11</literal></argument>)</argument_list></macro>

<macro><name>QUARTERROUND</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
<macro><name>QUARTERROUND</name><argument_list>( <argument><literal type="number">5</literal></argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">7</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>
<macro><name>QUARTERROUND</name><argument_list>(<argument><literal type="number">10</literal></argument>,<argument><literal type="number">11</literal></argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro>
<macro><name>QUARTERROUND</name><argument_list>(<argument><literal type="number">15</literal></argument>,<argument><literal type="number">12</literal></argument>,<argument><literal type="number">13</literal></argument>,<argument><literal type="number">14</literal></argument>)</argument_list></macro>
</block_content>}</block></for>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>QUARTERROUND</name></cpp:undef>











<function><type><name>int</name></type> <name>xsalsa20_setup</name><parameter_list>(<parameter><decl><type><name>salsa20_state</name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>noncelen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>rounds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>sti</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>}</block></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ulong32</name></type> <name><name>x</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>subkey</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>st</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>keylen</name> <operator>==</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>nonce</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>noncelen</name> <operator>==</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>rounds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rounds</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>rounds</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 


<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>constants</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>constants</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>constants</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>constants</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nonce</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nonce</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nonce</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>x</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nonce</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>_xsalsa20_doubleround</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>rounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STORE32L</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name><name>sti</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name>subkey</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>constants</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>constants</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>constants</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>constants</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>subkey</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>subkey</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>subkey</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>subkey</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>subkey</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>subkey</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name>subkey</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>subkey</name> <operator>+</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>nonce</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LOAD32L</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>nonce</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>input</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>rounds</name></name> <operator>=</operator> <name>rounds</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>ksleft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>ivlen</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>subkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>subkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
