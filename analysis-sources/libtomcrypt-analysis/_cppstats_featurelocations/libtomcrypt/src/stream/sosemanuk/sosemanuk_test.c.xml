<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\stream\sosemanuk\sosemanuk_test.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOSEMANUK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>sosemanuk_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>sosemanuk_state</name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>k</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>n</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ct</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x9a</literal></expr>,
<expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xb8</literal></expr>,
<expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x45</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>pt</name><index>[]</index></name> <init>= <expr><literal type="string">"Kilroy was here, and there. ...and everywhere!"</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>XSTRLEN</name><argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SOSEMANUK-TV1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SOSEMANUK-TV2"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_memory</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SOSEMANUK-TV3"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>
<block>{<block_content>













<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>k3</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xDD</literal></expr>,
<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x0D</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>n3</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x16</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ct3</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xEB</literal></expr>,
<expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xA3</literal></expr>,
<expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x55</literal></expr>,
<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xDC</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>k3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>k3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>n3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>n3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_keystream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sosemanuk_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ct3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct3</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SOSEMANUK-TV4"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>
</block_content>}</block>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
