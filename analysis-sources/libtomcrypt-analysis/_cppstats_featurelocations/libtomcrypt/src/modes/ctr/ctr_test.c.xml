<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\modes\ctr\ctr_test.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CTR_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>ctr_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>keylen</name></decl>, <decl><type ref="prev"/><name>msglen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>IV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ct</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">16</literal></expr>,
<expr><block>{<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xF8</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x67</literal></expr>,<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0x4B</literal></expr>,<expr><literal type="number">0xF7</literal></expr>,<expr><literal type="number">0xA5</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0x9E</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0x67</literal></expr>,<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0x6F</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x6B</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0x67</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="number">0xE4</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0xB7</literal></expr>,<expr><literal type="number">0xA7</literal></expr>,<expr><literal type="number">0xB3</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x2D</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0xA3</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0xB8</literal></expr> }</block></expr>,
}</block></expr>,


<expr><block>{
<expr><literal type="number">16</literal></expr>, <expr><literal type="number">36</literal></expr>,
<expr><block>{<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x5E</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0xA8</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0xF9</literal></expr>,<expr><literal type="number">0xA0</literal></expr>,<expr><literal type="number">0xDC</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0xE0</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x7B</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0x7F</literal></expr>,<expr><literal type="number">0x3F</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0xF0</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x0C</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x0F</literal></expr>,
<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x1A</literal></expr>,<expr><literal type="number">0x1B</literal></expr>,<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0x1D</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0x1F</literal></expr>,
<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x23</literal></expr>}</block></expr>,
<expr><block>{<expr><literal type="number">0xC1</literal></expr>,<expr><literal type="number">0xCF</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xA8</literal></expr>,<expr><literal type="number">0x9F</literal></expr>,<expr><literal type="number">0x2F</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0xCF</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xE9</literal></expr>,<expr><literal type="number">0xEF</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0xD7</literal></expr>,
<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0xA4</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0xDE</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0xD5</literal></expr>,<expr><literal type="number">0x9A</literal></expr>,<expr><literal type="number">0x5C</literal></expr>,<expr><literal type="number">0xEA</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x53</literal></expr>,
<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0xB2</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x2F</literal></expr> }</block></expr>,
}</block></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_CTR</name></type> <name>ctr</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><literal type="string">"aes"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><literal type="string">"rijndael"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ctr_start</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>IV</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CTR_COUNTER_BIG_ENDIAN</name><operator>|</operator><name>LTC_CTR_RFC3686</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ctr_encrypt</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>pt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>msglen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>ctr_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>msglen</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>ct</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>msglen</name></expr></argument>, <argument><expr><literal type="string">"CTR"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







</unit>
