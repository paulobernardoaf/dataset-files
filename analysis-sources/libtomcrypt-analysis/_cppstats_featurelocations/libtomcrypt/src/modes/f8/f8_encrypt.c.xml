<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\modes\f8\f8_encrypt.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F8_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>









<function><type><name>int</name></type> <name>f8_encrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>symmetric_F8</name> <modifier>*</modifier></type><name>f8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>f8</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cipher_is_valid</name><argument_list>(<argument><expr><name><name>f8</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name></name></expr></argument>)</argument_list></sizeof> <operator>||</operator>
<name><name>f8</name><operator>-&gt;</operator><name>padlen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>f8</name><operator>-&gt;</operator><name>padlen</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name><name>f8</name><operator>-&gt;</operator><name>padlen</name></name> <operator>==</operator> <name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name><name>f8</name><operator>-&gt;</operator><name>blockcnt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>buf</name><operator>+</operator><operator>(</operator><name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name><operator>-</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>f8</name><operator>-&gt;</operator><name>blockcnt</name></name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>f8</name><operator>-&gt;</operator><name>MIV</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^</operator> <name><name>buf</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name><name>f8</name><operator>-&gt;</operator><name>cipher</name></name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name></name></expr></argument>, <argument><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f8</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f8</name><operator>-&gt;</operator><name>padlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>f8</name><operator>-&gt;</operator><name>padlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name><name>f8</name><operator>-&gt;</operator><name>blockcnt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>buf</name><operator>+</operator><operator>(</operator><name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name><operator>-</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>f8</name><operator>-&gt;</operator><name>blockcnt</name></name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LTC_FAST_TYPE</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ct</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pt</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>^</operator> <operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f8</name><operator>-&gt;</operator><name>IV</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f8</name><operator>-&gt;</operator><name>IV</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>^=</operator> <operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f8</name><operator>-&gt;</operator><name>MIV</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>^</operator> <operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name><name>f8</name><operator>-&gt;</operator><name>cipher</name></name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name></name></expr></argument>, <argument><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f8</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pt</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ct</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
</block_content>}</block></while>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>f8</name><operator>-&gt;</operator><name>padlen</name></name> <operator>==</operator> <name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name><name>f8</name><operator>-&gt;</operator><name>blockcnt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>buf</name><operator>+</operator><operator>(</operator><name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name><operator>-</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>f8</name><operator>-&gt;</operator><name>blockcnt</name></name><operator>)</operator></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>f8</name><operator>-&gt;</operator><name>MIV</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^</operator> <name><name>buf</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name><name>f8</name><operator>-&gt;</operator><name>cipher</name></name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name></name></expr></argument>, <argument><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f8</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>f8</name><operator>-&gt;</operator><name>padlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ct</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>pt</name><operator>++</operator> <operator>^</operator> <name><name>f8</name><operator>-&gt;</operator><name>IV</name><index>[<expr><name><name>f8</name><operator>-&gt;</operator><name>padlen</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><operator>--</operator><name>len</name></expr>;</expr_stmt>
</block_content>}</block></while>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
