<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\modes\f8\f8_start.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F8_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>













<function><type><name>int</name></type> <name>f8_start</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>,
<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>skeylen</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>num_rounds</name></decl></parameter>, <parameter><decl><type><name>symmetric_F8</name> <modifier>*</modifier></type><name>f8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tkey</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>IV</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>salt_key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>f8</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cipher_is_valid</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><name>block_length</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LTC_FAST_TYPE</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<expr_stmt><expr><name><name>f8</name><operator>-&gt;</operator><name>blockcnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f8</name><operator>-&gt;</operator><name>cipher</name></name> <operator>=</operator> <name>cipher</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><name>block_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f8</name><operator>-&gt;</operator><name>padlen</name></name> <operator>=</operator> <name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name></expr>;</expr_stmt>


<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>keylen</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tkey</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tkey</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>key</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>skeylen</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tkey</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tkey</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>salt_key</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>keylen</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tkey</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>tkey</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <literal type="number">0x55</literal></expr>;</expr_stmt>
</block_content>}</block></for>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>setup</name><argument_list>(<argument><expr><name>tkey</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>num_rounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f8</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name><name>f8</name><operator>-&gt;</operator><name>cipher</name></name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>IV</name></expr></argument>, <argument><expr><name><name>f8</name><operator>-&gt;</operator><name>MIV</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f8</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>cipher_descriptor</name><index>[<expr><name><name>f8</name><operator>-&gt;</operator><name>cipher</name></name></expr>]</index></name><operator>.</operator><call><name>done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f8</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>cipher_descriptor</name><index>[<expr><name><name>f8</name><operator>-&gt;</operator><name>cipher</name></name></expr>]</index></name><operator>.</operator><call><name>done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f8</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<return>return <expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>setup</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><name>num_rounds</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f8</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
