<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\modes\f8\f8_getiv.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F8_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>








<function><type><name>int</name></type> <name>f8_getiv</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_F8</name> <modifier>*</modifier></type><name>f8</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>IV</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>len</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>f8</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name> <operator>&gt;</operator> <operator>*</operator><name>len</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>IV</name></expr></argument>, <argument><expr><name><name>f8</name><operator>-&gt;</operator><name>IV</name></name></expr></argument>, <argument><expr><name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name><name>f8</name><operator>-&gt;</operator><name>blocklen</name></name></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
