<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\hashes\chc\chc.c">








<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHC_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNDEFED_HASH</name></cpp:macro> <cpp:value>-17</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cipher_idx</name><init>=<expr><name>UNDEFED_HASH</name></expr></init></decl>, 
<decl><type ref="prev"/><name>cipher_blocksize</name></decl>;</decl_stmt> 


<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>chc_desc</name> <init>= <expr><block>{
<expr><literal type="string">"chc_hash"</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>,
<expr><operator>&amp;</operator><name>chc_init</name></expr>,
<expr><operator>&amp;</operator><name>chc_process</name></expr>,
<expr><operator>&amp;</operator><name>chc_done</name></expr>,
<expr><operator>&amp;</operator><name>chc_test</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>






<function><type><name>int</name></type> <name>chc_register</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>kl</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cipher_is_valid</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>kl</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><name>block_length</name></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><name>kl</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_CIPHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>keysize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>kl</name> <operator>!=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><name>block_length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_CIPHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hash_is_valid</name><argument_list>(<argument><expr><name>idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"chc_hash"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>hash_descriptor</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>hashsize</name> <operator>=</operator>
<name><name>hash_descriptor</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>blocksize</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><name>block_length</name></expr>;</expr_stmt>


<expr_stmt><expr><name>cipher_idx</name> <operator>=</operator> <name>cipher</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cipher_blocksize</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><name>block_length</name></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>






<function><type><name>int</name></type> <name>chc_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cipher_is_valid</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cipher_blocksize</name> <operator>!=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>block_length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_CIPHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_MEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cipher_blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><call><name>setup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cipher_blocksize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>







<function><type><specifier>static</specifier> <name>int</name></type> <name>chc_compress</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>T</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>key</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_MEM</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><call><name>setup</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>cipher_blocksize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cipher_blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>T</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>cipher_blocksize</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>state</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>T</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>^</operator> <name><name>T</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_chc_process</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type> <name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>static</specifier> <macro><name>HASH_PROCESS</name><argument_list>(<argument>_chc_process</argument>, <argument>chc_compress</argument>, <argument>chc</argument>, <argument>(unsigned long)cipher_blocksize</argument>)</argument_list></macro>








<name>int</name> <macro><name>chc_process</name><argument_list>(<argument>hash_state * md</argument>, <argument>const unsigned char *in</argument>, <argument>unsigned long inlen</argument>)</argument_list></macro>
<block>{
<expr><name>int</name> <name>err</name></expr>;

<expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;
<expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cipher_is_valid</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
<if_stmt><if>if <condition>(<expr><name>cipher_blocksize</name> <operator>!=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>block_length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_CIPHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>_chc_process</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call></expr>;</return>
}







int <macro><name>chc_done</name><argument_list>(<argument>hash_state *md</argument>, <argument>unsigned char *out</argument>)</argument_list></macro>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cipher_is_valid</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>cipher_blocksize</name> <operator>!=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>block_length</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_CIPHER</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>curlen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>length</name></name> <operator>+=</operator> <name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>curlen</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0x80</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>curlen</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>cipher_blocksize</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>curlen</name></name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>cipher_blocksize</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>chc_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>curlen</name></name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name>cipher_blocksize</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>STORE64L</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>buf</name></name><operator>+</operator><operator>(</operator><name>cipher_blocksize</name><operator>-</operator><literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>chc_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>chc</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>cipher_blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block>





<function><type><name>int</name></type> <name>chc_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>,
<decl><type ref="prev"/><name><name>hash</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"hello world"</literal></expr>,
<expr><block>{ <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x61</literal></expr>,
<expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x4e</literal></expr> }</block></expr>,
<expr><literal type="number">16</literal></expr>
}</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>oldhashidx</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><literal type="string">"aes"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><literal type="string">"rijndael"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>oldhashidx</name> <operator>=</operator> <name>cipher_idx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>chc_register</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chc_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>chc_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"CHC"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<if_stmt><if>if <condition>(<expr><name>oldhashidx</name> <operator>!=</operator> <name>UNDEFED_HASH</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>chc_register</name><argument_list>(<argument><expr><name>oldhashidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
