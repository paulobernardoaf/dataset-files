








#include "tomcrypt_private.h"






#ifdef LTC_CHC_HASH

#define UNDEFED_HASH -17


static int cipher_idx=UNDEFED_HASH, 
cipher_blocksize; 


const struct ltc_hash_descriptor chc_desc = {
"chc_hash", 12, 0, 0, { 0 }, 0,
&chc_init,
&chc_process,
&chc_done,
&chc_test,
NULL
};






int chc_register(int cipher)
{
int err, kl, idx;

if ((err = cipher_is_valid(cipher)) != CRYPT_OK) {
return err;
}


kl = cipher_descriptor[cipher].block_length;


if (kl <= 8) {
return CRYPT_INVALID_CIPHER;
}


if ((err = cipher_descriptor[cipher].keysize(&kl)) != CRYPT_OK) {
return err;
}

if (kl != cipher_descriptor[cipher].block_length) {
return CRYPT_INVALID_CIPHER;
}


if ((err = hash_is_valid(idx = find_hash("chc_hash"))) != CRYPT_OK) {
return err;
}


hash_descriptor[idx].hashsize =
hash_descriptor[idx].blocksize = cipher_descriptor[cipher].block_length;


cipher_idx = cipher;
cipher_blocksize = cipher_descriptor[cipher].block_length;
return CRYPT_OK;
}






int chc_init(hash_state *md)
{
symmetric_key *key;
unsigned char buf[MAXBLOCKSIZE];
int err;

LTC_ARGCHK(md != NULL);


if ((err = cipher_is_valid(cipher_idx)) != CRYPT_OK) {
return err;
}

if (cipher_blocksize != cipher_descriptor[cipher_idx].block_length) {
return CRYPT_INVALID_CIPHER;
}

if ((key = XMALLOC(sizeof(*key))) == NULL) {
return CRYPT_MEM;
}


zeromem(buf, cipher_blocksize);
if ((err = cipher_descriptor[cipher_idx].setup(buf, cipher_blocksize, 0, key)) != CRYPT_OK) {
XFREE(key);
return err;
}


cipher_descriptor[cipher_idx].ecb_encrypt(buf, md->chc.state, key);


md->chc.length = 0;
md->chc.curlen = 0;
zeromem(md->chc.buf, sizeof(md->chc.buf));
XFREE(key);
return CRYPT_OK;
}







static int chc_compress(hash_state *md, const unsigned char *buf)
{
unsigned char T[2][MAXBLOCKSIZE];
symmetric_key *key;
int err, x;

if ((key = XMALLOC(sizeof(*key))) == NULL) {
return CRYPT_MEM;
}
if ((err = cipher_descriptor[cipher_idx].setup(md->chc.state, cipher_blocksize, 0, key)) != CRYPT_OK) {
XFREE(key);
return err;
}
XMEMCPY(T[1], buf, cipher_blocksize);
cipher_descriptor[cipher_idx].ecb_encrypt(buf, T[0], key);
for (x = 0; x < cipher_blocksize; x++) {
md->chc.state[x] ^= T[0][x] ^ T[1][x];
}
#ifdef LTC_CLEAN_STACK
zeromem(T, sizeof(T));
zeromem(key, sizeof(*key));
#endif
XFREE(key);
return CRYPT_OK;
}








static int _chc_process(hash_state * md, const unsigned char *in, unsigned long inlen);
static HASH_PROCESS(_chc_process, chc_compress, chc, (unsigned long)cipher_blocksize)








int chc_process(hash_state * md, const unsigned char *in, unsigned long inlen)
{
int err;

LTC_ARGCHK(md != NULL);
LTC_ARGCHK(in != NULL);


if ((err = cipher_is_valid(cipher_idx)) != CRYPT_OK) {
return err;
}
if (cipher_blocksize != cipher_descriptor[cipher_idx].block_length) {
return CRYPT_INVALID_CIPHER;
}

return _chc_process(md, in, inlen);
}







int chc_done(hash_state *md, unsigned char *out)
{
int err;

LTC_ARGCHK(md != NULL);
LTC_ARGCHK(out != NULL);


if ((err = cipher_is_valid(cipher_idx)) != CRYPT_OK) {
return err;
}
if (cipher_blocksize != cipher_descriptor[cipher_idx].block_length) {
return CRYPT_INVALID_CIPHER;
}

if (md->chc.curlen >= sizeof(md->chc.buf)) {
return CRYPT_INVALID_ARG;
}


md->chc.length += md->chc.curlen * 8;


md->chc.buf[md->chc.curlen++] = (unsigned char)0x80;





if (md->chc.curlen > (unsigned long)(cipher_blocksize - 8)) {
while (md->chc.curlen < (unsigned long)cipher_blocksize) {
md->chc.buf[md->chc.curlen++] = (unsigned char)0;
}
chc_compress(md, md->chc.buf);
md->chc.curlen = 0;
}


while (md->chc.curlen < (unsigned long)(cipher_blocksize - 8)) {
md->chc.buf[md->chc.curlen++] = (unsigned char)0;
}


STORE64L(md->chc.length, md->chc.buf+(cipher_blocksize-8));
chc_compress(md, md->chc.buf);


XMEMCPY(out, md->chc.state, cipher_blocksize);

#ifdef LTC_CLEAN_STACK
zeromem(md, sizeof(hash_state));
#endif
return CRYPT_OK;
}





int chc_test(void)
{
#ifndef LTC_TEST
return CRYPT_NOP;
#else
static const struct {
unsigned char *msg,
hash[MAXBLOCKSIZE];
int len;
} tests[] = {
{
(unsigned char *)"hello world",
{ 0xcf, 0x57, 0x9d, 0xc3, 0x0a, 0x0e, 0xea, 0x61,
0x0d, 0x54, 0x47, 0xc4, 0x3c, 0x06, 0xf5, 0x4e },
16
}
};
int i, oldhashidx, idx, err;
unsigned char tmp[MAXBLOCKSIZE];
hash_state md;


if ((idx = find_cipher("aes")) == -1) {
if ((idx = find_cipher("rijndael")) == -1) {
return CRYPT_NOP;
}
}
oldhashidx = cipher_idx;
chc_register(idx);

for (i = 0; i < (int)(sizeof(tests)/sizeof(tests[0])); i++) {
if ((err = chc_init(&md)) != CRYPT_OK) {
return err;
}
if ((err = chc_process(&md, tests[i].msg, XSTRLEN((char *)tests[i].msg))) != CRYPT_OK) {
return err;
}
if ((err = chc_done(&md, tmp)) != CRYPT_OK) {
return err;
}
if (compare_testvector(tmp, tests[i].len, tests[i].hash, tests[i].len, "CHC", i)) {
return CRYPT_FAIL_TESTVECTOR;
}
}
if (oldhashidx != UNDEFED_HASH) {
chc_register(oldhashidx);
}

return CRYPT_OK;
#endif
}

#endif




