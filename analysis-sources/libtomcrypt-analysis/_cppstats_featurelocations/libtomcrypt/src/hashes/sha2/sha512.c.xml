<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\hashes\sha2\sha512.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>






<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>sha512_desc</name> <init>=
<expr><block>{
<expr><literal type="string">"sha512"</literal></expr>,
<expr><literal type="number">5</literal></expr>,
<expr><literal type="number">64</literal></expr>,
<expr><literal type="number">128</literal></expr>,


<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">840</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, }</block></expr>,
<expr><literal type="number">9</literal></expr>,

<expr><operator>&amp;</operator><name>sha512_init</name></expr>,
<expr><operator>&amp;</operator><name>sha512_process</name></expr>,
<expr><operator>&amp;</operator><name>sha512_done</name></expr>,
<expr><operator>&amp;</operator><name>sha512_test</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ulong64</name></type> <name><name>K</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x428a2f98d728ae22</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x7137449123ef65cd</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xb5c0fbcfec4d3b2f</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xe9b5dba58189dbbc</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x3956c25bf348b538</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x59f111f1b605d019</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x923f82a4af194f9b</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xab1c5ed5da6d8118</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xd807aa98a3030242</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x12835b0145706fbe</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x243185be4ee4b28c</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x550c7dc3d5ffb4e2</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x72be5d74f27b896f</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x80deb1fe3b1696b1</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x9bdc06a725c71235</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xc19bf174cf692694</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xe49b69c19ef14ad2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xefbe4786384f25e3</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x0fc19dc68b8cd5b5</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x240ca1cc77ac9c65</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x2de92c6f592b0275</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x4a7484aa6ea6e483</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x5cb0a9dcbd41fbd4</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x76f988da831153b5</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x983e5152ee66dfab</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xa831c66d2db43210</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xb00327c898fb213f</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xbf597fc7beef0ee4</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xc6e00bf33da88fc2</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xd5a79147930aa725</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x06ca6351e003826f</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x142929670a0e6e70</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x27b70a8546d22ffc</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x2e1b21385c26c926</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x4d2c6dfc5ac42aed</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x53380d139d95b3df</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x650a73548baf63de</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x766a0abb3c77b2a8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x81c2c92e47edaee6</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x92722c851482353b</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xa2bfe8a14cf10364</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xa81a664bbc423001</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xc24b8b70d0f89791</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xc76c51a30654be30</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xd192e819d6ef5218</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xd69906245565a910</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xf40e35855771202a</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x106aa07032bbd1b8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x19a4c116b8d2d0c8</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x1e376c085141ab53</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x2748774cdf8eeb99</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x34b0bcb5e19b48a8</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x391c0cb3c5c95a63</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x4ed8aa4ae3418acb</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x5b9cca4f7763e373</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x682e6ff3d6b2b8a3</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x748f82ee5defb2fc</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x78a5636f43172f60</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x84c87814a1f0ab72</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x8cc702081a6439ec</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x90befffa23631e28</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xa4506cebde82bde9</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xbef9a3f7b2c67915</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xc67178f2e372532b</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xca273eceea26619c</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xd186b8c721c0c207</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xeada7dd6cde0eb1e</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xf57d4f7fee6ed178</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x06f067aa72176fba</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x0a637dc5a2c898a6</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x113f9804bef90dae</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x1b710b35131c471b</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x28db77f523047d84</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x32caab7b40c72493</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x3c9ebe0a15c9bebc</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x431d67c49c100d4c</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x4cc5d4becb3e42b6</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x597f299cfc657e2a</literal></expr></argument>)</argument_list></call></expr>,
<expr><call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x5fcb6fab3ad6faec</literal></expr></argument>)</argument_list></call></expr>, <macro><name>CONST64</name><argument_list>(<argument><literal type="number">0x6c44198c4a475817</literal></argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ch</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(z ^ (x &amp; (y ^ z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Maj</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x | y) &amp; z) | (x &amp; y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ROR64c(x, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;CONST64(0xFFFFFFFFFFFFFFFF))&gt;&gt;((ulong64)n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S(x, 28) ^ S(x, 34) ^ S(x, 39))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sigma1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S(x, 14) ^ S(x, 18) ^ S(x, 41))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Gamma0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S(x, 1) ^ S(x, 8) ^ R(x, 7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Gamma1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(S(x, 19) ^ S(x, 61) ^ R(x, 6))</cpp:value></cpp:define>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_sha512_compress</name><argument_list>(<argument><expr><name>hash_state</name> <operator>*</operator> <name>md</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <name>int</name> <name>sha512_compress</name><argument_list>(<argument><expr><name>hash_state</name> <operator>*</operator> <name>md</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong64</name></type> <name><name>S</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>W</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>t0</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LOAD64H</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Gamma1</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>W</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <call><name>Gamma0</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>W</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SMALL_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t0</name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <call><name>Sigma1</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Ch</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>K</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>W</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>Sigma0</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Maj</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>t0</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>t1</name></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t0 = h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i]; t1 = Sigma0(a) + Maj(a, b, c); d += t0; h = t0 + t1;</cpp:value></cpp:define>





<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RND</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>S</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sha512_compress</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type> <name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>_sha512_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong64</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">90</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name></type> <name>sha512_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type> <name>md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x6a09e667f3bcc908</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xbb67ae8584caa73b</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x3c6ef372fe94f82b</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0xa54ff53a5f1d36f1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x510e527fade682d1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x9b05688c2b3e6c1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x1f83d9abfb41bd6b</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">0x5be0cd19137e2179</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<macro><name>HASH_PROCESS</name><argument_list>(<argument>sha512_process</argument>, <argument>sha512_compress</argument>, <argument>sha512</argument>, <argument><literal type="number">128</literal></argument>)</argument_list></macro>







<function><type><name>int</name></type> <name>sha512_done</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type> <name>md</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>curlen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>length</name></name> <operator>+=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>curlen</name></name> <operator>*</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0x80</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>curlen</name></name> <operator>&gt;</operator> <literal type="number">112</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>curlen</name></name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sha512_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>





<while>while <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>curlen</name></name> <operator>&lt;</operator> <literal type="number">120</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>STORE64H</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>buf</name></name><operator>+</operator><literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha512_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STORE64H</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha512</name><operator>.</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>out</name><operator>+</operator><operator>(</operator><literal type="number">8</literal><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>sha512_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"abc"</literal></expr>,
<expr><block>{ <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xba</literal></expr>,
<expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x31</literal></expr>,
<expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xa2</literal></expr>,
<expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x9a</literal></expr>,
<expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xa8</literal></expr>,
<expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xa3</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0xbd</literal></expr>,
<expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x0e</literal></expr>,
<expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x9f</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"</literal></expr>,
<expr><block>{ <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xda</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xda</literal></expr>,
<expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x3f</literal></expr>,
<expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xa1</literal></expr>,
<expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x18</literal></expr>,
<expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xe4</literal></expr>,
<expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x3a</literal></expr>,
<expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x54</literal></expr>,
<expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x09</literal></expr> }</block></expr>
}</block></expr>,
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sha512_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha512_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha512_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA512"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







</unit>
