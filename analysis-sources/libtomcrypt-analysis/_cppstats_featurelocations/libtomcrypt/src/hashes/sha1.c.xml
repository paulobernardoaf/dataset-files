<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\hashes\sha1.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>







<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>sha1_desc</name> <init>=
<expr><block>{
<expr><literal type="string">"sha1"</literal></expr>,
<expr><literal type="number">2</literal></expr>,
<expr><literal type="number">20</literal></expr>,
<expr><literal type="number">64</literal></expr>,


<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">26</literal></expr>, }</block></expr>,
<expr><literal type="number">6</literal></expr>,

<expr><operator>&amp;</operator><name>sha1_init</name></expr>,
<expr><operator>&amp;</operator><name>sha1_process</name></expr>,
<expr><operator>&amp;</operator><name>sha1_done</name></expr>,
<expr><operator>&amp;</operator><name>sha1_test</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F0</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(z ^ (x &amp; (y ^ z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x ^ y ^ z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &amp; y) | (z &amp; (x | y)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x ^ y ^ z)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_sha1_compress</name><argument_list>(<argument><expr><name>hash_state</name> <operator>*</operator><name>md</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <name>int</name> <name>sha1_compress</name><argument_list>(<argument><expr><name>hash_state</name> <operator>*</operator><name>md</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong32</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name><name>W</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SMALL_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ulong32</name></type> <name>t</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>LOAD32H</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ROL</name><argument_list>(<argument><expr><name><name>W</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>W</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name><name>W</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">14</literal></expr>]</index></name> <operator>^</operator> <name><name>W</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF0</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>e = (ROLc(a, 5) + F0(b,c,d) + e + W[i] + 0x5a827999UL); b = ROLc(b, 30);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>e = (ROLc(a, 5) + F1(b,c,d) + e + W[i] + 0x6ed9eba1UL); b = ROLc(b, 30);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>e = (ROLc(a, 5) + F2(b,c,d) + e + W[i] + 0x8f1bbcdcUL); b = ROLc(b, 30);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>e = (ROLc(a, 5) + F3(b,c,d) + e + W[i] + 0xca62c1d6UL); b = ROLc(b, 30);</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SMALL_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>FF0</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>FF1</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>FF2</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>FF3</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>FF0</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF0</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF0</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF0</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF0</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>FF1</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF1</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF1</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF1</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF1</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>FF2</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF2</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF2</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF2</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF2</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr/>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>FF3</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF3</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF3</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF3</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FF3</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FF0</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FF1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FF2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FF3</name></cpp:undef>


<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>e</name></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sha1_compress</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>_sha1_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ulong32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">87</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<function><type><name>int</name></type> <name>sha1_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type> <name>md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xefcdab89UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98badcfeUL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xc3d2e1f0UL</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<macro><name>HASH_PROCESS</name><argument_list>(<argument>sha1_process</argument>, <argument>sha1_compress</argument>, <argument>sha1</argument>, <argument><literal type="number">64</literal></argument>)</argument_list></macro>







<function><type><name>int</name></type> <name>sha1_done</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type> <name>md</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>curlen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>length</name></name> <operator>+=</operator> <name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>curlen</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0x80</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>curlen</name></name> <operator>&gt;</operator> <literal type="number">56</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>curlen</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sha1_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>curlen</name></name> <operator>&lt;</operator> <literal type="number">56</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>STORE64H</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>buf</name></name><operator>+</operator><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha1_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STORE32H</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>sha1</name><operator>.</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>out</name><operator>+</operator><operator>(</operator><literal type="number">4</literal><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>sha1_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="string">"abc"</literal></expr>,
<expr><block>{ <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x6a</literal></expr>,
<expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x6c</literal></expr>,
<expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x9d</literal></expr> }</block></expr>
}</block></expr>,
<expr><block>{ <expr><literal type="string">"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"</literal></expr>,
<expr><block>{ <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x6E</literal></expr>,
<expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xE5</literal></expr>,
<expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xF1</literal></expr> }</block></expr>
}</block></expr>
}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>sha1_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha1_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha1_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA1"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






</unit>
