<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\hashes\sha3_test.c">










<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>sha3_224_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hash</name><index>[<expr><literal type="number">224</literal> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_state</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c1</name> <init>= <expr><literal type="number">0xa3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha3_224_empty</name><index>[<expr><literal type="number">224</literal> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xb7</literal></expr>,
<expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xab</literal></expr>,
<expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x3f</literal></expr>,
<expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xc7</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha3_224_0xa3_200_times</name><index>[<expr><literal type="number">224</literal> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x72</literal></expr>,
<expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x5d</literal></expr>,
<expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xa1</literal></expr>,
<expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xe0</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sha3_224_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_224_empty</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_224_empty</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-224"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sha3_224_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_224_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_224_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-224"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_224_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_224_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_224_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-224"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha3_256_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hash</name><index>[<expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_state</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c1</name> <init>= <expr><literal type="number">0xa3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha3_256_empty</name><index>[<expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x66</literal></expr>,
<expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
<expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xfa</literal></expr>,
<expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x4a</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha3_256_0xa3_200_times</name><index>[<expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
<expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xbf</literal></expr>,
<expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x73</literal></expr>,
<expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xbd</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x87</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sha3_256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_256_empty</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_256_empty</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-256"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sha3_256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_256_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_256_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-256"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sha3_256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_256_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_256_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-256"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_256_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_256_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-256"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>



<expr_stmt><expr><call><name>sha3_256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator>
<literal type="string">"\xb7\x71\xd5\xce\xf5\xd1\xa4\x1a"</literal>
<literal type="string">"\x93\xd1\x56\x43\xd7\x18\x1d\x2a"</literal>
<literal type="string">"\x2e\xf0\xa8\xe8\x4d\x91\x81\x2f"</literal>
<literal type="string">"\x20\xed\x21\xf1\x47\xbe\xf7\x32"</literal>
<literal type="string">"\xbf\x3a\x60\xef\x40\x67\xc3\x73"</literal>
<literal type="string">"\x4b\x85\xbc\x8c\xd4\x71\x78\x0f"</literal>
<literal type="string">"\x10\xdc\x9e\x82\x91\xb5\x83\x39"</literal>
<literal type="string">"\xa6\x77\xb9\x60\x21\x8f\x71\xe7"</literal>
<literal type="string">"\x93\xf2\x79\x7a\xea\x34\x94\x06"</literal>
<literal type="string">"\x51\x28\x29\x06\x5d\x37\xbb\x55"</literal>
<literal type="string">"\xea\x79\x6f\xa4\xf5\x6f\xd8\x89"</literal>
<literal type="string">"\x6b\x49\xb2\xcd\x19\xb4\x32\x15"</literal>
<literal type="string">"\xad\x96\x7c\x71\x2b\x24\xe5\x03"</literal>
<literal type="string">"\x2d\x06\x52\x32\xe0\x2c\x12\x74"</literal>
<literal type="string">"\x09\xd2\xed\x41\x46\xb9\xd7\x5d"</literal>
<literal type="string">"\x76\x3d\x52\xdb\x98\xd9\x49\xd3"</literal>
<literal type="string">"\xb0\xfe\xd6\xa8\x05\x2f\xbb"</literal></expr></argument>, <argument><expr><literal type="number">1080</literal> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><literal type="string">"\xa1\x9e\xee\x92\xbb\x20\x97\xb6"</literal>
<literal type="string">"\x4e\x82\x3d\x59\x77\x98\xaa\x18"</literal>
<literal type="string">"\xbe\x9b\x7c\x73\x6b\x80\x59\xab"</literal>
<literal type="string">"\xfd\x67\x79\xac\x35\xac\x81\xb5"</literal></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"SHA3-256"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha3_384_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hash</name><index>[<expr><literal type="number">384</literal> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_state</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c1</name> <init>= <expr><literal type="number">0xa3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha3_384_0xa3_200_times</name><index>[<expr><literal type="number">384</literal> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xf9</literal></expr>,
<expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x2b</literal></expr>,
<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x8e</literal></expr>,
<expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xdd</literal></expr>,
<expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x98</literal></expr>,
<expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x8f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sha3_384_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_384_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_384_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-384"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sha3_384_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_384_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_384_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-384"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_384_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_384_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_384_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-384"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha3_512_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hash</name><index>[<expr><literal type="number">512</literal> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_state</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c1</name> <init>= <expr><literal type="number">0xa3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sha3_512_0xa3_200_times</name><index>[<expr><literal type="number">512</literal> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0xb1</literal></expr>,
<expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x1b</literal></expr>,
<expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xed</literal></expr>, <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0xc0</literal></expr>,
<expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0xa8</literal></expr>,
<expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xa3</literal></expr>,
<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0x6b</literal></expr>,
<expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xa8</literal></expr>, <expr><literal type="number">0x41</literal></expr>,
<expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xf6</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x00</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sha3_512_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_512_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_512_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-512"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sha3_512_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_512_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_512_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-512"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_512_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>sha3_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>sha3_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sha3_512_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sha3_512_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHA3-512"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sha3_shake_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hash</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_state</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c1</name> <init>= <expr><literal type="number">0xa3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>shake256_empty</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x43</literal></expr>,
<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x9b</literal></expr>,
<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x25</literal></expr>,
<expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x8f</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0x2a</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>shake256_0xa3_200_times</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x4d</literal></expr>,
<expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xf0</literal></expr>,
<expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x96</literal></expr>,
<expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xeb</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>shake128_empty</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xa5</literal></expr>,
<expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x12</literal></expr>,
<expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x71</literal></expr>,
<expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x6f</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>shake128_0xa3_200_times</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
<expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xc0</literal></expr>,
<expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x62</literal></expr>,
<expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x16</literal></expr>,
<expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x39</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<expr_stmt><expr><call><name>sha3_shake_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sha3_shake_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake256_empty</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>shake256_empty</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake256_empty</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHAKE256"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_shake_memory</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name> <operator>+</operator> <literal type="number">480</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake256_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>shake256_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake256_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHAKE256"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sha3_shake_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_shake_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sha3_shake_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake256_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>shake256_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake256_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHAKE256"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sha3_shake_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_shake_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_shake_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sha3_shake_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake256_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>shake256_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake256_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHAKE256"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_shake_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sha3_shake_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sha3_shake_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake256_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>shake256_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake256_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHAKE256"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sha3_shake_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sha3_shake_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake128_empty</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>shake128_empty</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake128_empty</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHAKE128"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_shake_memory</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name> <operator>+</operator> <literal type="number">480</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake128_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>shake128_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake128_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHAKE128"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sha3_shake_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_shake_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sha3_shake_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake128_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>shake128_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake128_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHAKE128"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><call><name>sha3_shake_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_shake_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_shake_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sha3_shake_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake128_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>shake128_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake128_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHAKE128"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sha3_shake_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sha3_shake_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sha3_shake_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake128_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>shake128_0xa3_200_times</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shake128_0xa3_200_times</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SHAKE128"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KECCAK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>keccak_224_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>hash_state</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>keccak_224_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <literal type="string">"\xcc"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>,
<argument><expr><literal type="string">"\xa9\xca\xb5\x9e\xb4\x0a\x10\xb2"</literal>
<literal type="string">"\x46\x29\x0f\x2d\x60\x86\xe3\x2e"</literal>
<literal type="string">"\x36\x89\xfa\xf1\xd2\x6b\x47\x0c"</literal>
<literal type="string">"\x89\x9f\x28\x02"</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-224"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>keccak_224_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"\x41\xfb"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>,
<argument><expr><literal type="string">"\x61\x5b\xa3\x67\xaf\xdc\x35\xaa"</literal>
<literal type="string">"\xc3\x97\xbc\x7e\xb5\xd5\x8d\x10"</literal>
<literal type="string">"\x6a\x73\x4b\x24\x98\x6d\x5d\x97"</literal>
<literal type="string">"\x8f\xef\xd6\x2c"</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-224"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>keccak_224_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator>
<literal type="string">"\x52\xa6\x08\xab\x21\xcc\xdd\x8a"</literal>
<literal type="string">"\x44\x57\xa5\x7e\xde\x78\x21\x76"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>,
<argument><expr><literal type="string">"\x56\x79\xcd\x50\x9c\x51\x20\xaf"</literal>
<literal type="string">"\x54\x79\x5c\xf4\x77\x14\x96\x41"</literal>
<literal type="string">"\xcf\x27\xb2\xeb\xb6\xa5\xf9\x03"</literal>
<literal type="string">"\x40\x70\x4e\x57"</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-224"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>keccak_224_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator>
<literal type="string">"\x43\x3c\x53\x03\x13\x16\x24\xc0"</literal>
<literal type="string">"\x02\x1d\x86\x8a\x30\x82\x54\x75"</literal>
<literal type="string">"\xe8\xd0\xbd\x30\x52\xa0\x22\x18"</literal>
<literal type="string">"\x03\x98\xf4\xca\x44\x23\xb9\x82"</literal>
<literal type="string">"\x14\xb6\xbe\xaa\xc2\x1c\x88\x07"</literal>
<literal type="string">"\xa2\xc3\x3f\x8c\x93\xbd\x42\xb0"</literal>
<literal type="string">"\x92\xcc\x1b\x06\xce\xdf\x32\x24"</literal>
<literal type="string">"\xd5\xed\x1e\xc2\x97\x84\x44\x4f"</literal>
<literal type="string">"\x22\xe0\x8a\x55\xaa\x58\x54\x2b"</literal>
<literal type="string">"\x52\x4b\x02\xcd\x3d\x5d\x5f\x69"</literal>
<literal type="string">"\x07\xaf\xe7\x1c\x5d\x74\x62\x22"</literal>
<literal type="string">"\x4a\x3f\x9d\x9e\x53\xe7\xe0\x84"</literal>
<literal type="string">"\x6d\xcb\xb4\xce"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>,
<argument><expr><literal type="string">"\x62\xb1\x0f\x1b\x62\x36\xeb\xc2"</literal>
<literal type="string">"\xda\x72\x95\x77\x42\xa8\xd4\xe4"</literal>
<literal type="string">"\x8e\x21\x3b\x5f\x89\x34\x60\x4b"</literal>
<literal type="string">"\xfd\x4d\x2c\x3a"</literal></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-224"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>keccak_256_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>hash_state</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>keccak_256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <literal type="string">"\xcc"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><literal type="string">"\xee\xad\x6d\xbf\xc7\x34\x0a\x56"</literal>
<literal type="string">"\xca\xed\xc0\x44\x69\x6a\x16\x88"</literal>
<literal type="string">"\x70\x54\x9a\x6a\x7f\x6f\x56\x96"</literal>
<literal type="string">"\x1e\x84\xa5\x4b\xd9\x97\x0b\x8a"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-256"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>keccak_256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"\x41\xfb"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><literal type="string">"\xa8\xea\xce\xda\x4d\x47\xb3\x28"</literal>
<literal type="string">"\x1a\x79\x5a\xd9\xe1\xea\x21\x22"</literal>
<literal type="string">"\xb4\x07\xba\xf9\xaa\xbc\xb9\xe1"</literal>
<literal type="string">"\x8b\x57\x17\xb7\x87\x35\x37\xd2"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-256"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>keccak_256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator>
<literal type="string">"\x52\xa6\x08\xab\x21\xcc\xdd\x8a"</literal>
<literal type="string">"\x44\x57\xa5\x7e\xde\x78\x21\x76"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><literal type="string">"\x0e\x32\xde\xfa\x20\x71\xf0\xb5"</literal>
<literal type="string">"\xac\x0e\x6a\x10\x8b\x84\x2e\xd0"</literal>
<literal type="string">"\xf1\xd3\x24\x97\x12\xf5\x8e\xe0"</literal>
<literal type="string">"\xdd\xf9\x56\xfe\x33\x2a\x5f\x95"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-256"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>keccak_256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator>
<literal type="string">"\x43\x3c\x53\x03\x13\x16\x24\xc0"</literal>
<literal type="string">"\x02\x1d\x86\x8a\x30\x82\x54\x75"</literal>
<literal type="string">"\xe8\xd0\xbd\x30\x52\xa0\x22\x18"</literal>
<literal type="string">"\x03\x98\xf4\xca\x44\x23\xb9\x82"</literal>
<literal type="string">"\x14\xb6\xbe\xaa\xc2\x1c\x88\x07"</literal>
<literal type="string">"\xa2\xc3\x3f\x8c\x93\xbd\x42\xb0"</literal>
<literal type="string">"\x92\xcc\x1b\x06\xce\xdf\x32\x24"</literal>
<literal type="string">"\xd5\xed\x1e\xc2\x97\x84\x44\x4f"</literal>
<literal type="string">"\x22\xe0\x8a\x55\xaa\x58\x54\x2b"</literal>
<literal type="string">"\x52\x4b\x02\xcd\x3d\x5d\x5f\x69"</literal>
<literal type="string">"\x07\xaf\xe7\x1c\x5d\x74\x62\x22"</literal>
<literal type="string">"\x4a\x3f\x9d\x9e\x53\xe7\xe0\x84"</literal>
<literal type="string">"\x6d\xcb\xb4\xce"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><literal type="string">"\xce\x87\xa5\x17\x3b\xff\xd9\x23"</literal>
<literal type="string">"\x99\x22\x16\x58\xf8\x01\xd4\x5c"</literal>
<literal type="string">"\x29\x4d\x90\x06\xee\x9f\x3f\x9d"</literal>
<literal type="string">"\x41\x9c\x8d\x42\x77\x48\xdc\x41"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-256"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>keccak_384_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>hash_state</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>keccak_384_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <literal type="string">"\xcc"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>,
<argument><expr><literal type="string">"\x1b\x84\xe6\x2a\x46\xe5\xa2\x01"</literal>
<literal type="string">"\x86\x17\x54\xaf\x5d\xc9\x5c\x4a"</literal>
<literal type="string">"\x1a\x69\xca\xf4\xa7\x96\xae\x40"</literal>
<literal type="string">"\x56\x80\x16\x1e\x29\x57\x26\x41"</literal>
<literal type="string">"\xf5\xfa\x1e\x86\x41\xd7\x95\x83"</literal>
<literal type="string">"\x36\xee\x7b\x11\xc5\x8f\x73\xe9"</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-384"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>keccak_384_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"\x41\xfb"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>,
<argument><expr><literal type="string">"\x49\x5c\xce\x27\x14\xcd\x72\xc8"</literal>
<literal type="string">"\xc5\x3c\x33\x63\xd2\x2c\x58\xb5"</literal>
<literal type="string">"\x59\x60\xfe\x26\xbe\x0b\xf3\xbb"</literal>
<literal type="string">"\xc7\xa3\x31\x6d\xd5\x63\xad\x1d"</literal>
<literal type="string">"\xb8\x41\x0e\x75\xee\xfe\xa6\x55"</literal>
<literal type="string">"\xe3\x9d\x46\x70\xec\x0b\x17\x92"</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-384"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>keccak_384_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator>
<literal type="string">"\x52\xa6\x08\xab\x21\xcc\xdd\x8a"</literal>
<literal type="string">"\x44\x57\xa5\x7e\xde\x78\x21\x76"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>,
<argument><expr><literal type="string">"\x18\x42\x2a\xc1\xd3\xa1\xe5\x4b"</literal>
<literal type="string">"\xad\x87\x68\x83\xd2\xd6\xdd\x65"</literal>
<literal type="string">"\xf6\x5c\x1d\x5f\x33\xa7\x12\x5c"</literal>
<literal type="string">"\xc4\xc1\x86\x40\x5a\x12\xed\x64"</literal>
<literal type="string">"\xba\x96\x67\x2e\xed\xda\x8c\x5a"</literal>
<literal type="string">"\x63\x31\xd2\x86\x83\xf4\x88\xeb"</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-384"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>keccak_384_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator>
<literal type="string">"\x43\x3c\x53\x03\x13\x16\x24\xc0"</literal>
<literal type="string">"\x02\x1d\x86\x8a\x30\x82\x54\x75"</literal>
<literal type="string">"\xe8\xd0\xbd\x30\x52\xa0\x22\x18"</literal>
<literal type="string">"\x03\x98\xf4\xca\x44\x23\xb9\x82"</literal>
<literal type="string">"\x14\xb6\xbe\xaa\xc2\x1c\x88\x07"</literal>
<literal type="string">"\xa2\xc3\x3f\x8c\x93\xbd\x42\xb0"</literal>
<literal type="string">"\x92\xcc\x1b\x06\xce\xdf\x32\x24"</literal>
<literal type="string">"\xd5\xed\x1e\xc2\x97\x84\x44\x4f"</literal>
<literal type="string">"\x22\xe0\x8a\x55\xaa\x58\x54\x2b"</literal>
<literal type="string">"\x52\x4b\x02\xcd\x3d\x5d\x5f\x69"</literal>
<literal type="string">"\x07\xaf\xe7\x1c\x5d\x74\x62\x22"</literal>
<literal type="string">"\x4a\x3f\x9d\x9e\x53\xe7\xe0\x84"</literal>
<literal type="string">"\x6d\xcb\xb4\xce"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>,
<argument><expr><literal type="string">"\x13\x51\x14\x50\x8d\xd6\x3e\x27"</literal>
<literal type="string">"\x9e\x70\x9c\x26\xf7\x81\x7c\x04"</literal>
<literal type="string">"\x82\x76\x6c\xde\x49\x13\x2e\x3e"</literal>
<literal type="string">"\xdf\x2e\xed\xd8\x99\x6f\x4e\x35"</literal>
<literal type="string">"\x96\xd1\x84\x10\x0b\x38\x48\x68"</literal>
<literal type="string">"\x24\x9f\x1d\x8b\x8f\xda\xa2\xc9"</literal></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-384"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>keccak_512_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>hash_state</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>keccak_512_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <literal type="string">"\xcc"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><literal type="string">"\x86\x30\xc1\x3c\xbd\x06\x6e\xa7"</literal>
<literal type="string">"\x4b\xbe\x7f\xe4\x68\xfe\xc1\xde"</literal>
<literal type="string">"\xe1\x0e\xdc\x12\x54\xfb\x4c\x1b"</literal>
<literal type="string">"\x7c\x5f\xd6\x9b\x64\x6e\x44\x16"</literal>
<literal type="string">"\x0b\x8c\xe0\x1d\x05\xa0\x90\x8c"</literal>
<literal type="string">"\xa7\x90\xdf\xb0\x80\xf4\xb5\x13"</literal>
<literal type="string">"\xbc\x3b\x62\x25\xec\xe7\xa8\x10"</literal>
<literal type="string">"\x37\x14\x41\xa5\xac\x66\x6e\xb9"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-512"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>keccak_512_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"\x41\xfb"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><literal type="string">"\x55\x1d\xa6\x23\x6f\x8b\x96\xfc"</literal>
<literal type="string">"\xe9\xf9\x7f\x11\x90\xe9\x01\x32"</literal>
<literal type="string">"\x4f\x0b\x45\xe0\x6d\xbb\xb5\xcd"</literal>
<literal type="string">"\xb8\x35\x5d\x6e\xd1\xdc\x34\xb3"</literal>
<literal type="string">"\xf0\xea\xe7\xdc\xb6\x86\x22\xff"</literal>
<literal type="string">"\x23\x2f\xa3\xce\xce\x0d\x46\x16"</literal>
<literal type="string">"\xcd\xeb\x39\x31\xf9\x38\x03\x66"</literal>
<literal type="string">"\x2a\x28\xdf\x1c\xd5\x35\xb7\x31"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-512"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>keccak_512_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator>
<literal type="string">"\x52\xa6\x08\xab\x21\xcc\xdd\x8a"</literal>
<literal type="string">"\x44\x57\xa5\x7e\xde\x78\x21\x76"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><literal type="string">"\x4b\x39\xd3\xda\x5b\xcd\xf4\xd9"</literal>
<literal type="string">"\xb7\x69\x01\x59\x95\x64\x43\x11"</literal>
<literal type="string">"\xc1\x4c\x43\x5b\xf7\x2b\x10\x09"</literal>
<literal type="string">"\xd6\xdd\x71\xb0\x1a\x63\xb9\x7c"</literal>
<literal type="string">"\xfb\x59\x64\x18\xe8\xe4\x23\x42"</literal>
<literal type="string">"\xd1\x17\xe0\x74\x71\xa8\x91\x43"</literal>
<literal type="string">"\x14\xba\x7b\x0e\x26\x4d\xad\xf0"</literal>
<literal type="string">"\xce\xa3\x81\x86\x8c\xbd\x43\xd1"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-512"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>keccak_512_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator>
<literal type="string">"\x43\x3c\x53\x03\x13\x16\x24\xc0"</literal>
<literal type="string">"\x02\x1d\x86\x8a\x30\x82\x54\x75"</literal>
<literal type="string">"\xe8\xd0\xbd\x30\x52\xa0\x22\x18"</literal>
<literal type="string">"\x03\x98\xf4\xca\x44\x23\xb9\x82"</literal>
<literal type="string">"\x14\xb6\xbe\xaa\xc2\x1c\x88\x07"</literal>
<literal type="string">"\xa2\xc3\x3f\x8c\x93\xbd\x42\xb0"</literal>
<literal type="string">"\x92\xcc\x1b\x06\xce\xdf\x32\x24"</literal>
<literal type="string">"\xd5\xed\x1e\xc2\x97\x84\x44\x4f"</literal>
<literal type="string">"\x22\xe0\x8a\x55\xaa\x58\x54\x2b"</literal>
<literal type="string">"\x52\x4b\x02\xcd\x3d\x5d\x5f\x69"</literal>
<literal type="string">"\x07\xaf\xe7\x1c\x5d\x74\x62\x22"</literal>
<literal type="string">"\x4a\x3f\x9d\x9e\x53\xe7\xe0\x84"</literal>
<literal type="string">"\x6d\xcb\xb4\xce"</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>keccak_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><literal type="string">"\x52\x7d\x28\xe3\x41\xe6\xb1\x4f"</literal>
<literal type="string">"\x46\x84\xad\xb4\xb8\x24\xc4\x96"</literal>
<literal type="string">"\xc6\x48\x2e\x51\x14\x95\x65\xd3"</literal>
<literal type="string">"\xd1\x72\x26\x82\x88\x84\x30\x6b"</literal>
<literal type="string">"\x51\xd6\x14\x8a\x72\x62\x2c\x2b"</literal>
<literal type="string">"\x75\xf5\xd3\x51\x0b\x79\x9d\x8b"</literal>
<literal type="string">"\xdc\x03\xea\xed\xe4\x53\x67\x6a"</literal>
<literal type="string">"\x6e\xc8\xfe\x03\xa1\xad\x0e\xab"</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
<argument><expr><literal type="string">"KECCAK-512"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




</unit>
