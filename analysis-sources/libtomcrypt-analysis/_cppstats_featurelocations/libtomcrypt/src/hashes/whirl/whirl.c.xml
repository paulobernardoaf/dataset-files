<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\src\hashes\whirl\whirl.c">













<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_WHIRLPOOL</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_hash_descriptor</name></name></type> <name>whirlpool_desc</name> <init>=
<expr><block>{
<expr><literal type="string">"whirlpool"</literal></expr>,
<expr><literal type="number">11</literal></expr>,
<expr><literal type="number">64</literal></expr>,
<expr><literal type="number">64</literal></expr>,


<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10118</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">55</literal></expr> }</block></expr>,
<expr><literal type="number">6</literal></expr>,

<expr><operator>&amp;</operator><name>whirlpool_init</name></expr>,
<expr><operator>&amp;</operator><name>whirlpool_process</name></expr>,
<expr><operator>&amp;</operator><name>whirlpool_done</name></expr>,
<expr><operator>&amp;</operator><name>whirlpool_test</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LTC_WHIRLTAB_C__</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"whirltab.c"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a[(i) &amp; 7] &gt;&gt; (8 * (j))) &amp; 255)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>theta_pi_gamma</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SB0(GB(a, i-0, 7)) ^ SB1(GB(a, i-1, 6)) ^ SB2(GB(a, i-2, 5)) ^ SB3(GB(a, i-3, 4)) ^ SB4(GB(a, i-4, 3)) ^ SB5(GB(a, i-5, 2)) ^ SB6(GB(a, i-6, 1)) ^ SB7(GB(a, i-7, 0)))</cpp:value></cpp:define>









<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>_whirlpool_compress</name><argument_list>(<argument><expr><name>hash_state</name> <operator>*</operator><name>md</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
static <name>int</name> <name>whirlpool_compress</name><argument_list>(<argument><expr><name>hash_state</name> <operator>*</operator><name>md</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><name>buf</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong64</name></type> <name><name>K</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>T</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>state</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOAD64H</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>x</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>T</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>T</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <call><name>theta_pi_gamma</name><argument_list>(<argument><expr><name><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>cont</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>T</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <call><name>theta_pi_gamma</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>



<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <call><name>theta_pi_gamma</name><argument_list>(<argument><expr><name><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>cont</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>T</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <call><name>theta_pi_gamma</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></for>


<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>state</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>T</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>^</operator> <name><name>T</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>whirlpool_compress</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>_whirlpool_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>burn_stack</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ulong64</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>







<function><type><name>int</name></type> <name>whirlpool_init</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type> <name>md</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<macro><name>HASH_PROCESS</name><argument_list>(<argument>whirlpool_process</argument>, <argument>whirlpool_compress</argument>, <argument>whirlpool</argument>, <argument><literal type="number">64</literal></argument>)</argument_list></macro>







<function><type><name>int</name></type> <name>whirlpool_done</name><parameter_list>(<parameter><decl><type><name>hash_state</name> <modifier>*</modifier></type> <name>md</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>curlen</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>
</block_content>}</block></if></if_stmt>


<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>length</name></name> <operator>+=</operator> <name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>curlen</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>


<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0x80</literal></expr>;</expr_stmt>





<if_stmt><if>if <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>curlen</name></name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
<while>while <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>curlen</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>
<expr_stmt><expr><call><name>whirlpool_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>curlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<while>while <condition>(<expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>curlen</name></name> <operator>&lt;</operator> <literal type="number">56</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>buf</name><index>[<expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>curlen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></while>


<expr_stmt><expr><call><name>STORE64H</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>buf</name></name><operator>+</operator><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>whirlpool_compress</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>STORE64H</name><argument_list>(<argument><expr><name><name>md</name><operator>-&gt;</operator><name>whirlpool</name><operator>.</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>out</name><operator>+</operator><operator>(</operator><literal type="number">8</literal><operator>*</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>md</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>





<function><type><name>int</name></type> <name>whirlpool_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hash</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{


<expr><block>{
<expr><literal type="number">0</literal></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x26</literal></expr>,
<expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xA7</literal></expr>,
<expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x57</literal></expr>,
<expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0xB3</literal></expr> }</block></expr>
}</block></expr>,



<expr><block>{

<expr><literal type="number">56</literal></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x03</literal></expr>,
<expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x0C</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x70</literal></expr>,
<expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x61</literal></expr>,
<expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xB0</literal></expr> }</block></expr>
}</block></expr>,


<expr><block>{
<expr><literal type="number">65</literal></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x1D</literal></expr>,
<expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0xE4</literal></expr>,
<expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xAF</literal></expr>,
<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xB9</literal></expr> }</block></expr>
}</block></expr>,


<expr><block>{
<expr><literal type="number">64</literal></expr>,
<expr><block>{ <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x5A</literal></expr>,
<expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xF3</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x94</literal></expr>,
<expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xA6</literal></expr>,
<expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xCB</literal></expr> }</block></expr>
}</block></expr>,


<expr><block>{
<expr><literal type="number">64</literal></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x3E</literal></expr>,
<expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x9F</literal></expr>,
<expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x35</literal></expr>,
<expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xE0</literal></expr> }</block></expr>
}</block></expr>,


<expr><block>{
<expr><literal type="number">64</literal></expr>,
<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xF6</literal></expr>,
<expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0x0F</literal></expr>,
<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0x7B</literal></expr>,
<expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xF7</literal></expr> }</block></expr>
}</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>whirlpool_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>whirlpool_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>whirlpool_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"WHIRLPOOL"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>





</unit>
