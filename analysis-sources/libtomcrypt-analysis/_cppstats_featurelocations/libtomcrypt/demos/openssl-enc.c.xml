<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\demos\openssl-enc.c">












































<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIJNDAEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Cannot compile this demo; Rijndael (AES) required</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CBC_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Cannot compile this demo; CBC mode required</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Cannot compile this demo; PKCS5 required</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RNG_GET_BYTES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Cannot compile this demo; random generator required</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Cannot compile this demo; MD5 required</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSSL_ITERATIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEY_LENGTH</name></cpp:macro> <cpp:value>(256&gt;&gt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IV_LENGTH</name></cpp:macro> <cpp:value>(128&gt;&gt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SALT_LENGTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>salt_header</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><literal type="char">'_'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>



<union>union <name>paddable</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>unpad</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pad</name><index>[<expr><literal type="number">1024</literal><operator>+</operator><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</union>








<function><type><name>void</name></type> <name>barf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s &lt;enc|dec&gt; infile outfile passphrase [salt]\n"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" #encrypts infile-&gt;outfile, random salt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s enc infile outfile \"passphrase\"\n"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" #encrypts infile-&gt;outfile, salt from cmdline\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s enc infile outfile pass 0123456789abcdef\n"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" #decrypts infile-&gt;outfile, pulls salt from infile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s dec infile outfile pass\n"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" #decrypts infile-&gt;outfile, salt specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" #(don't try to read the salt from infile)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s dec infile outfile pass 0123456789abcdef"</literal>
<literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Application Error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">" System Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>parse_hex_salt</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>idx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name><operator>&lt;</operator><name>SALT_LENGTH</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<if_stmt><if>if<condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>in</name><operator>+</operator><name>idx</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%02hhx"</literal></expr></argument>, <argument><expr><name>out</name><operator>+</operator><name>idx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>int</name></type> <name>parse_openssl_header</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><name>SALT_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<if_stmt><if>if<condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>salt_header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>








<function><type><name>void</name></type> <name>dump_bytes</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>idx</name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>idx</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02hhX"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>in</name><operator>+</operator><name>idx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>










<function><type><specifier>static</specifier> <name>size_t</name></type> <name>_pkcs7_pad</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>paddable</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>nb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_length</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>is_padding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>length</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>is_padding</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>padding_pad</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><name>block_length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>length</name></expr>;</return>
</block_content>}</block></if> <else>else <block>{<block_content>
<expr_stmt><expr><name>length</name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><call><name>padding_depad</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>pad</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><name>length</name></expr>;</return>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>









<function><type><name>int</name></type> <name>do_crypt</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>infd</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outfd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>,
<parameter><decl><type><name>int</name></type> <name>encrypt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name><name>union</name> <name>paddable</name></name></type> <name>inbuf</name></decl>, <decl><type ref="prev"/><name>outbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cipher</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_CBC</name></type> <name>cbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nb</name></decl>;</decl_stmt>


<expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name>register_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aes_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>cipher</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_INVALID_CIPHER</name></expr>;</return></block_content></block></if></if_stmt>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cbc_start</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>KEY_LENGTH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>CRYPT_OK</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name><name>inbuf</name><operator>.</operator><name>unpad</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>inbuf</name><operator>.</operator><name>unpad</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>infd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><operator>!</operator><name>nb</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><ternary><condition><expr><name>encrypt</name></expr> ?</condition><then> <expr><name>CRYPT_OK</name></expr> </then><else>: <expr><name>CRYPT_ERROR</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>infd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>encrypt</name></expr>)</condition> <block>{<block_content>


<if_stmt><if>if<condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name>infd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>_pkcs7_pad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>inbuf</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>,
<argument><expr><name><name>aes_desc</name><operator>.</operator><name>block_length</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cbc_encrypt</name><argument_list>(<argument><expr><name><name>inbuf</name><operator>.</operator><name>pad</name></name></expr></argument>, <argument><expr><name><name>outbuf</name><operator>.</operator><name>pad</name></name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>


<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cbc_decrypt</name><argument_list>(<argument><expr><name><name>inbuf</name><operator>.</operator><name>unpad</name></name></expr></argument>, <argument><expr><name><name>outbuf</name><operator>.</operator><name>unpad</name></name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>CRYPT_OK</name></expr> )</condition><block type="pseudo"><block_content>
<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name>infd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>_pkcs7_pad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>outbuf</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>,
<argument><expr><name><name>aes_desc</name><operator>.</operator><name>block_length</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><name>nb</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>


<if_stmt><if>if<condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>outbuf</name><operator>.</operator><name>unpad</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><name>outfd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nb</name></expr>)</condition><block type="pseudo"><block_content>
<return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block> while<condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>infd</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>


<expr_stmt><expr><call><name>cbc_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BARF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ if(infd) fclose(infd); if(outfd) { fclose(outfd); remove(argv[3]); } barf(argv[0], a); }</cpp:value></cpp:define>








<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>salt</name><index>[<expr><name>SALT_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>infd</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>outfd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>encrypt</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>keyiv</name><index>[<expr><name>KEY_LENGTH</name> <operator>+</operator> <name>IV_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>keyivlen</name> <init>= <expr><operator>(</operator><name>KEY_LENGTH</name> <operator>+</operator> <name>IV_LENGTH</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>


<if_stmt><if>if<condition>(<expr><name><name>argc</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">5</literal> <operator>||</operator> <name>argc</name></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BARF</name><argument_list>(<argument><expr><literal type="string">"Invalid number of arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"enc"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>encrypt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
<if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"dec"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><name>encrypt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
<else>else<block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BARF</name><argument_list>(<argument><expr><literal type="string">"Bad command name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


<expr_stmt><expr><name>infd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>infd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BARF</name><argument_list>(<argument><expr><literal type="string">"Could not open infile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>outfd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>outfd</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BARF</name><argument_list>(<argument><expr><literal type="string">"Could not open outfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>parse_hex_salt</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BARF</name><argument_list>(<argument><expr><literal type="string">"Bad user-specified salt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"enc"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>rng_get_bytes</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BARF</name><argument_list>(<argument><expr><literal type="string">"Not enough random data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>parse_openssl_header</name><argument_list>(<argument><expr><name>infd</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BARF</name><argument_list>(<argument><expr><literal type="string">"Invalid OpenSSL header in infile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></else></if_stmt>


<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>register_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>hash</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BARF</name><argument_list>(<argument><expr><literal type="string">"Could not register MD5 hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>keyiv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keyiv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> <operator>=</operator> <name>keyiv</name> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
<expr_stmt><expr><name>iv</name> <operator>=</operator> <name>keyiv</name> <operator>+</operator> <name>KEY_LENGTH</name></expr>;</expr_stmt> 



<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pkcs_5_alg1_openssl</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>XSTRLEN</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>salt</name></expr></argument>,
<argument><expr><name>OPENSSL_ITERATIONS</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>keyiv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyivlen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BARF</name><argument_list>(<argument><expr><literal type="string">"Could not derive key/iv from passphrase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"salt="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>dump_bytes</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"key="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>dump_bytes</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>KEY_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"iv ="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>dump_bytes</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>IV_LENGTH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"enc"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>salt_header</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>salt_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>outfd</name></expr></argument>)</argument_list></call> <operator>!=</operator>
<sizeof>sizeof<argument_list>(<argument><expr><name>salt_header</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BARF</name><argument_list>(<argument><expr><literal type="string">"Error writing salt header to outfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if<condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>outfd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BARF</name><argument_list>(<argument><expr><literal type="string">"Error writing salt to outfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></if></if_stmt>





<if_stmt><if>if<condition>(<expr><call><name>do_crypt</name><argument_list>(<argument><expr><name>infd</name></expr></argument>, <argument><expr><name>outfd</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>encrypt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content>
<expr_stmt><expr><call><name>BARF</name><argument_list>(<argument><expr><literal type="string">"Error during crypt operation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>infd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>




</unit>
