<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats_featurelocations\libtomcrypt\demos\timing.c">







<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI64</name></cpp:macro> <cpp:value>"I64d"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRI64</name></cpp:macro> <cpp:value>"ll"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>prng_state</name></type> <name>yarrow_prng</name></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KTIMES</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMES</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<struct><specifier>static</specifier> struct <name>list</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>spd1</name></decl>, <decl><type ref="prev"/><name>spd2</name></decl>, <decl><type ref="prev"/><name>avg</name></decl>;</decl_stmt>
}</block> <decl><name><name>results</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>no_results</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sorter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>list</name></name> <modifier>*</modifier></type><name>A</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>B</name></decl>;</decl_stmt>
<expr_stmt><expr><name>A</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
<expr_stmt><expr><name>B</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>avg</name></name> <operator>&lt;</operator> <name><name>B</name><operator>-&gt;</operator><name>avg</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>avg</name></name> <operator>&gt;</operator> <name><name>B</name><operator>-&gt;</operator><name>avg</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tally_results</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>


<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>no_results</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>sorter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>no_results</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%-20s: Schedule at %6lu\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name><name>results</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>id</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>results</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>spd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>no_results</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name>
<argument_list>(<argument><expr><literal type="string">"%-20s[%3d]: Encrypt at %5"</literal><name>PRI64</name><literal type="string">"u, Decrypt at %5"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name><name>results</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>id</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name><name>results</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>id</name></expr>]</index></name><operator>.</operator><name>ID</name></expr></argument>, <argument><expr><name><name>results</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>spd1</name></expr></argument>, <argument><expr><name><name>results</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>spd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></if> <else>else <block>{<block_content>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>no_results</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>printf</name>
<argument_list>(<argument><expr><literal type="string">"%-20s: Process at %5"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name><name>hash_descriptor</name><index>[<expr><name><name>results</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>id</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>results</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>spd1</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>ulong64</name></type> <name>rdtsc</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__GNUC__</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_ASM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>



<decl_stmt><decl><type><name>unsigned</name></type> <name>hi</name></decl>, <decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>
<asm>__asm__ <specifier>__volatile__</specifier> ("rdtsc" : "=a"(lo), "=d"(hi));</asm>
<return>return <expr><operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>lo</name><operator>)</operator><operator>|</operator><operator>(</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>hi</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PPC32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>TFM_PPC32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<asm>__asm__ <specifier>__volatile__</specifier> ("mftbu %1 \nmftb %0\n":"=r"(a), "=r"(b));</asm>
<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>b</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32ULL</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name>a</name><operator>)</operator></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ia64__</name></expr></argument>)</argument_list></call></expr></cpp:elif> 
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>result</name></decl>;</decl_stmt>
<asm>__asm__ <specifier>__volatile__</specifier>("mov %0=ar.itc" : "=r"(result) :: "memory");</asm>
<while>while <condition>(<expr><call><name>__builtin_expect</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<asm>__asm__ <specifier>__volatile__</specifier>("mov %0=ar.itc" : "=r"(result) :: "memory");</asm></block_content></block></while>
<return>return <expr><name>result</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__sparc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__arch64__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ulong64</name></type> <name>a</name></decl>;</decl_stmt>
<asm>asm <specifier>volatile</specifier>("rd %%tick,%0" : "=r" (a));</asm>
<return>return <expr><name>a</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>register</specifier> <name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<asm>__asm__ <specifier>__volatile__</specifier> ("rd %%tick, %0; clruw %0, %1; srlx %0, 32, %0" : "=r" (x), "=r" (y) : "0" (x), "1" (y));</asm>
<return>return <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <name>y</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>XCLOCK</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>_M_IX86</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_ASM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<asm>__asm rdtsc</asm>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>_M_AMD64</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_ASM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<return>return <expr><call><name>__rdtsc</name> <argument_list>()</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>_M_IA64</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_ASM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__INTEL_COMPILER</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ia64intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>__getReg</name> <argument_list>(<argument><expr><literal type="number">3116</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>XCLOCK</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>ulong64</name></type> <name>timer</name></decl>, <decl><type ref="prev"/><name>skew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>t_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>rdtsc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ulong64</name></type> <name>t_read</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>rdtsc</name><argument_list>()</argument_list></call> <operator>-</operator> <name>timer</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_timer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong64</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>y1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y1</name> <operator>&lt;</operator> <name>TIMES</name><operator>*</operator><literal type="number">100</literal></expr>;</condition> <incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>(</operator><call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t1</name> <operator>&gt;</operator> <name>c1</name><operator>)</operator></expr> ?</condition><then> <expr><name>t1</name></expr> </then><else>: <expr><name>c1</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t2</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr> ?</condition><then> <expr><name>t2</name></expr> </then><else>: <expr><name>c2</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>skew</name> <operator>=</operator> <name>c2</name> <operator>-</operator> <name>c1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Clock Skew: %lu\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>skew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_keysched</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_key</name></type> <name>skey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>kl</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>func</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nKey Schedule Time Trials for the Symmetric Ciphers:\n(Times are cycles per key)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_results</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>func(k, kl, 0, &amp;skey);</cpp:value></cpp:define>

<expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>setup</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kl</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>min_key_length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y1</name> <operator>&lt;</operator> <name>KTIMES</name></expr>;</condition> <incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>kl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DO1</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t1</name> <operator>&gt;</operator> <name>c1</name><operator>)</operator></expr> ?</condition><then> <expr><name>c1</name></expr> </then><else>: <expr><name>t1</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>c1</name> <operator>-</operator> <name>skew</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd1</name> <operator>=</operator> <name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>avg</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>
</block_content>}</block></for>
<expr_stmt><expr><call><name>tally_results</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>time_cipher_ecb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_ECB</name></type> <name>ecb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nECB Time Trials for the Symmetric Ciphers:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_results</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ecb_start</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>min_key_length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nERROR: Cipher %s failed self-test %s\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>ecb_encrypt(pt, pt, sizeof(pt), &amp;ecb);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1 DO1</cpp:value></cpp:define>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y1</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>-=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t1</name> <operator>&gt;</operator> <name>c1</name></expr> ?</condition><then> <expr><name>c1</name></expr> </then><else>: <expr><name>t1</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t2</name> <operator>&gt;</operator> <name>c2</name></expr> ?</condition><then> <expr><name>c2</name></expr> </then><else>: <expr><name>t2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>c2</name> <operator>-</operator> <name>c1</name> <operator>-</operator> <name>skew</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>ecb_decrypt(pt, pt, sizeof(pt), &amp;ecb);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1 DO1</cpp:value></cpp:define>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y1</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>-=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t1</name> <operator>&gt;</operator> <name>c1</name></expr> ?</condition><then> <expr><name>c1</name></expr> </then><else>: <expr><name>t1</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t2</name> <operator>&gt;</operator> <name>c2</name></expr> ?</condition><then> <expr><name>c2</name></expr> </then><else>: <expr><name>t2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>c2</name> <operator>-</operator> <name>c1</name> <operator>-</operator> <name>skew</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ecb_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd1</name> <operator>=</operator> <name>a1</name><operator>/</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>block_length</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd2</name> <operator>=</operator> <name>a2</name><operator>/</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>block_length</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>avg</name> <operator>=</operator> <operator>(</operator><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd1</name> <operator>+</operator> <name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>no_results</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>
</block_content>}</block></for>
<expr_stmt><expr><call><name>tally_results</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>time_cipher_ecb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NO ECB\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CBC_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>time_cipher_cbc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_CBC</name></type> <name>cbc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nCBC Time Trials for the Symmetric Ciphers:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_results</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>cbc_start</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>min_key_length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nERROR: Cipher %s failed self-test %s\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>cbc_encrypt(pt, pt, sizeof(pt), &amp;cbc);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1 DO1</cpp:value></cpp:define>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y1</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>-=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t1</name> <operator>&gt;</operator> <name>c1</name></expr> ?</condition><then> <expr><name>c1</name></expr> </then><else>: <expr><name>t1</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t2</name> <operator>&gt;</operator> <name>c2</name></expr> ?</condition><then> <expr><name>c2</name></expr> </then><else>: <expr><name>t2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>c2</name> <operator>-</operator> <name>c1</name> <operator>-</operator> <name>skew</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>cbc_decrypt(pt, pt, sizeof(pt), &amp;cbc);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1 DO1</cpp:value></cpp:define>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y1</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>-=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t1</name> <operator>&gt;</operator> <name>c1</name></expr> ?</condition><then> <expr><name>c1</name></expr> </then><else>: <expr><name>t1</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t2</name> <operator>&gt;</operator> <name>c2</name></expr> ?</condition><then> <expr><name>c2</name></expr> </then><else>: <expr><name>t2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>c2</name> <operator>-</operator> <name>c1</name> <operator>-</operator> <name>skew</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cbc_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd1</name> <operator>=</operator> <name>a1</name><operator>/</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>block_length</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd2</name> <operator>=</operator> <name>a2</name><operator>/</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>block_length</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>avg</name> <operator>=</operator> <operator>(</operator><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd1</name> <operator>+</operator> <name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>no_results</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>
</block_content>}</block></for>
<expr_stmt><expr><call><name>tally_results</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>time_cipher_cbc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NO CBC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CTR_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>time_cipher_ctr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_CTR</name></type> <name>ctr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nCTR Time Trials for the Symmetric Ciphers:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_results</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>ctr_start</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>min_key_length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CTR_COUNTER_LITTLE_ENDIAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nERROR: Cipher %s failed self-test %s\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>ctr_encrypt(pt, pt, sizeof(pt), &amp;ctr);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1 DO1</cpp:value></cpp:define>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y1</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>-=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t1</name> <operator>&gt;</operator> <name>c1</name></expr> ?</condition><then> <expr><name>c1</name></expr> </then><else>: <expr><name>t1</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t2</name> <operator>&gt;</operator> <name>c2</name></expr> ?</condition><then> <expr><name>c2</name></expr> </then><else>: <expr><name>t2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>c2</name> <operator>-</operator> <name>c1</name> <operator>-</operator> <name>skew</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>ctr_decrypt(pt, pt, sizeof(pt), &amp;ctr);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1 DO1</cpp:value></cpp:define>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y1</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>-=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t1</name> <operator>&gt;</operator> <name>c1</name></expr> ?</condition><then> <expr><name>c1</name></expr> </then><else>: <expr><name>t1</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t2</name> <operator>&gt;</operator> <name>c2</name></expr> ?</condition><then> <expr><name>c2</name></expr> </then><else>: <expr><name>t2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>c2</name> <operator>-</operator> <name>c1</name> <operator>-</operator> <name>skew</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ctr_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd1</name> <operator>=</operator> <name>a1</name><operator>/</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>block_length</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd2</name> <operator>=</operator> <name>a2</name><operator>/</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>block_length</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>avg</name> <operator>=</operator> <operator>(</operator><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd1</name> <operator>+</operator> <name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>no_results</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>
</block_content>}</block></for>
<expr_stmt><expr><call><name>tally_results</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>time_cipher_ctr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NO CTR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_LRW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>time_cipher_lrw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_LRW</name></type> <name>lrw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>pt</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nLRW Time Trials for the Symmetric Ciphers:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_results</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>block_length</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>lrw_start</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>min_key_length</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nERROR: Cipher %s failed self-test %s\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>lrw_encrypt(pt, pt, sizeof(pt), &amp;lrw);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1 DO1</cpp:value></cpp:define>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y1</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>-=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t1</name> <operator>&gt;</operator> <name>c1</name></expr> ?</condition><then> <expr><name>c1</name></expr> </then><else>: <expr><name>t1</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t2</name> <operator>&gt;</operator> <name>c2</name></expr> ?</condition><then> <expr><name>c2</name></expr> </then><else>: <expr><name>t2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>c2</name> <operator>-</operator> <name>c1</name> <operator>-</operator> <name>skew</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>lrw_decrypt(pt, pt, sizeof(pt), &amp;lrw);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1 DO1</cpp:value></cpp:define>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y1</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>-=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t1</name> <operator>&gt;</operator> <name>c1</name></expr> ?</condition><then> <expr><name>c1</name></expr> </then><else>: <expr><name>t1</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>t2</name> <operator>&gt;</operator> <name>c2</name></expr> ?</condition><then> <expr><name>c2</name></expr> </then><else>: <expr><name>t2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>a2</name> <operator>=</operator> <name>c2</name> <operator>-</operator> <name>c1</name> <operator>-</operator> <name>skew</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>lrw_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lrw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd1</name> <operator>=</operator> <name>a1</name><operator>/</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>block_length</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd2</name> <operator>=</operator> <name>a2</name><operator>/</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof><operator>/</operator><name><name>cipher_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>block_length</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>avg</name> <operator>=</operator> <operator>(</operator><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd1</name> <operator>+</operator> <name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>no_results</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>
</block_content>}</block></for>
<expr_stmt><expr><call><name>tally_results</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>time_cipher_lrw</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NO LRW\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>void</name></type> <name>time_hash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <argument_list>(<argument><expr><operator>*</operator><name>func</name></expr></argument>)</argument_list><argument_list>(<argument><expr><name>hash_state</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>unsigned</name> <name>long</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pt</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>


<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nHASH Time Trials for:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>no_results</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>hash_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nERROR: Hash %s failed self-test %s\n"</literal></expr></argument>, <argument><expr><name><name>hash_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hash_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>func(&amp;md,pt,len);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1 DO1</cpp:value></cpp:define>

<expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>process</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>blocksize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>c2</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y1</name> <operator>&lt;</operator> <name>TIMES</name></expr>;</condition> <incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t1</name> <operator>&gt;</operator> <name>c1</name><operator>)</operator></expr> ?</condition><then> <expr><name>c1</name></expr> </then><else>: <expr><name>t1</name></expr></else></ternary></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>t2</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator></expr> ?</condition><then> <expr><name>c2</name></expr> </then><else>: <expr><name>t2</name></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>c2</name> <operator>-</operator> <name>c1</name> <operator>-</operator> <name>skew</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>t1</name> <operator>*</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>ulong64</name><operator>)</operator><name><name>hash_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>blocksize</name><operator>)</operator></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>spd1</name> <operator>=</operator> <name><name>results</name><index>[<expr><name>no_results</name></expr>]</index></name><operator>.</operator><name>avg</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>++</operator><name>no_results</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>
</block_content>}</block></for>
<expr_stmt><expr><call><name>tally_results</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <name>void</name></type> <name>time_mult</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Timing Multiplying:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">128</literal><operator>/</operator><name>MP_DIGIT_BIT</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><literal type="number">1536</literal><operator>/</operator><name>MP_DIGIT_BIT</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">128</literal><operator>/</operator><name>MP_DIGIT_BIT</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mp_rand</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp_rand</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>mp_mul(a, b, c);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1; DO1;</cpp:value></cpp:define>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>TIMES</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%4lu bits: %9"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name><operator>*</operator><name>MP_DIGIT_BIT</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_sqr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Timing Squaring:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">128</literal><operator>/</operator><name>MP_DIGIT_BIT</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><literal type="number">1536</literal><operator>/</operator><name>MP_DIGIT_BIT</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">128</literal><operator>/</operator><name>MP_DIGIT_BIT</name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>mp_rand</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>mp_sqr(a, b);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1; DO1;</cpp:value></cpp:define>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>TIMES</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%4lu bits: %9"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name><operator>*</operator><name>MP_DIGIT_BIT</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_prng</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prng_state</name></type> <name>tprng</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Timing PRNGs (cycles/byte output, cycles add_entropy (32 bytes) :\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>


<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nERROR: PRNG %s failed self-test %s\n"</literal></expr></argument>, <argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tprng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>add_entropy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tprng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tprng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>if (prng_descriptor[x].read(buf, 4096, &amp;tprng) != 4096) { fprintf(stderr, "\n\nERROR READ != 4096\n\n"); exit(EXIT_FAILURE); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1 DO1</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%20s: %5"</literal><name>PRI64</name><literal type="string">"u "</literal></expr></argument>, <argument><expr><name><name>prng_descriptor</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>t2</name><operator>&gt;&gt;</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO1</name></cpp:macro> <cpp:value>prng_descriptor[x].start(&amp;tprng); prng_descriptor[x].add_entropy(buf, 32, &amp;tprng); prng_descriptor[x].ready(&amp;tprng); prng_descriptor[x].done(&amp;tprng);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO2</name></cpp:macro> <cpp:value>DO1 DO1</cpp:value></cpp:define>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>DO2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%5"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO2</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DO1</name></cpp:undef>

</block_content>}</block></for>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_dsa</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dsa_key</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>group</name></decl>, <decl><type ref="prev"/><name>modulus</name></decl>;</decl_stmt>
}</block> <decl><name><name>groups</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">96</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">192</literal></expr> }</block></expr>,
<expr><block>{ <expr><literal type="number">28</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TFM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</struct>

<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>groups</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>groups</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>dsa_generate_pqg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>group</name></expr></argument>, <argument><expr><name><name>groups</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\ndsa_generate_pqg says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>dsa_generate_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\ndsa_make_key says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>dsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DSA-(%lu, %lu) make_key took %15"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>groups</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>group</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>groups</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>modulus</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>time_dsa</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NO DSA\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MRSA</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_rsa</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>rsa_key</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2048</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>zzz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>zz</name></decl>, <decl><type ref="prev"/><name>stat</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">2048</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <literal type="number">8192</literal></expr>;</condition> <incr><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rsa_make_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name><operator>/</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">65537</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nrsa_make_key says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"RSA-%lu make_key took %15"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rsa_encrypt_key</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"testprog"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>,
<argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nrsa_encrypt_key says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"RSA-%lu encrypt_key took %15"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zzz</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rsa_decrypt_key</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zzz</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"testprog"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>zz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nrsa_decrypt_key says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>&lt;&lt;=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>&gt;&gt;=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"RSA-%lu decrypt_key took %15"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rsa_sign_hash</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>,
<argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nrsa_sign_hash says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"RSA-%lu sign_hash took %15"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">2048</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rsa_verify_hash</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nrsa_verify_hash says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>stat</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nrsa_verify_hash for RSA-%lu failed to verify signature(%lu)\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>&lt;&lt;=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>&gt;&gt;=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"RSA-%lu verify_hash took %15"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>time_rsa</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NO RSA\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_dh</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>dh_key</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name><name>sizes</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">768</literal><operator>/</operator><literal type="number">8</literal></expr>, <expr><literal type="number">1024</literal><operator>/</operator><literal type="number">8</literal></expr>, <expr><literal type="number">1536</literal><operator>/</operator><literal type="number">8</literal></expr>, <expr><literal type="number">2048</literal><operator>/</operator><literal type="number">8</literal></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TFM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">3072</literal><operator>/</operator><literal type="number">8</literal></expr>, <expr><literal type="number">4096</literal><operator>/</operator><literal type="number">8</literal></expr>, <expr><literal type="number">6144</literal><operator>/</operator><literal type="number">8</literal></expr>, <expr><literal type="number">8192</literal><operator>/</operator><literal type="number">8</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="number">100000</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>sizes</name><index>[<expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">100000</literal></expr>;</condition> <incr><expr><name>x</name> <operator>=</operator> <name><name>sizes</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if<condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>dh_set_pg_groupsize</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\ndh_set_pg_groupsize says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>dh_generate_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\ndh_make_key says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dh_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DH-%4lu make_key took %15"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>time_dh</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NO DH\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_ecc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>ecc_key</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name><name>sizes</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP112R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">112</literal><operator>/</operator><literal type="number">8</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP128R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">128</literal><operator>/</operator><literal type="number">8</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP160R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">160</literal><operator>/</operator><literal type="number">8</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP192R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">192</literal><operator>/</operator><literal type="number">8</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP224R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">224</literal><operator>/</operator><literal type="number">8</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP256R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">256</literal><operator>/</operator><literal type="number">8</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP384R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">384</literal><operator>/</operator><literal type="number">8</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SECP512R1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><literal type="number">521</literal><operator>/</operator><literal type="number">8</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><literal type="number">100000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>sizes</name><index>[<expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">100000</literal></expr>;</condition> <incr><expr><name>x</name> <operator>=</operator> <name><name>sizes</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_make_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\necc_make_key says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>ecc_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ECC-%lu make_key took %15"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_encrypt_key</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\necc_encrypt_key says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ECC-%lu encrypt_key took %15"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_decrypt_key</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\necc_decrypt_key says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ECC-%lu decrypt_key took %15"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_sign_hash</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>,
<argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\necc_sign_hash says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ECC-%lu sign_hash took %15"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_verify_hash</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\necc_verify_hash says %s, wait...no it should say %s...damn you!\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>stat</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\necc_verify_hash for ECC-%lu failed to verify signature(%lu)\n"</literal></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PROFILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></for>
<expr_stmt><expr><name>t2</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ECC-%lu verify_hash took %15"</literal><name>PRI64</name><literal type="string">"u cycles\n"</literal></expr></argument>, <argument><expr><name>x</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ecc_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>time_ecc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NO ECC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_macs_</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>MAC_SIZE</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OMAC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_XCBC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_F9_MODE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_PMAC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_PELICAN</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"/><name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tag</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>cipher_idx</name></decl>, <decl><type ref="prev"/><name>hash_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nMAC Timings (cycles/byte on %luKB blocks):\n"</literal></expr></argument>, <argument><expr><name>MAC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nout of heap yo\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cipher_idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><literal type="string">"aes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cipher_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>hash_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Warning the MAC tests requires AES and SHA1 to operate... so sorry\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>omac_memory</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nomac-%s error... %s\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"OMAC-%s\t\t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XCBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>xcbc_memory</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nxcbc-%s error... %s\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"XCBC-%s\t\t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F9_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>f9_memory</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nF9-%s error... %s\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"F9-%s\t\t\t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pmac_memory</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\npmac-%s error... %s\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"PMAC-%s\t\t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PELICAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pelican_memory</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\npelican error... %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"PELICAN \t\t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hmac_memory</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nhmac-%s error... %s\n"</literal></expr></argument>, <argument><expr><name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"HMAC-%s\t\t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>MAC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NO MACs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_macs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>time_macs_</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time_macs_</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time_macs_</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_encmacs_</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>MAC_SIZE</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_EAX_MODE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_OCB_MODE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_OCB3_MODE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_CCM_MODE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>, <decl><type ref="prev"/><name><name>IV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tag</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ulong64</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>cipher_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>symmetric_key</name></type> <name>skey</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nENC+MAC Timings (zero byte AAD, 16 byte IV, cycles/byte on %luKB blocks):\n"</literal></expr></argument>, <argument><expr><name>MAC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n\nout of heap yo\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cipher_idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><literal type="string">"aes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>yarrow_read</name><argument_list>(<argument><expr><name>IV</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_EAX_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>eax_encrypt_authenticate_memory</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nEAX error... %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"EAX \t\t\t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OCB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ocb_encrypt_authenticate_memory</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nOCB error... %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"OCB \t\t\t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OCB3_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ocb3_encrypt_authenticate_memory</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nOCB3 error... %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"OCB3 \t\t\t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CCM_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ccm_memory</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>CCM_ENCRYPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nCCM error... %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"CCM (no-precomp) \t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><call><name>setup</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ccm_memory</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>CCM_ENCRYPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nCCM error... %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"CCM (precomp) \t\t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><call><name>done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_memory</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><name>GCM_ENCRYPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nGCM error... %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"GCM (no-precomp)\t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>
<decl_stmt><decl><type><name>gcm_state</name> <name>gcm</name></type>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_TABLES_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>aligned</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gcm</name></expr></argument>, <argument><expr><name>cipher_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"gcm_init: %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t2</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
<expr_stmt><expr><call><name>t_start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gcm</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nGCM error[%d]... %s\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_add_iv</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gcm</name></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nGCM error[%d]... %s\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_add_aad</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gcm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nGCM error[%d]... %s\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gcm</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>GCM_ENCRYPT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nGCM error[%d]... %s\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>gcm_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gcm</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nGCM error[%d]... %s\n"</literal></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>t_read</name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&lt;</operator> <name>t2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t2</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></for>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"GCM (precomp)\t\t%9"</literal><name>PRI64</name><literal type="string">"u\n"</literal></expr></argument>, <argument><expr><name>t2</name><operator>/</operator><operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name>MAC_SIZE</name><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>MAC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"NO ENCMACs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>time_encmacs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><call><name>time_encmacs_</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time_encmacs_</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>time_encmacs_</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_TEST_FN</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ f, #f }</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<struct><specifier>const</specifier> struct
<block>{
<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>fn</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>
}</block> <decl><name><name>test_functions</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_keysched</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_cipher_ecb</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_cipher_cbc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_cipher_ctr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_cipher_lrw</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_hash</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_macs</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_encmacs</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_prng</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_mult</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_sqr</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_rsa</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_dsa</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_ecc</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>LTC_TEST_FN</name><argument_list>(<argument><expr><name>time_dh</name></expr></argument>)</argument_list></call></expr>,
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>single_test</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mpi_provider</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_all_ciphers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_all_hashes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>register_all_prngs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_LTM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>mpi_provider</name> <operator>=</operator> <literal type="string">"ltm"</literal></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_TFM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>mpi_provider</name> <operator>=</operator> <literal type="string">"tfm"</literal></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_GMP</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>mpi_provider</name> <operator>=</operator> <literal type="string">"gmp"</literal></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT_MATH_LIB</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>mpi_provider</name> <operator>=</operator> <literal type="string">"ext"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><name>mpi_provider</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>crypt_mp_init</name><argument_list>(<argument><expr><name>mpi_provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rng_make_prng</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><call><name>find_prng</name><argument_list>(<argument><expr><literal type="string">"yarrow"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>yarrow_prng</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"rng_make_prng failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></if></if_stmt>


<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>single_test</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>test_functions</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>test_functions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>single_test</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>test_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>single_test</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
<continue>continue;</continue>
</block_content>}</block></if></if_stmt>
<expr_stmt><expr><name><name>test_functions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>fn</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></for>

<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>

</block_content>}</block></function>




</unit>
