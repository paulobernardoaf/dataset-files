<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\ec25519\ec25519_import_pkcs8.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CURVE25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>ec25519_import_pkcs8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>pwdlen</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>ltc_oid_id</name></name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>sk_to_pk</name></type> <name>fp</name></decl></parameter>,

<parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>alg_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>private_key</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>version</name></decl>, <decl><type ref="prev"/><name>key_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>tmpoid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>fp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pkcs8_decode_flexi</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>alg_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><name>tmpoid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpoid</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tmpoid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>private_key</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_multi</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1uL</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>,

<argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><literal type="number">1uL</literal></expr></argument>, <argument><expr><name>alg_id</name></expr></argument>,

<argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>private_key</name></expr></argument>,

<argument><expr><name>LTC_ASN1_EOL</name></expr></argument>, <argument><expr><literal type="number">0uL</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>==</operator> <name>CRYPT_INPUT_TOO_LONG</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>version</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>version</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pk_get_oid</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oid</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pk_oid_cmp_with_asn1</name><argument_list>(<argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>alg_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_octet_string</name><argument_list>(<argument><expr><name>private_key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>private_key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fp</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pub</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PK_PRIVATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_PK_INVALID_TYPE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>out</name>:</label>

<if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>der_free_sequence_flexi</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>private_key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>private_key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
