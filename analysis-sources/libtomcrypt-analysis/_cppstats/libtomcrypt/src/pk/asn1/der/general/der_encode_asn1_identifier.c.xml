<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\asn1\der\general\der_encode_asn1_identifier.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>der_encode_asn1_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ulong64</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tag_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_CUSTOM_TYPE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>id</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;=</operator> <name>der_asn1_type_to_identifier_map_sz</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>der_asn1_type_to_identifier_map</name><index>[<expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <name><name>der_asn1_type_to_identifier_map</name><index>[<expr><name><name>id</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>klass</name></name> <operator>&lt;</operator> <name>LTC_ASN1_CL_UNIVERSAL</name> <operator>||</operator> <name><name>id</name><operator>-&gt;</operator><name>klass</name></name> <operator>&gt;</operator> <name>LTC_ASN1_CL_PRIVATE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>pc</name></name> <operator>&lt;</operator> <name>LTC_ASN1_PC_PRIMITIVE</name> <operator>||</operator> <name><name>id</name><operator>-&gt;</operator><name>pc</name></name> <operator>&gt;</operator> <name>LTC_ASN1_PC_CONSTRUCTED</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>&gt;</operator> <operator>(</operator><name>ULONG_MAX</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outlen</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>klass</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> <name><name>id</name><operator>-&gt;</operator><name>pc</name></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>&lt;</operator> <literal type="number">0x1f</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tag_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>tag_len</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>tmp</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outlen</name> <operator>&lt;</operator> <name>tag_len</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>tmp</name> <operator>&lt;=</operator> <name>tag_len</name></expr>;</condition> <incr><expr><operator>++</operator><name>tmp</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>tmp</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>id</name><operator>-&gt;</operator><name>tag</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>*</operator> <operator>(</operator><name>tag_len</name> <operator>-</operator> <name>tmp</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>tag_len</name></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>tag_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
