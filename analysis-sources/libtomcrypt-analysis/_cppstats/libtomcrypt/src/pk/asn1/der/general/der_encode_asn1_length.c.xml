<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\asn1\der\general\der_encode_asn1_length.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>der_encode_asn1_length</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_PK_ASN1_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outlen</name> <operator>&lt;</operator> <name>y</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xffUL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x81</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xffffUL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x82</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">8UL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>len</name><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xffffffUL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x83</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">16UL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">8UL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>len</name><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ULONG_MAX</name> <operator>!=</operator> <name>ULLONG_MAX</name></expr></cpp:if>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x84</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">24UL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">16UL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">8UL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>len</name><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

</block_content>}</block></else></if_stmt> <if_stmt><if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xffffffffUL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x84</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">24UL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">16UL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">8UL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>len</name><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xffffffffffULL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x85</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">32ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">24ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">16ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">8ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>len</name><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xffffffffffffULL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x86</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">40ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">32ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">24ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">16ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">8ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>len</name><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0xffffffffffffffULL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x87</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">48ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">40ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">32ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">24ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">16ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">8ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>len</name><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x88</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">56ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">48ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">40ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">32ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">24ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">16ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">8ULL</literal><operator>)</operator><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>len</name><operator>&amp;</operator><literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
