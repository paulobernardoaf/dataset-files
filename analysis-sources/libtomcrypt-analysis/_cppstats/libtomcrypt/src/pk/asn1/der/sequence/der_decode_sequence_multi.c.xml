<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\asn1\der\sequence\der_decode_sequence_multi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_der_decode_sequence_va</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>a1</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>a2</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_type</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>ltc_asn1_type</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>a1</argument>, <argument>unsigned long</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>LTC_ASN1_EOL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LTC_ASN1_BOOLEAN</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_INTEGER</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_SHORT_INTEGER</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_BIT_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_OCTET_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_NULL</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_IA5_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_PRINTABLE_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_UTF8_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_UTCTIME</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_SET</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_SETOF</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_SEQUENCE</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_CHOICE</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_RAW_BIT_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_TELETEX_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_GENERALIZEDTIME</name></expr>:</case>

<expr_stmt><expr><operator>++</operator><name>x</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LTC_ASN1_EOL</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>:</case>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>list</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>list</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>ltc_asn1_type</name><operator>)</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>a2</argument>, <argument>unsigned long</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>LTC_ASN1_EOL</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LTC_ASN1_BOOLEAN</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_INTEGER</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_SHORT_INTEGER</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_BIT_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_OCTET_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_NULL</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_IA5_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_PRINTABLE_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_UTF8_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_UTCTIME</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_SEQUENCE</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_SET</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_SETOF</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_CHOICE</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_RAW_BIT_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_TELETEX_STRING</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_GENERALIZEDTIME</name></expr>:</case>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>x</name><operator>++</operator></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LTC_ASN1_EOL</name></expr>:</case>

<case>case <expr><name>LTC_ASN1_CUSTOM_TYPE</name></expr>:</case>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_ex</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>der_decode_sequence_multi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>_der_decode_sequence_va</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>LTC_DER_SEQ_SEQUENCE</name> <operator>|</operator> <name>LTC_DER_SEQ_RELAXED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>der_decode_sequence_multi_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>_der_decode_sequence_va</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
