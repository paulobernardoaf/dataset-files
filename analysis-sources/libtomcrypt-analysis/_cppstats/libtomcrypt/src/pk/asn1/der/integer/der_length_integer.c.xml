<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\asn1\der\integer\der_length_integer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>der_length_integer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>leading_zero</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>num</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mp_cmp_d</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_LT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>mp_count_bits</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>mp_iszero</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LTC_MP_YES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>leading_zero</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>leading_zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>leading_zero</name> <operator>+</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>mp_count_bits</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name>z</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>z</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>mp_cnt_lsb</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><call><name>mp_count_bits</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>mp_count_bits</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>--</operator><name>z</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>z</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_asn1_length</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>z</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
