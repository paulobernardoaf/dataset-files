<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\ed25519\ed25519_export.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CURVE25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>ed25519_export</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>algo</name></name> <operator>!=</operator> <name>PKA_ED25519</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_PK_INVALID_TYPE</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>ec25519_export</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>which</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
