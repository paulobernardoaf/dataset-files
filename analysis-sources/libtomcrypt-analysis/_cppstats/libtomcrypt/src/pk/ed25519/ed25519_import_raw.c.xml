<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\ed25519\ed25519_import_raw.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CURVE25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>ed25519_import_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>inlen</name> <operator>==</operator> <literal type="number">32uL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>which</name> <operator>==</operator> <name>PK_PRIVATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tweetnacl_crypto_sk_to_pk</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pub</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>which</name> <operator>==</operator> <name>PK_PUBLIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pub</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>pub</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name>PKA_ED25519</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>which</name></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
