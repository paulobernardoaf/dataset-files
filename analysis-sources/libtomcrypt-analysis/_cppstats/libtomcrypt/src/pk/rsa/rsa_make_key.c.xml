<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\rsa\rsa_make_key.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MRSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>rsa_make_key</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e</name> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>prng_is_valid</name><argument_list>(<argument><expr><name>wprng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_set_int</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt> 

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rand_prime</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>prng</name></expr></argument>, <argument><expr><name>wprng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_sub_d</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_gcd</name><argument_list>( <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt> 

</block_content>}</block> while <condition>(<expr><call><name>mp_cmp_d</name><argument_list>( <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do> 

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rand_prime</name><argument_list>( <argument><expr><name>q</name></expr></argument>, <argument><expr><name>size</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>prng</name></expr></argument>, <argument><expr><name>wprng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_sub_d</name><argument_list>( <argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_gcd</name><argument_list>( <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt> 

</block_content>}</block> while <condition>(<expr><call><name>mp_cmp_d</name><argument_list>( <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_sub_d</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_lcm</name><argument_list>( <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rsa_init</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>errkey</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_set_int</name><argument_list>( <argument><expr><name><name>key</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>errkey</name>;</goto> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_invmod</name><argument_list>( <argument><expr><name><name>key</name><operator>-&gt;</operator><name>e</name></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>d</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>errkey</name>;</goto> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mul</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>N</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>errkey</name>;</goto> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_sub_d</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>errkey</name>;</goto> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_sub_d</name><argument_list>( <argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>errkey</name>;</goto> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mod</name><argument_list>( <argument><expr><name><name>key</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dP</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>errkey</name>;</goto> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mod</name><argument_list>( <argument><expr><name><name>key</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dQ</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>errkey</name>;</goto> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_invmod</name><argument_list>( <argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>qP</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>errkey</name>;</goto> </block_content>}</block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_copy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>errkey</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_copy</name><argument_list>( <argument><expr><name>q</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>q</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>errkey</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PK_PRIVATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>

<goto>goto <name>cleanup</name>;</goto>

<label><name>errkey</name>:</label>

<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>tmp3</name></expr></argument>, <argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
