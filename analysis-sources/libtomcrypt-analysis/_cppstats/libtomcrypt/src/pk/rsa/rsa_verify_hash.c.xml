<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\rsa\rsa_verify_hash.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MRSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>rsa_verify_hash_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>siglen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>hashlen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>saltlen</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>modulus_bitlen</name></decl>, <decl><type ref="prev"/><name>modulus_bytelen</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tmpbuf</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>hash</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>sig</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>stat</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>stat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>padding</name> <operator>!=</operator> <name>LTC_PKCS_1_V1_5</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>padding</name> <operator>!=</operator> <name>LTC_PKCS_1_PSS</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>padding</name> <operator>!=</operator> <name>LTC_PKCS_1_V1_5_NA1</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_PK_INVALID_PADDING</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>padding</name> <operator>!=</operator> <name>LTC_PKCS_1_V1_5_NA1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hash_is_valid</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>modulus_bitlen</name> <operator>=</operator> <call><name>mp_count_bits</name><argument_list>( <argument><expr><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>N</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>modulus_bytelen</name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>( <argument><expr><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>N</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>modulus_bytelen</name> <operator>!=</operator> <name>siglen</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tmpbuf</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>siglen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>ltc_mp</name><operator>.</operator><name>rsa_me</name></name><argument_list>(<argument><expr><name>sig</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>siglen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>padding</name> <operator>==</operator> <name>LTC_PKCS_1_PSS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>modulus_bitlen</name><operator>%</operator><literal type="number">8</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pkcs_1_pss_decode</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashlen</name></expr></argument>, <argument><expr><name>tmpbuf</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>saltlen</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>modulus_bitlen</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pkcs_1_pss_decode</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashlen</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>saltlen</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>modulus_bitlen</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decoded</name></decl>;</decl_stmt>

<expr_stmt><expr><name>outlen</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>modulus_bitlen</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>modulus_bitlen</name> <operator>&amp;</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>

<goto>goto <name>bail_2</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pkcs_1_v1_5_decode</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>LTC_PKCS_1_EMSA</name></expr></argument>, <argument><expr><name>modulus_bitlen</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>bail_2</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>padding</name> <operator>==</operator> <name>LTC_PKCS_1_V1_5</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>loid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>reallen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>digestinfo</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>siginfo</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>OIDlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_ARG</name></expr>;</expr_stmt>

<goto>goto <name>bail_2</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>digestinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><name>loid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>loid</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>loid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>digestinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>siginfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>digestinfo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>siginfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_strict</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>siginfo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>siginfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>digestinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_strict</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>siginfo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>bail_2</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_length_sequence</name><argument_list>(<argument><expr><name>siginfo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>reallen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>bail_2</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reallen</name> <operator>==</operator> <name>outlen</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>digestinfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>==</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>OIDlen</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>XMEMCMP</name><argument_list>(<argument><expr><name><name>digestinfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>OID</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>*</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>OIDlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>siginfo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>==</operator> <name>hashlen</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>XMEMCMP</name><argument_list>(<argument><expr><name><name>siginfo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>stat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>hashlen</name> <operator>==</operator> <name>outlen</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>XMEMCMP</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>, <argument><expr><name>hashlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>stat</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>bail_2</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name>siglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
