<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\rsa\rsa_import_pkcs8.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MRSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>rsa_import_pkcs8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>passwd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>passwdlen</name></decl></parameter>,

<parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>zero</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>buf1len</name></decl>, <decl><type ref="prev"/><name>buf2len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>oid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rsaoid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>alg_seq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>top_seq</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>decrypted</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>decryptedlen</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pk_get_oid</name><argument_list>(<argument><expr><name>PKA_RSA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsaoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>LBL_NOFREE</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf1len</name> <operator>=</operator> <name>inlen</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>buf1</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>buf1len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt> <goto>goto <name>LBL_NOFREE</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf2len</name> <operator>=</operator> <name>inlen</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>buf2</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>buf2len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt> <goto>goto <name>LBL_FREE1</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>LBL_FREE2</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rsa_init</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>LBL_FREE3</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pkcs8_decode_flexi</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>, <argument><expr><name>passwdlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>decrypted</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>decryptedlen</name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>alg_seq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><literal type="number">16UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>alg_seq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>top_seq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>top_seq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>alg_seq</name></expr></argument>, <argument><expr><literal type="number">2UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>top_seq</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf1len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name><operator>=</operator><call><name>der_decode_sequence</name><argument_list>(<argument><expr><name>decrypted</name></expr></argument>, <argument><expr><name>decryptedlen</name></expr></argument>, <argument><expr><name>top_seq</name></expr></argument>, <argument><expr><literal type="number">3UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>LBL_ERR</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pk_oid_cmp_with_asn1</name><argument_list>(<argument><expr><name>rsaoid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>alg_seq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_multi</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><name><name>top_seq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name>zero</name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>N</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>e</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>d</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>p</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>q</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dP</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dQ</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>qP</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_EOL</name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>LBL_ERR</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PK_PRIVATE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>

<goto>goto <name>LBL_FREE3</name>;</goto>

<label><name>LBL_ERR</name>:</label>

<expr_stmt><expr><call><name>rsa_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>LBL_FREE3</name>:</label>

<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>der_free_sequence_flexi</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>LBL_FREE2</name>:</label>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>LBL_FREE1</name>:</label>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>LBL_NOFREE</name>:</label>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
