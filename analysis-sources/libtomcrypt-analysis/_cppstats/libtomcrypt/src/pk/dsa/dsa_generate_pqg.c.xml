<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\dsa\dsa_generate_pqg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_dsa_make_params</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modulus_size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>g</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>L</name></decl>, <decl><type ref="prev"/><name>N</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>outbytes</name></decl>, <decl><type ref="prev"/><name>seedbytes</name></decl>, <decl><type ref="prev"/><name>counter</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>mr_tests_q</name></decl>, <decl><type ref="prev"/><name>mr_tests_p</name></decl>, <decl><type ref="prev"/><name>found_p</name></decl>, <decl><type ref="prev"/><name>found_q</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>wbuf</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sbuf</name></decl>, <decl><type ref="prev"/><name><name>digest</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>t2L1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2N1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t2seedlen</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>U</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>W</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>X</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>h</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>seedinc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>group_size</name> <operator>&gt;=</operator> <name>LTC_MDSA_MAX_GROUP</name> <operator>||</operator> <name>group_size</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>group_size</name> <operator>&gt;=</operator> <name>modulus_size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seedbytes</name> <operator>=</operator> <name>group_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>L</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>modulus_size</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>N</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>group_size</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MPI_HAS_LUCAS_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>mr_tests_p</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>L</name> <operator>&lt;=</operator> <literal type="number">2048</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&lt;=</operator> <literal type="number">160</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>mr_tests_q</name> <operator>=</operator> <literal type="number">19</literal></expr>;</expr_stmt> </block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>N</name> <operator>&lt;=</operator> <literal type="number">224</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>mr_tests_q</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> </block_content>}</block></if>

<else>else <block>{<block_content> <expr_stmt><expr><name>mr_tests_q</name> <operator>=</operator> <literal type="number">27</literal></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><name>L</name> <operator>&lt;=</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>mr_tests_p</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt> </block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>L</name> <operator>&lt;=</operator> <literal type="number">2048</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>mr_tests_p</name> <operator>=</operator> <literal type="number">56</literal></expr>;</expr_stmt> </block_content>}</block></if>

<else>else <block>{<block_content> <expr_stmt><expr><name>mr_tests_p</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&lt;=</operator> <literal type="number">160</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>mr_tests_q</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt> </block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>N</name> <operator>&lt;=</operator> <literal type="number">224</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>mr_tests_q</name> <operator>=</operator> <literal type="number">56</literal></expr>;</expr_stmt> </block_content>}</block></if>

<else>else <block>{<block_content> <expr_stmt><expr><name>mr_tests_q</name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>N</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>register_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>N</name> <operator>&lt;=</operator> <literal type="number">384</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>register_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha384_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>N</name> <operator>&lt;=</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>register_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha512_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hash_is_valid</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <return>return <expr><name>err</name></expr>;</return> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>outbytes</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash</name></expr>]</index></name><operator>.</operator><name>hashsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>L</name> <operator>+</operator> <name>outbytes</name><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>outbytes</name><operator>*</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>wbuf</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>outbytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt> <goto>goto <name>cleanup3</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sbuf</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>seedbytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt> <goto>goto <name>cleanup2</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t2L1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2N1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2seedlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seedinc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup1</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_2expt</name><argument_list>(<argument><expr><name>t2L1</name></expr></argument>, <argument><expr><name>L</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_2expt</name><argument_list>(<argument><expr><name>t2N1</name></expr></argument>, <argument><expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_2expt</name><argument_list>(<argument><expr><name>t2seedlen</name></expr></argument>, <argument><expr><name>seedbytes</name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>found_p</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>found_p</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>found_q</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>found_q</name></expr>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>prng_descriptor</name><index>[<expr><name>wprng</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name>seedbytes</name></expr></argument>, <argument><expr><name>prng</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>seedbytes</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_ERROR_READPRNG</name></expr>;</expr_stmt> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>outbytes</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hash_memory</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name>seedbytes</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>outbytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mod</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><name>t2N1</name></expr></argument>, <argument><expr><name>U</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_add</name><argument_list>(<argument><expr><name>t2N1</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mp_isodd</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mp_add_d</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_prime_is_prime</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>mr_tests_q</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>LTC_MP_YES</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>found_q</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name>seedinc</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name>seedbytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_add</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>t2q</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>counter</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>counter</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>*</operator><name>L</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>found_p</name></expr>;</condition> <incr><expr><name>counter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_add_d</name><argument_list>(<argument><expr><name>seedinc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>seedinc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mod</name><argument_list>(<argument><expr><name>seedinc</name></expr></argument>, <argument><expr><name>t2seedlen</name></expr></argument>, <argument><expr><name>seedinc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name>seedinc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>seedbytes</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_ARG</name></expr>;</expr_stmt> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name>seedbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_to_unsigned_bin</name><argument_list>(<argument><expr><name>seedinc</name></expr></argument>, <argument><expr><name>sbuf</name> <operator>+</operator> <name>seedbytes</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>outbytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>hash_memory</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name>seedbytes</name></expr></argument>, <argument><expr><name>wbuf</name><operator>+</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>)</operator><operator>*</operator><name>outbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>outbytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mod</name><argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr><name>t2L1</name></expr></argument>, <argument><expr><name>W</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_add</name><argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr><name>t2L1</name></expr></argument>, <argument><expr><name>X</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mod</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>t2q</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_sub_d</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_sub</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mp_cmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>t2L1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_LT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_prime_is_prime</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mr_tests_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>LTC_MP_YES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>found_p</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_sub_d</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_div</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mp_count_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rand_bn_bits</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>prng</name></expr></argument>, <argument><expr><name>wprng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>mp_cmp</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_LT</name> <operator>||</operator> <call><name>mp_cmp_d</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_GT</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_sub_d</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_exptmod</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>cleanup</name>;</goto> </block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><call><name>mp_cmp_d</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LTC_MP_EQ</name></expr>)</condition>;</do>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>

<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>t2L1</name></expr></argument>, <argument><expr><name>t2N1</name></expr></argument>, <argument><expr><name>t2q</name></expr></argument>, <argument><expr><name>t2seedlen</name></expr></argument>, <argument><expr><name>U</name></expr></argument>, <argument><expr><name>W</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>seedinc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup1</name>:</label>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup2</name>:</label>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>wbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>cleanup3</name>:</label>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>dsa_generate_pqg</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modulus_size</name></decl></parameter>, <parameter><decl><type><name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>key</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>_dsa_make_params</name><argument_list>(<argument><expr><name>prng</name></expr></argument>, <argument><expr><name>wprng</name></expr></argument>, <argument><expr><name>group_size</name></expr></argument>, <argument><expr><name>modulus_size</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>q</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>cleanup</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>qord</name></name> <operator>=</operator> <name>group_size</name></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<label><name>cleanup</name>:</label>

<expr_stmt><expr><call><name>dsa_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
