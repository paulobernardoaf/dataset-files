<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\dh\dh_export.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>dh_export</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dh_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>flags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>version</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>PK_PRIVATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_encode_sequence_multi</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>,

<argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>,

<argument><expr><name>LTC_ASN1_BIT_STRING</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>prime</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>x</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_EOL</name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_encode_sequence_multi</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>,

<argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>,

<argument><expr><name>LTC_ASN1_BIT_STRING</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>prime</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>base</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>y</name></name></expr></argument>,

<argument><expr><name>LTC_ASN1_EOL</name></expr></argument>, <argument><expr><literal type="number">0UL</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
