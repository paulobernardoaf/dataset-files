<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\ecc\ecc_export_openssl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>ecc_export_openssl</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>prime</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>order</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gx</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bin_a</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bin_b</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bin_k</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bin_g</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bin_xy</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len_a</name></decl>, <decl><type ref="prev"/><name>len_b</name></decl>, <decl><type ref="prev"/><name>len_k</name></decl>, <decl><type ref="prev"/><name>len_g</name></decl>, <decl><type ref="prev"/><name>len_xy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cofactor</name></decl>, <decl><type ref="prev"/><name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>OID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>oid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>oidlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>seq_fieldid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>seq_curve</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>seq_ecparams</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>seq_priv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>pub_xy</name></decl>, <decl><type ref="prev"/><name>ecparams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag_oid</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>&amp;</operator> <name>PK_CURVEOID</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag_com</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>&amp;</operator> <name>PK_COMPRESSED</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flag_pri</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>&amp;</operator> <name>PK_PRIVATE</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PK_PRIVATE</name> <operator>&amp;&amp;</operator> <name>flag_pri</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_PK_TYPE_MISMATCH</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prime</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>prime</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>order</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>B</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>A</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gx</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>base</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>gy</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>base</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>len_a</name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_a</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bin_a</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_BUFFER_OVERFLOW</name></expr>;</expr_stmt> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_to_unsigned_bin</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bin_a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>len_a</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt> 

<expr_stmt><expr><name>len_b</name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_b</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bin_b</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_BUFFER_OVERFLOW</name></expr>;</expr_stmt> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_to_unsigned_bin</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>bin_b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len_b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>len_b</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bin_b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt> 

<expr_stmt><expr><name>len_g</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bin_g</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ltc_ecc_export_point</name><argument_list>(<argument><expr><name>bin_g</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len_g</name></expr></argument>, <argument><expr><name>gx</name></expr></argument>, <argument><expr><name>gy</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>flag_com</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len_xy</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bin_xy</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ltc_ecc_export_point</name><argument_list>(<argument><expr><name>bin_xy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len_xy</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>flag_com</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cofactor</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>cofactor</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pk_get_oid</name><argument_list>(<argument><expr><name>PKA_EC_PRIMEF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>OID</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag_oid</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>oidlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_ARG</name></expr>;</expr_stmt> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecparams</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>oidlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>oidlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>oid</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>oid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pk_oid_str_to_num</name><argument_list>(<argument><expr><name>OID</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>oidlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_fieldid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>, <argument><expr><name>oidlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_fieldid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>prime</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_curve</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>bin_a</name></expr></argument>, <argument><expr><name>len_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_curve</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>bin_b</name></expr></argument>, <argument><expr><name>len_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>seq_fieldid</name></expr></argument>, <argument><expr><literal type="number">2UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>seq_curve</name></expr></argument>, <argument><expr><literal type="number">2UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>bin_g</name></expr></argument>, <argument><expr><name>len_g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cofactor</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ecparams</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">6UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag_pri</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len_k</name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len_k</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bin_k</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_BUFFER_OVERFLOW</name></expr>;</expr_stmt> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_to_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><name>bin_k</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pub_xy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_RAW_BIT_STRING</name></expr></argument>, <argument><expr><name>bin_xy</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><name>len_xy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_priv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>one</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_priv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>bin_k</name></expr></argument>, <argument><expr><name>len_k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1_CUSTOM_CONSTRUCTED</name><argument_list>(<argument><expr><name>seq_priv</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LTC_ASN1_CL_CONTEXT_SPECIFIC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>LTC_SET_ASN1_CUSTOM_CONSTRUCTED</name><argument_list>(<argument><expr><name>seq_priv</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>LTC_ASN1_CL_CONTEXT_SPECIFIC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pub_xy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>der_encode_sequence</name><argument_list>(<argument><expr><name>seq_priv</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>x509_encode_subject_public_key_info</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name>PKA_EC</name></expr></argument>, <argument><expr><name>bin_xy</name></expr></argument>, <argument><expr><name>len_xy</name></expr></argument>,

<argument><expr><name><name>ecparams</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>ecparams</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>ecparams</name><operator>.</operator><name>size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<label><name>error</name>:</label>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
