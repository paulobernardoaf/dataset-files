<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\ecc\ltc_ecc_mul2add.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SHAMIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>ltc_ecc_mul2add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kA</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kB</name></decl></parameter>,

<parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>C</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ma</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name><name>precomp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>bitbufA</name></decl>, <decl><type ref="prev"/><name>bitbufB</name></decl>, <decl><type ref="prev"/><name>lenA</name></decl>, <decl><type ref="prev"/><name>lenB</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>nA</name></decl>, <decl><type ref="prev"/><name>nB</name></decl>, <decl><type ref="prev"/><name>nibble</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tA</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mu</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>B</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>kA</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>kB</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>modulus</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tA</name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ECC_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tA</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tB</name> <operator>=</operator> <call><name>XCALLOC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ECC_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tB</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>tA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lenA</name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name>kA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>lenB</name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name>kB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>lenA</name></expr></argument>, <argument><expr><name>lenB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lenA</name> <operator>&gt;</operator> <name>ECC_BUF_SIZE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>lenB</name> <operator>&gt;</operator> <name>ECC_BUF_SIZE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_ARG</name></expr>;</expr_stmt>

<goto>goto <name>ERR_T</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mp_to_unsigned_bin</name><argument_list>(<argument><expr><name>kA</name></expr></argument>, <argument><expr><operator>(</operator><name>len</name> <operator>-</operator> <name>lenA</name><operator>)</operator> <operator>+</operator> <name>tA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp_to_unsigned_bin</name><argument_list>(<argument><expr><name>kB</name></expr></argument>, <argument><expr><operator>(</operator><name>len</name> <operator>-</operator> <name>lenB</name><operator>)</operator> <operator>+</operator> <name>tB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>precomp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>ltc_ecc_new_point</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>precomp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ltc_ecc_del_point</name><argument_list>(<argument><expr><name><name>precomp</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_MEM</name></expr>;</expr_stmt>

<goto>goto <name>ERR_T</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_montgomery_setup</name><argument_list>(<argument><expr><name>modulus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>ERR_P</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mu</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>ERR_MP</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_montgomery_normalization</name><argument_list>(<argument><expr><name>mu</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>ERR_MU</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mulmod</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>mu</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mulmod</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>mu</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mulmod</name><argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>mu</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mulmod</name><argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>mu</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mulmod</name><argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>y</name></name></expr></argument>, <argument><expr><name>mu</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_mulmod</name><argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>mu</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>z</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>ltc_mp</name><operator>.</operator><name>ecc_ptdbl</name></name><argument_list>(<argument><expr><name><name>precomp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ma</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>ltc_mp</name><operator>.</operator><name>ecc_ptadd</name></name><argument_list>(<argument><expr><name><name>precomp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ma</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>ltc_mp</name><operator>.</operator><name>ecc_ptdbl</name></name><argument_list>(<argument><expr><name><name>precomp</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><literal type="number">2</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ma</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>ltc_mp</name><operator>.</operator><name>ecc_ptadd</name></name><argument_list>(<argument><expr><name><name>precomp</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><literal type="number">2</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><literal type="number">3</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ma</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>ltc_mp</name><operator>.</operator><name>ecc_ptadd</name></name><argument_list>(<argument><expr><name><name>precomp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><operator>(</operator><name>y</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><name>x</name><operator>+</operator><operator>(</operator><name>y</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>ma</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>nibble</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitbufA</name> <operator>=</operator> <name><name>tA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitbufB</name> <operator>=</operator> <name><name>tB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>nibble</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bitbufA</name> <operator>=</operator> <name><name>tA</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bitbufB</name> <operator>=</operator> <name><name>tB</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nibble</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nA</name> <operator>=</operator> <operator>(</operator><name>bitbufA</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nB</name> <operator>=</operator> <operator>(</operator><name>bitbufB</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitbufA</name> <operator>=</operator> <operator>(</operator><name>bitbufA</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitbufB</name> <operator>=</operator> <operator>(</operator><name>bitbufB</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nA</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>nB</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>first</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>ltc_mp</name><operator>.</operator><name>ecc_ptdbl</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>ma</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>ltc_mp</name><operator>.</operator><name>ecc_ptdbl</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>ma</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>nA</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nB</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ltc_ecc_copy_point</name><argument_list>(<argument><expr><name><name>precomp</name><index>[<expr><name>nA</name> <operator>+</operator> <operator>(</operator><name>nB</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name><name>ltc_mp</name><operator>.</operator><name>ecc_ptadd</name></name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name><name>precomp</name><index>[<expr><name>nA</name> <operator>+</operator> <operator>(</operator><name>nB</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>ma</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>ERR_MU</name>;</goto> </block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ltc_ecc_map</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>modulus</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>ERR_MU</name>:</label>

<expr_stmt><expr><call><name>mp_clear</name><argument_list>(<argument><expr><name>mu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>ERR_MP</name>:</label>

<expr_stmt><expr><call><name>mp_montgomery_free</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>ERR_P</name>:</label>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ltc_ecc_del_point</name><argument_list>(<argument><expr><name><name>precomp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>ERR_T</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tA</name></expr></argument>, <argument><expr><name>ECC_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tB</name></expr></argument>, <argument><expr><name>ECC_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>tA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>tB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
