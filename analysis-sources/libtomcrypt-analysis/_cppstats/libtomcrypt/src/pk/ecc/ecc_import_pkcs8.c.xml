<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\ecc\ecc_import_pkcs8.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>ltc_asn1_type</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

}</block></struct></type> <name>der_flexi_check</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_SET_DER_FLEXI_CHECK</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>Type</name></type></parameter>, <parameter><type><name>P</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int LTC_SDFC_temp##__LINE__ = (index); list[LTC_SDFC_temp##__LINE__].t = Type; list[LTC_SDFC_temp##__LINE__].pp = P; } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_der_flexi_sequence_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>flexi</name></decl></parameter>, <parameter><decl><type><name>der_flexi_check</name> <modifier>*</modifier></type><name>check</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>flexi</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>LTC_ASN1_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>flexi</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>

<while>while<condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>t</name></name> <operator>!=</operator> <name>LTC_ASN1_EOL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name><name>check</name><operator>-&gt;</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>check</name><operator>-&gt;</operator><name>pp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name><name>check</name><operator>-&gt;</operator><name>pp</name></name> <operator>=</operator> <operator>(</operator><name>ltc_asn1_list</name><operator>*</operator><operator>)</operator><name>cur</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>check</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ecc_import_pkcs8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>pwdlen</name></decl></parameter>,

<parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gx</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>cofactor</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pka_ec_oid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>OID</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ltc_ecc_curve</name> <modifier>*</modifier></type><name>curve</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>l</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>der_flexi_check</name></type> <name><name>flexi_should</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>seq</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>priv_key</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name><name>ltc_mp</name><operator>.</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>pk_get_oid</name><argument_list>(<argument><expr><name>PKA_EC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pka_ec_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pkcs8_decode_flexi</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>pwd</name></expr></argument>, <argument><expr><name>pwdlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_DER_FLEXI_CHECK</name><argument_list>(<argument><expr><name>flexi_should</name></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_DER_FLEXI_CHECK</name><argument_list>(<argument><expr><name>flexi_should</name></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_DER_FLEXI_CHECK</name><argument_list>(<argument><expr><name>flexi_should</name></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>priv_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_DER_FLEXI_CHECK</name><argument_list>(<argument><expr><name>flexi_should</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>LTC_ASN1_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>err</name> <operator>=</operator> <call><name>_der_flexi_sequence_cmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>flexi_should</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CRYPT_OK</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>pk_oid_cmp_with_asn1</name><argument_list>(<argument><expr><name>pka_ec_oid</name></expr></argument>, <argument><expr><name><name>seq</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_OK</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>version</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>field</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>point</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>point_g</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>order</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_cofactor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_DER_FLEXI_CHECK</name><argument_list>(<argument><expr><name>flexi_should</name></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_DER_FLEXI_CHECK</name><argument_list>(<argument><expr><name>flexi_should</name></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_DER_FLEXI_CHECK</name><argument_list>(<argument><expr><name>flexi_should</name></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_DER_FLEXI_CHECK</name><argument_list>(<argument><expr><name>flexi_should</name></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>point_g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_DER_FLEXI_CHECK</name><argument_list>(<argument><expr><name>flexi_should</name></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_DER_FLEXI_CHECK</name><argument_list>(<argument><expr><name>flexi_should</name></expr></argument>, <argument><expr><name>n</name><operator>++</operator></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_cofactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_DER_FLEXI_CHECK</name><argument_list>(<argument><expr><name>flexi_should</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>LTC_ASN1_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>curve_oid</name> <init>= <expr><name><name>seq</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OID</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pk_oid_num_to_str</name><argument_list>(<argument><expr><name><name>curve_oid</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>curve_oid</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>OID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>LBL_DONE</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_find_curve</name><argument_list>(<argument><expr><name>OID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curve</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>LBL_DONE</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_set_curve</name><argument_list>(<argument><expr><name>curve</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>LBL_DONE</name>;</goto> </block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>_der_flexi_sequence_cmp</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>flexi_should</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mp_get_int</name><argument_list>(<argument><expr><name><name>version</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_DONE</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cofactor</name> <operator>=</operator> <call><name>mp_get_int</name><argument_list>(<argument><expr><name><name>p_cofactor</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>child</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>point</name><operator>-&gt;</operator><name>child</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>point</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>prime</name> <init>= <expr><name><name>field</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>point</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>point</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_DONE</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>point</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>point</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_DONE</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ltc_ecc_import_point</name><argument_list>(<argument><expr><name><name>point_g</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>point_g</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>prime</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>gx</name></expr></argument>, <argument><expr><name>gy</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_DONE</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_set_curve_from_mpis</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>prime</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>order</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>gx</name></expr></argument>, <argument><expr><name>gy</name></expr></argument>, <argument><expr><name>cofactor</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_DONE</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>

<goto>goto <name>LBL_DONE</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>priv_key</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>der_decode_sequence_flexi</name><argument_list>(<argument><expr><name><name>priv_key</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LTC_ASN1_SEQUENCE</name> <operator>&amp;&amp;</operator>

<call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>child</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>lk</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mp_cmp_d</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LTC_MP_EQ</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>

<goto>goto <name>LBL_ECCFREE</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_set_key</name><argument_list>(<argument><expr><name><name>lk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>lk</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>PK_PRIVATE</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ECCFREE</name>;</goto>

</block_content>}</block></if></if_stmt>

<goto>goto <name>LBL_DONE</name>;</goto> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_INVALID_PACKET</name></expr>;</expr_stmt>

<goto>goto <name>LBL_DONE</name>;</goto>

<label><name>LBL_ECCFREE</name>:</label>

<expr_stmt><expr><call><name>ecc_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>LBL_DONE</name>:</label>

<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>gx</name></expr></argument>, <argument><expr><name>gy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>der_free_sequence_flexi</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>der_free_sequence_flexi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
