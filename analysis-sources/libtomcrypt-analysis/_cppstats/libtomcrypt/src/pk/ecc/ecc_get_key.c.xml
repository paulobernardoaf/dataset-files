<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\ecc\ecc_get_key.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>ecc_get_key</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>ksize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>compressed</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>dp</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>compressed</name> <operator>=</operator> <ternary><condition><expr><name>type</name> <operator>&amp;</operator> <name>PK_COMPRESSED</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <operator>~</operator><name>PK_COMPRESSED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>PK_PUBLIC</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ltc_ecc_export_point</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>pubkey</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>compressed</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>PK_PRIVATE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PK_PRIVATE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_PK_TYPE_MISMATCH</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <operator>*</operator><name>outlen</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ksize</name> <operator>=</operator> <call><name>mp_unsigned_bin_size</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_to_unsigned_bin</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>k</name></name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <operator>(</operator><name>size</name> <operator>-</operator> <name>ksize</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>ksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
