<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\pk\ecc\ecc_import_x509.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_ecc_import_x509_with_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bin_xy</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>ECC_MAXSIZE</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>curveoid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len_xy</name></decl>, <decl><type ref="prev"/><name>len_oid</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>OID</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ltc_ecc_curve</name> <modifier>*</modifier></type><name>curve</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len_xy</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bin_xy</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>len_oid</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>x509_decode_subject_public_key_info</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>PKA_EC</name></expr></argument>, <argument><expr><name>bin_xy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len_xy</name></expr></argument>,

<argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>curveoid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OID</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pk_oid_num_to_str</name><argument_list>(<argument><expr><name>curveoid</name></expr></argument>, <argument><expr><name>len_oid</name></expr></argument>, <argument><expr><name>OID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_find_curve</name><argument_list>(<argument><expr><name>OID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curve</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_set_curve</name><argument_list>(<argument><expr><name>curve</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ecc_set_key</name><argument_list>(<argument><expr><name>bin_xy</name></expr></argument>, <argument><expr><name>len_xy</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_ecc_import_x509_with_curve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>prime</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>order</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gx</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name></type> <name><name>seq_fieldid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>seq_curve</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>seq_ecparams</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bin_a</name><index>[<expr><name>ECC_MAXSIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bin_b</name><index>[<expr><name>ECC_MAXSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bin_g</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>ECC_MAXSIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bin_xy</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>ECC_MAXSIZE</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bin_seed</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>len_a</name></decl>, <decl><type ref="prev"/><name>len_b</name></decl>, <decl><type ref="prev"/><name>len_g</name></decl>, <decl><type ref="prev"/><name>len_xy</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cofactor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ecver</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>tmpoid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_init_multi</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>order</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ecver</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>seq_fieldid</name></expr></argument>, <argument><expr><literal type="number">2UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>seq_curve</name></expr></argument>, <argument><expr><literal type="number">3UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>bin_g</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bin_g</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>LTC_ASN1_SHORT_INTEGER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cofactor</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>seq_ecparams</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>optional</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_fieldid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OBJECT_IDENTIFIER</name></expr></argument>, <argument><expr><name>tmpoid</name></expr></argument>, <argument><expr><literal type="number">16UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_fieldid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>, <argument><expr><name>prime</name></expr></argument>, <argument><expr><literal type="number">1UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_curve</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>bin_a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bin_a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_curve</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>, <argument><expr><name>bin_b</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bin_b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_SET_ASN1</name><argument_list>(<argument><expr><name>seq_curve</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>LTC_ASN1_RAW_BIT_STRING</name></expr></argument>, <argument><expr><name>bin_seed</name></expr></argument>, <argument><expr><literal type="number">8u</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>bin_seed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>seq_curve</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>optional</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len_xy</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bin_xy</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>x509_decode_subject_public_key_info</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>PKA_EC</name></expr></argument>, <argument><expr><name>bin_xy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len_xy</name></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>, <argument><expr><name>seq_ecparams</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len_a</name> <operator>=</operator> <name><name>seq_curve</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len_b</name> <operator>=</operator> <name><name>seq_curve</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len_g</name> <operator>=</operator> <name><name>seq_ecparams</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bin_a</name></expr></argument>, <argument><expr><name>len_a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>mp_read_unsigned_bin</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>bin_b</name></expr></argument>, <argument><expr><name>len_b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ltc_ecc_import_point</name><argument_list>(<argument><expr><name>bin_g</name></expr></argument>, <argument><expr><name>len_g</name></expr></argument>, <argument><expr><name>prime</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>gx</name></expr></argument>, <argument><expr><name>gy</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ecc_set_curve_from_mpis</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>prime</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>gx</name></expr></argument>, <argument><expr><name>gy</name></expr></argument>, <argument><expr><name>cofactor</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content> <goto>goto <name>error</name>;</goto> </block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ecc_set_key</name><argument_list>(<argument><expr><name>bin_xy</name></expr></argument>, <argument><expr><name>len_xy</name></expr></argument>, <argument><expr><name>PK_PUBLIC</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>mp_clear_multi</name><argument_list>(<argument><expr><name>prime</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>gx</name></expr></argument>, <argument><expr><name>gy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ecc_import_subject_public_key_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>_ecc_import_x509_with_oid</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>success</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>_ecc_import_x509_with_curve</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>success</name>:</label>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ecc_import_x509</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>x509_decode_public_key_from_certificate</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>PKA_EC</name></expr></argument>, <argument><expr><name>LTC_ASN1_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
