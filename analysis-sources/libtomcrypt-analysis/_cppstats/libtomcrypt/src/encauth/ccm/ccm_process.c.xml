<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\encauth\ccm\ccm_process.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CCM_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>ccm_process</name><parameter_list>(<parameter><decl><type><name>ccm_state</name> <modifier>*</modifier></type><name>ccm</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>ptlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ct</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>direction</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>z</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ccm</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccm</name><operator>-&gt;</operator><name>aadlen</name></name> <operator>!=</operator> <name><name>ccm</name><operator>-&gt;</operator><name>current_aadlen</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccm</name><operator>-&gt;</operator><name>ptlen</name></name> <operator>&lt;</operator> <name><name>ccm</name><operator>-&gt;</operator><name>current_ptlen</name></name> <operator>+</operator> <name>ptlen</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ccm</name><operator>-&gt;</operator><name>current_ptlen</name></name> <operator>+=</operator> <name>ptlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ptlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ct</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>ptlen</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ccm</name><operator>-&gt;</operator><name>CTRlen</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>z</name> <operator>=</operator> <literal type="number">15</literal></expr>;</init> <condition><expr><name>z</name> <operator>&gt;</operator> <literal type="number">15</literal><operator>-</operator><name><name>ccm</name><operator>-&gt;</operator><name>L</name></name></expr>;</condition> <incr><expr><name>z</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ccm</name><operator>-&gt;</operator><name>ctr</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ccm</name><operator>-&gt;</operator><name>ctr</name><index>[<expr><name>z</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccm</name><operator>-&gt;</operator><name>ctr</name><index>[<expr><name>z</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name><name>ccm</name><operator>-&gt;</operator><name>cipher</name></name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name><name>ccm</name><operator>-&gt;</operator><name>ctr</name></name></expr></argument>, <argument><expr><name><name>ccm</name><operator>-&gt;</operator><name>CTRPAD</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ccm</name><operator>-&gt;</operator><name>K</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ccm</name><operator>-&gt;</operator><name>CTRlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>CCM_ENCRYPT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>pt</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ct</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>^</operator> <name><name>ccm</name><operator>-&gt;</operator><name>CTRPAD</name><index>[<expr><name><name>ccm</name><operator>-&gt;</operator><name>CTRlen</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>ct</name><index>[<expr><name>y</name></expr>]</index></name> <operator>^</operator> <name><name>ccm</name><operator>-&gt;</operator><name>CTRPAD</name><index>[<expr><name><name>ccm</name><operator>-&gt;</operator><name>CTRlen</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pt</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ccm</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name><name>ccm</name><operator>-&gt;</operator><name>cipher</name></name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name><name>ccm</name><operator>-&gt;</operator><name>PAD</name></name></expr></argument>, <argument><expr><name><name>ccm</name><operator>-&gt;</operator><name>PAD</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ccm</name><operator>-&gt;</operator><name>K</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ccm</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ccm</name><operator>-&gt;</operator><name>PAD</name><index>[<expr><name><name>ccm</name><operator>-&gt;</operator><name>x</name></name><operator>++</operator></expr>]</index></name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
