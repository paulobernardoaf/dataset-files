<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\encauth\ocb3\ocb3_done.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OCB3_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>ocb3_done</name><parameter_list>(<parameter><decl><type><name>ocb3_state</name> <modifier>*</modifier></type><name>ocb</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>taglen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ocb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>tag</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>taglen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cipher_is_valid</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>taglen</name> <operator>&lt;</operator> <name><name>ocb</name><operator>-&gt;</operator><name>tag_len</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>taglen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>ocb</name><operator>-&gt;</operator><name>tag_len</name></name></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_BUFFER_OVERFLOW</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer_bytes</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ocb3_int_xor_blocks</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aOffset_current</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aOffset_current</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>L_star</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ocb3_int_xor_blocks</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aOffset_current</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer_bytes</name></name></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer_bytes</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal> <operator>^</operator> <name><name>ocb</name><operator>-&gt;</operator><name>aOffset_current</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal> <operator>^</operator> <name><name>ocb</name><operator>-&gt;</operator><name>aOffset_current</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name><name>ocb</name><operator>-&gt;</operator><name>cipher</name></name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ocb</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ocb3_int_xor_blocks</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aSum_current</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aSum_current</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ocb3_int_xor_blocks</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>tag_part</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aSum_current</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ocb</name><operator>-&gt;</operator><name>tag_len</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tag</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>taglen</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>ocb</name><operator>-&gt;</operator><name>tag_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>

<label><name>LBL_ERR</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>MAXBLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>ocb</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ocb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
