<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\encauth\ocb3\ocb3_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OCB3_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>_ocb3_int_calc_offset_zero</name><parameter_list>(<parameter><decl><type><name>ocb3_state</name> <modifier>*</modifier></type><name>ocb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>noncelen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>taglen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iNonce</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iKtop</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>iStretch</name><index>[<expr><name>MAXBLOCKSIZE</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>iNonce</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>iNonce</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><name>noncelen</name></expr>;</condition> <incr><expr><name>x</name><operator>--</operator></expr><operator>,</operator> <expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>iNonce</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>nonce</name><index>[<expr><name>noncelen</name><operator>-</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>iNonce</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iNonce</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>taglen</name><operator>*</operator><literal type="number">8</literal><operator>)</operator> <operator>%</operator> <literal type="number">128</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bottom</name> <operator>=</operator> <name><name>iNonce</name><index>[<expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>iNonce</name><index>[<expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>iNonce</name><index>[<expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cipher_descriptor</name><index>[<expr><name><name>ocb</name><operator>-&gt;</operator><name>cipher</name></name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name>iNonce</name></expr></argument>, <argument><expr><name>iKtop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ocb</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>Offset_current</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>iStretch</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>iKtop</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>iStretch</name><index>[<expr><name>x</name><operator>+</operator><name>y</name></expr>]</index></name> <operator>=</operator> <name><name>iKtop</name><index>[<expr><name>y</name></expr>]</index></name> <operator>^</operator> <name><name>iKtop</name><index>[<expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>bottom</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>bottom</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ocb</name><operator>-&gt;</operator><name>Offset_current</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>iStretch</name><index>[<expr><name>idx</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ocb</name><operator>-&gt;</operator><name>Offset_current</name><index>[<expr><name>x</name></expr>]</index></name> <operator>|=</operator> <name><name>iStretch</name><index>[<expr><name>idx</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal><operator>-</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>poly_mul</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>polys</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><literal type="number">8</literal></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x1B</literal></expr> }</block></expr>

}</block></expr>, <expr><block>{

<expr><literal type="number">16</literal></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr>

}</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><name>int</name></type> <name>ocb3_init</name><parameter_list>(<parameter><decl><type><name>ocb3_state</name> <modifier>*</modifier></type><name>ocb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cipher</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>nonce</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>noncelen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>taglen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>poly</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>previous</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>ocb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>nonce</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cipher_is_valid</name><argument_list>(<argument><expr><name>cipher</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ocb</name><operator>-&gt;</operator><name>cipher</name></name> <operator>=</operator> <name>cipher</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>noncelen</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">120</literal><operator>/</operator><literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><name>block_length</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>taglen</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ocb</name><operator>-&gt;</operator><name>tag_len</name></name> <operator>=</operator> <name>taglen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><name>block_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>polys</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>polys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>poly</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>poly</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><name>poly</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>polys</name><index>[<expr><name>poly</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>==</operator> <name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>poly</name> <operator>==</operator> <name>x</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>polys</name><index>[<expr><name>poly</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>!=</operator> <name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>setup</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ocb</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>L_star</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name>cipher</name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>L_star</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>L_star</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ocb</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>ocb</name><operator>-&gt;</operator><name>L_dollar</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>previous</name> <operator>=</operator> <name><name>ocb</name><operator>-&gt;</operator><name>L_star</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>ocb</name><operator>-&gt;</operator><name>L_</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>previous</name> <operator>=</operator> <name><name>ocb</name><operator>-&gt;</operator><name>L_dollar</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>ocb</name><operator>-&gt;</operator><name>L_</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>previous</name> <operator>=</operator> <name><name>ocb</name><operator>-&gt;</operator><name>L_</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>previous</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>current</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>previous</name><index>[<expr><name>y</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>previous</name><index>[<expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>current</name><index>[<expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>previous</name><index>[<expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ocb3_int_xor_blocks</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>polys</name><index>[<expr><name>poly</name></expr>]</index></name><operator>.</operator><name>poly_mul</name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>_ocb3_int_calc_offset_zero</name><argument_list>(<argument><expr><name>ocb</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><name>noncelen</name></expr></argument>, <argument><expr><name>taglen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ocb</name><operator>-&gt;</operator><name>ablock_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ocb</name><operator>-&gt;</operator><name>adata_buffer_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aOffset_current</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>aSum_current</name></name></expr></argument>, <argument><expr><name><name>ocb</name><operator>-&gt;</operator><name>block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
