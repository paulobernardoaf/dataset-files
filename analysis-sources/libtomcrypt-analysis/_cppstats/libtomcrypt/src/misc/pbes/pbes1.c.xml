<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\misc\pbes\pbes1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PBES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_pkcs_5_alg1_wrap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>password_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>salt_len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>iteration_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_UNUSED_PARAM</name><argument_list>(<argument><expr><name>salt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>pkcs_5_alg1</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>password_len</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>iteration_count</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_pkcs_12_wrap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>password_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>salt_len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>iteration_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>pwlen</name> <init>= <expr><name>password_len</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>pw</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>outlen</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pw</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>pwlen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pw</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_MEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pkcs12_utf8_to_utf16</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>password_len</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pwlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_ERROR</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pw</name><index>[<expr><name>pwlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pw</name><index>[<expr><name>pwlen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pkcs12_kdf</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><name>pwlen</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>, <argument><expr><name>iteration_count</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_ERROR</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pkcs12_kdf</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><name>pwlen</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_len</name></expr></argument>, <argument><expr><name>iteration_count</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>out</name><operator>+</operator><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_ERROR</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<label><name>LBL_ERROR</name>:</label>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>pwlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>pbes_properties</name></type> <name><name>_pbes1_types</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>_pkcs_5_alg1_wrap</name></expr>, <expr><literal type="string">"md2"</literal></expr>, <expr><literal type="string">"des"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>_pkcs_5_alg1_wrap</name></expr>, <expr><literal type="string">"md2"</literal></expr>, <expr><literal type="string">"rc2"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>_pkcs_5_alg1_wrap</name></expr>, <expr><literal type="string">"md5"</literal></expr>, <expr><literal type="string">"des"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>_pkcs_5_alg1_wrap</name></expr>, <expr><literal type="string">"md5"</literal></expr>, <expr><literal type="string">"rc2"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>_pkcs_5_alg1_wrap</name></expr>, <expr><literal type="string">"sha1"</literal></expr>, <expr><literal type="string">"des"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>_pkcs_5_alg1_wrap</name></expr>, <expr><literal type="string">"sha1"</literal></expr>, <expr><literal type="string">"rc2"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>_pkcs_12_wrap</name></expr>, <expr><literal type="string">"sha1"</literal></expr>, <expr><literal type="string">"3des"</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>pbes_properties</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oid</name></decl>;</decl_stmt>

}</block></struct></type> <name>oid_to_pbes</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>oid_to_pbes</name></type> <name><name>_pbes1_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>&amp;</operator><name><name>_pbes1_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><literal type="string">"1.2.840.113549.1.5.1"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>&amp;</operator><name><name>_pbes1_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><literal type="string">"1.2.840.113549.1.5.4"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>&amp;</operator><name><name>_pbes1_types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>, <expr><literal type="string">"1.2.840.113549.1.5.3"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>&amp;</operator><name><name>_pbes1_types</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>, <expr><literal type="string">"1.2.840.113549.1.5.6"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>&amp;</operator><name><name>_pbes1_types</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>, <expr><literal type="string">"1.2.840.113549.1.5.10"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>&amp;</operator><name><name>_pbes1_types</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>, <expr><literal type="string">"1.2.840.113549.1.5.11"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><operator>&amp;</operator><name><name>_pbes1_types</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>, <expr><literal type="string">"1.2.840.113549.1.12.1.3"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_pbes1_from_oid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>pbes_properties</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>_pbes1_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pk_oid_cmp_with_asn1</name><argument_list>(<argument><expr><name><name>_pbes1_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oid</name></expr></argument>, <argument><expr><name>oid</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>*</operator><name><name>_pbes1_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>pbes1_extract</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>pbes_arg</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>_pbes1_from_oid</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>res</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_SEQUENCE</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>child</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_OCTET_STRING</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>LTC_ASN1_IS_TYPE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>LTC_ASN1_INTEGER</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_PACKET</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>salt</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>child</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>iterations</name></name> <operator>=</operator> <call><name>mp_get_int</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>child</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
