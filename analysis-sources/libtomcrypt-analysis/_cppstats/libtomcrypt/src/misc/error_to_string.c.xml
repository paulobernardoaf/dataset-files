<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\misc\error_to_string.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>err_2_str</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"CRYPT_OK"</literal></expr>,

<expr><literal type="string">"CRYPT_ERROR"</literal></expr>,

<expr><literal type="string">"Non-fatal 'no-operation' requested."</literal></expr>,

<expr><literal type="string">"Invalid key size."</literal></expr>,

<expr><literal type="string">"Invalid number of rounds for block cipher."</literal></expr>,

<expr><literal type="string">"Algorithm failed test vectors."</literal></expr>,

<expr><literal type="string">"Buffer overflow."</literal></expr>,

<expr><literal type="string">"Invalid input packet."</literal></expr>,

<expr><literal type="string">"Invalid number of bits for a PRNG."</literal></expr>,

<expr><literal type="string">"Error reading the PRNG."</literal></expr>,

<expr><literal type="string">"Invalid cipher specified."</literal></expr>,

<expr><literal type="string">"Invalid hash specified."</literal></expr>,

<expr><literal type="string">"Invalid PRNG specified."</literal></expr>,

<expr><literal type="string">"Out of memory."</literal></expr>,

<expr><literal type="string">"Invalid PK key or key type specified for function."</literal></expr>,

<expr><literal type="string">"A private PK key is required."</literal></expr>,

<expr><literal type="string">"Invalid argument provided."</literal></expr>,

<expr><literal type="string">"File Not Found"</literal></expr>,

<expr><literal type="string">"Invalid PK type."</literal></expr>,

<expr><literal type="string">"An overflow of a value was detected/prevented."</literal></expr>,

<expr><literal type="string">"An ASN.1 decoding error occurred."</literal></expr>,

<expr><literal type="string">"The input was longer than expected."</literal></expr>,

<expr><literal type="string">"Invalid sized parameter."</literal></expr>,

<expr><literal type="string">"Invalid size for prime."</literal></expr>,

<expr><literal type="string">"Invalid padding."</literal></expr>,

<expr><literal type="string">"Hash applied to too many bits."</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>error_to_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>err</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>err_2_str</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>err_2_str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="string">"Invalid error code."</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>err_2_str</name><index>[<expr><name>err</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

</unit>
