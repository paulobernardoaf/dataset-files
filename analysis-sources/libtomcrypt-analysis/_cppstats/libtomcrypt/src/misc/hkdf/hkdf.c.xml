<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\misc\hkdf\hkdf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_HKDF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>hkdf_extract</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>saltlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>salt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>saltlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>hmac_memory</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>hmac_memory</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>saltlen</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>hkdf_expand</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>infolen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hashsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>N</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>Noutlen</name></decl>, <decl><type ref="prev"/><name>outoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>T</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>Tlen</name></decl>, <decl><type ref="prev"/><name>datlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hash_is_valid</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hashsize</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>hashsize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>inlen</name> <argument_list type="generic">&lt; <argument><expr><name>hashsize</name> <operator>||</operator> <name>outlen</name></expr></argument> &gt;</argument_list></name> <name>hashsize</name> <operator>*</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>infolen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Tlen</name> <operator>=</operator> <name>hashsize</name> <operator>+</operator> <name>infolen</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>Tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>T</name> <operator>+</operator> <name>hashsize</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>infolen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dat</name> <operator>=</operator> <name>T</name> <operator>+</operator> <name>hashsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>datlen</name> <operator>=</operator> <name>Tlen</name> <operator>-</operator> <name>hashsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>N</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>outoff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>Noutlen</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>hashsize</name></expr></argument>, <argument><expr><name>outlen</name> <operator>-</operator> <name>outoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>T</name><index>[<expr><name>Tlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>N</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hmac_memory</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>dat</name></expr></argument>, <argument><expr><name>datlen</name></expr></argument>,

<argument><expr><name>out</name> <operator>+</operator> <name>outoff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Noutlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>outoff</name> <operator>+=</operator> <name>Noutlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>outoff</name> <operator>&gt;=</operator> <name>outlen</name></expr>)</condition> <block>{<block_content> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <name>hashsize</name> <operator>*</operator> <operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>hashsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>N</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dat</name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>

<expr_stmt><expr><name>datlen</name> <operator>=</operator> <name>Tlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>hkdf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>saltlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>infolen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hashsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>extracted</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hash_is_valid</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hashsize</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>hashsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>extracted</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>hashsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>extracted</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hkdf_extract</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>saltlen</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>extracted</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hashsize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>extracted</name></expr></argument>, <argument><expr><name>hashsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>extracted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>hkdf_expand</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>infolen</name></expr></argument>, <argument><expr><name>extracted</name></expr></argument>, <argument><expr><name>hashsize</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>extracted</name></expr></argument>, <argument><expr><name>hashsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>extracted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
