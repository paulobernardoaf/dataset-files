<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\misc\crypt\crypt_register_all_ciphers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_CIPHER</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {LTC_ARGCHK(register_cipher(h) != -1); } while(0)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>register_all_ciphers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIJNDAEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENCRYPT_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aes_enc_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aes_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLOWFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blowfish_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XTEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xtea_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc5_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc6_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFERP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>saferp_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>twofish_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>safer_k64_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>safer_sk64_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>safer_k128_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>safer_sk128_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc2_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>des3_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAST5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cast5_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NOEKEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>noekeon_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SKIPJACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>skipjack_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ANUBIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>anubis_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KHAZAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>khazad_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KSEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kseed_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KASUMI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>kasumi_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MULTI2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>multi2_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAMELLIA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>camellia_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_IDEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>idea_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SERPENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>serpent_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_CIPHER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tea_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

</unit>
