<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\misc\crypt\crypt_register_all_prngs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_PRNG</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {LTC_ARGCHK(register_prng(h) != -1); } while(0)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>register_all_prngs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_YARROW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_PRNG</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yarrow_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_PRNG</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fortuna_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_PRNG</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc4_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA20_PRNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_PRNG</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chacha20_prng_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOBER128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_PRNG</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sober128_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SPRNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_PRNG</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sprng_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

</unit>
