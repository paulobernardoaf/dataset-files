<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\misc\crypt\crypt_inits.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>init_LTM</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>ltc_mp</name> <operator>=</operator> <name>ltm_desc</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TFM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>init_TFM</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>ltc_mp</name> <operator>=</operator> <name>tfm_desc</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GMP_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>init_GMP</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>ltc_mp</name> <operator>=</operator> <name>gmp_desc</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>crypt_mp_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>mpi</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mpi</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>mpi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><name>ltc_mp</name> <operator>=</operator> <name>ltm_desc</name></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TFM_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<expr_stmt><expr><name>ltc_mp</name> <operator>=</operator> <name>tfm_desc</name></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GMP_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<case>case <expr><literal type="char">'G'</literal></expr>:</case>

<expr_stmt><expr><name>ltc_mp</name> <operator>=</operator> <name>gmp_desc</name></expr>;</expr_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>EXT_MATH_LIB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><literal type="char">'e'</literal></expr>:</case>

<case>case <expr><literal type="char">'E'</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>extern</specifier> <name>ltc_math_descriptor</name></type> <name>EXT_MATH_LIB</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ltc_mp</name> <operator>=</operator> <name>EXT_MATH_LIB</name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_VALUE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#s"="NAME(s)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#s</cpp:value></cpp:define>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"EXT_MATH_LIB = %s\n"</literal></expr></argument>, <argument><expr><call><name>NAME_VALUE</name><argument_list>(<argument><expr><name>EXT_MATH_LIB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NAME_VALUE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NAME</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Unknown/Invalid MPI provider: %s\n"</literal></expr></argument>, <argument><expr><name>mpi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_ERROR</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

</unit>
