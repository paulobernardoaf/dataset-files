<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\misc\crypt\crypt_sizes.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>crypt_size</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SZ_STRINGIFY_S</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #s, sizeof(struct s) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SZ_STRINGIFY_T</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ #s, sizeof(s) }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>crypt_size</name></type> <name><name>_crypt_sizes</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>ltc_hash_descriptor</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>hash_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHC_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>chc_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_WHIRLPOOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>whirlpool_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>sha3_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>sha512_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>sha256_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>sha1_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>md5_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>md4_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>md2_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>tiger_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>rmd128_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD160</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>rmd160_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>rmd256_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD320</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>rmd320_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>blake2s_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2B</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>blake2b_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>ltc_cipher_descriptor</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>symmetric_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ANUBIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>anubis_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAMELLIA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>camellia_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLOWFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>blowfish_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CAST5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>cast5_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>des_key</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>des3_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_IDEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>idea_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KASUMI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>kasumi_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KHAZAD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>khazad_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KSEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>kseed_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MULTI2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>multi2_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NOEKEON</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>noekeon_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>rc2_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>rc5_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>rc6_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SERPENT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>serpent_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SKIPJACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>skipjack_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XTEA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>xtea_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIJNDAEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>rijndael_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>safer_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SAFERP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>saferp_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TWOFISH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>twofish_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>symmetric_ECB</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CFB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>symmetric_CFB</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OFB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>symmetric_OFB</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CBC_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>symmetric_CBC</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CTR_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>symmetric_CTR</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_LRW_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>symmetric_LRW</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F8_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>symmetric_F8</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XTS_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>symmetric_xts</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>chacha_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SALSA20</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>salsa20_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOSEMANUK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>sosemanuk_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RABBIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>rabbit_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC4_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>rc4_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOBER128_STREAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>sober128_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_HMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>hmac_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>omac_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>pmac_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_POLY1305</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>poly1305_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_EAX_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>eax_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OCB_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>ocb_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OCB3_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>ocb3_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CCM_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>ccm_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_GCM_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>gcm_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PELICAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>pelican_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XCBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>xcbc_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F9_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>f9_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA20POLY1305_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>chacha20poly1305_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MRSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>rsa_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>dsa_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>dh_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>ltc_ecc_curve</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>ecc_point</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>ecc_key</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>ltc_asn1_list</name></expr></argument>)</argument_list></call></expr>, 

<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>ltc_utctime</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>ltc_generalizedtime</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>ltc_prng_descriptor</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>prng_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>fortuna_prng</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHACHA20_PRNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>chacha20_prng</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RC4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>rc4_prng</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOBER128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>sober128_prng</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_YARROW</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_S</name><argument_list>(<argument><expr><name>yarrow_prng</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ADLER32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>adler32_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CRC32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>crc32_state</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><call><name>_SZ_STRINGIFY_T</name><argument_list>(<argument><expr><name>ltc_mp_digit</name></expr></argument>)</argument_list></call></expr>,

<macro><name>_SZ_STRINGIFY_T</name><argument_list>(<argument>ltc_math_descriptor</argument>)</argument_list></macro>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>crypt_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>namein</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>sizeout</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>_crypt_sizes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>_crypt_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>XSTRCMP</name><argument_list>(<argument><expr><name><name>_crypt_sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>namein</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>sizeout</name> <operator>=</operator> <name><name>_crypt_sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>crypt_list_all_sizes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>names_list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>names_list_size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>total_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>number_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>_crypt_sizes</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>_crypt_sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>number_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s,%u\n"</literal></expr></argument>, <argument><expr><name><name>_crypt_sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>_crypt_sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>number_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>total_len</name> <operator>+=</operator> <name>number_len</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>names_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>names_list_size</name> <operator>=</operator> <name>total_len</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>total_len</name> <operator>&gt;</operator> <operator>*</operator><name>names_list_size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>names_list</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>number_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>total_len</name></expr></argument>, <argument><expr><literal type="string">"%s,%u\n"</literal></expr></argument>, <argument><expr><name><name>_crypt_sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>_crypt_sizes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>number_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>number_len</name> <operator>&gt;</operator> <name>total_len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>total_len</name> <operator>-=</operator> <name>number_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>number_len</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ptr</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
