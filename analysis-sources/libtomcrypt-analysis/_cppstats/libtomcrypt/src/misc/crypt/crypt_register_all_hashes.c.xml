<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\misc\crypt\crypt_register_all_hashes.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_HASH</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {LTC_ARGCHK(register_hash(h) != -1); } while(0)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>register_all_hashes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TIGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiger_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md2_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD4</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md4_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md5_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha1_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA224</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha224_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA384</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha384_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha512_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512_224</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha512_224_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA512_256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha512_256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha3_224_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha3_256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha3_384_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha3_512_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_KECCAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keccak_224_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keccak_256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keccak_384_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>keccak_512_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rmd128_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD160</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rmd160_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD256</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rmd256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIPEMD320</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rmd320_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_WHIRLPOOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>whirlpool_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2s_128_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2s_160_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2s_224_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2s_256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_BLAKE2S</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2b_160_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2b_256_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2b_384_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blake2b_512_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CHC_HASH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>REGISTER_HASH</name><argument_list>(<argument><expr><operator>&amp;</operator><name>chc_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><call><name>chc_register</name><argument_list>(<argument><expr><call><name>find_cipher_any</name><argument_list>(<argument><expr><literal type="string">"aes"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>CRYPT_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

</unit>
