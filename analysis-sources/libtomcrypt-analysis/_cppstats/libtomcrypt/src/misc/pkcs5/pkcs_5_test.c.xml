<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\misc\pkcs5\pkcs_5_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>pkcs_5_test</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>P</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>P_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>S</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>S_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dkLen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>DK</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>case_item</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>case_item</name></type> <name><name>cases_5_2</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><literal type="string">"password"</literal></expr>,

<expr><literal type="number">8</literal></expr>,

<expr><literal type="string">"salt"</literal></expr>,

<expr><literal type="number">4</literal></expr>,

<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">20</literal></expr>,

<expr><block>{ <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x71</literal></expr>,

<expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x06</literal></expr>,

<expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xa6</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"password"</literal></expr>,

<expr><literal type="number">8</literal></expr>,

<expr><literal type="string">"salt"</literal></expr>,

<expr><literal type="number">4</literal></expr>,

<expr><literal type="number">2</literal></expr>,

<expr><literal type="number">20</literal></expr>,

<expr><block>{ <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x8c</literal></expr>,

<expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0xf0</literal></expr>,

<expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x57</literal></expr> }</block></expr>

}</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_EXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><block>{

<expr><literal type="string">"password"</literal></expr>,

<expr><literal type="number">8</literal></expr>,

<expr><literal type="string">"salt"</literal></expr>,

<expr><literal type="number">4</literal></expr>,

<expr><literal type="number">4096</literal></expr>,

<expr><literal type="number">20</literal></expr>,

<expr><block>{ <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x9a</literal></expr>,

<expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xd0</literal></expr>,

<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xc1</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"password"</literal></expr>,

<expr><literal type="number">8</literal></expr>,

<expr><literal type="string">"salt"</literal></expr>,

<expr><literal type="number">4</literal></expr>,

<expr><literal type="number">16777216</literal></expr>,

<expr><literal type="number">20</literal></expr>,

<expr><block>{ <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0xe4</literal></expr>,

<expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x6b</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x8c</literal></expr>,

<expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x84</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"passwordPASSWORDpassword"</literal></expr>,

<expr><literal type="number">25</literal></expr>,

<expr><literal type="string">"saltSALTsaltSALTsaltSALTsaltSALTsalt"</literal></expr>,

<expr><literal type="number">36</literal></expr>,

<expr><literal type="number">4096</literal></expr>,

<expr><literal type="number">25</literal></expr>,

<expr><block>{ <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x9b</literal></expr>,

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xd8</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x4a</literal></expr>,

<expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x70</literal></expr>,

<expr><literal type="number">0x38</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"pass\0word"</literal></expr>,

<expr><literal type="number">9</literal></expr>,

<expr><literal type="string">"sa\0lt"</literal></expr>,

<expr><literal type="number">5</literal></expr>,

<expr><literal type="number">4096</literal></expr>,

<expr><literal type="number">16</literal></expr>,

<expr><block>{ <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x9d</literal></expr>,

<expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0xc3</literal></expr> }</block></expr>

}</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>case_item</name></type> <name><name>cases_5_1</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><literal type="string">"password"</literal></expr>,

<expr><literal type="number">8</literal></expr>,

<expr><literal type="string">"saltsalt"</literal></expr>, 

<expr><literal type="number">8</literal></expr>, 

<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">20</literal></expr>,

<expr><block>{ <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x8c</literal></expr>,

<expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x44</literal></expr> }</block></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>case_item</name></type> <name><name>cases_5_1o</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><literal type="string">"password"</literal></expr>,

<expr><literal type="number">8</literal></expr>,

<expr><literal type="string">"saltsalt"</literal></expr>, 

<expr><literal type="number">8</literal></expr>, 

<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">20</literal></expr>,

<expr><block>{ <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x8c</literal></expr>,

<expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x44</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="string">"password"</literal></expr>,

<expr><literal type="number">8</literal></expr>,

<expr><literal type="string">"saltsalt"</literal></expr>, 

<expr><literal type="number">8</literal></expr>, 

<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">30</literal></expr>,

<expr><block>{ <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x8c</literal></expr>,

<expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x5d</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x44</literal></expr>,

<expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0xf4</literal></expr>, <expr><literal type="number">0xc1</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x0b</literal></expr> }</block></expr>

}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>DK</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dkLen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tested</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>failed</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>hash</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"PKCS#5 test failed: 'sha1' hash not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_ERROR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>cases_5_2</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cases_5_2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>tested</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dkLen</name> <operator>=</operator> <name><name>cases_5_2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dkLen</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pkcs_5_alg2</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>cases_5_2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>P</name></expr></argument>, <argument><expr><name><name>cases_5_2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>P_len</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>cases_5_2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr></argument>, <argument><expr><name><name>cases_5_2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S_len</name></expr></argument>,

<argument><expr><name><name>cases_5_2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>,

<argument><expr><name>DK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dkLen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\npkcs_5_alg2() #%d: Failed/1 (%s)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>failed</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>DK</name></expr></argument>, <argument><expr><name>dkLen</name></expr></argument>, <argument><expr><name><name>cases_5_2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>DK</name></expr></argument>, <argument><expr><name><name>cases_5_2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dkLen</name></expr></argument>, <argument><expr><literal type="string">"PKCS#5_2"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>failed</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>cases_5_1</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>case_item</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>tested</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dkLen</name> <operator>=</operator> <name><name>cases_5_1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dkLen</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pkcs_5_alg1</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>cases_5_1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>P</name></expr></argument>, <argument><expr><name><name>cases_5_1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>P_len</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>cases_5_1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr></argument>,

<argument><expr><name><name>cases_5_1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>,

<argument><expr><name>DK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dkLen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\npkcs_5_alg1() #%d: Failed/1 (%s)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>failed</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>DK</name></expr></argument>, <argument><expr><name>dkLen</name></expr></argument>, <argument><expr><name><name>cases_5_1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>DK</name></expr></argument>, <argument><expr><name><name>cases_5_1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dkLen</name></expr></argument>, <argument><expr><literal type="string">"PKCS#5_1"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>failed</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>cases_5_1o</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>cases_5_1o</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>tested</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dkLen</name> <operator>=</operator> <name><name>cases_5_1o</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dkLen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pkcs_5_alg1_openssl</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>cases_5_1o</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>P</name></expr></argument>, <argument><expr><name><name>cases_5_1o</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>P_len</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>cases_5_1o</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr></argument>,

<argument><expr><name><name>cases_5_1o</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>,

<argument><expr><name>DK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dkLen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST_DBG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\npkcs_5_alg1_openssl() #%d: Failed/1 (%s)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>error_to_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>++</operator><name>failed</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>DK</name></expr></argument>, <argument><expr><name>dkLen</name></expr></argument>, <argument><expr><name><name>cases_5_1o</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>DK</name></expr></argument>, <argument><expr><name><name>cases_5_1o</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dkLen</name></expr></argument>, <argument><expr><literal type="string">"PKCS#5_1o"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>failed</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>failed</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr> </then><else>: <expr><name>CRYPT_OK</name></expr></else></ternary></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
