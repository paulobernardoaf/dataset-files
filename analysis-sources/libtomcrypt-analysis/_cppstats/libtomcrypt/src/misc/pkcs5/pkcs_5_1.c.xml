<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\misc\pkcs5\pkcs_5_1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_pkcs_5_alg1_common</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>password_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>iteration_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>openssl_compat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hash_state</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>block</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>iter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>outidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>password</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>salt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hash_is_valid</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>MAXBLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>md</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>md</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name>block</name> <operator>*</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>hashsize</name> <operator>&lt;</operator> <operator>*</operator><name>outlen</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>openssl_compat</name> <operator>&amp;&amp;</operator> <name>block</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><call><name>process</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>hashsize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><call><name>process</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>password_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><call><name>process</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><call><name>done</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>iter</name> <operator>=</operator> <name>iteration_count</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>--</operator><name>iter</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>MAXBLOCKSIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>hash_memory</name><argument_list>(<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>hashsize</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>outidx</name> <operator>=</operator> <name>block</name><operator>*</operator><name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>hashsize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>hashsize</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>outidx</name><operator>+</operator><name>nb</name> <operator>&gt;</operator> <operator>*</operator><name>outlen</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <operator>*</operator><name>outlen</name> <operator>-</operator> <name>outidx</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>nb</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>out</name><operator>+</operator><name>outidx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>block</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>openssl_compat</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>openssl_compat</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>hashsize</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>

<label><name>LBL_ERR</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>MAXBLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>pkcs_5_alg1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>password_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>iteration_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_pkcs_5_alg1_common</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>password_len</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>iteration_count</name></expr></argument>,

<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>pkcs_5_alg1_openssl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>password_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>iteration_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_pkcs_5_alg1_common</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>password_len</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>iteration_count</name></expr></argument>,

<argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
