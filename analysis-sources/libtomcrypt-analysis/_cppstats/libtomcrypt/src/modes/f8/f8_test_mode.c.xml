<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\modes\f8\f8_test_mode.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_F8_MODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>f8_test_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x18</literal></expr>,

<expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0xd6</literal></expr>, <expr><literal type="number">0x2c</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>salt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x0d</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>IV</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xe5</literal></expr>,

<expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x4a</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>pt</name><index>[<expr><literal type="number">39</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x61</literal></expr>,

<expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x73</literal></expr>,

<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x20</literal></expr>,

<expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x73</literal></expr>,

<expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x67</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ct</name><index>[<expr><literal type="number">39</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x01</literal></expr>,

<expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xfd</literal></expr>,

<expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xf4</literal></expr>,

<expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xb7</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0x8f</literal></expr>,

<expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x02</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">39</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>symmetric_F8</name></type> <name>f8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><literal type="string">"aes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><literal type="string">"rijndael"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_NOP</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>f8_start</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f8</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>f8_encrypt</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>f8</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>f8_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>f8_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"f8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
