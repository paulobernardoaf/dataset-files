<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\prngs\sober128.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SOBER128</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_prng_descriptor</name></name></type> <name>sober128_desc</name> <init>=

<expr><block>{

<expr><literal type="string">"sober128"</literal></expr>,

<expr><literal type="number">40</literal></expr>,

<expr><operator>&amp;</operator><name>sober128_start</name></expr>,

<expr><operator>&amp;</operator><name>sober128_add_entropy</name></expr>,

<expr><operator>&amp;</operator><name>sober128_ready</name></expr>,

<expr><operator>&amp;</operator><name>sober128_read</name></expr>,

<expr><operator>&amp;</operator><name>sober128_done</name></expr>,

<expr><operator>&amp;</operator><name>sober128_export</name></expr>,

<expr><operator>&amp;</operator><name>sober128_import</name></expr>,

<expr><operator>&amp;</operator><name>sober128_test</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>sober128_start</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>ent</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>ent</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<macro><name>LTC_MUTEX_INIT</name><argument_list>(<argument>&amp;prng-&gt;lock</argument>)</argument_list></macro>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sober128_add_entropy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>inlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prng</name><operator>-&gt;</operator><name>ready</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_stream_keystream</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_UNLOCK</name>;</goto></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>inlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <operator>^=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_stream_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_UNLOCK</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_stream_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_UNLOCK</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<while>while <condition>(<expr><name>inlen</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>ent</name><index>[<expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>idx</name></name><operator>++</operator> <operator>%</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>ent</name></name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <operator>^=</operator> <operator>*</operator><name>in</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt>

<label><name>LBL_UNLOCK</name>:</label>

<expr_stmt><expr><call><name>LTC_MUTEX_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sober128_ready</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prng</name><operator>-&gt;</operator><name>ready</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt> <goto>goto <name>LBL_UNLOCK</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_stream_setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>ent</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_UNLOCK</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_stream_setiv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>ent</name></name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>LBL_UNLOCK</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>XMEMSET</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>ent</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>ent</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>LBL_UNLOCK</name>:</label>

<expr_stmt><expr><call><name>LTC_MUTEX_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>sober128_read</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>outlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>prng</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prng</name><operator>-&gt;</operator><name>ready</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>outlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <goto>goto <name>LBL_UNLOCK</name>;</goto> </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sober128_stream_keystream</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>outlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>LBL_UNLOCK</name>:</label>

<expr_stmt><expr><call><name>LTC_MUTEX_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>outlen</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sober128_done</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>sober128_stream_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>sober128</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_DESTROY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<macro><name>_LTC_PRNG_EXPORT</name><argument_list>(<argument>sober128</argument>)</argument_list></macro>

<function><type><name>int</name></type> <name>sober128_import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>sober128_desc</name><operator>.</operator><name>export_size</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_start</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_add_entropy</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>prng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>sober128_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>prng_state</name></type> <name>st</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>en</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>,

<expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>,

<expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>,

<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x28</literal></expr>,

<expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x32</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>dmp</name><index>[<expr><literal type="number">300</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>dmplen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>dmp</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>t1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x1A</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>t2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x83</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>t3</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x05</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_add_entropy</name><argument_list>(<argument><expr><name>en</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>en</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sober128_read</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_ERROR_READPRNG</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SOBER128-PRNG"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sober128_read</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">500</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_ERROR_READPRNG</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_add_entropy</name><argument_list>(<argument><expr><name>en</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>en</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sober128_read</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">500</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_ERROR_READPRNG</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_export</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dmplen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sober128_read</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">500</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_ERROR_READPRNG</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>sober128_read</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_ERROR_READPRNG</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SOBER128-PRNG"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_import</name><argument_list>(<argument><expr><name>dmp</name></expr></argument>, <argument><expr><name>dmplen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sober128_read</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">500</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_ERROR_READPRNG</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>sober128_read</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_ERROR_READPRNG</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t3</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SOBER128-PRNG"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sober128_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
