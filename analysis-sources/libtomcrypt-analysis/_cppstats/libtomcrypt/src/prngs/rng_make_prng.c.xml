<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\prngs\rng_make_prng.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RNG_MAKE_PRNG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>rng_make_prng</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>prng_is_valid</name><argument_list>(<argument><expr><name>wprng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name><name>prng_descriptor</name><index>[<expr><name>wprng</name></expr>]</index></name><operator>.</operator><name>export_size</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>bits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">64</literal> <operator>||</operator> <name>bits</name></expr></argument> &gt;</argument_list></name> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_PRNGSIZE</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><operator>(</operator><name>bits</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>prng_descriptor</name><index>[<expr><name>wprng</name></expr>]</index></name><operator>.</operator><call><name>start</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>XMALLOC</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_MEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rng_get_bytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>bytes</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_ERROR_READPRNG</name></expr>;</expr_stmt>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>prng_descriptor</name><index>[<expr><name>wprng</name></expr>]</index></name><operator>.</operator><call><name>pimport</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>prng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>prng_descriptor</name><index>[<expr><name>wprng</name></expr>]</index></name><operator>.</operator><call><name>add_entropy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>prng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>prng_descriptor</name><index>[<expr><name>wprng</name></expr>]</index></name><operator>.</operator><call><name>ready</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_ERR</name>;</goto>

</block_content>}</block></if></if_stmt>

<label><name>LBL_ERR</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>XFREE</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
