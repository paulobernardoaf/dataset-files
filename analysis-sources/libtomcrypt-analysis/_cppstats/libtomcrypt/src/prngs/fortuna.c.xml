<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\prngs\fortuna.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA_RESEED_RATELIMIT_TIMED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLOCK_GETTIME</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_RIJNDAEL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTC_SHA256</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> LTC_FORTUNA requires LTC_SHA256 and LTC_RIJNDAEL (AES)</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA_POOLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:warning>#<cpp:directive>warning</cpp:directive> LTC_FORTUNA_POOLS was not previously defined (old headers?)</cpp:warning>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_FORTUNA_POOLS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name><name>LTC_FORTUNA_POOLS</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator> <name>LTC_FORTUNA_POOLS</name></expr></argument> &gt;</argument_list></name> <literal type="number">32</literal></expr></cpp:if>

<cpp:error>#<cpp:directive>error</cpp:directive> LTC_FORTUNA_POOLS must be in [4..32]</cpp:error>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ltc_prng_descriptor</name></name></type> <name>fortuna_desc</name> <init>= <expr><block>{

<expr><literal type="string">"fortuna"</literal></expr>,

<expr><literal type="number">64</literal></expr>,

<expr><operator>&amp;</operator><name>fortuna_start</name></expr>,

<expr><operator>&amp;</operator><name>fortuna_add_entropy</name></expr>,

<expr><operator>&amp;</operator><name>fortuna_ready</name></expr>,

<expr><operator>&amp;</operator><name>fortuna_read</name></expr>,

<expr><operator>&amp;</operator><name>fortuna_done</name></expr>,

<expr><operator>&amp;</operator><name>fortuna_export</name></expr>,

<expr><operator>&amp;</operator><name>fortuna_import</name></expr>,

<expr><operator>&amp;</operator><name>fortuna_test</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_fortuna_update_iv</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>IV</name></decl>;</decl_stmt>

<expr_stmt><expr><name>IV</name> <operator>=</operator> <name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>IV</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>IV</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>IV</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>IV</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA_RESEED_RATELIMIT_TIMED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>ulong64</name></type> <name>_fortuna_current_time</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ulong64</name></type> <name>cur_time</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>FILETIME</name></type> <name>CurrentTime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULARGE_INTEGER</name></type> <name>ul</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CurrentTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ul</name><operator>.</operator><name>LowPart</name></name> <operator>=</operator> <name><name>CurrentTime</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ul</name><operator>.</operator><name>HighPart</name></name> <operator>=</operator> <name><name>CurrentTime</name><operator>.</operator><name>dwHighDateTime</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_time</name> <operator>=</operator> <name><name>ul</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>cur_time</name> <operator>-=</operator> <call><name>CONST64</name><argument_list>(<argument><expr><literal type="number">116444736000000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>cur_time</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt> 

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLOCK_GETTIME</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<decl_stmt><decl><type><name><name>struct</name> <name>timespec</name></name></type> <name>ts</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_MONOTONIC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_time</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name><name>ts</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name><name>ts</name><operator>.</operator><name>tv_nsec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt> 

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_time</name> <operator>=</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <operator>(</operator><name>ulong64</name><operator>)</operator><operator>(</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>cur_time</name> <operator>/</operator> <literal type="number">100</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_fortuna_reseed</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ulong64</name></type> <name>reset_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA_RESEED_RATELIMIT_TIMED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ulong64</name></type> <name>now</name> <init>= <expr><call><name>_fortuna_current_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>now</name> <operator>==</operator> <name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>wd</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>wd</name></name> <operator>&lt;</operator> <name>LTC_FORTUNA_WD</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>K</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>reset_cnt</name> <operator>=</operator> <name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>reset_cnt</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>LTC_FORTUNA_POOLS</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name>reset_cnt</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>K</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rijndael_setup</name><argument_list>(<argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>K</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_fortuna_update_iv</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool0_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA_RESEED_RATELIMIT_TIMED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>wd</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>wd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>reset_cnt</name></name> <operator>=</operator> <name>reset_cnt</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>fortuna_update_seed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hash_state</name></type> <name>md</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>K</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>LBL_UNLOCK</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>LBL_UNLOCK</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>K</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_UNLOCK</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_fortuna_update_iv</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>LBL_UNLOCK</name>:</label>

<expr_stmt><expr><call><name>LTC_MUTEX_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><operator>&amp;</operator><name>md</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>fortuna_start</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><name>MAXBLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>LTC_FORTUNA_POOLS</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool_idx</name></name> <operator>=</operator> <name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool0_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>reset_cnt</name></name> <operator>=</operator> <name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>wd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>K</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>rijndael_setup</name><argument_list>(<argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>K</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>LTC_FORTUNA_POOLS</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>IV</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>LTC_MUTEX_INIT</name><argument_list>(<argument>&amp;prng-&gt;lock</argument>)</argument_list></macro>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>_fortuna_add</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>inlen</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>source</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>inlen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool</name><index>[<expr><name>pool</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool</name><index>[<expr><name>pool</name></expr>]</index></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pool</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool0_len</name></name> <operator>+=</operator> <name>inlen</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>CRYPT_OK</name></expr>;</return> 

</block_content>}</block></function>

<function><type><name>int</name></type> <name>fortuna_add_random_event</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>inlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>source</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>pool</name> <operator>&lt;</operator> <name>LTC_FORTUNA_POOLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>_fortuna_add</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>fortuna_add_entropy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>inlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>_fortuna_add</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool_idx</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><operator>(</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool_idx</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool_idx</name></name> <operator>%=</operator> <name>LTC_FORTUNA_POOLS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>fortuna_ready</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FORTUNA_RESEED_RATELIMIT_TIMED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>wd</name></name> <operator>=</operator> <call><name>_fortuna_current_time</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>wd</name></name> <operator>=</operator> <name>LTC_FORTUNA_WD</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>_fortuna_reseed</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>err</name> <operator>==</operator> <name>CRYPT_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>long</name></type> <name>fortuna_read</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>outlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>prng</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>out</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prng</name><operator>-&gt;</operator><name>ready</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_UNLOCK</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool0_len</name></name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>_fortuna_reseed</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_UNLOCK</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>reset_cnt</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_UNLOCK</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tlen</name> <operator>=</operator> <name>outlen</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>outlen</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rijndael_ecb_encrypt</name><argument_list>(<argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>IV</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>outlen</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_fortuna_update_iv</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>outlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>rijndael_ecb_encrypt</name><argument_list>(<argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>IV</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_fortuna_update_iv</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>rijndael_ecb_encrypt</name><argument_list>(<argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>IV</name></name></expr></argument>, <argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>K</name></name></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_fortuna_update_iv</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rijndael_ecb_encrypt</name><argument_list>(<argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>IV</name></name></expr></argument>, <argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>K</name></name><operator>+</operator><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>_fortuna_update_iv</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>rijndael_setup</name><argument_list>(<argument><expr><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>K</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>skey</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>LBL_UNLOCK</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LTC_MUTEX_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>tlen</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>fortuna_done</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_LOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>prng</name><operator>-&gt;</operator><name>ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>LTC_FORTUNA_POOLS</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_done</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>prng</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>fortuna</name><operator>.</operator><name>pool</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>LBL_UNLOCK</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>CRYPT_OK</name></expr>;</expr_stmt> 

<label><name>LBL_UNLOCK</name>:</label>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>LTC_MUTEX_UNLOCK</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_MUTEX_DESTROY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prng</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<macro><name>_LTC_PRNG_EXPORT</name><argument_list>(<argument>fortuna</argument>)</argument_list></macro>

<function><type><name>int</name></type> <name>fortuna_import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>prng</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inlen</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>fortuna_desc</name><operator>.</operator><name>export_size</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>fortuna_start</name><argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>fortuna_update_seed</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inlen</name></expr></argument>, <argument><expr><name>prng</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>fortuna_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>sha256_test</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rijndael_test</name><argument_list>()</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
