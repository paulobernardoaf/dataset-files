<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\mac\xcbc\xcbc_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_XCBC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>xcbc_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>msglen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>K</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>M</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>T</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>tests</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{

<expr><literal type="number">0</literal></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x8a</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x1c</literal></expr>,

<expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xdf</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x9f</literal></expr>, <expr><literal type="number">0x29</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="number">3</literal></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xae</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xaf</literal></expr>,

<expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x6f</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="number">16</literal></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xa7</literal></expr>,

<expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x63</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="number">32</literal></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,

<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xf5</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xb9</literal></expr>, <expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0xd3</literal></expr>,

<expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xd4</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{

<expr><literal type="number">34</literal></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,

<expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,

<expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr>,

<expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x21</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0xa3</literal></expr>,

<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xd8</literal></expr> }</block></expr>,

}</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>T</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>taglen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><literal type="string">"aes"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><literal type="string">"rijndael"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_NOP</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>tests</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>taglen</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>xcbc_memory</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>K</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>M</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>msglen</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taglen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>compare_testvector</name><argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>taglen</name></expr></argument>, <argument><expr><name><name>tests</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>T</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"XCBC"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_FAIL_TESTVECTOR</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
