<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\mac\omac\omac_done.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>omac_done</name><parameter_list>(<parameter><decl><type><name>omac_state</name> <modifier>*</modifier></type><name>omac</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>omac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>outlen</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cipher_is_valid</name><argument_list>(<argument><expr><name><name>omac</name><operator>-&gt;</operator><name>cipher_idx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>omac</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>omac</name><operator>-&gt;</operator><name>blklen</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>omac</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&gt;</operator> <name><name>omac</name><operator>-&gt;</operator><name>blklen</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>!=</operator> <name><name>omac</name><operator>-&gt;</operator><name>blklen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>omac</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&lt;</operator> <name><name>omac</name><operator>-&gt;</operator><name>blklen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>omac</name><operator>-&gt;</operator><name>block</name><index>[<expr><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>omac</name><operator>-&gt;</operator><name>blklen</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>omac</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>omac</name><operator>-&gt;</operator><name>prev</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^</operator> <name><name>omac</name><operator>-&gt;</operator><name>Lu</name><index>[<expr><name>mode</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name><name>omac</name><operator>-&gt;</operator><name>cipher_idx</name></name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name><name>omac</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name><name>omac</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>omac</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cipher_descriptor</name><index>[<expr><name><name>omac</name><operator>-&gt;</operator><name>cipher_idx</name></name></expr>]</index></name><operator>.</operator><call><name>done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>omac</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>omac</name><operator>-&gt;</operator><name>blklen</name></name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <operator>*</operator><name>outlen</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>omac</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>outlen</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CLEAN_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>zeromem</name><argument_list>(<argument><expr><name>omac</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>omac</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
