<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\mac\omac\omac_process.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_OMAC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>omac_process</name><parameter_list>(<parameter><decl><type><name>omac_state</name> <modifier>*</modifier></type><name>omac</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>omac</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LTC_ARGCHK</name><argument_list>(<argument><expr><name>in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>cipher_is_valid</name><argument_list>(<argument><expr><name><name>omac</name><operator>-&gt;</operator><name>cipher_idx</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>omac</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>omac</name><operator>-&gt;</operator><name>blklen</name></name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>omac</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>&gt;</operator> <name><name>omac</name><operator>-&gt;</operator><name>blklen</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<return>return <expr><name>CRYPT_INVALID_ARG</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_FAST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>blklen</name> <init>= <expr><name><name>cipher_descriptor</name><index>[<expr><name><name>omac</name><operator>-&gt;</operator><name>cipher_idx</name></name></expr>]</index></name><operator>.</operator><name>block_length</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>inlen</name> <operator>&gt;</operator> <name>blklen</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>inlen</name> <operator>-</operator> <name>blklen</name><operator>)</operator></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>blklen</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>blklen</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LTC_FAST_TYPE</name></expr></argument>)</argument_list></sizeof></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>omac</name><operator>-&gt;</operator><name>prev</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>^=</operator> <operator>*</operator><operator>(</operator><call><name>LTC_FAST_TYPE_PTR_CAST</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>blklen</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name><name>omac</name><operator>-&gt;</operator><name>cipher_idx</name></name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name><name>omac</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><name><name>omac</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>omac</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<while>while <condition>(<expr><name>inlen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>==</operator> <name><name>omac</name><operator>-&gt;</operator><name>blklen</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>omac</name><operator>-&gt;</operator><name>blklen</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>omac</name><operator>-&gt;</operator><name>block</name><index>[<expr><name>x</name></expr>]</index></name> <operator>^=</operator> <name><name>omac</name><operator>-&gt;</operator><name>prev</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <name><name>cipher_descriptor</name><index>[<expr><name><name>omac</name><operator>-&gt;</operator><name>cipher_idx</name></name></expr>]</index></name><operator>.</operator><call><name>ecb_encrypt</name><argument_list>(<argument><expr><name><name>omac</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name><name>omac</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>omac</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>inlen</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><operator>(</operator><name><name>omac</name><operator>-&gt;</operator><name>blklen</name></name> <operator>-</operator> <name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>XMEMCPY</name><argument_list>(<argument><expr><name><name>omac</name><operator>-&gt;</operator><name>block</name></name> <operator>+</operator> <name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>omac</name><operator>-&gt;</operator><name>buflen</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>inlen</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>CRYPT_OK</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
