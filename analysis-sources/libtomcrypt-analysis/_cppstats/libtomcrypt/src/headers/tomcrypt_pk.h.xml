<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\headers\tomcrypt_pk.h"><enum>enum <name>public_key_type</name> <block>{

<decl><name>PK_PUBLIC</name> <init>= <expr><literal type="number">0x0000</literal></expr></init></decl>,

<decl><name>PK_PRIVATE</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,

<decl><name>PK_STD</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>,

<decl><name>PK_COMPRESSED</name> <init>= <expr><literal type="number">0x2000</literal></expr></init></decl>,

<decl><name>PK_CURVEOID</name> <init>= <expr><literal type="number">0x4000</literal></expr></init></decl>

}</block>;</enum>

<function_decl><type><name>int</name></type> <name>rand_prime</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>N</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MRSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <name>Rsa_key</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>N</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>qP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dQ</name></decl>;</decl_stmt>

}</block></struct></type> <name>rsa_key</name>;</typedef>

<function_decl><type><name>int</name></type> <name>rsa_make_key</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_exptmod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rsa_free</name><parameter_list>(<parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rsa_encrypt_key</name><parameter_list>(<parameter><type><name>_in</name></type></parameter>, <parameter><type><name>_inlen</name></type></parameter>, <parameter><type><name>_out</name></type></parameter>, <parameter><type><name>_outlen</name></type></parameter>, <parameter><type><name>_lparam</name></type></parameter>, <parameter><type><name>_lparamlen</name></type></parameter>, <parameter><type><name>_prng</name></type></parameter>, <parameter><type><name>_prng_idx</name></type></parameter>, <parameter><type><name>_hash_idx</name></type></parameter>, <parameter><type><name>_key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rsa_encrypt_key_ex(_in, _inlen, _out, _outlen, _lparam, _lparamlen, _prng, _prng_idx, _hash_idx, LTC_PKCS_1_OAEP, _key)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rsa_decrypt_key</name><parameter_list>(<parameter><type><name>_in</name></type></parameter>, <parameter><type><name>_inlen</name></type></parameter>, <parameter><type><name>_out</name></type></parameter>, <parameter><type><name>_outlen</name></type></parameter>, <parameter><type><name>_lparam</name></type></parameter>, <parameter><type><name>_lparamlen</name></type></parameter>, <parameter><type><name>_hash_idx</name></type></parameter>, <parameter><type><name>_stat</name></type></parameter>, <parameter><type><name>_key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rsa_decrypt_key_ex(_in, _inlen, _out, _outlen, _lparam, _lparamlen, _hash_idx, LTC_PKCS_1_OAEP, _stat, _key)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rsa_sign_hash</name><parameter_list>(<parameter><type><name>_in</name></type></parameter>, <parameter><type><name>_inlen</name></type></parameter>, <parameter><type><name>_out</name></type></parameter>, <parameter><type><name>_outlen</name></type></parameter>, <parameter><type><name>_prng</name></type></parameter>, <parameter><type><name>_prng_idx</name></type></parameter>, <parameter><type><name>_hash_idx</name></type></parameter>, <parameter><type><name>_saltlen</name></type></parameter>, <parameter><type><name>_key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rsa_sign_hash_ex(_in, _inlen, _out, _outlen, LTC_PKCS_1_PSS, _prng, _prng_idx, _hash_idx, _saltlen, _key)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rsa_verify_hash</name><parameter_list>(<parameter><type><name>_sig</name></type></parameter>, <parameter><type><name>_siglen</name></type></parameter>, <parameter><type><name>_hash</name></type></parameter>, <parameter><type><name>_hashlen</name></type></parameter>, <parameter><type><name>_hash_idx</name></type></parameter>, <parameter><type><name>_saltlen</name></type></parameter>, <parameter><type><name>_stat</name></type></parameter>, <parameter><type><name>_key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rsa_verify_hash_ex(_sig, _siglen, _hash, _hashlen, LTC_PKCS_1_PSS, _hash_idx, _saltlen, _stat, _key)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rsa_sign_saltlen_get_max</name><parameter_list>(<parameter><type><name>_hash_idx</name></type></parameter>, <parameter><type><name>_key</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rsa_sign_saltlen_get_max_ex(LTC_PKCS_1_PSS, _hash_idx, _key)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>rsa_encrypt_key_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lparam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>lparamlen</name></decl></parameter>,

<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prng_idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_decrypt_key_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>lparam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>lparamlen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_sign_hash_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>,

<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prng_idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>saltlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_verify_hash_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>siglen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>hashlen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>saltlen</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_sign_saltlen_get_max_ex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_export</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_import_x509</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_import_pkcs8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>passwd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>passwdlen</name></decl></parameter>, <parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_set_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>N</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>Nlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>elen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>dlen</name></decl></parameter>,

<parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_set_factors</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>plen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>qlen</name></decl></parameter>,

<parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rsa_set_crt_params</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dP</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>dPlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dQ</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>dQlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>qP</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>qPlen</name></decl></parameter>,

<parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>prime</name></decl>;</decl_stmt>

}</block></struct></type> <name>dh_key</name>;</typedef>

<function_decl><type><name>int</name></type> <name>dh_get_groupsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dh_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dh_export</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dh_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dh_import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>dh_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dh_set_pg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>plen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>glen</name></decl></parameter>,

<parameter><decl><type><name>dh_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dh_set_pg_dhparam</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dhparam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>dhparamlen</name></decl></parameter>, <parameter><decl><type><name>dh_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dh_set_pg_groupsize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>groupsize</name></decl></parameter>, <parameter><decl><type><name>dh_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dh_set_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>dh_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dh_generate_key</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>dh_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dh_shared_secret</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dh_key</name> <modifier>*</modifier></type><name>private_key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dh_key</name> <modifier>*</modifier></type><name>public_key</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>dh_free</name><parameter_list>(<parameter><decl><type><name>dh_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dh_export_key</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dh_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECC_BUF_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECC_MAXSIZE</name></cpp:macro> <cpp:value>66</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>A</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>B</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Gx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Gy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cofactor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>OID</name></decl>;</decl_stmt>

}</block></struct></type> <name>ltc_ecc_curve</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>

}</block></struct></type> <name>ecc_point</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>prime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>A</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>B</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ecc_point</name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>cofactor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name><name>oid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>oidlen</name></decl>;</decl_stmt>

}</block></struct></type> <name>ltc_ecc_dp</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_ecc_dp</name></type> <name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ecc_point</name></type> <name>pubkey</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>k</name></decl>;</decl_stmt>

}</block></struct></type> <name>ecc_key</name>;</typedef>

<typedef>typedef <type><enum>enum <name>ecc_signature_type_</name> <block>{

<decl><name>LTC_ECCSIG_ANSIX962</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,

<decl><name>LTC_ECCSIG_RFC7518</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,

<decl><name>LTC_ECCSIG_ETH27</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,

<decl><name>LTC_ECCSIG_RFC5656</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl>,

}</block></enum></type> <name>ecc_signature_type</name>;</typedef>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>ltc_ecc_curve</name></type> <name><name>ltc_ecc_curves</name><index>[]</index></name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>ecc_sizes</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>low</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>high</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_get_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_find_curve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name_or_oid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ltc_ecc_curve</name><modifier>*</modifier><modifier>*</modifier></type> <name>cu</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_set_curve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_ecc_curve</name> <modifier>*</modifier></type><name>cu</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_generate_key</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_set_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_get_key</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_get_oid_str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_make_key</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keysize</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_make_key_ex</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ltc_ecc_curve</name> <modifier>*</modifier></type><name>cu</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ecc_free</name><parameter_list>(<parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_export</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_import_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ltc_ecc_curve</name> <modifier>*</modifier></type><name>cu</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_ansi_x963_export</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_ansi_x963_import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_ansi_x963_import_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ltc_ecc_curve</name> <modifier>*</modifier></type><name>cu</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_export_openssl</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_import_openssl</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_import_pkcs8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>pwdlen</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_import_x509</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_shared_secret</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>private_key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>public_key</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_encrypt_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_decrypt_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ecc_sign_hash_rfc7518</name><parameter_list>(<parameter><type><name>in_</name></type></parameter>, <parameter><type><name>inlen_</name></type></parameter>, <parameter><type><name>out_</name></type></parameter>, <parameter><type><name>outlen_</name></type></parameter>, <parameter><type><name>prng_</name></type></parameter>, <parameter><type><name>wprng_</name></type></parameter>, <parameter><type><name>key_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ecc_sign_hash_ex(in_, inlen_, out_, outlen_, prng_, wprng_, LTC_ECCSIG_RFC7518, NULL, key_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ecc_sign_hash</name><parameter_list>(<parameter><type><name>in_</name></type></parameter>, <parameter><type><name>inlen_</name></type></parameter>, <parameter><type><name>out_</name></type></parameter>, <parameter><type><name>outlen_</name></type></parameter>, <parameter><type><name>prng_</name></type></parameter>, <parameter><type><name>wprng_</name></type></parameter>, <parameter><type><name>key_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ecc_sign_hash_ex(in_, inlen_, out_, outlen_, prng_, wprng_, LTC_ECCSIG_ANSIX962, NULL, key_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ecc_verify_hash_rfc7518</name><parameter_list>(<parameter><type><name>sig_</name></type></parameter>, <parameter><type><name>siglen_</name></type></parameter>, <parameter><type><name>hash_</name></type></parameter>, <parameter><type><name>hashlen_</name></type></parameter>, <parameter><type><name>stat_</name></type></parameter>, <parameter><type><name>key_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ecc_verify_hash_ex(sig_, siglen_, hash_, hashlen_, LTC_ECCSIG_RFC7518, stat_, key_)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ecc_verify_hash</name><parameter_list>(<parameter><type><name>sig_</name></type></parameter>, <parameter><type><name>siglen_</name></type></parameter>, <parameter><type><name>hash_</name></type></parameter>, <parameter><type><name>hashlen_</name></type></parameter>, <parameter><type><name>stat_</name></type></parameter>, <parameter><type><name>key_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ecc_verify_hash_ex(sig_, siglen_, hash_, hashlen_, LTC_ECCSIG_ANSIX962, stat_, key_)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>ecc_sign_hash_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>ecc_signature_type</name></type> <name>sigformat</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>recid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_verify_hash_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>siglen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>hashlen</name></decl></parameter>,

<parameter><decl><type><name>ecc_signature_type</name></type> <name>sigformat</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_recover_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>siglen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>hashlen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>recid</name></decl></parameter>, <parameter><decl><type><name>ecc_signature_type</name></type> <name>sigformat</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CURVE25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>public_key_type</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>algo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>priv</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pub</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>curve25519_key</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ed25519_make_key</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ed25519_export</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ed25519_import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ed25519_import_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ed25519_import_x509</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ed25519_import_pkcs8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>pwdlen</name></decl></parameter>,

<parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ed25519_sign</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>msglen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>siglen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>curve25519_key</name> <modifier>*</modifier></type><name>private_key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ed25519_verify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>msglen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>siglen</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>curve25519_key</name> <modifier>*</modifier></type><name>public_key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>x25519_make_key</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>x25519_export</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>x25519_import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>x25519_import_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>x25519_import_x509</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>x25519_import_pkcs8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>pwdlen</name></decl></parameter>,

<parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>x25519_shared_secret</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>curve25519_key</name> <modifier>*</modifier></type><name>private_key</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>curve25519_key</name> <modifier>*</modifier></type><name>public_key</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_MDSA_DELTA</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_MDSA_MAX_GROUP</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qord</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>

}</block></struct></type> <name>dsa_key</name>;</typedef>

<function_decl><type><name>int</name></type> <name>dsa_make_key</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modulus_size</name></decl></parameter>, <parameter><decl><type><name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_set_pqg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>plen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>qlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>glen</name></decl></parameter>,

<parameter><decl><type><name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_set_pqg_dsaparam</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dsaparam</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>dsaparamlen</name></decl></parameter>, <parameter><decl><type><name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_generate_pqg</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>modulus_size</name></decl></parameter>, <parameter><decl><type><name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_set_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_generate_key</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>dsa_free</name><parameter_list>(<parameter><decl><type><name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_sign_hash_raw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_sign_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_verify_hash_raw</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>hashlen</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_verify_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sig</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>siglen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hash</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>hashlen</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_encrypt_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_decrypt_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_import</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_export</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_verify_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_shared_secret</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>private_key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>base</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dsa_key</name> <modifier>*</modifier></type><name>public_key</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><enum>enum <name>ltc_asn1_type_</name> <block>{

<decl><name>LTC_ASN1_EOL</name></decl>,

<decl><name>LTC_ASN1_BOOLEAN</name></decl>,

<decl><name>LTC_ASN1_INTEGER</name></decl>,

<decl><name>LTC_ASN1_SHORT_INTEGER</name></decl>,

<decl><name>LTC_ASN1_BIT_STRING</name></decl>,

<decl><name>LTC_ASN1_OCTET_STRING</name></decl>,

<decl><name>LTC_ASN1_NULL</name></decl>,

<decl><name>LTC_ASN1_OBJECT_IDENTIFIER</name></decl>,

<decl><name>LTC_ASN1_IA5_STRING</name></decl>,

<decl><name>LTC_ASN1_PRINTABLE_STRING</name></decl>,

<decl><name>LTC_ASN1_UTF8_STRING</name></decl>,

<decl><name>LTC_ASN1_UTCTIME</name></decl>,

<decl><name>LTC_ASN1_CHOICE</name></decl>,

<decl><name>LTC_ASN1_SEQUENCE</name></decl>,

<decl><name>LTC_ASN1_SET</name></decl>,

<decl><name>LTC_ASN1_SETOF</name></decl>,

<decl><name>LTC_ASN1_RAW_BIT_STRING</name></decl>,

<decl><name>LTC_ASN1_TELETEX_STRING</name></decl>,

<decl><name>LTC_ASN1_GENERALIZEDTIME</name></decl>,

<decl><name>LTC_ASN1_CUSTOM_TYPE</name></decl>,

}</block></enum></type> <name>ltc_asn1_type</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>LTC_ASN1_CL_UNIVERSAL</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,

<decl><name>LTC_ASN1_CL_APPLICATION</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,

<decl><name>LTC_ASN1_CL_CONTEXT_SPECIFIC</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,

<decl><name>LTC_ASN1_CL_PRIVATE</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl>,

}</block></enum></type> <name>ltc_asn1_class</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{

<decl><name>LTC_ASN1_PC_PRIMITIVE</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>,

<decl><name>LTC_ASN1_PC_CONSTRUCTED</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,

}</block></enum></type> <name>ltc_asn1_pc</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ltc_asn1_list_</name> <block>{

<decl_stmt><decl><type><name>ltc_asn1_type</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>optional</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_class</name></type> <name>klass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_pc</name></type> <name>pc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ulong64</name></type> <name>tag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>ltc_asn1_list_</name></name> <modifier>*</modifier></type><name>prev</name></decl>, <modifier>*</modifier><name>next</name>, <modifier>*</modifier><name>child</name>, <modifier>*</modifier><name>parent</name>;</decl_stmt>

}</block></struct></type> <name>ltc_asn1_list</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_SET_ASN1</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Data</name></type></parameter>, <parameter><type><name>Size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int LTC_MACRO_temp = (index); ltc_asn1_list *LTC_MACRO_list = (list); LTC_MACRO_list[LTC_MACRO_temp].type = (Type); LTC_MACRO_list[LTC_MACRO_temp].data = (void*)(Data); LTC_MACRO_list[LTC_MACRO_temp].size = (Size); LTC_MACRO_list[LTC_MACRO_temp].used = 0; LTC_MACRO_list[LTC_MACRO_temp].optional = 0; LTC_MACRO_list[LTC_MACRO_temp].klass = 0; LTC_MACRO_list[LTC_MACRO_temp].pc = 0; LTC_MACRO_list[LTC_MACRO_temp].tag = 0; } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__LTC_SET_ASN1_IDENTIFIER</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>Class</name></type></parameter>, <parameter><type><name>Pc</name></type></parameter>, <parameter><type><name>Tag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int LTC_MACRO_temp = (index); ltc_asn1_list *LTC_MACRO_list = (list); LTC_MACRO_list[LTC_MACRO_temp].type = LTC_ASN1_CUSTOM_TYPE; LTC_MACRO_list[LTC_MACRO_temp].klass = (Class); LTC_MACRO_list[LTC_MACRO_temp].pc = (Pc); LTC_MACRO_list[LTC_MACRO_temp].tag = (Tag); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_SET_ASN1_CUSTOM_CONSTRUCTED</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>Class</name></type></parameter>, <parameter><type><name>Tag</name></type></parameter>, <parameter><type><name>Data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int LTC_MACRO_temp##__LINE__ = (index); LTC_SET_ASN1(list, LTC_MACRO_temp##__LINE__, LTC_ASN1_CUSTOM_TYPE, Data, 1); __LTC_SET_ASN1_IDENTIFIER(list, LTC_MACRO_temp##__LINE__, Class, LTC_ASN1_PC_CONSTRUCTED, Tag); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_SET_ASN1_CUSTOM_PRIMITIVE</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>index</name></type></parameter>, <parameter><type><name>Class</name></type></parameter>, <parameter><type><name>Tag</name></type></parameter>, <parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Data</name></type></parameter>, <parameter><type><name>Size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int LTC_MACRO_temp##__LINE__ = (index); LTC_SET_ASN1(list, LTC_MACRO_temp##__LINE__, LTC_ASN1_CUSTOM_TYPE, Data, Size); __LTC_SET_ASN1_IDENTIFIER(list, LTC_MACRO_temp##__LINE__, Class, LTC_ASN1_PC_PRIMITIVE, Tag); list[LTC_MACRO_temp##__LINE__].used = (int)(Type); } while (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>der_asn1_class_to_string_map</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>der_asn1_class_to_string_map_sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>der_asn1_pc_to_string_map</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>der_asn1_pc_to_string_map_sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>der_asn1_tag_to_string_map</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>der_asn1_tag_to_string_map_sz</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>der_encode_sequence_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type_of</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>der_encode_sequence</name><parameter_list>(<parameter><type><name>list</name></type></parameter>, <parameter><type><name>inlen</name></type></parameter>, <parameter><type><name>out</name></type></parameter>, <parameter><type><name>outlen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>der_encode_sequence_ex(list, inlen, out, outlen, LTC_ASN1_SEQUENCE)</cpp:value></cpp:define>

<enum>enum <name>ltc_der_seq</name> <block>{

<decl><name>LTC_DER_SEQ_ZERO</name> <init>= <expr><literal type="number">0x0u</literal></expr></init></decl>,

<decl><name>LTC_DER_SEQ_UNORDERED</name> <init>= <expr><name>LTC_DER_SEQ_ZERO</name></expr></init></decl>,

<decl><name>LTC_DER_SEQ_ORDERED</name> <init>= <expr><literal type="number">0x1u</literal></expr></init></decl>,

<decl><name>LTC_DER_SEQ_RELAXED</name> <init>= <expr><name>LTC_DER_SEQ_ZERO</name></expr></init></decl>,

<decl><name>LTC_DER_SEQ_STRICT</name> <init>= <expr><literal type="number">0x2u</literal></expr></init></decl>,

<decl><name>LTC_DER_SEQ_SET</name> <init>= <expr><name>LTC_DER_SEQ_UNORDERED</name></expr></init></decl>,

<decl><name>LTC_DER_SEQ_SEQUENCE</name> <init>= <expr><name>LTC_DER_SEQ_ORDERED</name></expr></init></decl>,

}</block>;</enum>

<function_decl><type><name>int</name></type> <name>der_decode_sequence_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>der_decode_sequence</name><parameter_list>(<parameter><type><name>in</name></type></parameter>, <parameter><type><name>inlen</name></type></parameter>, <parameter><type><name>list</name></type></parameter>, <parameter><type><name>outlen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>der_decode_sequence_ex(in, inlen, list, outlen, LTC_DER_SEQ_SEQUENCE | LTC_DER_SEQ_RELAXED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>der_decode_sequence_strict</name><parameter_list>(<parameter><type><name>in</name></type></parameter>, <parameter><type><name>inlen</name></type></parameter>, <parameter><type><name>list</name></type></parameter>, <parameter><type><name>outlen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>der_decode_sequence_ex(in, inlen, list, outlen, LTC_DER_SEQ_SEQUENCE | LTC_DER_SEQ_STRICT)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>der_length_sequence</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_custom_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_custom_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_custom_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>payloadlen</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>der_decode_set</name><parameter_list>(<parameter><type><name>in</name></type></parameter>, <parameter><type><name>inlen</name></type></parameter>, <parameter><type><name>list</name></type></parameter>, <parameter><type><name>outlen</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>der_decode_sequence_ex(in, inlen, list, outlen, LTC_DER_SEQ_SET)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>der_length_set</name></cpp:macro> <cpp:value>der_length_sequence</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>der_encode_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_setof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_sequence_multi</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_sequence_multi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_sequence_flexi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>inlen</name></decl></parameter>, <parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>der_free_sequence_flexi</name></cpp:macro> <cpp:value>der_sequence_free</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>der_sequence_free</name><parameter_list>(<parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>der_sequence_shrink</name><parameter_list>(<parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_boolean</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_boolean</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>in</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_boolean</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_integer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_integer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_integer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_short_integer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_short_integer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_short_integer</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_bit_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_bit_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_raw_bit_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_raw_bit_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_bit_string</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>nbits</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_octet_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_octet_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_octet_string</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>noctets</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_object_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>words</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>nwords</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_object_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>words</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_object_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>words</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>nwords</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>der_object_identifier_bits</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_ia5_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_ia5_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_ia5_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>octets</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>noctets</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_ia5_char_encode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_ia5_value_decode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_teletex_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_teletex_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>octets</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>noctets</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_printable_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_printable_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_printable_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>octets</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>noctets</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_printable_char_encode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_printable_value_decode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>SIZE_MAX</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>WCHAR_MAX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__WCHAR_MAX__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WCHAR_T</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WCHAR_T_DEFINED</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__WCHAR_TYPE__</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_NO_WCHAR</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__WCHAR_MAX__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_WCHAR_MAX</name></cpp:macro> <cpp:value>__WCHAR_MAX__</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_WCHAR_MAX</name></cpp:macro> <cpp:value>WCHAR_MAX</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>ulong32</name></type> <name>wchar_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_WCHAR_MAX</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>der_encode_utf8_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_utf8_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name> <name>long</name></type> <name>der_utf8_charsize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_utf8_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>noctets</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_choice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>inlen</name></decl></parameter>,

<parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>YY</name></decl>, 

<name>MM</name>, 

<name>DD</name>, 

<name>hh</name>, 

<name>mm</name>, 

<name>ss</name>, 

<name>off_dir</name>, 

<name>off_hh</name>, 

<name>off_mm</name>;</decl_stmt> 

}</block></struct></type> <name>ltc_utctime</name>;</typedef>

<function_decl><type><name>int</name></type> <name>der_encode_utctime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_utctime</name> <modifier>*</modifier></type><name>utctime</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_utctime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>inlen</name></decl></parameter>,

<parameter><decl><type><name>ltc_utctime</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_utctime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_utctime</name> <modifier>*</modifier></type><name>utctime</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>YYYY</name></decl>, 

<name>MM</name>, 

<name>DD</name>, 

<name>hh</name>, 

<name>mm</name>, 

<name>ss</name>, 

<name>fs</name>, 

<name>off_dir</name>, 

<name>off_hh</name>, 

<name>off_mm</name>;</decl_stmt> 

}</block></struct></type> <name>ltc_generalizedtime</name>;</typedef>

<function_decl><type><name>int</name></type> <name>der_encode_generalizedtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_generalizedtime</name> <modifier>*</modifier></type><name>gtime</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_generalizedtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>inlen</name></decl></parameter>,

<parameter><decl><type><name>ltc_generalizedtime</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_generalizedtime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_generalizedtime</name> <modifier>*</modifier></type><name>gtime</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
