<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\libtomcrypt-analysis\_cppstats\libtomcrypt\src\headers\tomcrypt_private.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tomcrypt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_PAD_MASK</name></cpp:macro> <cpp:value>(0xF000U)</cpp:value></cpp:define>

<enum>enum <name>ltc_oid_id</name> <block>{

<decl><name>PKA_RSA</name></decl>,

<decl><name>PKA_DSA</name></decl>,

<decl><name>PKA_EC</name></decl>,

<decl><name>PKA_EC_PRIMEF</name></decl>,

<decl><name>PKA_X25519</name></decl>,

<decl><name>PKA_ED25519</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <modifier>*</modifier><name>base</name>, <modifier>*</modifier><name>prime</name>;</decl_stmt>

}</block></struct></type> <name>ltc_dh_set_type</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fn_kdf_t</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>password</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>password_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>salt_len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>iteration_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_idx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>fn_kdf_t</name></type> <name>kdf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>keylen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>blocklen</name></decl>;</decl_stmt>

}</block></struct></type> <name>pbes_properties</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>pbes_properties</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pwd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>pwdlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>enc_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>salt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>iv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>iterations</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>key_bits</name></decl>;</decl_stmt>

}</block></struct></type> <name>pbes_arg</name>;</typedef>

<function_decl><type><name>void</name></type> <name>blowfish_enc</name><parameter_list>(<parameter><decl><type><name>ulong32</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>blocks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>blowfish_expand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>,

<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>blowfish_setup_with_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keylen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>,

<parameter><decl><type><name>symmetric_key</name> <modifier>*</modifier></type><name>skey</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_PROCESS</name><parameter_list>(<parameter><type><name>func_name</name></type></parameter>, <parameter><type><name>compress_name</name></type></parameter>, <parameter><type><name>state_var</name></type></parameter>, <parameter><type><name>block_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int func_name (hash_state * md, const unsigned char *in, unsigned long inlen) { unsigned long n; int err; LTC_ARGCHK(md != NULL); LTC_ARGCHK(in != NULL); if (md-&gt; state_var .curlen &gt; sizeof(md-&gt; state_var .buf)) { return CRYPT_INVALID_ARG; } if ((md-&gt; state_var .length + inlen) &lt; md-&gt; state_var .length) { return CRYPT_HASH_OVERFLOW; } while (inlen &gt; 0) { if (md-&gt; state_var .curlen == 0 &amp;&amp; inlen &gt;= block_size) { if ((err = compress_name (md, in)) != CRYPT_OK) { return err; } md-&gt; state_var .length += block_size * 8; in += block_size; inlen -= block_size; } else { n = MIN(inlen, (block_size - md-&gt; state_var .curlen)); XMEMCPY(md-&gt; state_var .buf + md-&gt; state_var.curlen, in, (size_t)n); md-&gt; state_var .curlen += n; in += n; inlen -= n; if (md-&gt; state_var .curlen == block_size) { if ((err = compress_name (md, md-&gt; state_var .buf)) != CRYPT_OK) { return err; } md-&gt; state_var .length += 8*block_size; md-&gt; state_var .curlen = 0; } } } return CRYPT_OK; }</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>ocb3_int_ntz</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ocb3_int_xor_blocks</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>block_a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>block_b</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>block_len</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>DESC_DEF_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP_DIGIT_BIT</name></cpp:macro> <cpp:value>ltc_mp.bits_per_digit</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_init</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.init(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_init_multi</name></cpp:macro> <cpp:value>ltc_init_multi</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_clear</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.deinit(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_clear_multi</name></cpp:macro> <cpp:value>ltc_deinit_multi</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_cleanup_multi</name></cpp:macro> <cpp:value>ltc_cleanup_multi</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_init_copy</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.init_copy(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_neg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.neg(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_copy</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.copy(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_set</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.set_int(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_set_int</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.set_int(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_get_int</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.get_int(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_get_digit</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.get_digit(a, n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_get_digit_count</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.get_digit_count(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_cmp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.compare(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_cmp_d</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.compare_d(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_count_bits</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.count_bits(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_cnt_lsb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.count_lsb_bits(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_2expt</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.twoexpt(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_read_radix</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.read_radix(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_toradix</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.write_radix(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_unsigned_bin_size</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.unsigned_size(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_to_unsigned_bin</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.unsigned_write(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_read_unsigned_bin</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.unsigned_read(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_add</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.add(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_add_d</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.addi(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_sub</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.sub(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_sub_d</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.subi(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_mul</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.mul(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_mul_d</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.muli(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_sqr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.sqr(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_sqrtmod_prime</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.sqrtmod_prime(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_div</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.mpdiv(a, b, c, d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_div_2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.div_2(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_mod</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.mpdiv(a, b, NULL, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_mod_d</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.modi(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_gcd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.gcd(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_lcm</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.lcm(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_addmod</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.addmod(a, b, c, d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_submod</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.submod(a, b, c, d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_mulmod</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.mulmod(a, b, c, d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_sqrmod</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.sqrmod(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_invmod</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.invmod(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_montgomery_setup</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.montgomery_setup(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_montgomery_normalization</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.montgomery_normalization(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_montgomery_reduce</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.montgomery_reduce(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_montgomery_free</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.montgomery_deinit(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_exptmod</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.exptmod(a,b,c,d)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_prime_is_prime</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.isprime(a, b, c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_iszero</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mp_cmp_d(a, 0) == LTC_MP_EQ ? LTC_MP_YES : LTC_MP_NO)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_isodd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mp_get_digit_count(a) &gt; 0 ? (mp_get_digit(a, 0) &amp; 1 ? LTC_MP_YES : LTC_MP_NO) : LTC_MP_NO)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_exch</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { void *ABC__tmp = a; a = b; b = ABC__tmp; } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_tohex</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>mp_toradix(a, b, 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp_rand</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ltc_mp.rand(a, b)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>copy_or_zeromem</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>coz</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pbes_decrypt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pbes_arg</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dec_data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>dec_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pbes1_extract</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>pbes_arg</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pbes2_extract</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>pbes_arg</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rand_bn_bits</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>N</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>rand_bn_upto</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>N</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>, <parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pk_get_oid</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ltc_oid_id</name></name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pk_oid_str_to_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>OID</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>oidlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pk_oid_num_to_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>oid</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>oidlen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>OID</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MRSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>rsa_init</name><parameter_list>(<parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>rsa_shrink_key</name><parameter_list>(<parameter><decl><type><name>rsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>ltc_dh_set_type</name></type> <name><name>ltc_dh_sets</name><index>[]</index></name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>dh_check_pubkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dh_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>ecc_set_curve_from_mpis</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prime</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>order</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>gx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>gy</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>cofactor</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_copy_curve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>srckey</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_set_curve_by_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ecc_import_subject_public_key_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_SSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>ecc_ssh_ecdsa_encode_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>buflen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>ltc_ecc_new_point</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ltc_ecc_del_point</name><parameter_list>(<parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ltc_ecc_set_point_xyz</name><parameter_list>(<parameter><decl><type><name>ltc_mp_digit</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ltc_mp_digit</name></type> <name>z</name></decl></parameter>, <parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ltc_ecc_copy_point</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ltc_ecc_is_point</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_ecc_dp</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ltc_ecc_is_point_at_infinity</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>retval</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ltc_ecc_import_point</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prime</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ltc_ecc_export_point</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compressed</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ltc_ecc_verify_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC_ACCEL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LTM_DESC</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GMP_DESC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>int</name></type> <name>ltc_ecc_projective_dbl_point</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ma</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ltc_ecc_projective_add_point</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>Q</name></decl></parameter>, <parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ma</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>int</name></type> <name>ltc_ecc_fp_mulmod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>G</name></decl></parameter>, <parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>map</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ltc_ecc_fp_save_state</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ltc_ecc_fp_restore_state</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ltc_ecc_fp_free</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ltc_ecc_fp_add_point</name><parameter_list>(<parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ltc_ecc_fp_tablelock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lock</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>ltc_ecc_mulmod</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>G</name></decl></parameter>, <parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>R</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>map</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_ECC_SHAMIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>ltc_ecc_mul2add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kA</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kB</name></decl></parameter>,

<parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>C</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ma</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MECC_FP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>ltc_ecc_fp_mul2add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kA</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ecc_point</name> <modifier>*</modifier></type><name>B</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>kB</name></decl></parameter>,

<parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>C</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ma</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>int</name></type> <name>ltc_ecc_map</name><parameter_list>(<parameter><decl><type><name>ecc_point</name> <modifier>*</modifier></type><name>P</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>modulus</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_MDSA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>dsa_int_validate_xy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_int_validate_pqg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>dsa_int_validate_primes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dsa_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_CURVE25519</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>tweetnacl_crypto_sign</name><parameter_list>(

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sm</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>smlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>mlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>tweetnacl_crypto_sign_open</name><parameter_list>(

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>stat</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name> <modifier>*</modifier></type><name>mlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sm</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>smlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>tweetnacl_crypto_sign_keypair</name><parameter_list>(<parameter><decl><type><name>prng_state</name> <modifier>*</modifier></type><name>prng</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wprng</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>,<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>tweetnacl_crypto_sk_to_pk</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>tweetnacl_crypto_scalarmult</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>tweetnacl_crypto_scalarmult_base</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sk_to_pk</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pk</name></decl></parameter> ,<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sk</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>int</name></type> <name>ec25519_import_pkcs8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>pwdlen</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>ltc_oid_id</name></name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>sk_to_pk</name></type> <name>fp</name></decl></parameter>,

<parameter><decl><type><name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ec25519_export</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>curve25519_key</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_DER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_ASN1_IS_TYPE</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((e) != NULL) &amp;&amp; ((e)-&gt;type == (t)))</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>der_decode_custom_type_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,

<parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_asn1_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_asn1_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>inlen</name></decl></parameter>, <parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_asn1_identifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>idlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_encode_asn1_length</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_decode_asn1_length</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_asn1_length</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_length_sequence_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>payloadlen</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>ltc_asn1_type</name></type> <name><name>der_asn1_tag_to_type_map</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>der_asn1_tag_to_type_map_sz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>der_asn1_type_to_identifier_map</name><index>[]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>unsigned</name> <name>long</name></type> <name>der_asn1_type_to_identifier_map_sz</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>der_decode_sequence_multi_ex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_teletex_char_encode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_teletex_value_decode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>der_utf8_valid_char</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>public_key_decode_cb</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>int</name></type> <name>x509_decode_public_key_from_certificate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>ltc_oid_id</name></name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><name>ltc_asn1_type</name></type> <name>param_type</name></decl></parameter>,

<parameter><decl><type><name>ltc_asn1_list</name><modifier>*</modifier></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>parameters_len</name></decl></parameter>,

<parameter><decl><type><name>public_key_decode_cb</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>x509_encode_subject_public_key_info</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>public_key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>public_key_len</name></decl></parameter>,

<parameter><decl><type><name>ltc_asn1_type</name></type> <name>parameters_type</name></decl></parameter>, <parameter><decl><type><name>ltc_asn1_list</name><modifier>*</modifier></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>parameters_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>x509_decode_subject_public_key_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>public_key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name><modifier>*</modifier></type> <name>public_key_len</name></decl></parameter>,

<parameter><decl><type><name>ltc_asn1_type</name></type> <name>parameters_type</name></decl></parameter>, <parameter><decl><type><name>ltc_asn1_list</name><modifier>*</modifier></type> <name>parameters</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>parameters_len</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pk_oid_cmp_with_ulong</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>o2</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>o2size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pk_oid_cmp_with_asn1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>o1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ltc_asn1_list</name> <modifier>*</modifier></type><name>o2</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_8</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>pkcs8_decode_flexi</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pwd</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>pwdlen</name></decl></parameter>,

<parameter><decl><type><name>ltc_asn1_list</name> <modifier>*</modifier><modifier>*</modifier></type><name>decoded_list</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LTC_PKCS_12</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>pkcs12_utf8_to_utf16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>inlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <modifier>*</modifier></type><name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>pkcs12_kdf</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>hash_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pw</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>pwlen</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>saltlen</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iterations</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>purpose</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_LTC_PRNG_EXPORT</name><parameter_list>(<parameter><type><name>which</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int which ##_export(unsigned char *out, unsigned long *outlen, prng_state *prng) { unsigned long len = which ##_desc.export_size; LTC_ARGCHK(prng != NULL); LTC_ARGCHK(out != NULL); LTC_ARGCHK(outlen != NULL); if (*outlen &lt; len) { *outlen = len; return CRYPT_BUFFER_OVERFLOW; } if (which ##_read(out, len, prng) != len) { return CRYPT_ERROR_READPRNG; } *outlen = len; return CRYPT_OK; }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_BYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((unsigned char)((x) &gt;&gt; (8 * (n))))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_BYTE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; (8 * (n))) &amp; 255)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
